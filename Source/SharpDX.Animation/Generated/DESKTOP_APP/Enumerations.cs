// <auto-generated/>

namespace SharpDX.Animation
{
    [System.FlagsAttribute]
    /// <summary>
    /// <p>Defines which aspects of an interpolator  depend on a given input.</p>
    /// </summary>
    /// <remarks>
    /// <p>Multiple <strong><see cref = "SharpDX.Animation.Dependencies"/></strong> values can be combined using a bitwise-OR operation.</p>
    /// </remarks>
    /// <doc-id>dd317034</doc-id>
    /// <unmanaged>UI_ANIMATION_DEPENDENCIES</unmanaged>
    /// <unmanaged-short>UI_ANIMATION_DEPENDENCIES</unmanaged-short>
    public enum Dependencies : System.Int32
    {
        /// <summary>
        /// <dd> <p>No aspect depends on the input.</p> </dd>
        /// </summary>
        /// <doc-id>dd317034</doc-id>
        /// <unmanaged>UI_ANIMATION_DEPENDENCY_NONE</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_DEPENDENCY_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The intermediate values depend on the input.</p> </dd>
        /// </summary>
        /// <doc-id>dd317034</doc-id>
        /// <unmanaged>UI_ANIMATION_DEPENDENCY_INTERMEDIATE_VALUES</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_DEPENDENCY_INTERMEDIATE_VALUES</unmanaged-short>
        IntermediateValues = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The final value depends on the input.</p> </dd>
        /// </summary>
        /// <doc-id>dd317034</doc-id>
        /// <unmanaged>UI_ANIMATION_DEPENDENCY_FINAL_VALUE</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_DEPENDENCY_FINAL_VALUE</unmanaged-short>
        FinalValue = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The final velocity depends on the input.</p> </dd>
        /// </summary>
        /// <doc-id>dd317034</doc-id>
        /// <unmanaged>UI_ANIMATION_DEPENDENCY_FINAL_VELOCITY</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_DEPENDENCY_FINAL_VELOCITY</unmanaged-short>
        FinalVelocity = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The duration depends on the input.</p> </dd>
        /// </summary>
        /// <doc-id>dd317034</doc-id>
        /// <unmanaged>UI_ANIMATION_DEPENDENCY_DURATION</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_DEPENDENCY_DURATION</unmanaged-short>
        Duration = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p> Defines the behavior of a timer when the animation manager is idle.</p>
    /// </summary>
    /// <doc-id>dd317036</doc-id>
    /// <unmanaged>UI_ANIMATION_IDLE_BEHAVIOR</unmanaged>
    /// <unmanaged-short>UI_ANIMATION_IDLE_BEHAVIOR</unmanaged-short>
    public enum IdleBehavior : System.Int32
    {
        /// <summary>
        /// <dd> <p> The timer continues to generate timer events (is enabled) when the animation manager is idle.</p> </dd>
        /// </summary>
        /// <doc-id>dd317036</doc-id>
        /// <unmanaged>UI_ANIMATION_IDLE_BEHAVIOR_CONTINUE</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_IDLE_BEHAVIOR_CONTINUE</unmanaged-short>
        Continue = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The timer is suspended (disabled) when the animation manager is idle. </p> </dd>
        /// </summary>
        /// <doc-id>dd317036</doc-id>
        /// <unmanaged>UI_ANIMATION_IDLE_BEHAVIOR_DISABLE</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_IDLE_BEHAVIOR_DISABLE</unmanaged-short>
        Disable = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Defines the activity status of an animation manager.</p>
    /// </summary>
    /// <doc-id>dd317043</doc-id>
    /// <unmanaged>UI_ANIMATION_MANAGER_STATUS</unmanaged>
    /// <unmanaged-short>UI_ANIMATION_MANAGER_STATUS</unmanaged-short>
    public enum ManagerStatus : System.Int32
    {
        /// <summary>
        /// <dd> <p> The animation manager is idle; no animations are currently playing.</p> </dd>
        /// </summary>
        /// <doc-id>dd317043</doc-id>
        /// <unmanaged>UI_ANIMATION_MANAGER_IDLE</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_MANAGER_IDLE</unmanaged-short>
        Idle = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The animation manager is busy; at least one animation is currently playing or scheduled.</p> </dd>
        /// </summary>
        /// <doc-id>dd317043</doc-id>
        /// <unmanaged>UI_ANIMATION_MANAGER_BUSY</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_MANAGER_BUSY</unmanaged-short>
        Busy = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Defines animation modes.</p>
    /// </summary>
    /// <doc-id>dd317046</doc-id>
    /// <unmanaged>UI_ANIMATION_MODE</unmanaged>
    /// <unmanaged-short>UI_ANIMATION_MODE</unmanaged-short>
    public enum Mode : System.Int32
    {
        /// <summary>
        /// <dd> <p> Animation is disabled.</p> </dd>
        /// </summary>
        /// <doc-id>dd317046</doc-id>
        /// <unmanaged>UI_ANIMATION_MODE_DISABLED</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_MODE_DISABLED</unmanaged-short>
        Disabled = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The animation mode is managed by the system.</p> </dd>
        /// </summary>
        /// <doc-id>dd317046</doc-id>
        /// <unmanaged>UI_ANIMATION_MODE_SYSTEM_DEFAULT</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_MODE_SYSTEM_DEFAULT</unmanaged-short>
        SystemDefault = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Animation is enabled.</p> </dd>
        /// </summary>
        /// <doc-id>dd317046</doc-id>
        /// <unmanaged>UI_ANIMATION_MODE_ENABLED</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_MODE_ENABLED</unmanaged-short>
        Enabled = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p> Defines potential effects on a storyboard if a priority comparison returns false.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enumeration is used as the <em>priorityEffect</em> parameter of  <strong>IUIAnimationPriorityComparison::HasPriority</strong>, informing the client of the potential effect on the storyboard to be scheduled when the return value is false (S_FALSE).  UI_ANIMATION_PRIORITY_EFFECT_FAILURE means that the  attempt to schedule the storyboard might fail if the return value is false.   UI_ANIMATION_PRIORITY_EFFECT_DELAY means that the attempt to schedule the storyboard will succeed, but if the return value is false, the storyboard could play later than it would otherwise.</p><p> This enumeration can help an application decide how aggressive to be about reducing latency in the UI. For example, if the application returns true when the effect is UI_ANIMATION_PRIORITY_EFFECT_DELAY, then other animations might get canceled or compressed even though doing so was not strictly necessary to play a new animation within the application-specified longest acceptable delay.</p>
    /// </remarks>
    /// <doc-id>dd317049</doc-id>
    /// <unmanaged>UI_ANIMATION_PRIORITY_EFFECT</unmanaged>
    /// <unmanaged-short>UI_ANIMATION_PRIORITY_EFFECT</unmanaged-short>
    public enum PriorityEffect : System.Int32
    {
        /// <summary>
        /// <dd> <p> This storyboard might not be successfully scheduled.</p> </dd>
        /// </summary>
        /// <doc-id>dd317049</doc-id>
        /// <unmanaged>UI_ANIMATION_PRIORITY_EFFECT_FAILURE</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_PRIORITY_EFFECT_FAILURE</unmanaged-short>
        Failure = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The storyboard will be scheduled, but might start playing later.</p> </dd>
        /// </summary>
        /// <doc-id>dd317049</doc-id>
        /// <unmanaged>UI_ANIMATION_PRIORITY_EFFECT_DELAY</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_PRIORITY_EFFECT_DELAY</unmanaged-short>
        Delay = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Defines the pattern for a loop iteration.</p>
    /// </summary>
    /// <doc-id>hh448672</doc-id>
    /// <unmanaged>UI_ANIMATION_REPEAT_MODE</unmanaged>
    /// <unmanaged-short>UI_ANIMATION_REPEAT_MODE</unmanaged-short>
    public enum RepeatMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>The start of a  loop begins with the first value (v1-&gt;v2, v1-&gt;v2, v1-&gt;v2, and so on).</p> </dd>
        /// </summary>
        /// <doc-id>hh448672</doc-id>
        /// <unmanaged>UI_ANIMATION_REPEAT_MODE_NORMAL</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_REPEAT_MODE_NORMAL</unmanaged-short>
        RepeatModeNormal = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The  start of a loop alternates between values (v1-&gt;v2, v2-&gt;v1, v1-&gt;v2, and so on).</p> </dd>
        /// </summary>
        /// <doc-id>hh448672</doc-id>
        /// <unmanaged>UI_ANIMATION_REPEAT_MODE_ALTERNATE</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_REPEAT_MODE_ALTERNATE</unmanaged-short>
        RepeatModeAlternate = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Defines the rounding modes to be used when the value of an animation variable is converted from a floating-point type to an integer type.</p>
    /// </summary>
    /// <doc-id>dd371966</doc-id>
    /// <unmanaged>UI_ANIMATION_ROUNDING_MODE</unmanaged>
    /// <unmanaged-short>UI_ANIMATION_ROUNDING_MODE</unmanaged-short>
    public enum RoundingMode : System.Int32
    {
        /// <summary>
        /// <dd> <p> Round to the nearest integer.</p> </dd>
        /// </summary>
        /// <doc-id>dd371966</doc-id>
        /// <unmanaged>UI_ANIMATION_ROUNDING_NEAREST</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_ROUNDING_NEAREST</unmanaged-short>
        RoundingNearest = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Round down.</p> </dd>
        /// </summary>
        /// <doc-id>dd371966</doc-id>
        /// <unmanaged>UI_ANIMATION_ROUNDING_FLOOR</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_ROUNDING_FLOOR</unmanaged-short>
        RoundingFloor = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Round up.</p> </dd>
        /// </summary>
        /// <doc-id>dd371966</doc-id>
        /// <unmanaged>UI_ANIMATION_ROUNDING_CEILING</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_ROUNDING_CEILING</unmanaged-short>
        RoundingCeiling = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p> Defines results for storyboard scheduling.</p>
    /// </summary>
    /// <remarks>
    /// <p> <strong>IUIAnimationStoryboard::Schedule</strong> returns UI_ANIMATION_SCHEDULING_DEFERRED only if the application attempts to schedule a storyboard during a callback to <strong>IUIAnimationStoryboardEventHandler::OnStoryboardStatusChanged</strong>.</p>
    /// </remarks>
    /// <doc-id>dd371967</doc-id>
    /// <unmanaged>UI_ANIMATION_SCHEDULING_RESULT</unmanaged>
    /// <unmanaged-short>UI_ANIMATION_SCHEDULING_RESULT</unmanaged-short>
    public enum SchedulingResult : System.Int32
    {
        /// <summary>
        /// <dd> <p> Scheduling failed for an unexpected reason.</p> </dd>
        /// </summary>
        /// <doc-id>dd371967</doc-id>
        /// <unmanaged>UI_ANIMATION_SCHEDULING_UNEXPECTED_FAILURE</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_SCHEDULING_UNEXPECTED_FAILURE</unmanaged-short>
        UnexpectedFailure = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Scheduling failed because a scheduling conflict occurred and the currently scheduled storyboard has higher priority. For more information, see <strong>IUIAnimationPriorityComparison::HasPriority</strong>.</p> </dd>
        /// </summary>
        /// <doc-id>dd371967</doc-id>
        /// <unmanaged>UI_ANIMATION_SCHEDULING_INSUFFICIENT_PRIORITY</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_SCHEDULING_INSUFFICIENT_PRIORITY</unmanaged-short>
        InsufficientPriority = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Scheduling failed because  the storyboard is already scheduled.</p> </dd>
        /// </summary>
        /// <doc-id>dd371967</doc-id>
        /// <unmanaged>UI_ANIMATION_SCHEDULING_ALREADY_SCHEDULED</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_SCHEDULING_ALREADY_SCHEDULED</unmanaged-short>
        AlreadyScheduled = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> Scheduling succeeded.</p> </dd>
        /// </summary>
        /// <doc-id>dd371967</doc-id>
        /// <unmanaged>UI_ANIMATION_SCHEDULING_SUCCEEDED</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_SCHEDULING_SUCCEEDED</unmanaged-short>
        Succeeded = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p> Scheduling is deferred and will be attempted when the current callback completes.</p> </dd>
        /// </summary>
        /// <doc-id>dd371967</doc-id>
        /// <unmanaged>UI_ANIMATION_SCHEDULING_DEFERRED</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_SCHEDULING_DEFERRED</unmanaged-short>
        Deferred = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p> Defines animation slope characteristics.</p>
    /// </summary>
    /// <doc-id>dd371969</doc-id>
    /// <unmanaged>UI_ANIMATION_SLOPE</unmanaged>
    /// <unmanaged-short>UI_ANIMATION_SLOPE</unmanaged-short>
    public enum Slope : System.Int32
    {
        /// <summary>
        /// <dd> <p> An increasing slope.</p> </dd>
        /// </summary>
        /// <doc-id>dd371969</doc-id>
        /// <unmanaged>UI_ANIMATION_SLOPE_INCREASING</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_SLOPE_INCREASING</unmanaged-short>
        Increasing = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> A decreasing slope.</p> </dd>
        /// </summary>
        /// <doc-id>dd371969</doc-id>
        /// <unmanaged>UI_ANIMATION_SLOPE_DECREASING</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_SLOPE_DECREASING</unmanaged-short>
        Decreasing = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Defines  the status for a storyboard.</p>
    /// </summary>
    /// <remarks>
    /// <p>Unless <strong>IUIAnimationStoryboard::GetStatus</strong> is called from a handler for <strong>OnStoryboardStatusChanged</strong> events, it returns only the following status values:</p><ul> <li>UI_ANIMATION_STORYBOARD_BUILDING</li> <li>UI_ANIMATION_STORYBOARD_SCHEDULED</li> <li>UI_ANIMATION_STORYBOARD_PLAYING</li> <li>UI_ANIMATION_STORYBOARD_READY</li> </ul><p>All status values can be passed to  <strong>IUIAnimationStoryboardEventHandler::OnStoryboardStatusChanged</strong>.</p><p>The following diagram illustrates the transitions between these states.</p><p></p>
    /// </remarks>
    /// <doc-id>dd371971</doc-id>
    /// <unmanaged>UI_ANIMATION_STORYBOARD_STATUS</unmanaged>
    /// <unmanaged-short>UI_ANIMATION_STORYBOARD_STATUS</unmanaged-short>
    public enum StoryboardStatus : System.Int32
    {
        /// <summary>
        /// <dd> <p> The storyboard has never been scheduled.</p> </dd>
        /// </summary>
        /// <doc-id>dd371971</doc-id>
        /// <unmanaged>UI_ANIMATION_STORYBOARD_BUILDING</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_BUILDING</unmanaged-short>
        Building = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The storyboard is scheduled to play.</p> </dd>
        /// </summary>
        /// <doc-id>dd371971</doc-id>
        /// <unmanaged>UI_ANIMATION_STORYBOARD_SCHEDULED</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_SCHEDULED</unmanaged-short>
        Scheduled = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> The storyboard was canceled.</p> </dd>
        /// </summary>
        /// <doc-id>dd371971</doc-id>
        /// <unmanaged>UI_ANIMATION_STORYBOARD_CANCELLED</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_CANCELLED</unmanaged-short>
        Cancelled = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> The storyboard is currently playing.</p> </dd>
        /// </summary>
        /// <doc-id>dd371971</doc-id>
        /// <unmanaged>UI_ANIMATION_STORYBOARD_PLAYING</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_PLAYING</unmanaged-short>
        Playing = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p> The storyboard was truncated.</p> </dd>
        /// </summary>
        /// <doc-id>dd371971</doc-id>
        /// <unmanaged>UI_ANIMATION_STORYBOARD_TRUNCATED</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_TRUNCATED</unmanaged-short>
        Truncated = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p> The storyboard has finished playing.</p> </dd>
        /// </summary>
        /// <doc-id>dd371971</doc-id>
        /// <unmanaged>UI_ANIMATION_STORYBOARD_FINISHED</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_FINISHED</unmanaged-short>
        Finished = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p> The storyboard is built and ready for scheduling.</p> </dd>
        /// </summary>
        /// <doc-id>dd371971</doc-id>
        /// <unmanaged>UI_ANIMATION_STORYBOARD_READY</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_READY</unmanaged-short>
        Ready = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p> Scheduling the storyboard failed because a scheduling conflict occurred and the currently scheduled storyboard has higher priority.</p> </dd>
        /// </summary>
        /// <doc-id>dd371971</doc-id>
        /// <unmanaged>UI_ANIMATION_STORYBOARD_INSUFFICIENT_PRIORITY</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_INSUFFICIENT_PRIORITY</unmanaged-short>
        InsufficientPriority = unchecked ((System.Int32)(7))}

    /// <summary>
    /// <p> Defines activity status for a timer's client.</p>
    /// </summary>
    /// <doc-id>dd371973</doc-id>
    /// <unmanaged>UI_ANIMATION_TIMER_CLIENT_STATUS</unmanaged>
    /// <unmanaged-short>UI_ANIMATION_TIMER_CLIENT_STATUS</unmanaged-short>
    public enum TimerClientStatus : System.Int32
    {
        /// <summary>
        /// <dd> <p> The client is idle.</p> </dd>
        /// </summary>
        /// <doc-id>dd371973</doc-id>
        /// <unmanaged>UI_ANIMATION_TIMER_CLIENT_IDLE</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_TIMER_CLIENT_IDLE</unmanaged-short>
        Idle = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The client is busy.</p> </dd>
        /// </summary>
        /// <doc-id>dd371973</doc-id>
        /// <unmanaged>UI_ANIMATION_TIMER_CLIENT_BUSY</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_TIMER_CLIENT_BUSY</unmanaged-short>
        Busy = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Defines results for animation updates.</p>
    /// </summary>
    /// <doc-id>dd371974</doc-id>
    /// <unmanaged>UI_ANIMATION_UPDATE_RESULT</unmanaged>
    /// <unmanaged-short>UI_ANIMATION_UPDATE_RESULT</unmanaged-short>
    public enum UpdateResult : System.Int32
    {
        /// <summary>
        /// <dd> <p> No animation variables have changed.</p> </dd>
        /// </summary>
        /// <doc-id>dd371974</doc-id>
        /// <unmanaged>UI_ANIMATION_UPDATE_NO_CHANGE</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_UPDATE_NO_CHANGE</unmanaged-short>
        NoChange = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> One or more animation variables has changed.</p> </dd>
        /// </summary>
        /// <doc-id>dd371974</doc-id>
        /// <unmanaged>UI_ANIMATION_UPDATE_VARIABLES_CHANGED</unmanaged>
        /// <unmanaged-short>UI_ANIMATION_UPDATE_VARIABLES_CHANGED</unmanaged-short>
        VariablesChanged = unchecked ((System.Int32)(1))}
}