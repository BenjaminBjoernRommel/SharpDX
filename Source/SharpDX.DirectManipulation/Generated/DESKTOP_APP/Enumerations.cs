// <auto-generated/>

namespace SharpDX.DirectManipulation
{
    /// <summary>
    /// <p>Determines the type and direction of automatic scrolling animation to apply. </p>
    /// </summary>
    /// <doc-id>dn280383</doc-id>
    /// <unmanaged>DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION</unmanaged>
    /// <unmanaged-short>DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION</unmanaged-short>
    public enum AutoScrollConfiguration : System.Int32
    {
        /// <summary>
        /// <dd> <p>If content is scrolling, slowly stop along the direction of the motion.</p> </dd>
        /// </summary>
        /// <doc-id>dn280383</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION_STOP</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION_STOP</unmanaged-short>
        Stop = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Scroll towards the positive boundary of the content.</p> </dd>
        /// </summary>
        /// <doc-id>dn280383</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION_FORWARD</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION_FORWARD</unmanaged-short>
        Forward = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Scroll towards the origin of the content.</p> </dd>
        /// </summary>
        /// <doc-id>dn280383</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION_REVERSE</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION_REVERSE</unmanaged-short>
        Reverse = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Defines the interaction configuration states available in Direct Manipulation.</p>
    /// </summary>
    /// <doc-id>hh446956</doc-id>
    /// <unmanaged>DIRECTMANIPULATION_CONFIGURATION</unmanaged>
    /// <unmanaged-short>DIRECTMANIPULATION_CONFIGURATION</unmanaged-short>
    public enum Configuration : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446956</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_CONFIGURATION_NONE</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_CONFIGURATION_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446956</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_CONFIGURATION_INTERACTION</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_CONFIGURATION_INTERACTION</unmanaged-short>
        Interaction = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446956</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_CONFIGURATION_TRANSLATION_X</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_CONFIGURATION_TRANSLATION_X</unmanaged-short>
        TranslationX = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446956</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_CONFIGURATION_TRANSLATION_Y</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_CONFIGURATION_TRANSLATION_Y</unmanaged-short>
        TranslationY = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446956</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_CONFIGURATION_SCALING</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_CONFIGURATION_SCALING</unmanaged-short>
        Scaling = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446956</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_CONFIGURATION_TRANSLATION_INERTIA</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_CONFIGURATION_TRANSLATION_INERTIA</unmanaged-short>
        TranslationInertia = unchecked ((System.Int32)(32)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446956</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_CONFIGURATION_SCALING_INERTIA</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_CONFIGURATION_SCALING_INERTIA</unmanaged-short>
        ScalingInertia = unchecked ((System.Int32)(128)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446956</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_CONFIGURATION_RAILS_X</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_CONFIGURATION_RAILS_X</unmanaged-short>
        RailsX = unchecked ((System.Int32)(256)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446956</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_CONFIGURATION_RAILS_Y</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_CONFIGURATION_RAILS_Y</unmanaged-short>
        RailsY = unchecked ((System.Int32)(512))}

    /// <summary>
    /// <p>Defines behaviors for the drag-drop interaction.</p>
    /// </summary>
    /// <doc-id>dn280384</doc-id>
    /// <unmanaged>DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION</unmanaged>
    /// <unmanaged-short>DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION</unmanaged-short>
    public enum DragDropConfiguration : System.Int32
    {
        /// <summary>
        /// <dd> <p>Specifies that vertical movement is applicable to the chosen gesture.</p> </dd>
        /// </summary>
        /// <doc-id>dn280384</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_VERTICAL</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_VERTICAL</unmanaged-short>
        Vertical = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Specifies that horizontal movement is applicable to the chosen gesture.</p> </dd>
        /// </summary>
        /// <doc-id>dn280384</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_HORIZONTAL</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_HORIZONTAL</unmanaged-short>
        Horizontal = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Specifies that the gesture is to be cross-slide only.</p> </dd>
        /// </summary>
        /// <doc-id>dn280384</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_SELECT_ONLY</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_SELECT_ONLY</unmanaged-short>
        SelectOnly = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p>Specifies that the gesture is a drag initiated by cross-slide.</p> </dd>
        /// </summary>
        /// <doc-id>dn280384</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_SELECT_DRAG</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_SELECT_DRAG</unmanaged-short>
        SelectDrag = unchecked ((System.Int32)(32)),
        /// <summary>
        /// <dd> <p>Specifies that the gesture a drag initiated by press-and-hold.</p> </dd>
        /// </summary>
        /// <doc-id>dn280384</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_HOLD_DRAG</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_HOLD_DRAG</unmanaged-short>
        HoldDrag = unchecked ((System.Int32)(64))}

    /// <summary>
    /// <p>Defines the drag-and-drop interaction states for the viewport.</p>
    /// </summary>
    /// <remarks>
    /// <p>For each interaction, the status always starts at <strong>DIRECTMANIPULATION_DRAG_DROP_READY</strong> and ends at either <strong>DIRECTMANIPULATION_DRAG_DROP_CANCELLED</strong> or <strong>DIRECTMANIPULATION_DRAG_DROP_COMMITTED</strong>. There are no explicit callbacks for the transition from CANCELLED/COMMITTED to READY.
    /// </p><p>The meaning of the CANCELLED and COMMITED values depend on the previous status.</p><ul> <li>For <strong>DIRECTMANIPULATION_DRAG_DROP_PRESELECT</strong>, they mean the same thing: the content goes back to the original location and no other actions should be taken.</li> <li>FOR <strong>DIRECTMANIPULATION_DRAG_DROP_SELECTING</strong>, COMMITED means apply the selection change; CANCELLED means avoid the selection change.</li> <li>For <strong>DIRECTMANIPULATION_DRAG_DROP_DRAGGING</strong>, COMMITED means perform the drop action; CANCELLED means cancel the drop action.</li> </ul>
    /// </remarks>
    /// <doc-id>dn280385</doc-id>
    /// <unmanaged>DIRECTMANIPULATION_DRAG_DROP_STATUS</unmanaged>
    /// <unmanaged-short>DIRECTMANIPULATION_DRAG_DROP_STATUS</unmanaged-short>
    public enum DragDropStatus : System.Int32
    {
        /// <summary>
        /// <dd> <p>The viewport is at rest and ready for input.</p> </dd>
        /// </summary>
        /// <doc-id>dn280385</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_DRAG_DROP_READY</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_DRAG_DROP_READY</unmanaged-short>
        Ready = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The viewport is updating its content and the content is not selected.</p> </dd>
        /// </summary>
        /// <doc-id>dn280385</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_DRAG_DROP_PRESELECT</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_DRAG_DROP_PRESELECT</unmanaged-short>
        Preselect = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The viewport is updating its content and the content is selected.</p> </dd>
        /// </summary>
        /// <doc-id>dn280385</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_DRAG_DROP_SELECTING</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_DRAG_DROP_SELECTING</unmanaged-short>
        Selecting = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The viewport is updating its content and the content is being dragged.</p> </dd>
        /// </summary>
        /// <doc-id>dn280385</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_DRAG_DROP_DRAGGING</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_DRAG_DROP_DRAGGING</unmanaged-short>
        Dragging = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>The viewport has concluded the interaction and requests a revert.</p> </dd>
        /// </summary>
        /// <doc-id>dn280385</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_DRAG_DROP_CANCELLED</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_DRAG_DROP_CANCELLED</unmanaged-short>
        Cancelled = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The viewport has concluded the interaction and requests a commit.</p> </dd>
        /// </summary>
        /// <doc-id>dn280385</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_DRAG_DROP_COMMITTED</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_DRAG_DROP_COMMITTED</unmanaged-short>
        Committed = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p>Defines the gestures that can be passed to <strong>SetManualGesture</strong>.</p>
    /// </summary>
    /// <remarks>
    /// <p>By default, Direct Manipulation always reassigns tap and press-and-hold gestures to the application. 
    /// </p><p>Use <strong>DIRECTMANIPULATION_GESTURE_PINCH_ZOOM</strong> to zoom instead of scale.
    /// </p>
    /// </remarks>
    /// <doc-id>jj647928</doc-id>
    /// <unmanaged>DIRECTMANIPULATION_GESTURE_CONFIGURATION</unmanaged>
    /// <unmanaged-short>DIRECTMANIPULATION_GESTURE_CONFIGURATION</unmanaged-short>
    public enum GestureConfiguration : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>jj647928</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_GESTURE_NONE</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_GESTURE_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>jj647928</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_GESTURE_DEFAULT</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_GESTURE_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>jj647928</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_GESTURE_CROSS_SLIDE_VERTICAL</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_GESTURE_CROSS_SLIDE_VERTICAL</unmanaged-short>
        CrossSlideVertical = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>jj647928</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_GESTURE_CROSS_SLIDE_HORIZONTAL</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_GESTURE_CROSS_SLIDE_HORIZONTAL</unmanaged-short>
        CrossSlideHorizontal = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>jj647928</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_GESTURE_PINCH_ZOOM</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_GESTURE_PINCH_ZOOM</unmanaged-short>
        PinchZoom = unchecked ((System.Int32)(32))}

    /// <summary>
    /// <p>Defines how hit testing is handled by Direct Manipulation when using a dedicated hit-test thread registered through <strong>RegisterHitTestTarget</strong>.</p>
    /// </summary>
    /// <doc-id>hh768894</doc-id>
    /// <unmanaged>DIRECTMANIPULATION_HITTEST_TYPE</unmanaged>
    /// <unmanaged-short>DIRECTMANIPULATION_HITTEST_TYPE</unmanaged-short>
    public enum HitTestType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh768894</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_HITTEST_TYPE_ASYNCHRONOUS</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_HITTEST_TYPE_ASYNCHRONOUS</unmanaged-short>
        Asynchronous = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh768894</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_HITTEST_TYPE_SYNCHRONOUS</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_HITTEST_TYPE_SYNCHRONOUS</unmanaged-short>
        Synchronous = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh768894</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_HITTEST_TYPE_AUTO_SYNCHRONOUS</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_HITTEST_TYPE_AUTO_SYNCHRONOUS</unmanaged-short>
        AutoSynchronous = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Defines the horizontal alignment options for content within a viewport.</p>
    /// </summary>
    /// <doc-id>hh446957</doc-id>
    /// <unmanaged>DIRECTMANIPULATION_HORIZONTALALIGNMENT</unmanaged>
    /// <unmanaged-short>DIRECTMANIPULATION_HORIZONTALALIGNMENT</unmanaged-short>
    public enum HorizontalAlignment : System.Int32
    {
        /// <summary>
        /// <dd> <p>No alignment. The object can be positioned anywhere within the viewport.</p> </dd>
        /// </summary>
        /// <doc-id>hh446957</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_HORIZONTALALIGNMENT_NONE</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_HORIZONTALALIGNMENT_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Align object along the left side of the viewport.</p> </dd>
        /// </summary>
        /// <doc-id>hh446957</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_HORIZONTALALIGNMENT_LEFT</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_HORIZONTALALIGNMENT_LEFT</unmanaged-short>
        Left = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Align object to the center of the viewport.</p> </dd>
        /// </summary>
        /// <doc-id>hh446957</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_HORIZONTALALIGNMENT_CENTER</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_HORIZONTALALIGNMENT_CENTER</unmanaged-short>
        Center = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Align object along the right side of the viewport.</p> </dd>
        /// </summary>
        /// <doc-id>hh446957</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_HORIZONTALALIGNMENT_RIGHT</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_HORIZONTALALIGNMENT_RIGHT</unmanaged-short>
        Right = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Content zooms around the center point of the contacts, instead of being locked with the horizontal alignment.</p> </dd>
        /// </summary>
        /// <doc-id>hh446957</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_HORIZONTALALIGNMENT_UNLOCKCENTER</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_HORIZONTALALIGNMENT_UNLOCKCENTER</unmanaged-short>
        UnlockCenter = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p>Defines the threading behavior for <strong>SetInputMode</strong> or <strong>SetUpdateMode</strong>. The exact meaning of each constant depends on the method called.</p>
    /// </summary>
    /// <doc-id>hh446958</doc-id>
    /// <unmanaged>DIRECTMANIPULATION_INPUT_MODE</unmanaged>
    /// <unmanaged-short>DIRECTMANIPULATION_INPUT_MODE</unmanaged-short>
    public enum InputMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446958</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_INPUT_MODE_AUTOMATIC</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_INPUT_MODE_AUTOMATIC</unmanaged-short>
        Automatic = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446958</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_INPUT_MODE_MANUAL</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_INPUT_MODE_MANUAL</unmanaged-short>
        Manual = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Defines gestures recognized by Direct Manipulation.</p>
    /// </summary>
    /// <doc-id>dn280386</doc-id>
    /// <unmanaged>DIRECTMANIPULATION_INTERACTION_TYPE</unmanaged>
    /// <unmanaged-short>DIRECTMANIPULATION_INTERACTION_TYPE</unmanaged-short>
    public enum InteractionType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn280386</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_INTERACTION_BEGIN</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_INTERACTION_BEGIN</unmanaged-short>
        Begin = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn280386</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_INTERACTION_TYPE_MANIPULATION</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_INTERACTION_TYPE_MANIPULATION</unmanaged-short>
        TypeManipulation = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn280386</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_TAP</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_TAP</unmanaged-short>
        TypeGestureTap = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn280386</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_HOLD</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_HOLD</unmanaged-short>
        TypeGestureHold = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn280386</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_CROSS_SLIDE</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_CROSS_SLIDE</unmanaged-short>
        TypeGestureCrossSlide = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn280386</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_PINCH_ZOOM</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_PINCH_ZOOM</unmanaged-short>
        TypeGesturePinchZoom = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn280386</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_INTERACTION_END</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_INTERACTION_END</unmanaged-short>
        End = unchecked ((System.Int32)(100))}

    /// <summary>
    /// <p> Defines the Direct Manipulation motion type.</p>
    /// </summary>
    /// <doc-id>hh446960</doc-id>
    /// <unmanaged>DIRECTMANIPULATION_MOTION_TYPES</unmanaged>
    /// <unmanaged-short>DIRECTMANIPULATION_MOTION_TYPES</unmanaged-short>
    public enum MotionTypes : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446960</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_MOTION_NONE</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_MOTION_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446960</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_MOTION_TRANSLATEX</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_MOTION_TRANSLATEX</unmanaged-short>
        Translatex = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446960</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_MOTION_TRANSLATEY</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_MOTION_TRANSLATEY</unmanaged-short>
        Translatey = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446960</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_MOTION_ZOOM</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_MOTION_ZOOM</unmanaged-short>
        Zoom = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446960</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_MOTION_CENTERX</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_MOTION_CENTERX</unmanaged-short>
        Centerx = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446960</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_MOTION_CENTERY</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_MOTION_CENTERY</unmanaged-short>
        Centery = unchecked ((System.Int32)(32)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446960</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_MOTION_ALL</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_MOTION_ALL</unmanaged-short>
        All = unchecked ((System.Int32)(55))}

    /// <summary>
    /// <p>Defines the coordinate system for a collection of snap points.</p>
    /// </summary>
    /// <remarks>
    /// <p>If <strong>DIRECTMANIPULATION_COORDINATE_ORIGIN</strong> and <strong>DIRECTMANIPULATION_COORDINATE_MIRRORED</strong> are both specified, the snap points are interpreted as specified from the bottom and right boundaries of the content (the size of the content - the size of the viewport). This is intended for RTL reading scenarios where content is normally specified and rendered from right-to-left or bottom-to-top.</p>
    /// </remarks>
    /// <doc-id>hh768895</doc-id>
    /// <unmanaged>DIRECTMANIPULATION_SNAPPOINT_COORDINATE</unmanaged>
    /// <unmanaged-short>DIRECTMANIPULATION_SNAPPOINT_COORDINATE</unmanaged-short>
    public enum SnapPointCoordinate : System.Int32
    {
        /// <summary>
        /// <dd> <p>Default. </p> <p>Snap points are specified relative to the top and left boundaries of the content unless <strong>DIRECTMANIPULATION_COORDINATE_MIRRORED</strong> is also specified, in which case they are relative to the bottom and right boundaries of the content. For zoom, the boundary is 1.0f.</p> </dd>
        /// </summary>
        /// <doc-id>hh768895</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_COORDINATE_BOUNDARY</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_COORDINATE_BOUNDARY</unmanaged-short>
        CoordinateBoundary = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Snap points are specified relative to the origin of the viewport.</p> </dd>
        /// </summary>
        /// <doc-id>hh768895</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_COORDINATE_ORIGIN</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_COORDINATE_ORIGIN</unmanaged-short>
        CoordinateOrigin = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Snap points are interpreted as specified in the negative direction of the origin. The origin is shifted to the bottom and right of the viewport or content. Cannot be set for zoom.</p> </dd>
        /// </summary>
        /// <doc-id>hh768895</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_COORDINATE_MIRRORED</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_COORDINATE_MIRRORED</unmanaged-short>
        CoordinateMirrorEd = unchecked ((System.Int32)(16))}

    /// <summary>
    /// <p>Modifies how the final inertia end position is calculated.</p>
    /// </summary>
    /// <remarks>
    /// <p>For <strong>DIRECTMANIPULATION_SNAPPOINT_MANDATORY</strong> or <strong>DIRECTMANIPULATION_SNAPPOINT_OPTIONAL</strong> snap points, the snap points are chosen based on the natural ending position of inertia as calculated by the touch interaction engine. For <strong>DIRECTMANIPULATION_SNAPPOINT_MANDATORY_SINGLE</strong> or <strong>DIRECTMANIPULATION_SNAPPOINT_OPTIONAL_SINGLE</strong> snap points, the selected snap point depends on where inertia started.</p>
    /// </remarks>
    /// <doc-id>hh768896</doc-id>
    /// <unmanaged>DIRECTMANIPULATION_SNAPPOINT_TYPE</unmanaged>
    /// <unmanaged-short>DIRECTMANIPULATION_SNAPPOINT_TYPE</unmanaged-short>
    public enum SnapPointType : System.Int32
    {
        /// <summary>
        /// <dd> <p>Content always stops at the snap point closest to where inertia would naturally stop along the direction of inertia.</p> </dd>
        /// </summary>
        /// <doc-id>hh768896</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_SNAPPOINT_MANDATORY</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_SNAPPOINT_MANDATORY</unmanaged-short>
        Mandatory = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Content stops at a snap point closest to where inertia would naturally stop along the direction of inertia, depending on how close the snap point is. </p> </dd>
        /// </summary>
        /// <doc-id>hh768896</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_SNAPPOINT_OPTIONAL</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_SNAPPOINT_OPTIONAL</unmanaged-short>
        Optional = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Content always stops at the snap point closest to the release point along the direction of inertia.</p> </dd>
        /// </summary>
        /// <doc-id>hh768896</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_SNAPPOINT_MANDATORY_SINGLE</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_SNAPPOINT_MANDATORY_SINGLE</unmanaged-short>
        MandatorySingle = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Content stops at the next snap point, if the motion starts far from it.</p> </dd>
        /// </summary>
        /// <doc-id>hh768896</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_SNAPPOINT_OPTIONAL_SINGLE</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_SNAPPOINT_OPTIONAL_SINGLE</unmanaged-short>
        OptionalSingle = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Defines the possible states of Direct Manipulation. The viewport can process input in any state unless otherwise noted.</p>
    /// </summary>
    /// <doc-id>hh446962</doc-id>
    /// <unmanaged>DIRECTMANIPULATION_STATUS</unmanaged>
    /// <unmanaged-short>DIRECTMANIPULATION_STATUS</unmanaged-short>
    public enum Status : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446962</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_BUILDING</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_BUILDING</unmanaged-short>
        Building = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446962</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_ENABLED</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_ENABLED</unmanaged-short>
        Enabled = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446962</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_DISABLED</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_DISABLED</unmanaged-short>
        Disabled = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446962</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_RUNNING</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_RUNNING</unmanaged-short>
        Running = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446962</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_INERTIA</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_INERTIA</unmanaged-short>
        Inertia = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446962</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_READY</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_READY</unmanaged-short>
        Ready = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh446962</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_SUSPENDED</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_SUSPENDED</unmanaged-short>
        Suspended = unchecked ((System.Int32)(6))}

    /// <summary>
    /// <p>Defines  the vertical alignment settings for content within the viewport.</p>
    /// </summary>
    /// <doc-id>hh446964</doc-id>
    /// <unmanaged>DIRECTMANIPULATION_VERTICALALIGNMENT</unmanaged>
    /// <unmanaged-short>DIRECTMANIPULATION_VERTICALALIGNMENT</unmanaged-short>
    public enum VerticalAlignment : System.Int32
    {
        /// <summary>
        /// <dd> <p>No alignment. The object can be positioned anywhere within the viewport.</p> </dd>
        /// </summary>
        /// <doc-id>hh446964</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_VERTICALALIGNMENT_NONE</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_VERTICALALIGNMENT_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Align object along the top of the viewport.</p> </dd>
        /// </summary>
        /// <doc-id>hh446964</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_VERTICALALIGNMENT_TOP</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_VERTICALALIGNMENT_TOP</unmanaged-short>
        Top = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Align object to the center of the viewport.</p> </dd>
        /// </summary>
        /// <doc-id>hh446964</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_VERTICALALIGNMENT_CENTER</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_VERTICALALIGNMENT_CENTER</unmanaged-short>
        Center = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Align object along the bottom of the viewport.</p> </dd>
        /// </summary>
        /// <doc-id>hh446964</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_VERTICALALIGNMENT_BOTTOM</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_VERTICALALIGNMENT_BOTTOM</unmanaged-short>
        Bottom = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Content zooms around the center point of the contacts, instead of being locked with the vertical alignment.</p> </dd>
        /// </summary>
        /// <doc-id>hh446964</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_VERTICALALIGNMENT_UNLOCKCENTER</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_VERTICALALIGNMENT_UNLOCKCENTER</unmanaged-short>
        UnlockCenter = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p>Defines the input behavior options for the viewport.</p>
    /// </summary>
    /// <remarks>
    /// <p><strong><see cref = "SharpDX.DirectManipulation.ViewportOptions"/></strong> is used in the <strong>SetViewportOptions</strong> method. These flags can be combined to set the input behavior for a viewport.</p>
    /// </remarks>
    /// <doc-id>jj647929</doc-id>
    /// <unmanaged>DIRECTMANIPULATION_VIEWPORT_OPTIONS</unmanaged>
    /// <unmanaged-short>DIRECTMANIPULATION_VIEWPORT_OPTIONS</unmanaged-short>
    public enum ViewportOptions : System.Int32
    {
        /// <summary>
        /// <dd> <p>No special behaviors. This is the default value used to set or revert to default behavior.</p> </dd>
        /// </summary>
        /// <doc-id>jj647929</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_VIEWPORT_OPTIONS_DEFAULT</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_VIEWPORT_OPTIONS_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>At the end of an interaction, the viewport transitions to <strong>DIRECTMANIPULATION_READY</strong> and then immediately to <strong>DIRECTMANIPULATION_DISABLED</strong>. The viewport must be explicitly enabled through the <strong>Enable</strong> method before the next interaction can be processed.</p> </dd>
        /// </summary>
        /// <doc-id>jj647929</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_VIEWPORT_OPTIONS_AUTODISABLE</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_VIEWPORT_OPTIONS_AUTODISABLE</unmanaged-short>
        AutoDisable = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> <strong>Update</strong> must be called to redraw the content within the viewport. The content is not updated automatically during an input event.</p> </dd>
        /// </summary>
        /// <doc-id>jj647929</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_VIEWPORT_OPTIONS_MANUALUPDATE</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_VIEWPORT_OPTIONS_MANUALUPDATE</unmanaged-short>
        ManualUpdate = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>All input from a contact associated with the viewport is passed to the UI thread for processing.</p> </dd>
        /// </summary>
        /// <doc-id>jj647929</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_VIEWPORT_OPTIONS_INPUT</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_VIEWPORT_OPTIONS_INPUT</unmanaged-short>
        Input = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>If set, all <strong>WM_POINTERDOWN</strong> messages are passed to the application for hit testing. Otherwise, Direct Manipulation will process the messages for hit testing against the existing list of running viewports, and the application will not see the input.</p> <p>Applies only when viewport state is <strong>DIRECTMANIPULATION_RUNNING</strong> or <strong>DIRECTMANIPULATION_INERTIA</strong>.</p> </dd>
        /// </summary>
        /// <doc-id>jj647929</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_VIEWPORT_OPTIONS_EXPLICITHITTEST</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_VIEWPORT_OPTIONS_EXPLICITHITTEST</unmanaged-short>
        ExplicitHitTest = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>Specifies that pixel snapping during a manipulation is disabled.</p> <p>Anti-aliasing can create irregular edge rendering. Artifacts, commonly seen as blurry, or semi-transparent, edges can occur when the location of an edge falls in the middle of a device pixel rather than between device pixels. </p> </dd>
        /// </summary>
        /// <doc-id>jj647929</doc-id>
        /// <unmanaged>DIRECTMANIPULATION_VIEWPORT_OPTIONS_DISABLEPIXELSNAPPING</unmanaged>
        /// <unmanaged-short>DIRECTMANIPULATION_VIEWPORT_OPTIONS_DISABLEPIXELSNAPPING</unmanaged-short>
        Disablepixelsnapping = unchecked ((System.Int32)(16))}
}