// <auto-generated/>

namespace SharpDX.XAudio2.Fx
{
    /// <summary>
    /// <p>Describes I3DL2 (Interactive 3D Audio Rendering Guidelines Level 2.0) parameters for use in the <strong>ReverbConvertI3DL2ToNative</strong> function.</p>
    /// </summary>
    /// <remarks>
    /// <p>There are many preset values defined for the <strong><see cref = "SharpDX.XAudio2.Fx.ReverbI3DL2Parameters"/></strong> structure. For more information, see <strong>XAUDIO2FX_I3DL2_PRESET</strong>. </p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_i3dl2_parameters</doc-id>
    /// <unmanaged>XAUDIO2FX_REVERB_I3DL2_PARAMETERS</unmanaged>
    /// <unmanaged-short>XAUDIO2FX_REVERB_I3DL2_PARAMETERS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct ReverbI3DL2Parameters
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_i3dl2_parameters</doc-id>
        /// <unmanaged>WetDryMix</unmanaged>
        /// <unmanaged-short>WetDryMix</unmanaged-short>
        public System.Single WetDryMix;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_i3dl2_parameters</doc-id>
        /// <unmanaged>Room</unmanaged>
        /// <unmanaged-short>Room</unmanaged-short>
        public System.Int32 Room;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_i3dl2_parameters</doc-id>
        /// <unmanaged>RoomHF</unmanaged>
        /// <unmanaged-short>RoomHF</unmanaged-short>
        public System.Int32 RoomHF;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_i3dl2_parameters</doc-id>
        /// <unmanaged>RoomRolloffFactor</unmanaged>
        /// <unmanaged-short>RoomRolloffFactor</unmanaged-short>
        public System.Single RoomRolloffFactor;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_i3dl2_parameters</doc-id>
        /// <unmanaged>DecayTime</unmanaged>
        /// <unmanaged-short>DecayTime</unmanaged-short>
        public System.Single DecayTime;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_i3dl2_parameters</doc-id>
        /// <unmanaged>DecayHFRatio</unmanaged>
        /// <unmanaged-short>DecayHFRatio</unmanaged-short>
        public System.Single DecayHFRatio;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_i3dl2_parameters</doc-id>
        /// <unmanaged>Reflections</unmanaged>
        /// <unmanaged-short>Reflections</unmanaged-short>
        public System.Int32 Reflections;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_i3dl2_parameters</doc-id>
        /// <unmanaged>ReflectionsDelay</unmanaged>
        /// <unmanaged-short>ReflectionsDelay</unmanaged-short>
        public System.Single ReflectionsDelay;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_i3dl2_parameters</doc-id>
        /// <unmanaged>Reverb</unmanaged>
        /// <unmanaged-short>Reverb</unmanaged-short>
        public System.Int32 Reverb;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_i3dl2_parameters</doc-id>
        /// <unmanaged>ReverbDelay</unmanaged>
        /// <unmanaged-short>ReverbDelay</unmanaged-short>
        public System.Single ReverbDelay;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_i3dl2_parameters</doc-id>
        /// <unmanaged>Diffusion</unmanaged>
        /// <unmanaged-short>Diffusion</unmanaged-short>
        public System.Single Diffusion;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_i3dl2_parameters</doc-id>
        /// <unmanaged>Density</unmanaged>
        /// <unmanaged-short>Density</unmanaged-short>
        public System.Single Density;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_i3dl2_parameters</doc-id>
        /// <unmanaged>HFReference</unmanaged>
        /// <unmanaged-short>HFReference</unmanaged-short>
        public System.Single HFReference;
    }

    /// <summary>
    /// <p>Describes parameters for use in the reverb APO.</p>
    /// </summary>
    /// <remarks>
    /// <p>All parameters related to sampling rate or time are relative to a 48kHz voice and must be scaled for use with other sampling rates. For example, setting <em>ReflectionsDelay</em> to 300ms gives a true 300ms delay when the reverb is hosted in a 48kHz voice, but becomes a 150ms delay when hosted in a 24kHz voice. </p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
    /// <unmanaged>XAUDIO2FX_REVERB_PARAMETERS</unmanaged>
    /// <unmanaged-short>XAUDIO2FX_REVERB_PARAMETERS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct ReverbParameters
    {
        /// <summary>
        /// <dd> <p>Percentage of the output that will be reverb. Allowable values are from 0 to 100.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>WetDryMix</unmanaged>
        /// <unmanaged-short>WetDryMix</unmanaged-short>
        public System.Single WetDryMix;
        /// <summary>
        /// <dd> <p>The delay time of the first reflection relative to the direct path. Permitted range is from 0 to 300 milliseconds. </p> <strong>Note</strong>??All parameters related to sampling rate or time are relative to a 48kHz sampling rate and must be scaled for use with other sampling rates. See remarks section below for additional information. ? </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>ReflectionsDelay</unmanaged>
        /// <unmanaged-short>ReflectionsDelay</unmanaged-short>
        public System.Int32 ReflectionsDelay;
        /// <summary>
        /// <dd> <p>Delay of reverb relative to the first reflection. Permitted range is from 0 to 85 milliseconds.</p> <strong>Note</strong>??All parameters related to sampling rate or time are relative to a 48kHz sampling rate and must be scaled for use with other sampling rates. See remarks section below for additional information. ? </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>ReverbDelay</unmanaged>
        /// <unmanaged-short>ReverbDelay</unmanaged-short>
        public System.Byte ReverbDelay;
        /// <summary>
        /// <dd> <p>Delay for the left rear output and right rear output. Permitted range is from 0 to 5 milliseconds.</p> <strong>Note</strong>??All parameters related to sampling rate or time are relative to a 48kHz sampling rate and must be scaled for use with other sampling rates. See remarks section below for additional information. ? </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>RearDelay</unmanaged>
        /// <unmanaged-short>RearDelay</unmanaged-short>
        public System.Byte RearDelay;
        /// <summary>
        /// <dd> <p>Delay for the left side output and right side output. Permitted range is from 0 to 5 milliseconds.</p> <strong>Note</strong>??This value is supported beginning with Windows?10. ? <strong>Note</strong>??All parameters related to sampling rate or time are relative to a 48kHz sampling rate and must be scaled for use with other sampling rates. See remarks section below for additional information. ? </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>SideDelay</unmanaged>
        /// <unmanaged-short>SideDelay</unmanaged-short>
        public System.Byte SideDelay;
        /// <summary>
        /// <dd> <p>Position of the left input within the simulated space relative to the listener. With <em>PositionLeft</em> set to the minimum value, the left input is placed close to the listener. In this position, early reflections are dominant, and the reverb decay is set back in the sound field and reduced in amplitude. With <em>PositionLeft</em> set to the maximum value, the left input is placed at a maximum distance from the listener within the simulated room. <em>PositionLeft</em> does not affect the reverb decay time (liveness of the room), only the apparent position of the source relative to the listener. Permitted range is from 0 to 30 (no units).</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>PositionLeft</unmanaged>
        /// <unmanaged-short>PositionLeft</unmanaged-short>
        public System.Byte PositionLeft;
        /// <summary>
        /// <dd> <p>Same as <em>PositionLeft</em>, but affecting only the right input. Permitted range is from 0 to 30 (no units). </p> <strong>Note</strong>??PositionRight is ignored in mono-in/mono-out mode. ? </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>PositionRight</unmanaged>
        /// <unmanaged-short>PositionRight</unmanaged-short>
        public System.Byte PositionRight;
        /// <summary>
        /// <dd> <p>Gives a greater or lesser impression of distance from the source to the listener. Permitted range is from 0 to 30 (no units).</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>PositionMatrixLeft</unmanaged>
        /// <unmanaged-short>PositionMatrixLeft</unmanaged-short>
        public System.Byte PositionMatrixLeft;
        /// <summary>
        /// <dd> <p>Gives a greater or lesser impression of distance from the source to the listener. Permitted range is from 0 to 30 (no units). </p> <strong>Note</strong>??<em>PositionMatrixRight</em> is ignored in mono-in/mono-out mode. ? </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>PositionMatrixRight</unmanaged>
        /// <unmanaged-short>PositionMatrixRight</unmanaged-short>
        public System.Byte PositionMatrixRight;
        /// <summary>
        /// <dd> <p>Controls the character of the individual wall reflections. Set to minimum value to simulate a hard flat surface and to maximum value to simulate a diffuse surface. Permitted range is from 0 to 15 (no units). </p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>EarlyDiffusion</unmanaged>
        /// <unmanaged-short>EarlyDiffusion</unmanaged-short>
        public System.Byte EarlyDiffusion;
        /// <summary>
        /// <dd> <p>Controls the character of the individual wall reverberations. Set to minimum value to simulate a hard flat surface and to maximum value to simulate a diffuse surface. Permitted range is from 0 to 15 (no units). 
        /// </p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>LateDiffusion</unmanaged>
        /// <unmanaged-short>LateDiffusion</unmanaged-short>
        public System.Byte LateDiffusion;
        /// <summary>
        /// <dd> <p>Adjusts the decay time of low frequencies relative to the decay time at 1 kHz. The values correspond to dB of gain as follows:  </p> <table> <tr><th>Value</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td></tr> <tr><th>Gain (dB)</th><td>-8</td><td>-7</td><td>-6</td><td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td><td>0</td><td>+1</td><td>+2</td><td>+3</td><td>+4</td></tr> </table> <p>?</p> <strong>Note</strong>??A <em>LowEQGain</em> value of 8 results in the decay time of low frequencies being equal to the decay time at 1 kHz. ? <p> Permitted range is from 0 to 12 (no units). </p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>LowEQGain</unmanaged>
        /// <unmanaged-short>LowEQGain</unmanaged-short>
        public System.Byte LowEQGain;
        /// <summary>
        /// <dd> <p>Sets the corner frequency of the low pass filter that is controlled by the <em>LowEQGain</em> parameter. The values correspond to frequency in Hz as follows:  </p> <table> <tr><th>Value</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr> <tr><th>Frequency (Hz)</th><td>50</td><td>100</td><td>150</td><td>200</td><td>250</td><td>300</td><td>350</td><td>400</td><td>450</td><td>500</td></tr> </table> <p>?</p> <p>Permitted range is from 0 to 9 (no units). </p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>LowEQCutoff</unmanaged>
        /// <unmanaged-short>LowEQCutoff</unmanaged-short>
        public System.Byte LowEQCutoff;
        /// <summary>
        /// <dd> <p>Adjusts the decay time of high frequencies relative to the decay time at 1 kHz. When set to zero, high frequencies decay at the same rate as 1 kHz. When set to maximum value, high frequencies decay at a much faster rate than 1 kHz. </p> <table> <tr><th>Value</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td></tr> <tr><th>Gain (dB)</th><td>-8</td><td>-7</td><td>-6</td><td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td><td>0</td></tr> </table> <p>?</p> <p>Permitted range is from 0 to 8 (no units). </p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>HighEQGain</unmanaged>
        /// <unmanaged-short>HighEQGain</unmanaged-short>
        public System.Byte HighEQGain;
        /// <summary>
        /// <dd> <p>Sets the corner frequency of the high pass filter that is controlled by the <em>HighEQGain</em> parameter. The values correspond to frequency in kHz as follows:       </p> <table> <tr><th>Value</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td></tr> <tr><th>Frequency (kHz)</th><td>1</td><td>1.5</td><td>2</td><td>2.5</td><td>3</td><td>3.5</td><td>4</td><td>4.5</td><td>5</td><td>5.5</td><td>6</td><td>6.5</td><td>7</td><td>7.5</td><td>8</td></tr> </table> <p>?</p> <p>Permitted range is from 0 to 14 (no units).</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>HighEQCutoff</unmanaged>
        /// <unmanaged-short>HighEQCutoff</unmanaged-short>
        public System.Byte HighEQCutoff;
        /// <summary>
        /// <dd> <p>Sets the corner frequency of the low pass filter for the room effect. Permitted range is from 20 to 20,000 Hz.</p> <strong>Note</strong>??All parameters related to sampling rate or time are relative to a 48kHz sampling rate and must be scaled for use with other sampling rates. See remarks section below for additional information. ? </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>RoomFilterFreq</unmanaged>
        /// <unmanaged-short>RoomFilterFreq</unmanaged-short>
        public System.Single RoomFilterFreq;
        /// <summary>
        /// <dd> <p>Sets the pass band intensity level of the low-pass filter for both the early reflections and the late field reverberation. Permitted range is from -100 to 0 dB.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>RoomFilterMain</unmanaged>
        /// <unmanaged-short>RoomFilterMain</unmanaged-short>
        public System.Single RoomFilterMain;
        /// <summary>
        /// <dd> <p>Sets the intensity of the low-pass filter for both the early reflections and the late field reverberation at the corner frequency (<em>RoomFilterFreq</em>). Permitted range is from -100 to 0 dB.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>RoomFilterHF</unmanaged>
        /// <unmanaged-short>RoomFilterHF</unmanaged-short>
        public System.Single RoomFilterHF;
        /// <summary>
        /// <dd> <p>Adjusts the intensity of the early reflections. Permitted range is from -100 to 20 dB.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>ReflectionsGain</unmanaged>
        /// <unmanaged-short>ReflectionsGain</unmanaged-short>
        public System.Single ReflectionsGain;
        /// <summary>
        /// <dd> <p>Adjusts the intensity of the reverberations. Permitted range is from -100 to 20 dB.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>ReverbGain</unmanaged>
        /// <unmanaged-short>ReverbGain</unmanaged-short>
        public System.Single ReverbGain;
        /// <summary>
        /// <dd> <p>Reverberation decay time at 1 kHz. This is the time that a full scale input signal decays by 60 dB. Permitted range is from 0.1 to infinity seconds.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>DecayTime</unmanaged>
        /// <unmanaged-short>DecayTime</unmanaged-short>
        public System.Single DecayTime;
        /// <summary>
        /// <dd> <p>Controls the modal density in the late field reverberation. For colorless spaces, <em>Density</em> should be set to the maximum value (100). As Density is decreased, the sound becomes hollow (comb filtered). This is an effect that can be useful if you are trying to model a silo. Permitted range as a percentage is from 0 to 100.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>Density</unmanaged>
        /// <unmanaged-short>Density</unmanaged-short>
        public System.Single Density;
        /// <summary>
        /// <dd> <p>The apparent size of the acoustic space. Permitted range is from 1 to 100 feet.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>RoomSize</unmanaged>
        /// <unmanaged-short>RoomSize</unmanaged-short>
        public System.Single RoomSize;
        /// <summary>
        /// <dd> <p>If set to TRUE, disables late field reflection calculations. Disabling late field reflection calculations results in a significant CPU time savings.</p> <strong>Note</strong>??The DirectX SDK versions of XAUDIO2 don't support this member. ? </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_reverb_parameters</doc-id>
        /// <unmanaged>DisableLateField</unmanaged>
        /// <unmanaged-short>DisableLateField</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool DisableLateField;
    }

    /// <summary>
    /// <p>Describes parameters for use with the volume meter APO.</p>
    /// </summary>
    /// <remarks>
    /// <p>This structure is used with the <strong>XAudio2 IXAudio2Voice::GetEffectParameters</strong> method. </p><p><em>pPeakLevels</em> and <em>pRMSLevels</em> are not returned by <strong>IXAudio2Voice::GetEffectParameters</strong>, the arrays are only filled out if they are present. If <em>pPeakLevels</em> and <em>pRMSLevels</em> are used they must be allocated by the application. The application is responsible for freeing the arrays when they are no longer needed. </p><p><em>ChannelCount</em> must be set by the application to match the number of channels in the voice the effect is applied to.</p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_volumemeter_levels</doc-id>
    /// <unmanaged>XAUDIO2FX_VOLUMEMETER_LEVELS</unmanaged>
    /// <unmanaged-short>XAUDIO2FX_VOLUMEMETER_LEVELS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct VolumeMeterLevels
    {
        /// <summary>
        /// <dd> <p>Array that will be filled with the maximum absolute level for each channel during a processing pass. The array must be at least <em>ChannelCount</em> ? sizeof(float) bytes. <em>pPeakLevels</em> may be <c>null</c> if <em>pRMSLevels</em> is not <c>null</c>.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_volumemeter_levels</doc-id>
        /// <unmanaged>pPeakLevels</unmanaged>
        /// <unmanaged-short>pPeakLevels</unmanaged-short>
        internal System.IntPtr PeakLevelPointer;
        /// <summary>
        /// <dd> <p>Array that will be filled with root mean square level for each channel during a processing pass. The array must be at least <em>ChannelCount</em> ? sizeof(float) bytes. <em>pRMSLevels</em> may be <c>null</c> if <em>pPeakLevels</em> is not <c>null</c>.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_volumemeter_levels</doc-id>
        /// <unmanaged>pRMSLevels</unmanaged>
        /// <unmanaged-short>pRMSLevels</unmanaged-short>
        internal System.IntPtr RmsLevelsPointer;
        /// <summary>
        /// <dd> <p>Number of channels being processed.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2fx_volumemeter_levels</doc-id>
        /// <unmanaged>ChannelCount</unmanaged>
        /// <unmanaged-short>ChannelCount</unmanaged-short>
        public System.Int32 ChannelCount;
    }
}