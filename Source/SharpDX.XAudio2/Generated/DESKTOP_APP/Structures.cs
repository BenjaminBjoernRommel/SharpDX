// <auto-generated/>

namespace SharpDX.XAudio2
{
    /// <summary>
    /// <p>Represents an audio data buffer, used with <strong>IXAudio2SourceVoice::SubmitSourceBuffer</strong>.</p>
    /// </summary>
    /// <remarks>
    /// <p>XAudio2 audio data is interleaved, data from each channel is adjacent for a particular sample number. For example if there was a 4 channel wave playing into an XAudio2 source voice, the audio data would be a sample of channel 0, a sample of channel 1, a sample of channel 2, a sample of channel 3, and then the next sample of channels 0, 1, 2, 3, etc. </p><p>The <strong>AudioBytes</strong> and <strong>pAudioData</strong> members of <strong><see cref = "SharpDX.XAudio2.AudioBuffer"/></strong> correspond to the size in bytes and contents of the 'data' RIFF chunk of the file being played. The contents of the chunk may need to be byte swapped when loading the file on Xbox 360. </p><p>Memory allocated to hold a <strong><see cref = "SharpDX.XAudio2.AudioBuffer"/></strong> or <strong><see cref = "SharpDX.XAudio2.BufferWma"/></strong> structure can be freed as soon as the <strong>IXAudio2SourceVoice::SubmitSourceBuffer</strong> call it is passed to returns. The data the structure points to (<strong>pAudioData</strong> and <strong>pDecodedPacketCumulativeBytes</strong>, respectively) can't be freed until the buffer completes (as signaled by the <strong>IXAudio2VoiceCallback::OnBufferEnd</strong> callback) or the voice is stopped or destroyed. </p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</doc-id>
    /// <unmanaged>XAUDIO2_BUFFER</unmanaged>
    /// <unmanaged-short>XAUDIO2_BUFFER</unmanaged-short>
    public partial class AudioBuffer
    {
                ///<summary>Constant LoopInfinite</summary>
        ///<unmanaged>XAUDIO2_LOOP_INFINITE</unmanaged>
        public const int LoopInfinite = 255;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</doc-id>
        /// <unmanaged>Flags</unmanaged>
        /// <unmanaged-short>Flags</unmanaged-short>
        public SharpDX.XAudio2.BufferFlags Flags;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</doc-id>
        /// <unmanaged>AudioBytes</unmanaged>
        /// <unmanaged-short>AudioBytes</unmanaged-short>
        public System.Int32 AudioBytes;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</doc-id>
        /// <unmanaged>pAudioData</unmanaged>
        /// <unmanaged-short>pAudioData</unmanaged-short>
        public System.IntPtr AudioDataPointer;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</doc-id>
        /// <unmanaged>PlayBegin</unmanaged>
        /// <unmanaged-short>PlayBegin</unmanaged-short>
        public System.Int32 PlayBegin;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</doc-id>
        /// <unmanaged>PlayLength</unmanaged>
        /// <unmanaged-short>PlayLength</unmanaged-short>
        public System.Int32 PlayLength;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</doc-id>
        /// <unmanaged>LoopBegin</unmanaged>
        /// <unmanaged-short>LoopBegin</unmanaged-short>
        public System.Int32 LoopBegin;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</doc-id>
        /// <unmanaged>LoopLength</unmanaged>
        /// <unmanaged-short>LoopLength</unmanaged-short>
        public System.Int32 LoopLength;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</doc-id>
        /// <unmanaged>LoopCount</unmanaged>
        /// <unmanaged-short>LoopCount</unmanaged-short>
        public System.Int32 LoopCount;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</doc-id>
        /// <unmanaged>pContext</unmanaged>
        /// <unmanaged-short>pContext</unmanaged-short>
        public System.IntPtr Context;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 4, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public SharpDX.XAudio2.BufferFlags Flags;
            public System.Int32 AudioBytes;
            public System.IntPtr AudioDataPointer;
            public System.Int32 PlayBegin;
            public System.Int32 PlayLength;
            public System.Int32 LoopBegin;
            public System.Int32 LoopLength;
            public System.Int32 LoopCount;
            public System.IntPtr Context;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            Flags = @ref.Flags;
            AudioBytes = @ref.AudioBytes;
            AudioDataPointer = @ref.AudioDataPointer;
            PlayBegin = @ref.PlayBegin;
            PlayLength = @ref.PlayLength;
            LoopBegin = @ref.LoopBegin;
            LoopLength = @ref.LoopLength;
            LoopCount = @ref.LoopCount;
            Context = @ref.Context;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Flags = Flags;
            @ref.AudioBytes = AudioBytes;
            @ref.AudioDataPointer = AudioDataPointer;
            @ref.PlayBegin = PlayBegin;
            @ref.PlayLength = PlayLength;
            @ref.LoopBegin = LoopBegin;
            @ref.LoopLength = LoopLength;
            @ref.LoopCount = LoopCount;
            @ref.Context = Context;
        }
    }

    /// <summary>
    /// <p>Used with <strong>IXAudio2SourceVoice::SubmitSourceBuffer</strong> when submitting xWMA data.</p>
    /// </summary>
    /// <remarks>
    /// <p>When streaming an xWMA file a few packets at a time, XAUDIO2_END_OF_STREAM should be specified on the last packet. Alternatively, the application may call <strong>IXAudio2SourceVoice::Discontinuity</strong> after submitting the last packet. </p><p>In addition, when streaming an xWMA file a few packets at a time, the application should subtract <strong>pDecodedPacketCumulativeBytes</strong>[<strong>PacketCount</strong>-1] of the previous packet from all the entries of the currently submitted packet. </p><p>The members of <strong><see cref = "SharpDX.XAudio2.BufferWma"/></strong> correspond to values contained in the 'dpds' RIFF chunk of the xWMA file being played. <strong>PacketCount</strong> will correspond to the size in UINT32s of the chunk. <strong>pDecodedPacketCumulativeBytes</strong> will correspond to a UINT32 buffer containing the contents of the chunk. The contents of the buffer will need to be byte swapped when loading the buffer on Xbox 360. </p><p>Memory allocated to hold a <strong><see cref = "SharpDX.XAudio2.AudioBuffer"/></strong> or <strong><see cref = "SharpDX.XAudio2.BufferWma"/></strong> structure can be freed as soon as the <strong>IXAudio2SourceVoice::SubmitSourceBuffer</strong> call it is passed to returns. The data the structure points to (<strong>pAudioData</strong> and <strong>pDecodedPacketCumulativeBytes</strong>, respectively) can't be freed until the buffer completes (as signaled by the <strong>IXAudio2VoiceCallback::OnBufferEnd</strong> callback) or the voice is stopped and destroyed. </p><p>XAUDIO 2.8 in Windows 8.x does not support xWMA decoding. Use Windows Media Foundation APIs to perform the decoding from WMA to PCM instead. This functionality is available in the DirectX SDK versions of XAUDIO and in XAUDIO 2.9 in Windows?10.</p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer_wma</doc-id>
    /// <unmanaged>XAUDIO2_BUFFER_WMA</unmanaged>
    /// <unmanaged-short>XAUDIO2_BUFFER_WMA</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 4, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    internal partial struct BufferWma
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer_wma</doc-id>
        /// <unmanaged>pDecodedPacketCumulativeBytes</unmanaged>
        /// <unmanaged-short>pDecodedPacketCumulativeBytes</unmanaged-short>
        public System.IntPtr DecodedPacketCumulativeBytesPointer;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer_wma</doc-id>
        /// <unmanaged>PacketCount</unmanaged>
        /// <unmanaged-short>PacketCount</unmanaged-short>
        public System.Int32 PacketCount;
    }

    /// <summary>
    /// <p>Contains the new global debug configuration for XAudio2. Used with the <strong>SetDebugConfiguration</strong> function.</p>
    /// </summary>
    /// <remarks>
    /// <p>Debugging messages can be completely turned off by initializing <strong><see cref = "SharpDX.XAudio2.DebugConfiguration"/></strong> to all zeroes.</p><strong>Note</strong>??For this version of XAudio2, only the <strong>XAUDIO2_LOG_ERRORS</strong> value is supported on <strong>TraceMask</strong> or <strong>BreakMask</strong>. All other members and values are ignored.?
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration</doc-id>
    /// <unmanaged>XAUDIO2_DEBUG_CONFIGURATION</unmanaged>
    /// <unmanaged-short>XAUDIO2_DEBUG_CONFIGURATION</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 4, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct DebugConfiguration
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration</doc-id>
        /// <unmanaged>TraceMask</unmanaged>
        /// <unmanaged-short>TraceMask</unmanaged-short>
        public System.Int32 TraceMask;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration</doc-id>
        /// <unmanaged>BreakMask</unmanaged>
        /// <unmanaged-short>BreakMask</unmanaged-short>
        public System.Int32 BreakMask;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration</doc-id>
        /// <unmanaged>LogThreadID</unmanaged>
        /// <unmanaged-short>LogThreadID</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool LogThreadID;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration</doc-id>
        /// <unmanaged>LogFileline</unmanaged>
        /// <unmanaged-short>LogFileline</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool LogFileline;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration</doc-id>
        /// <unmanaged>LogFunctionName</unmanaged>
        /// <unmanaged-short>LogFunctionName</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool LogFunctionName;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration</doc-id>
        /// <unmanaged>LogTiming</unmanaged>
        /// <unmanaged-short>LogTiming</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool LogTiming;
    }

    /// <summary>
    /// <p>Defines an effect chain.</p>
    /// </summary>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_effect_chain</doc-id>
    /// <unmanaged>XAUDIO2_EFFECT_CHAIN</unmanaged>
    /// <unmanaged-short>XAUDIO2_EFFECT_CHAIN</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 4, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    internal partial struct EffectChain
    {
        /// <summary>
        /// <dd> <p>Number of effects in the effect chain for the voice.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_effect_chain</doc-id>
        /// <unmanaged>EffectCount</unmanaged>
        /// <unmanaged-short>EffectCount</unmanaged-short>
        public System.Int32 EffectCount;
        /// <summary>
        /// <dd> <p>Array of <strong><see cref = "SharpDX.XAudio2.EffectDescriptor"/></strong> structures containing references to XAPO instances.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_effect_chain</doc-id>
        /// <unmanaged>pEffectDescriptors</unmanaged>
        /// <unmanaged-short>pEffectDescriptors</unmanaged-short>
        internal System.IntPtr EffectDescriptorPointer;
    }

    /// <summary>
    /// <p>Contains information about an XAPO for use in an effect chain.</p>
    /// </summary>
    /// <remarks>
    /// <p>XAPO instances are passed to XAudio2 as <strong><see cref = "SharpDX.IUnknown"/></strong> interfaces and XAudio2 uses <strong>IXAPO::QueryInterface</strong> to acquire an <strong><see cref = "SharpDX.XAPO.AudioProcessor"/></strong> interface and to detect whether the XAPO implements the <strong><see cref = "SharpDX.XAPO.ParameterProvider"/></strong> interface. </p><p>For additional information on using XAPOs with XAudio2 see How to: Create an Effect Chain and How to: Use an XAPO in XAudio2.</p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_effect_descriptor</doc-id>
    /// <unmanaged>XAUDIO2_EFFECT_DESCRIPTOR</unmanaged>
    /// <unmanaged-short>XAUDIO2_EFFECT_DESCRIPTOR</unmanaged-short>
    public partial class EffectDescriptor
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_effect_descriptor</doc-id>
        /// <unmanaged>pEffect</unmanaged>
        /// <unmanaged-short>pEffect</unmanaged-short>
        internal SharpDX.IUnknown EffectPointer;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_effect_descriptor</doc-id>
        /// <unmanaged>InitialState</unmanaged>
        /// <unmanaged-short>InitialState</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool InitialState;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_effect_descriptor</doc-id>
        /// <unmanaged>OutputChannels</unmanaged>
        /// <unmanaged-short>OutputChannels</unmanaged-short>
        public System.Int32 OutputChannelCount;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 4, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.IntPtr EffectPointer;
            public SharpDX.Mathematics.Interop.RawBool InitialState;
            public System.Int32 OutputChannelCount;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            if (@ref.EffectPointer != System.IntPtr.Zero)
                EffectPointer = new SharpDX.ComObject(@ref.EffectPointer);
            else
                EffectPointer = null;
            InitialState = @ref.InitialState;
            OutputChannelCount = @ref.OutputChannelCount;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.EffectPointer = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(EffectPointer);
            @ref.InitialState = InitialState;
            @ref.OutputChannelCount = OutputChannelCount;
        }
    }

    /// <summary>
    /// <p>Defines filter parameters for a source voice.</p>
    /// </summary>
    /// <remarks>
    /// <p>Setting <see cref = "SharpDX.XAudio2.FilterParameters"/> with the following values is acoustically equivalent to the filter being fully bypassed.</p><pre><see cref = "SharpDX.XAudio2.FilterParameters"/> FilterParams;
    /// FilterParams.Frequency = 1.0f;    
    /// FilterParams.OneOverQ = 1.0f;
    /// FilterParams.Type = LowPassFilter;
    /// </pre><p>The following formulas show the relationship between the members of <see cref = "SharpDX.XAudio2.FilterParameters"/> and the per-voice filter.</p><pre>Yl( n ) = F1 yb( n ) + yl( n - 1 )
    /// Yb( n ) = F1 yh( n ) + yb( n - 1 )
    /// Yh( n ) = x( n ) - yl( n ) - OneOverQ(yb( n - 1 )
    /// Yn( n ) = Yl(n) + Yh(n) </pre><p>Where:</p><pre>Yl = lowpass output
    /// Yb = bandpass output
    /// Yh = highpass output
    /// Yn = notch output
    /// F1 = <see cref = "SharpDX.XAudio2.FilterParameters"/>.Frequency
    /// OneOverQ = <see cref = "SharpDX.XAudio2.FilterParameters"/>.OneOverQ</pre>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_parameters</doc-id>
    /// <unmanaged>XAUDIO2_FILTER_PARAMETERS</unmanaged>
    /// <unmanaged-short>XAUDIO2_FILTER_PARAMETERS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 4, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct FilterParameters
    {
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.XAudio2.FilterType"/></strong>.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_parameters</doc-id>
        /// <unmanaged>Type</unmanaged>
        /// <unmanaged-short>Type</unmanaged-short>
        public SharpDX.XAudio2.FilterType Type;
        /// <summary>
        /// <dd> <p>Filter radian frequency calculated as (2 * sin(pi * (desired filter cutoff frequency) / sampleRate)). The frequency must be greater than or equal to 0 and less than or equal to <see cref = "MaximumFilterFrequency"/>. The maximum frequency allowable is equal to the source sound's sample rate divided by six which corresponds to the maximum filter radian frequency of 1. For example, if a sound's sample rate is 48000 and the desired cutoff frequency is the maximum allowable value for that sample rate, 8000, the value for <strong>Frequency</strong> will be 1. 
        /// If XAUDIO2_HELPER_FUNCTIONS is defined, XAudio2.h will include the <strong>XAudio2RadiansToCutoffFrequency</strong> and <strong>XAudio2CutoffFrequencyToRadians</strong> helper functions for converting between hertz and radian frequencies. Defining XAUDIO2_HELPER_FUNCTIONS will also include <strong>XAudio2CutoffFrequencyToOnePoleCoefficient</strong> for converting between hertz and a one-pole coefficient suitable for use with the LowPassOnePoleFilter and HighPassOnePoleFilter. </p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_parameters</doc-id>
        /// <unmanaged>Frequency</unmanaged>
        /// <unmanaged-short>Frequency</unmanaged-short>
        public System.Single Frequency;
        /// <summary>
        /// <dd> <p>Reciprocal of Q factor. Controls how quickly frequencies beyond Frequency are dampened. Larger values result in quicker dampening while smaller values cause dampening to occur more gradually. Must be greater than 0 and less than or equal to <see cref = "MaximumFilterOneOverQ"/>.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_parameters</doc-id>
        /// <unmanaged>OneOverQ</unmanaged>
        /// <unmanaged-short>OneOverQ</unmanaged-short>
        public System.Single OneOverQ;
    }

    /// <summary>
    /// <p>Contains performance information.</p>
    /// </summary>
    /// <remarks>
    /// <p>CPU cycles are recorded using . Use to convert these values.</p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</doc-id>
    /// <unmanaged>XAUDIO2_PERFORMANCE_DATA</unmanaged>
    /// <unmanaged-short>XAUDIO2_PERFORMANCE_DATA</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 4, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct PerformanceData
    {
        /// <summary>
        /// <dd> <p>CPU cycles spent on audio processing since the last call to the <strong>IXAudio2::StartEngine</strong> or <strong>IXAudio2::GetPerformanceData</strong> function.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</doc-id>
        /// <unmanaged>AudioCyclesSinceLastQuery</unmanaged>
        /// <unmanaged-short>AudioCyclesSinceLastQuery</unmanaged-short>
        public System.Int64 AudioCyclesSinceLastQuery;
        /// <summary>
        /// <dd> <p>Total CPU cycles elapsed since the last call. </p> <strong>Note</strong>??This only counts cycles on the CPU on which XAudio2 is running. ? </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</doc-id>
        /// <unmanaged>TotalCyclesSinceLastQuery</unmanaged>
        /// <unmanaged-short>TotalCyclesSinceLastQuery</unmanaged-short>
        public System.Int64 TotalCyclesSinceLastQuery;
        /// <summary>
        /// <dd> <p>Fewest CPU cycles spent on processing any single audio quantum since the last call.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</doc-id>
        /// <unmanaged>MinimumCyclesPerQuantum</unmanaged>
        /// <unmanaged-short>MinimumCyclesPerQuantum</unmanaged-short>
        public System.Int32 MinimumCyclesPerQuantum;
        /// <summary>
        /// <dd> <p>Most CPU cycles spent on processing any single audio quantum since the last call.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</doc-id>
        /// <unmanaged>MaximumCyclesPerQuantum</unmanaged>
        /// <unmanaged-short>MaximumCyclesPerQuantum</unmanaged-short>
        public System.Int32 MaximumCyclesPerQuantum;
        /// <summary>
        /// <dd> <p>Total memory currently in use.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</doc-id>
        /// <unmanaged>MemoryUsageInBytes</unmanaged>
        /// <unmanaged-short>MemoryUsageInBytes</unmanaged-short>
        public System.Int32 MemoryUsageInBytes;
        /// <summary>
        /// <dd> <p>Minimum delay that occurs between the time a sample is read from a source buffer and the time it reaches the speakers. </p> <table> <tr><th>Windows</th></tr> <tr><td>The delay reported is a variable value equal to the rough distance between the last sample submitted to the driver by XAudio2 and the sample currently playing. The following factors can affect the delay: playing multichannel audio on a hardware-accelerated device; the type of audio device (WavePci, WaveCyclic, or WaveRT); and, to a lesser extent, audio hardware implementation.
        /// </td></tr> </table> <p>?</p> <table> <tr><th>Xbox 360</th></tr> <tr><td>The delay reported is a fixed value, which is normally 1,024 samples (21.333 ms at 48 kHz). If <strong>XOverrideSpeakerConfig</strong> has been called using the <strong>XAUDIOSPEAKERCONFIG_LOW_LATENCY</strong> flag, the delay reported is 512 samples (10.667 ms at 48 kHz).
        /// </td></tr> </table> <p>?</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</doc-id>
        /// <unmanaged>CurrentLatencyInSamples</unmanaged>
        /// <unmanaged-short>CurrentLatencyInSamples</unmanaged-short>
        public System.Int32 CurrentLatencyInSamples;
        /// <summary>
        /// <dd> <p>Total audio dropouts since the engine started.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</doc-id>
        /// <unmanaged>GlitchesSinceEngineStarted</unmanaged>
        /// <unmanaged-short>GlitchesSinceEngineStarted</unmanaged-short>
        public System.Int32 GlitchesSinceEngineStarted;
        /// <summary>
        /// <dd> <p>Number of source voices currently playing. </p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</doc-id>
        /// <unmanaged>ActiveSourceVoiceCount</unmanaged>
        /// <unmanaged-short>ActiveSourceVoiceCount</unmanaged-short>
        public System.Int32 ActiveSourceVoiceCount;
        /// <summary>
        /// <dd> <p>Total number of source voices currently in existence. </p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</doc-id>
        /// <unmanaged>TotalSourceVoiceCount</unmanaged>
        /// <unmanaged-short>TotalSourceVoiceCount</unmanaged-short>
        public System.Int32 TotalSourceVoiceCount;
        /// <summary>
        /// <dd> <p>Number of submix voices currently playing.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</doc-id>
        /// <unmanaged>ActiveSubmixVoiceCount</unmanaged>
        /// <unmanaged-short>ActiveSubmixVoiceCount</unmanaged-short>
        public System.Int32 ActiveSubmixVoiceCount;
        /// <summary>
        /// <dd> <p>Number of resampler xAPOs currently active.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</doc-id>
        /// <unmanaged>ActiveResamplerCount</unmanaged>
        /// <unmanaged-short>ActiveResamplerCount</unmanaged-short>
        public System.Int32 ActiveResamplerCount;
        /// <summary>
        /// <dd> <p>Number of matrix mix xAPOs currently active.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</doc-id>
        /// <unmanaged>ActiveMatrixMixCount</unmanaged>
        /// <unmanaged-short>ActiveMatrixMixCount</unmanaged-short>
        public System.Int32 ActiveMatrixMixCount;
        /// <summary>
        /// <dd> <table> <tr><th>Windows</th></tr> <tr><td>Unsupported.</td></tr> </table> <p>?</p> <table> <tr><th>Xbox 360</th></tr> <tr><td>Number of source voices decoding XMA data.</td></tr> </table> <p>?</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</doc-id>
        /// <unmanaged>ActiveXmaSourceVoices</unmanaged>
        /// <unmanaged-short>ActiveXmaSourceVoices</unmanaged-short>
        public System.Int32 ActiveXmaSourceVoices;
        /// <summary>
        /// <dd> <table> <tr><th>Windows</th></tr> <tr><td>Unsupported.</td></tr> </table> <p>?</p> <table> <tr><th>Xbox 360</th></tr> <tr><td>A voice can use more than one XMA stream.</td></tr> </table> <p>?</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</doc-id>
        /// <unmanaged>ActiveXmaStreams</unmanaged>
        /// <unmanaged-short>ActiveXmaStreams</unmanaged-short>
        public System.Int32 ActiveXmaStreams;
    }

    /// <summary>
    /// <p>Contains information about the creation flags, input channels, and sample rate of a voice.</p>
    /// </summary>
    /// <remarks>
    /// <p>Note the DirectX SDK versions of XAUDIO2 do not support the <strong>ActiveFlags</strong> member.</p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_details</doc-id>
    /// <unmanaged>XAUDIO2_VOICE_DETAILS</unmanaged>
    /// <unmanaged-short>XAUDIO2_VOICE_DETAILS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 4, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct VoiceDetails
    {
        /// <summary>
        /// <dd> <p>Flags used to create the voice; see the individual voice interfaces for more information.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_details</doc-id>
        /// <unmanaged>CreationFlags</unmanaged>
        /// <unmanaged-short>CreationFlags</unmanaged-short>
        public SharpDX.XAudio2.VoiceFlags CreationFlags;
        /// <summary>
        /// <dd> <p>Flags that are currently set on the voice.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_details</doc-id>
        /// <unmanaged>ActiveFlags</unmanaged>
        /// <unmanaged-short>ActiveFlags</unmanaged-short>
        public System.Int32 ActiveFlags;
        /// <summary>
        /// <dd> <p>The number of input channels the voice expects.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_details</doc-id>
        /// <unmanaged>InputChannels</unmanaged>
        /// <unmanaged-short>InputChannels</unmanaged-short>
        public System.Int32 InputChannelCount;
        /// <summary>
        /// <dd> <p>The input sample rate the voice expects.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_details</doc-id>
        /// <unmanaged>InputSampleRate</unmanaged>
        /// <unmanaged-short>InputSampleRate</unmanaged-short>
        public System.Int32 InputSampleRate;
    }

    /// <summary>
    /// <p>Defines a destination voice that is the target of a send from another voice and specifies whether a filter should be used.</p>
    /// </summary>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_send_descriptor</doc-id>
    /// <unmanaged>XAUDIO2_SEND_DESCRIPTOR</unmanaged>
    /// <unmanaged-short>XAUDIO2_SEND_DESCRIPTOR</unmanaged-short>
    public partial struct VoiceSendDescriptor
    {
        /// <summary>
        /// <dd> <p>Indicates whether a filter should be used on data sent to the voice pointed to by <strong>pOutputVoice</strong>. Flags can be 0 or XAUDIO2_SEND_USEFILTER.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_send_descriptor</doc-id>
        /// <unmanaged>Flags</unmanaged>
        /// <unmanaged-short>Flags</unmanaged-short>
        public SharpDX.XAudio2.VoiceSendFlags Flags;
        /// <summary>
        /// <dd> <p>A reference to an <strong><see cref = "SharpDX.XAudio2.Voice"/></strong> that will be the target of the send. The <strong>pOutputVoice</strong> member cannot be <c>null</c>.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_send_descriptor</doc-id>
        /// <unmanaged>pOutputVoice</unmanaged>
        /// <unmanaged-short>pOutputVoice</unmanaged-short>
        public SharpDX.XAudio2.Voice OutputVoice;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 4, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public SharpDX.XAudio2.VoiceSendFlags Flags;
            public System.IntPtr OutputVoice;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            Flags = @ref.Flags;
            if (@ref.OutputVoice != System.IntPtr.Zero)
                OutputVoice = new SharpDX.XAudio2.Voice(@ref.OutputVoice);
            else
                OutputVoice = null;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Flags = Flags;
            @ref.OutputVoice = SharpDX.CppObject.ToCallbackPtr<SharpDX.XAudio2.Voice>(OutputVoice);
        }
    }

    /// <summary>
    /// <p>Defines a set of voices to receive data from a single output voice.</p>
    /// </summary>
    /// <remarks>
    /// <p>If <strong>pSends</strong> is not <c>null</c> all of its elements must be non-<c>null</c>. To send output to the default mastering voice call <strong>IXAudio2Voice::SetOutputVoices</strong> with the pSendList argument set to <c>null</c>. </p><p>Setting <strong>SendCount</strong> to 0 is useful for certain effects such as volume meters or file writers that don't generate any audio output to pass on to another voice. </p><p>If needed, a voice will perform a single sample rate conversion, from the voice's input sample rate to the input sample rate of the voice's output voices. Because only one sample rate conversion will be performed, all the voice's output voices must have the same input sample rate. If the input sample rates of the voice and its output voices are the same, no sample rate conversion is performed.
    /// </p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_sends</doc-id>
    /// <unmanaged>XAUDIO2_VOICE_SENDS</unmanaged>
    /// <unmanaged-short>XAUDIO2_VOICE_SENDS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 4, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    internal partial struct VoiceSendDescriptors
    {
        /// <summary>
        /// <dd> <p>Number of voices to receive the output of the voice. An <strong>OutputCount</strong> value of 0 indicates the voice should not send output to any voices.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_sends</doc-id>
        /// <unmanaged>SendCount</unmanaged>
        /// <unmanaged-short>SendCount</unmanaged-short>
        public System.Int32 SendCount;
        /// <summary>
        /// <dd> <p>Array of <strong><see cref = "SharpDX.XAudio2.VoiceSendDescriptor"/></strong> structures describing destination voices and the filters that should be used when sending to the voices. This array should contain <strong>SendCount</strong> elements. If <strong>SendCount</strong> is 0 <strong>pSends</strong> should be <c>null</c>. Note that <strong>pSends</strong> cannot contain the same voice more than once.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_sends</doc-id>
        /// <unmanaged>pSends</unmanaged>
        /// <unmanaged-short>pSends</unmanaged-short>
        internal System.IntPtr SendPointer;
    }

    /// <summary>
    /// <p>Returns the voice's current state and cursor position data.</p>
    /// </summary>
    /// <remarks>
    /// <p>For all encoded formats, including constant bit rate (CBR) formats such as adaptive differential pulse code modulation (ADPCM), <strong>SamplesPlayed</strong> is expressed in terms of decoded samples. For pulse code modulation (PCM) formats, <strong>SamplesPlayed</strong> is expressed in terms of either input or output samples. There is a one-to-one mapping from input to output for PCM formats. </p><p>If a client needs to get the correlated positions of several voices?that is, to know exactly which sample of a particular voice is playing when a specified sample of another voice is playing?it must make the <strong>IXAudio2SourceVoice::GetState</strong> calls in an XAudio2 engine callback. Doing this ensures that none of the voices advance while the calls are made.</p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_state</doc-id>
    /// <unmanaged>XAUDIO2_VOICE_STATE</unmanaged>
    /// <unmanaged-short>XAUDIO2_VOICE_STATE</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 4, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct VoiceState
    {
        /// <summary>
        /// <dd> <p>Pointer to a buffer context provided in the <strong><see cref = "SharpDX.XAudio2.AudioBuffer"/></strong> that is processed currently, or, if the voice is stopped currently, to the next buffer due to be processed. <strong>pCurrentBufferContext</strong> is <c>null</c> if there are no buffers in the queue.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_state</doc-id>
        /// <unmanaged>pCurrentBufferContext</unmanaged>
        /// <unmanaged-short>pCurrentBufferContext</unmanaged-short>
        public System.IntPtr Context;
        /// <summary>
        /// <dd> <p>Number of audio buffers currently queued on the voice, including the one that is processed currently.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_state</doc-id>
        /// <unmanaged>BuffersQueued</unmanaged>
        /// <unmanaged-short>BuffersQueued</unmanaged-short>
        public System.Int32 BuffersQueued;
        /// <summary>
        /// <dd> <p>Total number of samples processed by this voice since it last started, or since the last audio stream ended (as marked with the XAUDIO2_END_OF_STREAM flag). This total includes samples played multiple times due to looping. Theoretically, if all audio emitted by the voice up to this time is captured, this parameter would be the length of the audio stream in samples. If you specify <strong>XAUDIO2_VOICE_NOSAMPLESPLAYED</strong> when you call <strong>IXAudio2SourceVoice::GetState</strong>, this member won't be calculated, and its value is unspecified on return from <strong>IXAudio2SourceVoice::GetState</strong>. <strong>IXAudio2SourceVoice::GetState</strong> takes about one-third as much time to complete when you specify <strong>XAUDIO2_VOICE_NOSAMPLESPLAYED</strong>. </p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_state</doc-id>
        /// <unmanaged>SamplesPlayed</unmanaged>
        /// <unmanaged-short>SamplesPlayed</unmanaged-short>
        public System.Int64 SamplesPlayed;
    }
}