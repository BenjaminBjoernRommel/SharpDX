// <auto-generated/>

namespace SharpDX.XAudio2
{
    [System.FlagsAttribute]
    /// <summary>
    /// <p>Represents an audio data buffer, used with <strong>IXAudio2SourceVoice::SubmitSourceBuffer</strong>.</p>
    /// </summary>
    /// <remarks>
    /// <p>XAudio2 audio data is interleaved, data from each channel is adjacent for a particular sample number. For example if there was a 4 channel wave playing into an XAudio2 source voice, the audio data would be a sample of channel 0, a sample of channel 1, a sample of channel 2, a sample of channel 3, and then the next sample of channels 0, 1, 2, 3, etc. </p><p>The <strong>AudioBytes</strong> and <strong>pAudioData</strong> members of <strong><see cref = "SharpDX.XAudio2.AudioBuffer"/></strong> correspond to the size in bytes and contents of the 'data' RIFF chunk of the file being played. The contents of the chunk may need to be byte swapped when loading the file on Xbox 360. </p><p>Memory allocated to hold a <strong><see cref = "SharpDX.XAudio2.AudioBuffer"/></strong> or <strong><see cref = "SharpDX.XAudio2.BufferWma"/></strong> structure can be freed as soon as the <strong>IXAudio2SourceVoice::SubmitSourceBuffer</strong> call it is passed to returns. The data the structure points to (<strong>pAudioData</strong> and <strong>pDecodedPacketCumulativeBytes</strong>, respectively) can't be freed until the buffer completes (as signaled by the <strong>IXAudio2VoiceCallback::OnBufferEnd</strong> callback) or the voice is stopped or destroyed. </p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</doc-id>
    /// <unmanaged>XAUDIO2_BUFFER_FLAGS</unmanaged>
    /// <unmanaged-short>XAUDIO2_BUFFER_FLAGS</unmanaged-short>
    public enum BufferFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</doc-id>
        /// <unmanaged>XAUDIO2_END_OF_STREAM</unmanaged>
        /// <unmanaged-short>XAUDIO2_END_OF_STREAM</unmanaged-short>
        EndOfStream = unchecked ((System.Int32)(64)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Indicates the filter type.</p>
    /// </summary>
    /// <remarks>
    /// <strong>Note</strong>??Note that the DirectX SDK versions of XAUDIO2 do not support the <strong>LowPassOnePoleFilter</strong> or the <strong>HighPassOnePoleFilter</strong>.?
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_type</doc-id>
    /// <unmanaged>XAUDIO2_FILTER_TYPE</unmanaged>
    /// <unmanaged-short>XAUDIO2_FILTER_TYPE</unmanaged-short>
    public enum FilterType : System.Int32
    {
        /// <summary>
        /// <dd> <p>Attenuates (reduces) frequencies above the cutoff frequency.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_type</doc-id>
        /// <unmanaged>LowPassFilter</unmanaged>
        /// <unmanaged-short>LowPassFilter</unmanaged-short>
        LowPassFilter = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Attenuates frequencies outside a given range.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_type</doc-id>
        /// <unmanaged>BandPassFilter</unmanaged>
        /// <unmanaged-short>BandPassFilter</unmanaged-short>
        BandPassFilter = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Attenuates frequencies below the cutoff frequency.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_type</doc-id>
        /// <unmanaged>HighPassFilter</unmanaged>
        /// <unmanaged-short>HighPassFilter</unmanaged-short>
        HighPassFilter = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Attenuates frequencies inside a given range.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_type</doc-id>
        /// <unmanaged>NotchFilter</unmanaged>
        /// <unmanaged-short>NotchFilter</unmanaged-short>
        NotchFilter = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Attenuates frequencies above the cutoff frequency. This is a one-pole filter, and <strong><see cref = "SharpDX.XAudio2.FilterParameters"/></strong>.<strong>OneOverQ</strong> has no effect.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_type</doc-id>
        /// <unmanaged>LowPassOnePoleFilter</unmanaged>
        /// <unmanaged-short>LowPassOnePoleFilter</unmanaged-short>
        LowPassOnePoleFilter = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Attenuates frequencies below the cutoff frequency. This is a one-pole filter, and <strong><see cref = "SharpDX.XAudio2.FilterParameters"/></strong>.<strong>OneOverQ</strong> has no effect.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_type</doc-id>
        /// <unmanaged>HighPassOnePoleFilter</unmanaged>
        /// <unmanaged-short>HighPassOnePoleFilter</unmanaged-short>
        HighPassOnePoleFilter = unchecked ((System.Int32)(5))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>XAUDIO2_LOG_TYPE</unmanaged>
    /// <unmanaged-short>XAUDIO2_LOG_TYPE</unmanaged-short>
    public enum LogType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XAUDIO2_LOG_ERRORS</unmanaged>
        /// <unmanaged-short>XAUDIO2_LOG_ERRORS</unmanaged-short>
        Errors = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XAUDIO2_LOG_WARNINGS</unmanaged>
        /// <unmanaged-short>XAUDIO2_LOG_WARNINGS</unmanaged-short>
        Warnings = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XAUDIO2_LOG_INFO</unmanaged>
        /// <unmanaged-short>XAUDIO2_LOG_INFO</unmanaged-short>
        Information = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XAUDIO2_LOG_DETAIL</unmanaged>
        /// <unmanaged-short>XAUDIO2_LOG_DETAIL</unmanaged-short>
        Detail = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XAUDIO2_LOG_API_CALLS</unmanaged>
        /// <unmanaged-short>XAUDIO2_LOG_API_CALLS</unmanaged-short>
        ApiCalls = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XAUDIO2_LOG_FUNC_CALLS</unmanaged>
        /// <unmanaged-short>XAUDIO2_LOG_FUNC_CALLS</unmanaged-short>
        FunctionCalls = unchecked ((System.Int32)(32)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XAUDIO2_LOG_TIMING</unmanaged>
        /// <unmanaged-short>XAUDIO2_LOG_TIMING</unmanaged-short>
        Timing = unchecked ((System.Int32)(64)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XAUDIO2_LOG_LOCKS</unmanaged>
        /// <unmanaged-short>XAUDIO2_LOG_LOCKS</unmanaged-short>
        Locks = unchecked ((System.Int32)(128)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XAUDIO2_LOG_MEMORY</unmanaged>
        /// <unmanaged-short>XAUDIO2_LOG_MEMORY</unmanaged-short>
        Memory = unchecked ((System.Int32)(256)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XAUDIO2_LOG_STREAMING</unmanaged>
        /// <unmanaged-short>XAUDIO2_LOG_STREAMING</unmanaged-short>
        Streaming = unchecked ((System.Int32)(4096))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>XAUDIO2_PLAY_FLAGS</unmanaged>
    /// <unmanaged-short>XAUDIO2_PLAY_FLAGS</unmanaged-short>
    public enum PlayFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XAUDIO2_PLAY_TAILS</unmanaged>
        /// <unmanaged-short>XAUDIO2_PLAY_TAILS</unmanaged-short>
        Tails = unchecked ((System.Int32)(32)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>XAUDIO2_WINDOWS_PROCESSOR_SPECIFIER</unmanaged>
    /// <unmanaged-short>XAUDIO2_WINDOWS_PROCESSOR_SPECIFIER</unmanaged-short>
    public enum ProcessorSpecifier : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor1</unmanaged>
        /// <unmanaged-short>Processor1</unmanaged-short>
        Processor1 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor2</unmanaged>
        /// <unmanaged-short>Processor2</unmanaged-short>
        Processor2 = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor3</unmanaged>
        /// <unmanaged-short>Processor3</unmanaged-short>
        Processor3 = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor4</unmanaged>
        /// <unmanaged-short>Processor4</unmanaged-short>
        Processor4 = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor5</unmanaged>
        /// <unmanaged-short>Processor5</unmanaged-short>
        Processor5 = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor6</unmanaged>
        /// <unmanaged-short>Processor6</unmanaged-short>
        Processor6 = unchecked ((System.Int32)(32)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor7</unmanaged>
        /// <unmanaged-short>Processor7</unmanaged-short>
        Processor7 = unchecked ((System.Int32)(64)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor8</unmanaged>
        /// <unmanaged-short>Processor8</unmanaged-short>
        Processor8 = unchecked ((System.Int32)(128)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor9</unmanaged>
        /// <unmanaged-short>Processor9</unmanaged-short>
        Processor9 = unchecked ((System.Int32)(256)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor10</unmanaged>
        /// <unmanaged-short>Processor10</unmanaged-short>
        Processor10 = unchecked ((System.Int32)(512)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor11</unmanaged>
        /// <unmanaged-short>Processor11</unmanaged-short>
        Processor11 = unchecked ((System.Int32)(1024)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor12</unmanaged>
        /// <unmanaged-short>Processor12</unmanaged-short>
        Processor12 = unchecked ((System.Int32)(2048)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor13</unmanaged>
        /// <unmanaged-short>Processor13</unmanaged-short>
        Processor13 = unchecked ((System.Int32)(4096)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor14</unmanaged>
        /// <unmanaged-short>Processor14</unmanaged-short>
        Processor14 = unchecked ((System.Int32)(8192)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor15</unmanaged>
        /// <unmanaged-short>Processor15</unmanaged-short>
        Processor15 = unchecked ((System.Int32)(16384)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor16</unmanaged>
        /// <unmanaged-short>Processor16</unmanaged-short>
        Processor16 = unchecked ((System.Int32)(32768)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor17</unmanaged>
        /// <unmanaged-short>Processor17</unmanaged-short>
        Processor17 = unchecked ((System.Int32)(65536)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor18</unmanaged>
        /// <unmanaged-short>Processor18</unmanaged-short>
        Processor18 = unchecked ((System.Int32)(131072)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor19</unmanaged>
        /// <unmanaged-short>Processor19</unmanaged-short>
        Processor19 = unchecked ((System.Int32)(262144)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor20</unmanaged>
        /// <unmanaged-short>Processor20</unmanaged-short>
        Processor20 = unchecked ((System.Int32)(524288)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor21</unmanaged>
        /// <unmanaged-short>Processor21</unmanaged-short>
        Processor21 = unchecked ((System.Int32)(1048576)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor22</unmanaged>
        /// <unmanaged-short>Processor22</unmanaged-short>
        Processor22 = unchecked ((System.Int32)(2097152)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor23</unmanaged>
        /// <unmanaged-short>Processor23</unmanaged-short>
        Processor23 = unchecked ((System.Int32)(4194304)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor24</unmanaged>
        /// <unmanaged-short>Processor24</unmanaged-short>
        Processor24 = unchecked ((System.Int32)(8388608)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor25</unmanaged>
        /// <unmanaged-short>Processor25</unmanaged-short>
        Processor25 = unchecked ((System.Int32)(16777216)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor26</unmanaged>
        /// <unmanaged-short>Processor26</unmanaged-short>
        Processor26 = unchecked ((System.Int32)(33554432)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor27</unmanaged>
        /// <unmanaged-short>Processor27</unmanaged-short>
        Processor27 = unchecked ((System.Int32)(67108864)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor28</unmanaged>
        /// <unmanaged-short>Processor28</unmanaged-short>
        Processor28 = unchecked ((System.Int32)(134217728)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor29</unmanaged>
        /// <unmanaged-short>Processor29</unmanaged-short>
        Processor29 = unchecked ((System.Int32)(268435456)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor30</unmanaged>
        /// <unmanaged-short>Processor30</unmanaged-short>
        Processor30 = unchecked ((System.Int32)(536870912)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor31</unmanaged>
        /// <unmanaged-short>Processor31</unmanaged-short>
        Processor31 = unchecked ((System.Int32)(1073741824)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Processor32</unmanaged>
        /// <unmanaged-short>Processor32</unmanaged-short>
        Processor32 = unchecked ((System.Int32)(-2147483648)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XAUDIO2_ANY_PROCESSOR</unmanaged>
        /// <unmanaged-short>XAUDIO2_ANY_PROCESSOR</unmanaged-short>
        AnyProcessor = unchecked ((System.Int32)(-1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XAUDIO2_DEFAULT_PROCESSOR</unmanaged>
        /// <unmanaged-short>XAUDIO2_DEFAULT_PROCESSOR</unmanaged-short>
        DefaultProcessor = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Contains information about the creation flags, input channels, and sample rate of a voice.</p>
    /// </summary>
    /// <remarks>
    /// <p>Note the DirectX SDK versions of XAUDIO2 do not support the <strong>ActiveFlags</strong> member.</p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_details</doc-id>
    /// <unmanaged>XAUDIO2_VOICE_FLAGS</unmanaged>
    /// <unmanaged-short>XAUDIO2_VOICE_FLAGS</unmanaged-short>
    public enum VoiceFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p>Flags used to create the voice; see the individual voice interfaces for more information.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_details</doc-id>
        /// <unmanaged>XAUDIO2_VOICE_NOPITCH</unmanaged>
        /// <unmanaged-short>XAUDIO2_VOICE_NOPITCH</unmanaged-short>
        NoPitch = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Flags that are currently set on the voice.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_details</doc-id>
        /// <unmanaged>XAUDIO2_VOICE_NOSRC</unmanaged>
        /// <unmanaged-short>XAUDIO2_VOICE_NOSRC</unmanaged-short>
        NoSampleRateConversion = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The number of input channels the voice expects.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_details</doc-id>
        /// <unmanaged>XAUDIO2_VOICE_USEFILTER</unmanaged>
        /// <unmanaged-short>XAUDIO2_VOICE_USEFILTER</unmanaged-short>
        UseFilter = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>The input sample rate the voice expects.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_details</doc-id>
        /// <unmanaged>XAUDIO2_VOICE_NOSAMPLESPLAYED</unmanaged>
        /// <unmanaged-short>XAUDIO2_VOICE_NOSAMPLESPLAYED</unmanaged-short>
        Nosamplesplayed = unchecked ((System.Int32)(256)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>XAUDIO2_VOICE_SEND_FLAGS</unmanaged>
    /// <unmanaged-short>XAUDIO2_VOICE_SEND_FLAGS</unmanaged-short>
    public enum VoiceSendFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XAUDIO2_SEND_USEFILTER</unmanaged>
        /// <unmanaged-short>XAUDIO2_SEND_USEFILTER</unmanaged-short>
        UseFilter = unchecked ((System.Int32)(128)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>XAudio2 constants that specify default parameters, maximum values, and flags.</p><p> </p><p><strong>XAudio2 boundary values</strong></p>
    /// </summary>
    /// <doc-id>ee419230</doc-id>
    /// <unmanaged>XAUDIO2_FLAGS</unmanaged>
    /// <unmanaged-short>XAUDIO2_FLAGS</unmanaged-short>
    public enum XAudio2Flags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ee419230</doc-id>
        /// <unmanaged>XAUDIO2_DEBUG_ENGINE</unmanaged>
        /// <unmanaged-short>XAUDIO2_DEBUG_ENGINE</unmanaged-short>
        DebugEngine = unchecked ((System.Int32)(1)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}
}