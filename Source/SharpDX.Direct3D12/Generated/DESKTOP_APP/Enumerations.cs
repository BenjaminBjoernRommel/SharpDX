// <auto-generated/>

namespace SharpDX.Direct3D12
{
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP</unmanaged>
    /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP</unmanaged-short>
    public enum AutoBreadcrumbOperation : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_SETMARKER</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_SETMARKER</unmanaged-short>
        SetMarker = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT</unmanaged-short>
        Beginevent = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_ENDEVENT</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_ENDEVENT</unmanaged-short>
        Endevent = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED</unmanaged-short>
        DrawInstanced = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED</unmanaged-short>
        DrawIndexedInstanced = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT</unmanaged-short>
        Executeindirect = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_DISPATCH</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_DISPATCH</unmanaged-short>
        Dispatch = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION</unmanaged-short>
        CopyBufferRegion = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION</unmanaged-short>
        CopyTextureRegion = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE</unmanaged-short>
        CopyResource = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_COPYTILES</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_COPYTILES</unmanaged-short>
        CopyTiles = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE</unmanaged-short>
        Resolvesubresource = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW</unmanaged-short>
        Clearrendertargetview = unchecked ((System.Int32)(12)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW</unmanaged-short>
        Clearunorderedaccessview = unchecked ((System.Int32)(13)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW</unmanaged-short>
        Cleardepthstencilview = unchecked ((System.Int32)(14)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER</unmanaged-short>
        ResourceBarrier = unchecked ((System.Int32)(15)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE</unmanaged-short>
        Executebundle = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_PRESENT</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_PRESENT</unmanaged-short>
        Present = unchecked ((System.Int32)(17)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA</unmanaged-short>
        Resolvequerydata = unchecked ((System.Int32)(18)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION</unmanaged-short>
        Beginsubmission = unchecked ((System.Int32)(19)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION</unmanaged-short>
        Endsubmission = unchecked ((System.Int32)(20)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME</unmanaged-short>
        Decodeframe = unchecked ((System.Int32)(21)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES</unmanaged-short>
        Processframes = unchecked ((System.Int32)(22)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT</unmanaged-short>
        Atomiccopybufferuint = unchecked ((System.Int32)(23)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64</unmanaged-short>
        Atomiccopybufferuint64 = unchecked ((System.Int32)(24)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION</unmanaged-short>
        Resolvesubresourceregion = unchecked ((System.Int32)(25)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE</unmanaged-short>
        WriteBufferImmediate = unchecked ((System.Int32)(26)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1</unmanaged-short>
        Decodeframe1 = unchecked ((System.Int32)(27)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION</unmanaged-short>
        SetProtectedresourcesession = unchecked ((System.Int32)(28)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2</unmanaged-short>
        Decodeframe2 = unchecked ((System.Int32)(29)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1</unmanaged-short>
        Processframes1 = unchecked ((System.Int32)(30)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE</unmanaged-short>
        Buildraytracingaccelerationstructure = unchecked ((System.Int32)(31)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO</unmanaged-short>
        Emitraytracingaccelerationstructurepostbuildinfo = unchecked ((System.Int32)(32)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE</unmanaged-short>
        CopyRaytracingaccelerationstructure = unchecked ((System.Int32)(33)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS</unmanaged-short>
        Dispatchrays = unchecked ((System.Int32)(34)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND</unmanaged-short>
        InitializeMetacommand = unchecked ((System.Int32)(35)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND</unmanaged-short>
        Executemetacommand = unchecked ((System.Int32)(36)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION</unmanaged-short>
        Estimatemotion = unchecked ((System.Int32)(37)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP</unmanaged-short>
        Resolvemotionvectorheap = unchecked ((System.Int32)(38)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1</unmanaged>
        /// <unmanaged-short>D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1</unmanaged-short>
        SetPipelinestate1 = unchecked ((System.Int32)(39))}

    /// <summary>
    /// <p>Specifies RGB or alpha blending operations.</p>
    /// </summary>
    /// <remarks>
    /// <p>The runtime implements RGB blending and alpha blending separately. Therefore, blend state requires separate blend operations for RGB data and alpha data. These blend operations are specified in a <strong><see cref = "SharpDX.Direct3D12.RenderTargetBlendDescription"/></strong> structure. The two sources ?source 1 and source 2? are shown in the blending block diagram.</p><p>Blend state is used by the output-merger stage to determine how to blend together two RGB pixel values and two alpha values. The two RGB pixel values and two alpha values are the RGB pixel value and alpha value that the pixel shader outputs and the RGB pixel value and alpha value already in the output render target. The <strong><see cref = "SharpDX.Direct3D12.BlendOption"/></strong> value controls the data source that the blending stage uses to modulate values for the pixel shader, render target, or both. The <strong><see cref = "SharpDX.Direct3D12.BlendOperation"/></strong> value controls how the blending stage mathematically combines these modulated values.</p>
    /// </remarks>
    /// <doc-id>dn770340</doc-id>
    /// <unmanaged>D3D12_BLEND_OP</unmanaged>
    /// <unmanaged-short>D3D12_BLEND_OP</unmanaged-short>
    public enum BlendOperation : System.Int32
    {
        /// <summary>
        /// <dd> <p>Add source 1 and source 2.</p> </dd>
        /// </summary>
        /// <doc-id>dn770340</doc-id>
        /// <unmanaged>D3D12_BLEND_OP_ADD</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_OP_ADD</unmanaged-short>
        Add = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Subtract source 1 from source 2.</p> </dd>
        /// </summary>
        /// <doc-id>dn770340</doc-id>
        /// <unmanaged>D3D12_BLEND_OP_SUBTRACT</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_OP_SUBTRACT</unmanaged-short>
        Subtract = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Subtract source 2 from source 1.</p> </dd>
        /// </summary>
        /// <doc-id>dn770340</doc-id>
        /// <unmanaged>D3D12_BLEND_OP_REV_SUBTRACT</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_OP_REV_SUBTRACT</unmanaged-short>
        ReverseSubtract = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Find the minimum of source 1 and source 2.</p> </dd>
        /// </summary>
        /// <doc-id>dn770340</doc-id>
        /// <unmanaged>D3D12_BLEND_OP_MIN</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_OP_MIN</unmanaged-short>
        Minimum = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Find the maximum of source 1 and source 2.</p> </dd>
        /// </summary>
        /// <doc-id>dn770340</doc-id>
        /// <unmanaged>D3D12_BLEND_OP_MAX</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_OP_MAX</unmanaged-short>
        Maximum = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p>Specifies blend factors, which modulate values for the pixel shader and render target.</p>
    /// </summary>
    /// <remarks>
    /// <p>Source and destination blend operations are specified in a <strong><see cref = "SharpDX.Direct3D12.RenderTargetBlendDescription"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>dn770338</doc-id>
    /// <unmanaged>D3D12_BLEND</unmanaged>
    /// <unmanaged-short>D3D12_BLEND</unmanaged-short>
    public enum BlendOption : System.Int32
    {
        /// <summary>
        /// <dd> <p>The blend factor is (0, 0, 0, 0). No pre-blend operation.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_ZERO</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_ZERO</unmanaged-short>
        Zero = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The blend factor is (1, 1, 1, 1). No pre-blend operation.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_ONE</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_ONE</unmanaged-short>
        One = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The blend factor is (R?, G?, B?, A?), that is color data (RGB) from a pixel shader. No pre-blend operation.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_SRC_COLOR</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_SRC_COLOR</unmanaged-short>
        SourceColor = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>The blend factor is (1 - R?, 1 - G?, 1 - B?, 1 - A?), that is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_INV_SRC_COLOR</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_INV_SRC_COLOR</unmanaged-short>
        InverseSourceColor = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The blend factor is (A?, A?, A?, A?), that is alpha data (A) from a pixel shader. No pre-blend operation.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_SRC_ALPHA</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_SRC_ALPHA</unmanaged-short>
        SourceAlpha = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>The blend factor is ( 1 - A?, 1 - A?, 1 - A?, 1 - A?), that is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating 1 - A.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_INV_SRC_ALPHA</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_INV_SRC_ALPHA</unmanaged-short>
        InverseSourceAlpha = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>The blend factor is (Ad Ad Ad Ad), that is alpha data from a render target. No pre-blend operation.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_DEST_ALPHA</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_DEST_ALPHA</unmanaged-short>
        DestinationAlpha = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>The blend factor is (1 - Ad 1 - Ad 1 - Ad 1 - Ad), that is alpha data from a render target. The pre-blend operation inverts the data, generating 1 - A.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_INV_DEST_ALPHA</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_INV_DEST_ALPHA</unmanaged-short>
        InverseDestinationAlpha = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>The blend factor is (Rd, Gd, Bd, Ad), that is color data from a render target. No pre-blend operation.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_DEST_COLOR</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_DEST_COLOR</unmanaged-short>
        DestinationColor = unchecked ((System.Int32)(9)),
        /// <summary>
        /// <dd> <p>The blend factor is (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad), that is color data from a render target. The pre-blend operation inverts the data, generating 1 - RGB.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_INV_DEST_COLOR</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_INV_DEST_COLOR</unmanaged-short>
        InverseDestinationColor = unchecked ((System.Int32)(10)),
        /// <summary>
        /// <dd> <p>The blend factor is (f, f, f, 1); where f = min(A?, 1 - Ad). The pre-blend operation clamps the data to 1 or less. 
        /// </p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_SRC_ALPHA_SAT</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_SRC_ALPHA_SAT</unmanaged-short>
        SourceAlphaSaturate = unchecked ((System.Int32)(11)),
        /// <summary>
        /// <dd> <p>The blend factor is the blend factor set with <strong>ID3D12GraphicsCommandList::OMSetBlendFactor</strong>. No pre-blend operation.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_BLEND_FACTOR</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_BLEND_FACTOR</unmanaged-short>
        BlendFactor = unchecked ((System.Int32)(14)),
        /// <summary>
        /// <dd> <p>The blend factor is the blend factor set with <strong>ID3D12GraphicsCommandList::OMSetBlendFactor</strong>. The pre-blend operation inverts the blend factor, generating 1 - blend_factor.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_INV_BLEND_FACTOR</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_INV_BLEND_FACTOR</unmanaged-short>
        InverseBlendFactor = unchecked ((System.Int32)(15)),
        /// <summary>
        /// <dd> <p>The blend factor is data sources both as color data output by a pixel shader. There is no pre-blend operation. This blend factor supports dual-source color blending.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_SRC1_COLOR</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_SRC1_COLOR</unmanaged-short>
        SecondarySourceColor = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p>The blend factor is data sources both as color data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. This blend factor supports dual-source color blending.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_INV_SRC1_COLOR</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_INV_SRC1_COLOR</unmanaged-short>
        InverseSecondarySourceColor = unchecked ((System.Int32)(17)),
        /// <summary>
        /// <dd> <p>The blend factor is data sources as alpha data output by a pixel shader. There is no pre-blend operation. This blend factor supports dual-source color blending.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_SRC1_ALPHA</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_SRC1_ALPHA</unmanaged-short>
        SecondarySourceAlpha = unchecked ((System.Int32)(18)),
        /// <summary>
        /// <dd> <p>The blend factor is data sources as alpha data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - A. This blend factor supports dual-source color blending.</p> </dd>
        /// </summary>
        /// <doc-id>dn770338</doc-id>
        /// <unmanaged>D3D12_BLEND_INV_SRC1_ALPHA</unmanaged>
        /// <unmanaged-short>D3D12_BLEND_INV_SRC1_ALPHA</unmanaged-short>
        InverseSecondarySourceAlpha = unchecked ((System.Int32)(19))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Identifies how to view a buffer resource.</p>
    /// </summary>
    /// <remarks>
    /// <p> This enumeration is used by <strong><see cref = "SharpDX.Direct3D12.BufferResource"/></strong>. </p>
    /// </remarks>
    /// <doc-id>dn986719</doc-id>
    /// <unmanaged>D3D12_BUFFER_SRV_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_BUFFER_SRV_FLAGS</unmanaged-short>
    public enum BufferShaderResourceViewFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p> Indicates a default view. </p> </dd>
        /// </summary>
        /// <doc-id>dn986719</doc-id>
        /// <unmanaged>D3D12_BUFFER_SRV_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_BUFFER_SRV_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> View the buffer as raw. For more info about raw viewing of buffers, see Raw Views of Buffers. </p> </dd>
        /// </summary>
        /// <doc-id>dn986719</doc-id>
        /// <unmanaged>D3D12_BUFFER_SRV_FLAG_RAW</unmanaged>
        /// <unmanaged-short>D3D12_BUFFER_SRV_FLAG_RAW</unmanaged-short>
        Raw = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Identifies unordered-access view options for a buffer resource.</p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used in the <strong><see cref = "SharpDX.Direct3D12.BufferResource"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn986720</doc-id>
    /// <unmanaged>D3D12_BUFFER_UAV_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_BUFFER_UAV_FLAGS</unmanaged-short>
    public enum BufferUnorderedAccessViewFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p> Indicates a default view. </p> </dd>
        /// </summary>
        /// <doc-id>dn986720</doc-id>
        /// <unmanaged>D3D12_BUFFER_UAV_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_BUFFER_UAV_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Resource contains raw, unstructured data.  Requires the UAV format to be <strong>DXGI_FORMAT_R32_TYPELESS</strong>. For more info about raw viewing of buffers, see Raw Views of Buffers. </p> </dd>
        /// </summary>
        /// <doc-id>dn986720</doc-id>
        /// <unmanaged>D3D12_BUFFER_UAV_FLAG_RAW</unmanaged>
        /// <unmanaged-short>D3D12_BUFFER_UAV_FLAG_RAW</unmanaged-short>
        Raw = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies what to clear from the depth stencil view.</p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by <strong>ID3D12GraphicsCommandList::ClearDepthStencilView</strong>. The flags can be combined to clear all. </p>
    /// </remarks>
    /// <doc-id>dn986721</doc-id>
    /// <unmanaged>D3D12_CLEAR_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_CLEAR_FLAGS</unmanaged-short>
    public enum ClearFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates the depth buffer should be cleared.</p> </dd>
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_CLEAR_FLAG_DEPTH</unmanaged>
        /// <unmanaged-short>D3D12_CLEAR_FLAG_DEPTH</unmanaged-short>
        FlagsDepth = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Indicates the stencil buffer should be cleared.</p> </dd>
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_CLEAR_FLAG_STENCIL</unmanaged>
        /// <unmanaged-short>D3D12_CLEAR_FLAG_STENCIL</unmanaged-short>
        FlagsStencil = unchecked ((System.Int32)(2)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Identifies which components of each pixel of a render target are writable during blending.</p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.RenderTargetBlendDescription"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn770347</doc-id>
    /// <unmanaged>D3D12_COLOR_WRITE_ENABLE</unmanaged>
    /// <unmanaged-short>D3D12_COLOR_WRITE_ENABLE</unmanaged-short>
    public enum ColorWriteMaskFlags : System.Byte
    {
        /// <summary>
        /// <dd> <p>Allow data to be stored in the red component.</p> </dd>
        /// </summary>
        /// <doc-id>dn770347</doc-id>
        /// <unmanaged>D3D12_COLOR_WRITE_ENABLE_RED</unmanaged>
        /// <unmanaged-short>D3D12_COLOR_WRITE_ENABLE_RED</unmanaged-short>
        Red = unchecked ((System.Byte)(1)),
        /// <summary>
        /// <dd> <p>Allow data to be stored in the green component.</p> </dd>
        /// </summary>
        /// <doc-id>dn770347</doc-id>
        /// <unmanaged>D3D12_COLOR_WRITE_ENABLE_GREEN</unmanaged>
        /// <unmanaged-short>D3D12_COLOR_WRITE_ENABLE_GREEN</unmanaged-short>
        Green = unchecked ((System.Byte)(2)),
        /// <summary>
        /// <dd> <p>Allow data to be stored in the blue component.</p> </dd>
        /// </summary>
        /// <doc-id>dn770347</doc-id>
        /// <unmanaged>D3D12_COLOR_WRITE_ENABLE_BLUE</unmanaged>
        /// <unmanaged-short>D3D12_COLOR_WRITE_ENABLE_BLUE</unmanaged-short>
        Blue = unchecked ((System.Byte)(4)),
        /// <summary>
        /// <dd> <p>Allow data to be stored in the alpha component.</p> </dd>
        /// </summary>
        /// <doc-id>dn770347</doc-id>
        /// <unmanaged>D3D12_COLOR_WRITE_ENABLE_ALPHA</unmanaged>
        /// <unmanaged-short>D3D12_COLOR_WRITE_ENABLE_ALPHA</unmanaged-short>
        Alpha = unchecked ((System.Byte)(8)),
        /// <summary>
        /// <dd> <p>Allow data to be stored in all components.</p> </dd>
        /// </summary>
        /// <doc-id>dn770347</doc-id>
        /// <unmanaged>D3D12_COLOR_WRITE_ENABLE_ALL</unmanaged>
        /// <unmanaged-short>D3D12_COLOR_WRITE_ENABLE_ALL</unmanaged-short>
        All = unchecked ((System.Byte)(15))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_COMMAND_LIST_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_COMMAND_LIST_FLAGS</unmanaged-short>
    public enum CommandListFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_COMMAND_LIST_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_LIST_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Used to determine which kinds of command lists are capable of supporting various operations. For example, whether a command list supports immediate writes. </p>
    /// </summary>
    /// <doc-id>mt844806</doc-id>
    /// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_COMMAND_LIST_SUPPORT_FLAGS</unmanaged-short>
    public enum CommandListSupportFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p>Specifies that no command list supports the operation in question.</p> </dd>
        /// </summary>
        /// <doc-id>mt844806</doc-id>
        /// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Specifies that direct command lists can support the operation in question.</p> </dd>
        /// </summary>
        /// <doc-id>mt844806</doc-id>
        /// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT</unmanaged-short>
        Direct = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Specifies that command list bundles can support the operation in question.</p> </dd>
        /// </summary>
        /// <doc-id>mt844806</doc-id>
        /// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE</unmanaged-short>
        Bundle = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Specifies that compute command lists can support the operation in question.</p> </dd>
        /// </summary>
        /// <doc-id>mt844806</doc-id>
        /// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE</unmanaged-short>
        Compute = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Specifies that copy command lists can support the operation in question.</p> </dd>
        /// </summary>
        /// <doc-id>mt844806</doc-id>
        /// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY</unmanaged-short>
        Copy = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>Specifies that video-decode command lists can support the operation in question.</p> </dd>
        /// </summary>
        /// <doc-id>mt844806</doc-id>
        /// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE</unmanaged-short>
        VideoDecode = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p>Specifies that video-processing command lists can support the operation is question.</p> </dd>
        /// </summary>
        /// <doc-id>mt844806</doc-id>
        /// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS</unmanaged-short>
        VideoProcess = unchecked ((System.Int32)(32))}

    /// <summary>
    /// <p>Specifies the type of a command list.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the following methods:</p><ul> <li> <strong>CreateCommandAllocator</strong> </li> <li> <strong>CreateCommandQueue</strong> </li> <li> <strong>CreateCommandList</strong> </li> </ul>
    /// </remarks>
    /// <doc-id>dn770348</doc-id>
    /// <unmanaged>D3D12_COMMAND_LIST_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_COMMAND_LIST_TYPE</unmanaged-short>
    public enum CommandListType : System.Int32
    {
        /// <summary>
        /// <dd> <p>Specifies a command buffer that the GPU can execute. A direct command list doesn't inherit any GPU state.  </p> </dd>
        /// </summary>
        /// <doc-id>dn770348</doc-id>
        /// <unmanaged>D3D12_COMMAND_LIST_TYPE_DIRECT</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_LIST_TYPE_DIRECT</unmanaged-short>
        Direct = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Specifies a command buffer that can be executed only directly via a direct command list. A bundle command list inherits all GPU state (except for the currently set pipeline state object and primitive topology).</p> </dd>
        /// </summary>
        /// <doc-id>dn770348</doc-id>
        /// <unmanaged>D3D12_COMMAND_LIST_TYPE_BUNDLE</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_LIST_TYPE_BUNDLE</unmanaged-short>
        Bundle = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Specifies a command buffer for computing. </p> </dd>
        /// </summary>
        /// <doc-id>dn770348</doc-id>
        /// <unmanaged>D3D12_COMMAND_LIST_TYPE_COMPUTE</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_LIST_TYPE_COMPUTE</unmanaged-short>
        Compute = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Specifies a command buffer for copying (drawing).</p> </dd>
        /// </summary>
        /// <doc-id>dn770348</doc-id>
        /// <unmanaged>D3D12_COMMAND_LIST_TYPE_COPY</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_LIST_TYPE_COPY</unmanaged-short>
        Copy = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn770348</doc-id>
        /// <unmanaged>D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE</unmanaged-short>
        VideoDecode = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn770348</doc-id>
        /// <unmanaged>D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS</unmanaged-short>
        VideoProcess = unchecked ((System.Int32)(5))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_COMMAND_POOL_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_COMMAND_POOL_FLAGS</unmanaged-short>
    public enum CommandPoolFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_COMMAND_POOL_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_POOL_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies flags to be used when creating a command queue.</p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.CommandQueueDescription"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn986722</doc-id>
    /// <unmanaged>D3D12_COMMAND_QUEUE_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_COMMAND_QUEUE_FLAGS</unmanaged-short>
    public enum CommandQueueFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates a default command queue.</p> </dd>
        /// </summary>
        /// <doc-id>dn986722</doc-id>
        /// <unmanaged>D3D12_COMMAND_QUEUE_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_QUEUE_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Indicates that the GPU timeout should be disabled for this command queue.</p> </dd>
        /// </summary>
        /// <doc-id>dn986722</doc-id>
        /// <unmanaged>D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT</unmanaged-short>
        DisableGpuTimeout = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Defines priority levels for a command queue.</p>
    /// </summary>
    /// <remarks>
    /// <p> This enumeration is used by the <strong>Priority</strong> member of the <strong><see cref = "SharpDX.Direct3D12.CommandQueueDescription"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn986723</doc-id>
    /// <unmanaged>D3D12_COMMAND_QUEUE_PRIORITY</unmanaged>
    /// <unmanaged-short>D3D12_COMMAND_QUEUE_PRIORITY</unmanaged-short>
    public enum CommandQueuePriority : System.Int32
    {
        /// <summary>
        /// <dd> <p>Normal priority.</p> </dd>
        /// </summary>
        /// <doc-id>dn986723</doc-id>
        /// <unmanaged>D3D12_COMMAND_QUEUE_PRIORITY_NORMAL</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_QUEUE_PRIORITY_NORMAL</unmanaged-short>
        Normal = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>High priority.</p> </dd>
        /// </summary>
        /// <doc-id>dn986723</doc-id>
        /// <unmanaged>D3D12_COMMAND_QUEUE_PRIORITY_HIGH</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_QUEUE_PRIORITY_HIGH</unmanaged-short>
        High = unchecked ((System.Int32)(100)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986723</doc-id>
        /// <unmanaged>D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME</unmanaged-short>
        GlobalRealtime = unchecked ((System.Int32)(10000))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_COMMAND_RECORDER_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_COMMAND_RECORDER_FLAGS</unmanaged-short>
    public enum CommandRecorderFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_COMMAND_RECORDER_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_COMMAND_RECORDER_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Specifies comparison options.</p>
    /// </summary>
    /// <remarks>
    /// <p> A comparison option determines how the runtime compares source (new) data against destination (existing) data before storing the new data. The comparison option is declared in a description before an object is created. The API allows you to set a comparison option for </p><ul> <li> a depth-stencil buffer (<strong><see cref = "SharpDX.Direct3D12.DepthStencilStateDescription"/></strong>) </li> <li> depth-stencil operations (<strong><see cref = "SharpDX.Direct3D12.DepthStencilOperationDescription"/></strong>) </li> <li> sampler state (<strong><see cref = "SharpDX.Direct3D12.SamplerStateDescription"/></strong>) </li> </ul>
    /// </remarks>
    /// <doc-id>dn770349</doc-id>
    /// <unmanaged>D3D12_COMPARISON_FUNC</unmanaged>
    /// <unmanaged-short>D3D12_COMPARISON_FUNC</unmanaged-short>
    public enum Comparison : System.Int32
    {
        /// <summary>
        /// <dd> <p>Never pass the comparison.</p> </dd>
        /// </summary>
        /// <doc-id>dn770349</doc-id>
        /// <unmanaged>D3D12_COMPARISON_FUNC_NEVER</unmanaged>
        /// <unmanaged-short>D3D12_COMPARISON_FUNC_NEVER</unmanaged-short>
        Never = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>If the source data is less than the destination data, the comparison passes.</p> </dd>
        /// </summary>
        /// <doc-id>dn770349</doc-id>
        /// <unmanaged>D3D12_COMPARISON_FUNC_LESS</unmanaged>
        /// <unmanaged-short>D3D12_COMPARISON_FUNC_LESS</unmanaged-short>
        Less = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>If the source data is equal to the destination data, the comparison passes.</p> </dd>
        /// </summary>
        /// <doc-id>dn770349</doc-id>
        /// <unmanaged>D3D12_COMPARISON_FUNC_EQUAL</unmanaged>
        /// <unmanaged-short>D3D12_COMPARISON_FUNC_EQUAL</unmanaged-short>
        Equal = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>If the source data is less than or equal to the destination data, the comparison passes.</p> </dd>
        /// </summary>
        /// <doc-id>dn770349</doc-id>
        /// <unmanaged>D3D12_COMPARISON_FUNC_LESS_EQUAL</unmanaged>
        /// <unmanaged-short>D3D12_COMPARISON_FUNC_LESS_EQUAL</unmanaged-short>
        LessEqual = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>If the source data is greater than the destination data, the comparison passes.</p> </dd>
        /// </summary>
        /// <doc-id>dn770349</doc-id>
        /// <unmanaged>D3D12_COMPARISON_FUNC_GREATER</unmanaged>
        /// <unmanaged-short>D3D12_COMPARISON_FUNC_GREATER</unmanaged-short>
        Greater = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>If the source data is not equal to the destination data, the comparison passes.</p> </dd>
        /// </summary>
        /// <doc-id>dn770349</doc-id>
        /// <unmanaged>D3D12_COMPARISON_FUNC_NOT_EQUAL</unmanaged>
        /// <unmanaged-short>D3D12_COMPARISON_FUNC_NOT_EQUAL</unmanaged-short>
        NotEqual = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>If the source data is greater than or equal to the destination data, the comparison passes.</p> </dd>
        /// </summary>
        /// <doc-id>dn770349</doc-id>
        /// <unmanaged>D3D12_COMPARISON_FUNC_GREATER_EQUAL</unmanaged>
        /// <unmanaged-short>D3D12_COMPARISON_FUNC_GREATER_EQUAL</unmanaged-short>
        GreaterEqual = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>Always pass the comparison.</p> </dd>
        /// </summary>
        /// <doc-id>dn770349</doc-id>
        /// <unmanaged>D3D12_COMPARISON_FUNC_ALWAYS</unmanaged>
        /// <unmanaged-short>D3D12_COMPARISON_FUNC_ALWAYS</unmanaged-short>
        Always = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p>Identifies whether conservative rasterization is on or off.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.RasterizerStateDescription"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn859367</doc-id>
    /// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_MODE</unmanaged>
    /// <unmanaged-short>D3D12_CONSERVATIVE_RASTERIZATION_MODE</unmanaged-short>
    public enum ConservativeRasterizationMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Conservative rasterization is off.</p> </dd>
        /// </summary>
        /// <doc-id>dn859367</doc-id>
        /// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF</unmanaged>
        /// <unmanaged-short>D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF</unmanaged-short>
        Off = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Conservative rasterization is on.</p> </dd>
        /// </summary>
        /// <doc-id>dn859367</doc-id>
        /// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON</unmanaged>
        /// <unmanaged-short>D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON</unmanaged-short>
        On = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Identifies the tier level of conservative rasterization.</p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.FeatureDataD3D12Options"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn859368</doc-id>
    /// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_TIER</unmanaged>
    /// <unmanaged-short>D3D12_CONSERVATIVE_RASTERIZATION_TIER</unmanaged-short>
    public enum ConservativeRasterizationTier : System.Int32
    {
        /// <summary>
        /// <dd> <p>Conservative rasterization is not supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859368</doc-id>
        /// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED</unmanaged-short>
        TierNotSupported = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Tier 1 enforces a maximum 1/2 pixel uncertainty region and does not support post-snap degenerates. This is good for tiled rendering, a texture atlas, light map generation and sub-pixel shadow maps.</p> </dd>
        /// </summary>
        /// <doc-id>dn859368</doc-id>
        /// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_TIER_1</unmanaged>
        /// <unmanaged-short>D3D12_CONSERVATIVE_RASTERIZATION_TIER_1</unmanaged-short>
        Tier1 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Tier 2 reduces the maximum uncertainty region to 1/256 and requires post-snap degenerates not be culled. This tier is helpful for CPU-based algorithm acceleration (such as voxelization).</p> </dd>
        /// </summary>
        /// <doc-id>dn859368</doc-id>
        /// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_TIER_2</unmanaged>
        /// <unmanaged-short>D3D12_CONSERVATIVE_RASTERIZATION_TIER_2</unmanaged-short>
        Tier2 = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> Tier 3 maintains a maximum 1/256 uncertainty region and adds support for inner input coverage. Inner input coverage adds the new value <code>SV_InnerCoverage</code> to High Level Shading Language (HLSL). This is a 32-bit scalar integer that can be specified on input to a pixel shader, and represents the underestimated conservative rasterization information (that is, whether a pixel is guaranteed-to-be-fully covered). This tier is helpful for occlusion culling.</p> </dd>
        /// </summary>
        /// <doc-id>dn859368</doc-id>
        /// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_TIER_3</unmanaged>
        /// <unmanaged-short>D3D12_CONSERVATIVE_RASTERIZATION_TIER_3</unmanaged-short>
        Tier3 = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Specifies the CPU-page properties for the heap.</p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.HeapProperties"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn986725</doc-id>
    /// <unmanaged>D3D12_CPU_PAGE_PROPERTY</unmanaged>
    /// <unmanaged-short>D3D12_CPU_PAGE_PROPERTY</unmanaged-short>
    public enum CpuPageProperty : System.Int32
    {
        /// <summary>
        /// <dd> <p>The CPU-page property is unknown.</p> </dd>
        /// </summary>
        /// <doc-id>dn986725</doc-id>
        /// <unmanaged>D3D12_CPU_PAGE_PROPERTY_UNKNOWN</unmanaged>
        /// <unmanaged-short>D3D12_CPU_PAGE_PROPERTY_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The CPU cannot access the heap, therefore no page properties are available. </p> </dd>
        /// </summary>
        /// <doc-id>dn986725</doc-id>
        /// <unmanaged>D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE</unmanaged>
        /// <unmanaged-short>D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE</unmanaged-short>
        NotAvailable = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The CPU-page property is write-combined.</p> </dd>
        /// </summary>
        /// <doc-id>dn986725</doc-id>
        /// <unmanaged>D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE</unmanaged>
        /// <unmanaged-short>D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE</unmanaged-short>
        WriteCombine = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The CPU-page property is write-back.</p> </dd>
        /// </summary>
        /// <doc-id>dn986725</doc-id>
        /// <unmanaged>D3D12_CPU_PAGE_PROPERTY_WRITE_BACK</unmanaged>
        /// <unmanaged-short>D3D12_CPU_PAGE_PROPERTY_WRITE_BACK</unmanaged-short>
        WriteBack = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p> Specifies the level of sharing across nodes of an adapter, such as Tier 1 Emulated, Tier 1, or Tier 2. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong>CrossNodeSharingTier</strong> member of the <strong><see cref = "SharpDX.Direct3D12.FeatureDataD3D12Options"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn914408</doc-id>
    /// <unmanaged>D3D12_CROSS_NODE_SHARING_TIER</unmanaged>
    /// <unmanaged-short>D3D12_CROSS_NODE_SHARING_TIER</unmanaged-short>
    public enum CrossNodeSharingTier : System.Int32
    {
        /// <summary>
        /// <dd> <p> If an adapter only has 1 node, then cross-node sharing doesn't apply, so the <strong>CrossNodeSharingTier</strong> member of the <strong><see cref = "SharpDX.Direct3D12.FeatureDataD3D12Options"/></strong> structure is set to D3D12_CROSS_NODE_SHARING_NOT_SUPPORTED. </p> </dd>
        /// </summary>
        /// <doc-id>dn914408</doc-id>
        /// <unmanaged>D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED</unmanaged-short>
        TierNotSupported = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Tier 1 Emulated. Devices that set the <strong>CrossNodeSharingTier</strong> member of the <strong><see cref = "SharpDX.Direct3D12.FeatureDataD3D12Options"/></strong> structure to D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED have Tier 1 support. However, drivers stage these copy operations through a driver-internal system memory allocation. This will cause these copy operations to consume time on the destination GPU as well as the source. </p> </dd>
        /// </summary>
        /// <doc-id>dn914408</doc-id>
        /// <unmanaged>D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED</unmanaged>
        /// <unmanaged-short>D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED</unmanaged-short>
        Tier1Emulated = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Tier 1. Devices that set the <strong>CrossNodeSharingTier</strong> member of the <strong><see cref = "SharpDX.Direct3D12.FeatureDataD3D12Options"/></strong> structure to D3D12_CROSS_NODE_SHARING_TIER_1 only support the following cross-node copy operations: </p> <ul> <li> <strong>ID3D12CommandList::CopyBufferRegion</strong> </li> <li> <strong>ID3D12CommandList::CopyTextureRegion</strong> </li> <li> <strong>ID3D12CommandList::CopyResource</strong> </li> </ul> <p> Additionally, the cross-node resource must be the destination of the copy operation. </p> </dd>
        /// </summary>
        /// <doc-id>dn914408</doc-id>
        /// <unmanaged>D3D12_CROSS_NODE_SHARING_TIER_1</unmanaged>
        /// <unmanaged-short>D3D12_CROSS_NODE_SHARING_TIER_1</unmanaged-short>
        Tier1 = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> Tier 2. Devices that set the <strong>CrossNodeSharingTier</strong> member of the <strong><see cref = "SharpDX.Direct3D12.FeatureDataD3D12Options"/></strong> structure to D3D12_CROSS_NODE_SHARING_TIER_2 support all operations across nodes, except for the following: </p> <ul> <li> Render target views. </li> <li> Depth stencil views. </li> <li> UAV atomic operations. Similar to CPU/GPU interop, shaders may perform UAV atomic operations; however, no atomicity across adapters is guaranteed. </li> </ul> <p> Applications can retrieve the node where a resource/heap exists from the <strong><see cref = "SharpDX.Direct3D12.HeapDescription"/></strong> structure. These values are retrievable for opened resources. The runtime performs the appropriate re-mapping in case the 2 devices are using different UMD-specified node re-mappings. </p> </dd>
        /// </summary>
        /// <doc-id>dn914408</doc-id>
        /// <unmanaged>D3D12_CROSS_NODE_SHARING_TIER_2</unmanaged>
        /// <unmanaged-short>D3D12_CROSS_NODE_SHARING_TIER_2</unmanaged-short>
        Tier2 = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn914408</doc-id>
        /// <unmanaged>D3D12_CROSS_NODE_SHARING_TIER_3</unmanaged>
        /// <unmanaged-short>D3D12_CROSS_NODE_SHARING_TIER_3</unmanaged-short>
        Tier3 = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p>Specifies triangles facing a particular direction are not drawn.</p>
    /// </summary>
    /// <remarks>
    /// <p> Cull mode is specified in a <strong><see cref = "SharpDX.Direct3D12.RasterizerStateDescription"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn770354</doc-id>
    /// <unmanaged>D3D12_CULL_MODE</unmanaged>
    /// <unmanaged-short>D3D12_CULL_MODE</unmanaged-short>
    public enum CullMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Always draw all triangles.</p> </dd>
        /// </summary>
        /// <doc-id>dn770354</doc-id>
        /// <unmanaged>D3D12_CULL_MODE_NONE</unmanaged>
        /// <unmanaged-short>D3D12_CULL_MODE_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Do not draw triangles that are front-facing.</p> </dd>
        /// </summary>
        /// <doc-id>dn770354</doc-id>
        /// <unmanaged>D3D12_CULL_MODE_FRONT</unmanaged>
        /// <unmanaged-short>D3D12_CULL_MODE_FRONT</unmanaged-short>
        Front = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Do not draw triangles that are back-facing.</p> </dd>
        /// </summary>
        /// <doc-id>dn770354</doc-id>
        /// <unmanaged>D3D12_CULL_MODE_BACK</unmanaged>
        /// <unmanaged-short>D3D12_CULL_MODE_BACK</unmanaged-short>
        Back = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Indicates the debug parameter type used by <strong>ID3D12DebugCommandList1::SetDebugParameter</strong> and <strong>ID3D12DebugCommandList1::GetDebugParameter</strong>.</p>
    /// </summary>
    /// <doc-id>mt762980</doc-id>
    /// <unmanaged>D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE</unmanaged-short>
    public enum DebugCommandListParameterType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt762980</doc-id>
        /// <unmanaged>D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS</unmanaged>
        /// <unmanaged-short>D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS</unmanaged-short>
        GpuBasedValidationSettings = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Specifies the data type of the memory pointed to by the <em>pData</em> parameter of <strong>ID3D12DebugDevice1::SetDebugParameter</strong> and <strong>ID3D12DebugDevice1::GetDebugParameter</strong>.</p>
    /// </summary>
    /// <doc-id>mt762982</doc-id>
    /// <unmanaged>D3D12_DEBUG_DEVICE_PARAMETER_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_DEBUG_DEVICE_PARAMETER_TYPE</unmanaged-short>
    public enum DebugDeviceParameterType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt762982</doc-id>
        /// <unmanaged>D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS</unmanaged-short>
        FeatureFlags = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt762982</doc-id>
        /// <unmanaged>D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS</unmanaged>
        /// <unmanaged-short>D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS</unmanaged-short>
        GpuBasedValidationSettings = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt762982</doc-id>
        /// <unmanaged>D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR</unmanaged>
        /// <unmanaged-short>D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR</unmanaged-short>
        GpuSlowdownPerformanceFactor = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Flags for optional D3D12 Debug Layer features.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by <strong>ID3D12DebugDevice1::SetDebugParameter</strong> and <strong>ID3D12DebugDevice1::GetDebugParameter</strong>.</p>
    /// </remarks>
    /// <doc-id>dn950141</doc-id>
    /// <unmanaged>D3D12_DEBUG_FEATURE</unmanaged>
    /// <unmanaged-short>D3D12_DEBUG_FEATURE</unmanaged-short>
    public enum DebugFeature : System.Int32
    {
        /// <summary>
        /// <dd> <p>The default. No optional Debug Layer features.</p> </dd>
        /// </summary>
        /// <doc-id>dn950141</doc-id>
        /// <unmanaged>D3D12_DEBUG_FEATURE_NONE</unmanaged>
        /// <unmanaged-short>D3D12_DEBUG_FEATURE_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The Debug Layer is allowed to deliberately change functional behavior of an application in order to help identify potential errors.  By default, the Debug Layer allows most invalid API usage to run the natural course.</p> </dd>
        /// </summary>
        /// <doc-id>dn950141</doc-id>
        /// <unmanaged>D3D12_DEBUG_FEATURE_ALLOW_BEHAVIOR_CHANGING_DEBUG_AIDS</unmanaged>
        /// <unmanaged-short>D3D12_DEBUG_FEATURE_ALLOW_BEHAVIOR_CHANGING_DEBUG_AIDS</unmanaged-short>
        AllowBehaviorChangingDebugAids = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Performs additional resource state validation of resources set in descriptors at the time <strong>ID3D12CommandQueue::ExecuteCommandLists</strong> is called.  By design descriptors can be changed even after submitting command lists assuming proper synchronization.  Conservative resource state tracking ignores this allowance and validates all resources used in descriptor tables when <strong>ExecuteCommandLists</strong> is called.  The result may be false validation errors.</p> </dd>
        /// </summary>
        /// <doc-id>dn950141</doc-id>
        /// <unmanaged>D3D12_DEBUG_FEATURE_CONSERVATIVE_RESOURCE_STATE_TRACKING</unmanaged>
        /// <unmanaged-short>D3D12_DEBUG_FEATURE_CONSERVATIVE_RESOURCE_STATE_TRACKING</unmanaged-short>
        ConservativeResourceStateTracking = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Disables validation of bundle commands by virtually injecting checks into the calling command list validation paths.</p> </dd>
        /// </summary>
        /// <doc-id>dn950141</doc-id>
        /// <unmanaged>D3D12_DEBUG_FEATURE_DISABLE_VIRTUALIZED_BUNDLES_VALIDATION</unmanaged>
        /// <unmanaged-short>D3D12_DEBUG_FEATURE_DISABLE_VIRTUALIZED_BUNDLES_VALIDATION</unmanaged-short>
        DisableVirtualizedBundlesValidation = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Internal use only.</p> </dd>
        /// </summary>
        /// <doc-id>dn950141</doc-id>
        /// <unmanaged>D3D12_DEBUG_FEATURE_VALID_MASK</unmanaged>
        /// <unmanaged-short>D3D12_DEBUG_FEATURE_VALID_MASK</unmanaged-short>
        ValidMask = unchecked ((System.Int32)(7))}

    /// <summary>
    /// <p>Specifies how to access a resource used in a depth-stencil view.</p>
    /// </summary>
    /// <remarks>
    /// <p>Specify one of the values in this enumeration in the <strong>ViewDimension</strong> member of a <strong><see cref = "SharpDX.Direct3D12.DepthStencilViewDescription"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>dn770361</doc-id>
    /// <unmanaged>D3D12_DSV_DIMENSION</unmanaged>
    /// <unmanaged-short>D3D12_DSV_DIMENSION</unmanaged-short>
    public enum DepthStencilViewDimension : System.Int32
    {
        /// <summary>
        /// <dd> <p><strong>D3D12_DSV_DIMENSION_UNKNOWN</strong> is not a valid value for <strong><see cref = "SharpDX.Direct3D12.DepthStencilViewDescription"/></strong> and is not used.</p> </dd>
        /// </summary>
        /// <doc-id>dn770361</doc-id>
        /// <unmanaged>D3D12_DSV_DIMENSION_UNKNOWN</unmanaged>
        /// <unmanaged-short>D3D12_DSV_DIMENSION_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The resource will be accessed as a 1D texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770361</doc-id>
        /// <unmanaged>D3D12_DSV_DIMENSION_TEXTURE1D</unmanaged>
        /// <unmanaged-short>D3D12_DSV_DIMENSION_TEXTURE1D</unmanaged-short>
        Texture1D = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The resource will be accessed as an array of 1D textures.</p> </dd>
        /// </summary>
        /// <doc-id>dn770361</doc-id>
        /// <unmanaged>D3D12_DSV_DIMENSION_TEXTURE1DARRAY</unmanaged>
        /// <unmanaged-short>D3D12_DSV_DIMENSION_TEXTURE1DARRAY</unmanaged-short>
        Texture1DArray = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The resource will be accessed as a 2D texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770361</doc-id>
        /// <unmanaged>D3D12_DSV_DIMENSION_TEXTURE2D</unmanaged>
        /// <unmanaged-short>D3D12_DSV_DIMENSION_TEXTURE2D</unmanaged-short>
        Texture2D = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>The resource will be accessed as an array of 2D textures.</p> </dd>
        /// </summary>
        /// <doc-id>dn770361</doc-id>
        /// <unmanaged>D3D12_DSV_DIMENSION_TEXTURE2DARRAY</unmanaged>
        /// <unmanaged-short>D3D12_DSV_DIMENSION_TEXTURE2DARRAY</unmanaged-short>
        Texture2DArray = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The resource will be accessed as a 2D texture with multi sampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn770361</doc-id>
        /// <unmanaged>D3D12_DSV_DIMENSION_TEXTURE2DMS</unmanaged>
        /// <unmanaged-short>D3D12_DSV_DIMENSION_TEXTURE2DMS</unmanaged-short>
        Texture2DMultisampled = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>The resource will be accessed as an array of 2D textures with multi sampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn770361</doc-id>
        /// <unmanaged>D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY</unmanaged>
        /// <unmanaged-short>D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY</unmanaged-short>
        Texture2DMultisampledArray = unchecked ((System.Int32)(6))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies depth-stencil view options.</p>
    /// </summary>
    /// <remarks>
    /// <p> Specify a combination of the values in this enumeration in the <strong>Flags</strong> member of a <strong><see cref = "SharpDX.Direct3D12.DepthStencilViewDescription"/></strong> structure. The values are combined by using a bitwise OR operation. </p><p> Limiting a depth-stencil buffer to read-only access allows more than one depth-stencil view to be bound to the pipeline simultaneously, since it is not possible to have read/write conflicts between separate views. </p>
    /// </remarks>
    /// <doc-id>dn986727</doc-id>
    /// <unmanaged>D3D12_DSV_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_DSV_FLAGS</unmanaged-short>
    public enum DepthStencilViewFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p> Indicates a default view. </p> </dd>
        /// </summary>
        /// <doc-id>dn986727</doc-id>
        /// <unmanaged>D3D12_DSV_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_DSV_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Indicates that depth values are read only.</p> </dd>
        /// </summary>
        /// <doc-id>dn986727</doc-id>
        /// <unmanaged>D3D12_DSV_FLAG_READ_ONLY_DEPTH</unmanaged>
        /// <unmanaged-short>D3D12_DSV_FLAG_READ_ONLY_DEPTH</unmanaged-short>
        ReadOnlyDepth = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Indicates that stencil values are read only.</p> </dd>
        /// </summary>
        /// <doc-id>dn986727</doc-id>
        /// <unmanaged>D3D12_DSV_FLAG_READ_ONLY_STENCIL</unmanaged>
        /// <unmanaged-short>D3D12_DSV_FLAG_READ_ONLY_STENCIL</unmanaged-short>
        ReadOnlyStencil = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Identifies the portion of a depth-stencil buffer for writing depth data.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.DepthStencilStateDescription"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>dn770358</doc-id>
    /// <unmanaged>D3D12_DEPTH_WRITE_MASK</unmanaged>
    /// <unmanaged-short>D3D12_DEPTH_WRITE_MASK</unmanaged-short>
    public enum DepthWriteMask : System.Int32
    {
        /// <summary>
        /// <dd> <p>Turn off writes to the depth-stencil buffer.</p> </dd>
        /// </summary>
        /// <doc-id>dn770358</doc-id>
        /// <unmanaged>D3D12_DEPTH_WRITE_MASK_ZERO</unmanaged>
        /// <unmanaged-short>D3D12_DEPTH_WRITE_MASK_ZERO</unmanaged-short>
        Zero = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Turn on writes to the depth-stencil buffer.</p> </dd>
        /// </summary>
        /// <doc-id>dn770358</doc-id>
        /// <unmanaged>D3D12_DEPTH_WRITE_MASK_ALL</unmanaged>
        /// <unmanaged-short>D3D12_DEPTH_WRITE_MASK_ALL</unmanaged-short>
        All = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies options for a heap.</p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.DescriptorHeapDescription"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn859378</doc-id>
    /// <unmanaged>D3D12_DESCRIPTOR_HEAP_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_DESCRIPTOR_HEAP_FLAGS</unmanaged-short>
    public enum DescriptorHeapFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates default usage of a heap.</p> </dd>
        /// </summary>
        /// <doc-id>dn859378</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_HEAP_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_HEAP_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The flag D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE can optionally be set on a descriptor heap to indicate it is be bound on a command list for reference by shaders.  Descriptor heaps created <em>without</em> this flag allow applications the option to stage descriptors in CPU memory before copying them to a shader visible descriptor heap, as a convenience.  But it is also fine for applications to directly create descriptors into shader visible descriptor heaps with no requirement to stage anything on the CPU.</p> <p>This flag only applies to CBV, SRV, UAV and samplers. It does not apply to other descriptor heap types since shaders do not directly reference the other types.  </p> </dd>
        /// </summary>
        /// <doc-id>dn859378</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE</unmanaged-short>
        ShaderVisible = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Specifies a type of descriptor heap. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.DescriptorHeapDescription"/></strong> structure, and the following methods:</p><ul> <li> <strong>CopyDescriptors</strong> </li> <li> <strong>CopyDescriptorsSimple</strong> </li> <li> <strong>GetDescriptorHandleIncrementSize</strong> </li> </ul>
    /// </remarks>
    /// <doc-id>dn859379</doc-id>
    /// <unmanaged>D3D12_DESCRIPTOR_HEAP_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_DESCRIPTOR_HEAP_TYPE</unmanaged-short>
    public enum DescriptorHeapType : System.Int32
    {
        /// <summary>
        /// <dd> <p> The descriptor heap for the combination of constant-buffer, shader-resource, and unordered-access views. </p> </dd>
        /// </summary>
        /// <doc-id>dn859379</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV</unmanaged-short>
        ConstantBufferViewShaderResourceViewUnorderedAccessView = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The descriptor heap for the sampler. </p> </dd>
        /// </summary>
        /// <doc-id>dn859379</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER</unmanaged-short>
        Sampler = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> The descriptor heap for the render-target view. </p> </dd>
        /// </summary>
        /// <doc-id>dn859379</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_HEAP_TYPE_RTV</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_HEAP_TYPE_RTV</unmanaged-short>
        RenderTargetView = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> The descriptor heap for the depth-stencil view. </p> </dd>
        /// </summary>
        /// <doc-id>dn859379</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_HEAP_TYPE_DSV</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_HEAP_TYPE_DSV</unmanaged-short>
        DepthStencilView = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p> The number of types of descriptor heaps. </p> </dd>
        /// </summary>
        /// <doc-id>dn859379</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES</unmanaged-short>
        NumTypes = unchecked ((System.Int32)(4))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies the volatility of both descriptors and the data they reference in a Root Signature 1.1 description, which can enable some driver optimizations.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the  <strong><see cref = "SharpDX.Direct3D12.DescriptorRange1"/></strong> structure.</p><p>To specify the volatility of just the data referenced by descriptors, refer to <strong><see cref = "SharpDX.Direct3D12.RootDescriptorFlags"/></strong>.</p>
    /// </remarks>
    /// <doc-id>mt709113</doc-id>
    /// <unmanaged>D3D12_DESCRIPTOR_RANGE_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_DESCRIPTOR_RANGE_FLAGS</unmanaged-short>
    public enum DescriptorRangeFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p>Default behavior. Descriptors are static, and default assumptions are made for data (for SRV/CBV: DATA_STATIC_WHILE_SET_AT_EXECUTE, and for UAV: DATA_VOLATILE). </p> </dd>
        /// </summary>
        /// <doc-id>mt709113</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_RANGE_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_RANGE_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>If this is the only flag set, then descriptors are volatile and default assumptions are made about data (for SRV/CBV: DATA_STATIC_WHILE_SET_AT_EXECUTE, and for UAV: DATA_VOLATILE). </p> <p>If this flag is combined with DATA_VOLATILE, then both descriptors and data are volaille, which is equivalent to Root Signature Version 1.0.</p> <p>If this flag is combined with DATA_STATIC_WHILE_SET_AT_EXECUTE, then descriptors are volatile. This still doesn?t allow them to change during command list execution so it is valid to combine the additional declaration that data is static while set via root descriptor table during execution ? the underlying descriptors are effectively static for longer than the data is being promised to be static.</p> </dd>
        /// </summary>
        /// <doc-id>mt709113</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE</unmanaged-short>
        DescriptorSVolatile = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Descriptors are static and the data is volatile.</p> </dd>
        /// </summary>
        /// <doc-id>mt709113</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE</unmanaged-short>
        DataVolatile = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Descriptors are static and data is static while set at execute.</p> </dd>
        /// </summary>
        /// <doc-id>mt709113</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE</unmanaged-short>
        DataStaticWhileSetAtExecute = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Both descriptors and data are static. This maximizes the potential for driver optimization.</p> </dd>
        /// </summary>
        /// <doc-id>mt709113</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC</unmanaged-short>
        DataStatic = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt709113</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS</unmanaged-short>
        DescriptorSStaticKeepingBufferBoundsCheckS = unchecked ((System.Int32)(65536))}

    /// <summary>
    /// <p> Specifies a range so that, for example, if part of a descriptor table has 100 shader-resource views (SRVs) that range can be declared in one entry rather than 100. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.DescriptorRange"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn859381</doc-id>
    /// <unmanaged>D3D12_DESCRIPTOR_RANGE_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_DESCRIPTOR_RANGE_TYPE</unmanaged-short>
    public enum DescriptorRangeType : System.Int32
    {
        /// <summary>
        /// <dd> <p> Specifies a range of SRVs. </p> </dd>
        /// </summary>
        /// <doc-id>dn859381</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_RANGE_TYPE_SRV</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_RANGE_TYPE_SRV</unmanaged-short>
        ShaderResourceView = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Specifies a range of unordered-access views (UAVs). </p> </dd>
        /// </summary>
        /// <doc-id>dn859381</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_RANGE_TYPE_UAV</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_RANGE_TYPE_UAV</unmanaged-short>
        UnorderedAccessView = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Specifies a range of constant-buffer views (CBVs). </p> </dd>
        /// </summary>
        /// <doc-id>dn859381</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_RANGE_TYPE_CBV</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_RANGE_TYPE_CBV</unmanaged-short>
        ConstantBufferView = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> Specifies a range of samplers. </p> </dd>
        /// </summary>
        /// <doc-id>dn859381</doc-id>
        /// <unmanaged>D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER</unmanaged>
        /// <unmanaged-short>D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER</unmanaged-short>
        Sampler = unchecked ((System.Int32)(3))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_DRED_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_DRED_FLAGS</unmanaged-short>
    public enum DredFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_DRED_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_DRED_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_DRED_FLAG_FORCE_ENABLE</unmanaged>
        /// <unmanaged-short>D3D12_DRED_FLAG_FORCE_ENABLE</unmanaged-short>
        ForceEnable = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS</unmanaged>
        /// <unmanaged-short>D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS</unmanaged-short>
        DisableAutobreadcrumbs = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_DRED_VERSION</unmanaged>
    /// <unmanaged-short>D3D12_DRED_VERSION</unmanaged-short>
    public enum DredVersion : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_DRED_VERSION_1_0</unmanaged>
        /// <unmanaged-short>D3D12_DRED_VERSION_1_0</unmanaged-short>
        Version10 = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS</unmanaged>
    /// <unmanaged-short>D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS</unmanaged-short>
    public enum DriverMatchingIdentifierStatus : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE</unmanaged>
        /// <unmanaged-short>D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE</unmanaged-short>
        CompatibleWithDevice = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE</unmanaged>
        /// <unmanaged-short>D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE</unmanaged-short>
        UnsupportedType = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED</unmanaged>
        /// <unmanaged-short>D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED</unmanaged-short>
        Unrecognized = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION</unmanaged>
        /// <unmanaged-short>D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION</unmanaged-short>
        IncompatibleVersion = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE</unmanaged>
        /// <unmanaged-short>D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE</unmanaged-short>
        IncompatibleType = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_ELEMENTS_LAYOUT</unmanaged>
    /// <unmanaged-short>D3D12_ELEMENTS_LAYOUT</unmanaged-short>
    public enum ElementsLayout : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_ELEMENTS_LAYOUT_ARRAY</unmanaged>
        /// <unmanaged-short>D3D12_ELEMENTS_LAYOUT_ARRAY</unmanaged-short>
        Array = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS</unmanaged>
        /// <unmanaged-short>D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS</unmanaged-short>
        ArrayOfPointers = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_EXPORT_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_EXPORT_FLAGS</unmanaged-short>
    public enum ExportFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_EXPORT_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_EXPORT_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_FEATURE</unmanaged>
    /// <unmanaged-short>D3D12_FEATURE</unmanaged-short>
    public enum Feature : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_D3D12_OPTIONS</unmanaged-short>
        D3D12Options = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_ARCHITECTURE</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_ARCHITECTURE</unmanaged-short>
        Architecture = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_FEATURE_LEVELS</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_FEATURE_LEVELS</unmanaged-short>
        FeatureLevels = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_FORMAT_SUPPORT</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_FORMAT_SUPPORT</unmanaged-short>
        FormatSupport = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS</unmanaged-short>
        MultisampleQualityLevels = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_FORMAT_INFO</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_FORMAT_INFO</unmanaged-short>
        FormatInformation = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT</unmanaged-short>
        GpuVirtualAddressSupport = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_SHADER_MODEL</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_SHADER_MODEL</unmanaged-short>
        ShaderModel = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS1</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_D3D12_OPTIONS1</unmanaged-short>
        D3D12Options1 = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT</unmanaged-short>
        ProtectedResourceSessionSupport = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_ROOT_SIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_ROOT_SIGNATURE</unmanaged-short>
        RootSignature = unchecked ((System.Int32)(12)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_ARCHITECTURE1</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_ARCHITECTURE1</unmanaged-short>
        Architecture1 = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS2</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_D3D12_OPTIONS2</unmanaged-short>
        D3D12Options2 = unchecked ((System.Int32)(18)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_SHADER_CACHE</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_SHADER_CACHE</unmanaged-short>
        ShaderCache = unchecked ((System.Int32)(19)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_COMMAND_QUEUE_PRIORITY</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_COMMAND_QUEUE_PRIORITY</unmanaged-short>
        CommandQueuePriority = unchecked ((System.Int32)(20)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS3</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_D3D12_OPTIONS3</unmanaged-short>
        D3D12Options3 = unchecked ((System.Int32)(21)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_EXISTING_HEAPS</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_EXISTING_HEAPS</unmanaged-short>
        ExistingHeaps = unchecked ((System.Int32)(22)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS4</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_D3D12_OPTIONS4</unmanaged-short>
        D3D12Options4 = unchecked ((System.Int32)(23)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_SERIALIZATION</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_SERIALIZATION</unmanaged-short>
        Serialization = unchecked ((System.Int32)(24)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_CROSS_NODE</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_CROSS_NODE</unmanaged-short>
        CrossNode = unchecked ((System.Int32)(25)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS5</unmanaged>
        /// <unmanaged-short>D3D12_FEATURE_D3D12_OPTIONS5</unmanaged-short>
        D3D12Options5 = unchecked ((System.Int32)(27))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p> Specifies fence options. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong>ID3D12Device::CreateFence</strong> method. </p>
    /// </remarks>
    /// <doc-id>dn986729</doc-id>
    /// <unmanaged>D3D12_FENCE_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_FENCE_FLAGS</unmanaged-short>
    public enum FenceFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p> No options are specified. </p> </dd>
        /// </summary>
        /// <doc-id>dn986729</doc-id>
        /// <unmanaged>D3D12_FENCE_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_FENCE_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The fence is shared. </p> </dd>
        /// </summary>
        /// <doc-id>dn986729</doc-id>
        /// <unmanaged>D3D12_FENCE_FLAG_SHARED</unmanaged>
        /// <unmanaged-short>D3D12_FENCE_FLAG_SHARED</unmanaged-short>
        Shared = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> The fence is shared with another GPU adapter. </p> </dd>
        /// </summary>
        /// <doc-id>dn986729</doc-id>
        /// <unmanaged>D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER</unmanaged>
        /// <unmanaged-short>D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER</unmanaged-short>
        SharedCrossAdapter = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986729</doc-id>
        /// <unmanaged>D3D12_FENCE_FLAG_NON_MONITORED</unmanaged>
        /// <unmanaged-short>D3D12_FENCE_FLAG_NON_MONITORED</unmanaged-short>
        NonMonitored = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p>Specifies the fill mode to use when rendering triangles.</p>
    /// </summary>
    /// <remarks>
    /// <p> Fill mode is specified in a <strong><see cref = "SharpDX.Direct3D12.RasterizerStateDescription"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn770366</doc-id>
    /// <unmanaged>D3D12_FILL_MODE</unmanaged>
    /// <unmanaged-short>D3D12_FILL_MODE</unmanaged-short>
    public enum FillMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Draw lines connecting the vertices. Adjacent vertices are not drawn.</p> </dd>
        /// </summary>
        /// <doc-id>dn770366</doc-id>
        /// <unmanaged>D3D12_FILL_MODE_WIREFRAME</unmanaged>
        /// <unmanaged-short>D3D12_FILL_MODE_WIREFRAME</unmanaged-short>
        Wireframe = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Fill the triangles formed by the vertices. Adjacent vertices are not drawn.</p> </dd>
        /// </summary>
        /// <doc-id>dn770366</doc-id>
        /// <unmanaged>D3D12_FILL_MODE_SOLID</unmanaged>
        /// <unmanaged-short>D3D12_FILL_MODE_SOLID</unmanaged-short>
        Solid = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Specifies filtering options during texture sampling.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.SamplerStateDescription"/></strong> structure.</p><strong>Note</strong>??If you use different filter types for min versus mag filter, undefined behavior occurs in certain cases where the choice between whether magnification or minification happens is ambiguous.  To prevent this undefined behavior, use filter modes that use similar filter operations for both min and mag (or use anisotropic filtering, which avoids the issue as well).?<p>During texture sampling, one or more texels are read and combined (this is calling filtering) to produce a single value. Point sampling reads a single texel while linear sampling reads two texels (endpoints) and linearly interpolates a third value between the endpoints.</p><p>Microsoft High Level Shader Language (HLSL) texture-sampling functions also support comparison filtering during texture sampling. Comparison filtering compares each sampled texel against a comparison value. The boolean result is blended the same way that normal texture filtering is blended.</p><p>You can use HLSL intrinsic texture-sampling functions that implement texture filtering only or companion functions that use texture filtering with comparison filtering.</p><p>Also note the following defines:</p><code>#define	D3D12_FILTER_REDUCTION_TYPE_MASK	( 0x3 ) #define	D3D12_FILTER_REDUCTION_TYPE_SHIFT	( 7 ) #define	D3D12_FILTER_TYPE_MASK	( 0x3 ) #define	D3D12_MIN_FILTER_SHIFT	( 4 ) #define	D3D12_MAG_FILTER_SHIFT	( 2 ) #define	D3D12_MIP_FILTER_SHIFT	( 0 ) #define	D3D12_ANISOTROPIC_FILTERING_BIT	( 0x40 ) #define D3D12_ENCODE_BASIC_FILTER( min, mag, mip, reduction )                                                     \ ( ( <see cref = "SharpDX.Direct3D12.Filter"/> ) (                                                           \ ( ( ( min ) &amp; D3D12_FILTER_TYPE_MASK ) &lt; &lt; D3D12_MIN_FILTER_SHIFT ) |           \ ( ( ( mag ) &amp; D3D12_FILTER_TYPE_MASK ) &lt; &lt; D3D12_MAG_FILTER_SHIFT ) |           \ ( ( ( mip ) &amp; D3D12_FILTER_TYPE_MASK ) &lt; &lt; D3D12_MIP_FILTER_SHIFT ) |           \ ( ( ( reduction ) &amp; D3D12_FILTER_REDUCTION_TYPE_MASK ) &lt; &lt; D3D12_FILTER_REDUCTION_TYPE_SHIFT ) ) ) 
    /// #define D3D12_ENCODE_ANISOTROPIC_FILTER( reduction )                                                  \ ( ( <see cref = "SharpDX.Direct3D12.Filter"/> ) (                                         \ D3D12_ANISOTROPIC_FILTERING_BIT |                            \ D3D12_ENCODE_BASIC_FILTER( D3D12_FILTER_TYPE_LINEAR,         \ D3D12_FILTER_TYPE_LINEAR,         \ D3D12_FILTER_TYPE_LINEAR,         \ reduction ) ) )                     
    /// #define D3D12_DECODE_MIN_FILTER( D3D12Filter )                                                              \ ( ( <see cref = "SharpDX.Direct3D12.FilterType"/> )                                                    \ ( ( ( D3D12Filter ) &gt; &gt; D3D12_MIN_FILTER_SHIFT ) &amp; D3D12_FILTER_TYPE_MASK ) ) 
    /// #define D3D12_DECODE_MAG_FILTER( D3D12Filter )                                                              \ ( ( <see cref = "SharpDX.Direct3D12.FilterType"/> )                                                    \ ( ( ( D3D12Filter ) &gt; &gt; D3D12_MAG_FILTER_SHIFT ) &amp; D3D12_FILTER_TYPE_MASK ) ) 
    /// #define D3D12_DECODE_MIP_FILTER( D3D12Filter )                                                              \ ( ( <see cref = "SharpDX.Direct3D12.FilterType"/> )                                                    \ ( ( ( D3D12Filter ) &gt; &gt; D3D12_MIP_FILTER_SHIFT ) &amp; D3D12_FILTER_TYPE_MASK ) ) 
    /// #define D3D12_DECODE_FILTER_REDUCTION( D3D12Filter )                                                        \ ( ( <see cref = "SharpDX.Direct3D12.FilterReductionType"/> )                                                      \ ( ( ( D3D12Filter ) &gt; &gt; D3D12_FILTER_REDUCTION_TYPE_SHIFT ) &amp; D3D12_FILTER_REDUCTION_TYPE_MASK ) ) 
    /// #define D3D12_DECODE_IS_COMPARISON_FILTER( D3D12Filter )                                                    \ ( D3D12_DECODE_FILTER_REDUCTION( D3D12Filter ) == D3D12_FILTER_REDUCTION_TYPE_COMPARISON ) 
    /// #define D3D12_DECODE_IS_ANISOTROPIC_FILTER( D3D12Filter )                                               \ ( ( ( D3D12Filter ) &amp; D3D12_ANISOTROPIC_FILTERING_BIT ) &amp; &amp;                  \ ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIN_FILTER( D3D12Filter ) ) &amp; &amp;   \ ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MAG_FILTER( D3D12Filter ) ) &amp; &amp;   \ ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIP_FILTER( D3D12Filter ) ) )     </code><table> <tr><th>Texture Sampling Function</th><th>Texture Sampling Function with Comparison Filtering</th></tr> <tr><td> <strong>Sample</strong> </td><td> <strong>SampleCmp</strong> or <strong>SampleCmpLevelZero</strong> </td></tr> </table><p>?</p><p>Comparison filters only work with textures that have the following formats: <strong>DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS</strong>, <strong>DXGI_FORMAT_R32_FLOAT</strong>, <strong>DXGI_FORMAT_R24_UNORM_X8_TYPELESS</strong>, <strong>DXGI_FORMAT_R16_UNORM</strong>.</p>
    /// </remarks>
    /// <doc-id>dn770367</doc-id>
    /// <unmanaged>D3D12_FILTER</unmanaged>
    /// <unmanaged-short>D3D12_FILTER</unmanaged-short>
    public enum Filter : System.Int32
    {
        /// <summary>
        /// <dd> <p>Use point sampling for minification, magnification, and mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MIN_MAG_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MIN_MAG_MIP_POINT</unmanaged-short>
        MinMagMipPoint = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Use point sampling for minification and magnification; use linear interpolation for mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR</unmanaged-short>
        MinMagPointMipLinear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged-short>
        MinPointMagLinearMipPoint = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Use point sampling for minification; use linear interpolation for magnification and mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR</unmanaged-short>
        MinPointMagMipLinear = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>Use linear interpolation for minification; use point sampling for magnification and mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT</unmanaged-short>
        MinLinearMagMipPoint = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p>Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged-short>
        MinLinearMagPointMipLinear = unchecked ((System.Int32)(17)),
        /// <summary>
        /// <dd> <p>Use linear interpolation for minification and magnification; use point sampling for mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT</unmanaged-short>
        MinMagLinearMipPoint = unchecked ((System.Int32)(20)),
        /// <summary>
        /// <dd> <p>Use linear interpolation for minification, magnification, and mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MIN_MAG_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MIN_MAG_MIP_LINEAR</unmanaged-short>
        MinMagMipLinear = unchecked ((System.Int32)(21)),
        /// <summary>
        /// <dd> <p>Use anisotropic interpolation for minification, magnification, and mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(85)),
        /// <summary>
        /// <dd> <p>Use point sampling for minification, magnification, and mip-level sampling. Compare the result to the comparison value.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT</unmanaged-short>
        ComparisonMinMagMipPoint = unchecked ((System.Int32)(128)),
        /// <summary>
        /// <dd> <p>Use point sampling for minification and magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR</unmanaged-short>
        ComparisonMinMagPointMipLinear = unchecked ((System.Int32)(129)),
        /// <summary>
        /// <dd> <p>Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling. Compare the result to the comparison value.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged-short>
        ComparisonMinPointMagLinearMipPoint = unchecked ((System.Int32)(132)),
        /// <summary>
        /// <dd> <p>Use point sampling for minification; use linear interpolation for magnification and mip-level sampling. Compare the result to the comparison value.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR</unmanaged-short>
        ComparisonMinPointMagMipLinear = unchecked ((System.Int32)(133)),
        /// <summary>
        /// <dd> <p>Use linear interpolation for minification; use point sampling for magnification and mip-level sampling. Compare the result to the comparison value.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT</unmanaged-short>
        ComparisonMinLinearMagMipPoint = unchecked ((System.Int32)(144)),
        /// <summary>
        /// <dd> <p>Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged-short>
        ComparisonMinLinearMagPointMipLinear = unchecked ((System.Int32)(145)),
        /// <summary>
        /// <dd> <p>Use linear interpolation for minification and magnification; use point sampling for mip-level sampling. Compare the result to the comparison value.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT</unmanaged-short>
        ComparisonMinMagLinearMipPoint = unchecked ((System.Int32)(148)),
        /// <summary>
        /// <dd> <p>Use linear interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR</unmanaged-short>
        ComparisonMinMagMipLinear = unchecked ((System.Int32)(149)),
        /// <summary>
        /// <dd> <p>Use anisotropic interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_COMPARISON_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_COMPARISON_ANISOTROPIC</unmanaged-short>
        ComparisonAnisotropic = unchecked ((System.Int32)(213)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_MAG_MIP_POINT</strong> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT</unmanaged-short>
        MinimumMinMagMipPoint = unchecked ((System.Int32)(256)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR</strong> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR</unmanaged-short>
        MinimumMinMagPointMipLinear = unchecked ((System.Int32)(257)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</strong> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged-short>
        MinimumMinPointMagLinearMipPoint = unchecked ((System.Int32)(260)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR</strong> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR</unmanaged-short>
        MinimumMinPointMagMipLinear = unchecked ((System.Int32)(261)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT</strong> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT</unmanaged-short>
        MinimumMinLinearMagMipPoint = unchecked ((System.Int32)(272)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</strong> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged-short>
        MinimumMinLinearMagPointMipLinear = unchecked ((System.Int32)(273)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT</strong> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT</unmanaged-short>
        MinimumMinMagLinearMipPoint = unchecked ((System.Int32)(276)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_MAG_MIP_LINEAR</strong> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR</unmanaged-short>
        MinimumMinMagMipLinear = unchecked ((System.Int32)(277)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_ANISOTROPIC</strong> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MINIMUM_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MINIMUM_ANISOTROPIC</unmanaged-short>
        MinimumAnisotropic = unchecked ((System.Int32)(341)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_MAG_MIP_POINT</strong> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT</unmanaged-short>
        MaximumMinMagMipPoint = unchecked ((System.Int32)(384)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR</strong> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR</unmanaged-short>
        MaximumMinMagPointMipLinear = unchecked ((System.Int32)(385)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</strong> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged-short>
        MaximumMinPointMagLinearMipPoint = unchecked ((System.Int32)(388)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR</strong> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR</unmanaged-short>
        MaximumMinPointMagMipLinear = unchecked ((System.Int32)(389)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT</strong> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT</unmanaged-short>
        MaximumMinLinearMagMipPoint = unchecked ((System.Int32)(400)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</strong> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged-short>
        MaximumMinLinearMagPointMipLinear = unchecked ((System.Int32)(401)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT</strong> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT</unmanaged-short>
        MaximumMinMagLinearMipPoint = unchecked ((System.Int32)(404)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_MIN_MAG_MIP_LINEAR</strong> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR</unmanaged-short>
        MaximumMinMagMipLinear = unchecked ((System.Int32)(405)),
        /// <summary>
        /// <dd> <p>Fetch the same set of texels as <strong>D3D12_FILTER_ANISOTROPIC</strong> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <strong>MinMaxFiltering</strong> member in the <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>dn770367</doc-id>
        /// <unmanaged>D3D12_FILTER_MAXIMUM_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_MAXIMUM_ANISOTROPIC</unmanaged-short>
        MaximumAnisotropic = unchecked ((System.Int32)(469))}

    /// <summary>
    /// <p>Specifies the type of filter reduction. </p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.SamplerStateDescription"/></strong> structure. Also, refer to the remarks for <strong><see cref = "SharpDX.Direct3D12.Filter"/></strong>.</p>
    /// </remarks>
    /// <doc-id>dn770368</doc-id>
    /// <unmanaged>D3D12_FILTER_REDUCTION_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_FILTER_REDUCTION_TYPE</unmanaged-short>
    public enum FilterReductionType : System.Int32
    {
        /// <summary>
        /// <dd> <p>The filter type is standard.</p> </dd>
        /// </summary>
        /// <doc-id>dn770368</doc-id>
        /// <unmanaged>D3D12_FILTER_REDUCTION_TYPE_STANDARD</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_REDUCTION_TYPE_STANDARD</unmanaged-short>
        Standard = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The filter type is comparison.</p> </dd>
        /// </summary>
        /// <doc-id>dn770368</doc-id>
        /// <unmanaged>D3D12_FILTER_REDUCTION_TYPE_COMPARISON</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_REDUCTION_TYPE_COMPARISON</unmanaged-short>
        Comparison = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The filter type is minimum.</p> </dd>
        /// </summary>
        /// <doc-id>dn770368</doc-id>
        /// <unmanaged>D3D12_FILTER_REDUCTION_TYPE_MINIMUM</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_REDUCTION_TYPE_MINIMUM</unmanaged-short>
        Minimum = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The filter type is maximum.</p> </dd>
        /// </summary>
        /// <doc-id>dn770368</doc-id>
        /// <unmanaged>D3D12_FILTER_REDUCTION_TYPE_MAXIMUM</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_REDUCTION_TYPE_MAXIMUM</unmanaged-short>
        Maximum = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Specifies the type of magnification or minification sampler filters. </p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.SamplerStateDescription"/></strong> structure. Also, refer to the remarks for <strong><see cref = "SharpDX.Direct3D12.Filter"/></strong>.</p>
    /// </remarks>
    /// <doc-id>dn770369</doc-id>
    /// <unmanaged>D3D12_FILTER_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_FILTER_TYPE</unmanaged-short>
    public enum FilterType : System.Int32
    {
        /// <summary>
        /// <dd> <p>Point filtering is used as a texture magnification or minification filter. The texel with coordinates nearest to the desired pixel value is used. The texture filter to be used between mipmap levels is nearest-point mipmap filtering. The rasterizer uses the color from the texel of the nearest mipmap texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770369</doc-id>
        /// <unmanaged>D3D12_FILTER_TYPE_POINT</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_TYPE_POINT</unmanaged-short>
        Point = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Bilinear interpolation filtering is used as a texture magnification or minification filter. A weighted average of a 2 x 2 area of texels surrounding the desired pixel is used. The texture filter to use between mipmap levels is trilinear mipmap interpolation. The rasterizer linearly interpolates pixel color, using the texels of the two nearest mipmap textures.  </p> </dd>
        /// </summary>
        /// <doc-id>dn770369</doc-id>
        /// <unmanaged>D3D12_FILTER_TYPE_LINEAR</unmanaged>
        /// <unmanaged-short>D3D12_FILTER_TYPE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies resources that are supported for a provided format.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.FeatureDataFormatSupport"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn859389</doc-id>
    /// <unmanaged>D3D12_FORMAT_SUPPORT1</unmanaged>
    /// <unmanaged-short>D3D12_FORMAT_SUPPORT1</unmanaged-short>
    public enum FormatSupport1 : System.Int32
    {
        /// <summary>
        /// <dd> <p>No resources are supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_NONE</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Buffer resources supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_BUFFER</unmanaged-short>
        Buffer = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Vertex buffers supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER</unmanaged-short>
        InputAssemblyVertexBuffer = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Index buffers supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER</unmanaged-short>
        InputAssemblyIndexBuffer = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Streaming output buffers supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_SO_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_SO_BUFFER</unmanaged-short>
        StreamOutputBuffer = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>1D texture resources supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_TEXTURE1D</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_TEXTURE1D</unmanaged-short>
        Texture1D = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p>2D texture resources supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_TEXTURE2D</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_TEXTURE2D</unmanaged-short>
        Texture2D = unchecked ((System.Int32)(32)),
        /// <summary>
        /// <dd> <p>3D texture resources supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_TEXTURE3D</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_TEXTURE3D</unmanaged-short>
        Texture3D = unchecked ((System.Int32)(64)),
        /// <summary>
        /// <dd> <p>Cube texture resources supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_TEXTURECUBE</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_TEXTURECUBE</unmanaged-short>
        TextureCube = unchecked ((System.Int32)(128)),
        /// <summary>
        /// <dd> <p>The HLSL <strong>Load</strong> function for texture objects is supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_SHADER_LOAD</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_SHADER_LOAD</unmanaged-short>
        ShaderLoad = unchecked ((System.Int32)(256)),
        /// <summary>
        /// <dd> <p>The HLSL <strong>Sample</strong> function for texture objects is supported.</p> <strong>Note</strong>??If the device supports the format as a resource (1D, 2D, 3D, or cube map) but doesn't support this option, the resource can still use the Sample method but must use only the point filtering sampler state to perform the sample. ? </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE</unmanaged-short>
        ShaderSample = unchecked ((System.Int32)(512)),
        /// <summary>
        /// <dd> <p>The HLSL <strong>SampleCmp</strong> and <strong>SampleCmpLevelZero</strong> functions for texture objects are supported.</p> <strong>Note</strong>??Windows?8 and later might provide limited support for these functions on Direct3D feature levels 9_1, 9_2, and 9_3. For more info, see Implementing shadow buffers for Direct3D feature level 9.
        ///  ? </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON</unmanaged-short>
        ShaderSampleComparison = unchecked ((System.Int32)(1024)),
        /// <summary>
        /// <dd> <p>Reserved.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT</unmanaged-short>
        ShaderSampleMonoText = unchecked ((System.Int32)(2048)),
        /// <summary>
        /// <dd> <p>Mipmaps are supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_MIP</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_MIP</unmanaged-short>
        Mip = unchecked ((System.Int32)(4096)),
        /// <summary>
        /// <dd> <p>Render targets are supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_RENDER_TARGET</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_RENDER_TARGET</unmanaged-short>
        RenderTarget = unchecked ((System.Int32)(16384)),
        /// <summary>
        /// <dd> <p>Blend operations supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_BLENDABLE</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_BLENDABLE</unmanaged-short>
        Blendable = unchecked ((System.Int32)(32768)),
        /// <summary>
        /// <dd> <p>Depth stencils supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL</unmanaged-short>
        DepthStencil = unchecked ((System.Int32)(65536)),
        /// <summary>
        /// <dd> <p>Multisample antialiasing (MSAA) resolve operations are supported. For more info, see <strong>ID3D12GraphicsCommandList::ResolveSubresource</strong>. </p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE</unmanaged-short>
        MultisampleResolve = unchecked ((System.Int32)(262144)),
        /// <summary>
        /// <dd> <p>Format can be displayed on screen.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_DISPLAY</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_DISPLAY</unmanaged-short>
        Display = unchecked ((System.Int32)(524288)),
        /// <summary>
        /// <dd> <p>Format can't be cast to another format.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT</unmanaged-short>
        CastWithinBitLayout = unchecked ((System.Int32)(1048576)),
        /// <summary>
        /// <dd> <p>Format can be used as a multi-sampled render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET</unmanaged-short>
        MultisampleRenderTarget = unchecked ((System.Int32)(2097152)),
        /// <summary>
        /// <dd> <p>Format can be used as a multi-sampled texture and read into a shader with the HLSL <strong>Load</strong> function.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD</unmanaged-short>
        MultisampleLoad = unchecked ((System.Int32)(4194304)),
        /// <summary>
        /// <dd> <p>Format can be used with the HLSL gather function. This value is available in DirectX 10.1 or higher.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_SHADER_GATHER</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_SHADER_GATHER</unmanaged-short>
        ShaderGather = unchecked ((System.Int32)(8388608)),
        /// <summary>
        /// <dd> <p>Format supports casting when the resource is a back buffer.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST</unmanaged-short>
        BackBufferCast = unchecked ((System.Int32)(16777216)),
        /// <summary>
        /// <dd> <p>Format can be used for an unordered access view.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW</unmanaged-short>
        TypedUnorderedAccessView = unchecked ((System.Int32)(33554432)),
        /// <summary>
        /// <dd> <p>Format can be used with the HLSL gather with comparison function.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON</unmanaged-short>
        ShaderGatherComparison = unchecked ((System.Int32)(67108864)),
        /// <summary>
        /// <dd> <p>Format can be used with the decoder output.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT</unmanaged-short>
        DecoderOutput = unchecked ((System.Int32)(134217728)),
        /// <summary>
        /// <dd> <p>Format can be used with the video processor output.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT</unmanaged-short>
        VideoProcessorOutput = unchecked ((System.Int32)(268435456)),
        /// <summary>
        /// <dd> <p>Format can be used with the video processor input.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT</unmanaged-short>
        VideoProcessorInput = unchecked ((System.Int32)(536870912)),
        /// <summary>
        /// <dd> <p>Format can be used with the video encoder.</p> </dd>
        /// </summary>
        /// <doc-id>dn859389</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER</unmanaged-short>
        VideoEncoder = unchecked ((System.Int32)(1073741824))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p> Specifies which unordered resource options are supported for a provided format. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.FeatureDataFormatSupport"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn859390</doc-id>
    /// <unmanaged>D3D12_FORMAT_SUPPORT2</unmanaged>
    /// <unmanaged-short>D3D12_FORMAT_SUPPORT2</unmanaged-short>
    public enum FormatSupport2 : System.Int32
    {
        /// <summary>
        /// <dd> <p>No unordered resource options are supported.</p> </dd>
        /// </summary>
        /// <doc-id>dn859390</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT2_NONE</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT2_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Format supports atomic add.</p> </dd>
        /// </summary>
        /// <doc-id>dn859390</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD</unmanaged-short>
        UnorderedAccessViewAtomicAdd = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Format supports atomic bitwise operations.</p> </dd>
        /// </summary>
        /// <doc-id>dn859390</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS</unmanaged-short>
        UnorderedAccessViewAtomicBitwiseOperations = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Format supports atomic compare with store or exchange.</p> </dd>
        /// </summary>
        /// <doc-id>dn859390</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE</unmanaged-short>
        UnorderedAccessViewAtomicCompareStoreOrCompareExchange = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Format supports atomic exchange.</p> </dd>
        /// </summary>
        /// <doc-id>dn859390</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE</unmanaged-short>
        UnorderedAccessViewAtomicExchange = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>Format supports atomic min and max.</p> </dd>
        /// </summary>
        /// <doc-id>dn859390</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX</unmanaged-short>
        UnorderedAccessViewAtomicSignedMinimumOrMaximum = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p>Format supports atomic unsigned min and max.</p> </dd>
        /// </summary>
        /// <doc-id>dn859390</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX</unmanaged-short>
        UnorderedAccessViewAtomicUnsignedMinimumOrMaximum = unchecked ((System.Int32)(32)),
        /// <summary>
        /// <dd> <p>Format supports a typed load.</p> </dd>
        /// </summary>
        /// <doc-id>dn859390</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD</unmanaged-short>
        UnorderedAccessViewTypedLoad = unchecked ((System.Int32)(64)),
        /// <summary>
        /// <dd> <p>Format supports a typed store.</p> </dd>
        /// </summary>
        /// <doc-id>dn859390</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE</unmanaged-short>
        UnorderedAccessViewTypedStore = unchecked ((System.Int32)(128)),
        /// <summary>
        /// <dd> <p>Format supports logic operations in blend state.</p> </dd>
        /// </summary>
        /// <doc-id>dn859390</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP</unmanaged-short>
        OutputMergerLogicOperation = unchecked ((System.Int32)(256)),
        /// <summary>
        /// <dd> <p> Format supports tiled resources. Refer to Volume Tiled Resources. </p> </dd>
        /// </summary>
        /// <doc-id>dn859390</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT2_TILED</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT2_TILED</unmanaged-short>
        Tiled = unchecked ((System.Int32)(512)),
        /// <summary>
        /// <dd> <p> Format supports multi-plane overlays. </p> </dd>
        /// </summary>
        /// <doc-id>dn859390</doc-id>
        /// <unmanaged>D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY</unmanaged>
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY</unmanaged-short>
        MultiplaneOverlay = unchecked ((System.Int32)(16384))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_GPU_BASED_VALIDATION_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_GPU_BASED_VALIDATION_FLAGS</unmanaged-short>
    public enum GpuBasedValidationFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GPU_BASED_VALIDATION_FLAGS_NONE</unmanaged>
        /// <unmanaged-short>D3D12_GPU_BASED_VALIDATION_FLAGS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GPU_BASED_VALIDATION_FLAGS_DISABLE_STATE_TRACKING</unmanaged>
        /// <unmanaged-short>D3D12_GPU_BASED_VALIDATION_FLAGS_DISABLE_STATE_TRACKING</unmanaged-short>
        DisableStateTracking = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Specifies how GPU-Based Validation handles patched pipeline states during <strong>ID3D12Device::CreateGraphicsPipelineState</strong> and <strong>ID3D12Device::CreateComputePipelineState</strong>.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.DebugDeviceGpuBasedValidationSettings"/></strong> structure.</p><p>Generally speaking most application developers are likely to leave this parameter unchanged.  However, if the overhead of deferring patched PSO creation is suspected to be too much of a performance problem, then developers should consider changing this setting.</p>
    /// </remarks>
    /// <doc-id>mt762983</doc-id>
    /// <unmanaged>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS</unmanaged-short>
    public enum GpuBasedValidationPipelineStateCreateFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt762983</doc-id>
        /// <unmanaged>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt762983</doc-id>
        /// <unmanaged>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_TRACKING_ONLY_SHADERS</unmanaged>
        /// <unmanaged-short>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_TRACKING_ONLY_SHADERS</unmanaged-short>
        FrontLoadCreateTrackingOnlyShaderS = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt762983</doc-id>
        /// <unmanaged>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_UNGUARDED_VALIDATION_SHADERS</unmanaged>
        /// <unmanaged-short>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_UNGUARDED_VALIDATION_SHADERS</unmanaged-short>
        FrontLoadCreateUnguardedValidationShaderS = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt762983</doc-id>
        /// <unmanaged>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_GUARDED_VALIDATION_SHADERS</unmanaged>
        /// <unmanaged-short>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_GUARDED_VALIDATION_SHADERS</unmanaged-short>
        FrontLoadCreateGuardedValidationShaderS = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt762983</doc-id>
        /// <unmanaged>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS_VALID_MASK</unmanaged>
        /// <unmanaged-short>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS_VALID_MASK</unmanaged-short>
        SValidMask = unchecked ((System.Int32)(7))}

    /// <summary>
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Specifies the type of shader patching used by GPU-Based Validation at either the device or command list level.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.DebugDeviceGpuBasedValidationSettings"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>mt762984</doc-id>
    /// <unmanaged>D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE</unmanaged>
    /// <unmanaged-short>D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE</unmanaged-short>
    public enum GpuBasedValidationShaderPatchMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>No shader patching is to be done.  This will retain the original shader bytecode.  Can lead to errors in some of the GPU-Based Validation state tracking as the unpatched shader may still change resource state (see Common state promotion) but the promotion will be untracked without patching the shader.  This can improve performance but no validation will be performed and may also lead to misleading GPU-Based Validation errors. Use this mode very carefully. </p> </dd>
        /// </summary>
        /// <doc-id>mt762984</doc-id>
        /// <unmanaged>D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_NONE</unmanaged>
        /// <unmanaged-short>D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Shaders can be patched with resource state tracking code but no validation.  This may improve performance but no validation will be performed.</p> </dd>
        /// </summary>
        /// <doc-id>mt762984</doc-id>
        /// <unmanaged>D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_STATE_TRACKING_ONLY</unmanaged>
        /// <unmanaged-short>D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_STATE_TRACKING_ONLY</unmanaged-short>
        StateTrackingOnly = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The default. Shaders are patched with validation code but erroneous instructions will still be executed.  </p> </dd>
        /// </summary>
        /// <doc-id>mt762984</doc-id>
        /// <unmanaged>D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION</unmanaged>
        /// <unmanaged-short>D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION</unmanaged-short>
        UnguardedValidation = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Shaders are patched with validation code and erroneous instructions are skipped in execution.  This can help avoid crashes or device removal.</p> </dd>
        /// </summary>
        /// <doc-id>mt762984</doc-id>
        /// <unmanaged>D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_GUARDED_VALIDATION</unmanaged>
        /// <unmanaged-short>D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_GUARDED_VALIDATION</unmanaged-short>
        GuardedValidation = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Unused, simply the count of the number of modes.</p> </dd>
        /// </summary>
        /// <doc-id>mt762984</doc-id>
        /// <unmanaged>NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES</unmanaged>
        /// <unmanaged-short>NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES</unmanaged-short>
        NumD3D12GpuBasedValidationShaderPatchModes = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_GRAPHICS_STATES</unmanaged>
    /// <unmanaged-short>D3D12_GRAPHICS_STATES</unmanaged-short>
    public enum GraphicsStates : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_NONE</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS</unmanaged-short>
        InputAssemblyVertexBuffers = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER</unmanaged-short>
        InputAssemblyIndexBuffer = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY</unmanaged-short>
        InputAssemblyPrimitiveTopology = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP</unmanaged-short>
        GraphicsState = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE</unmanaged-short>
        GraphicsRootSignature = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE</unmanaged-short>
        ComputeRootSignature = unchecked ((System.Int32)(32)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_RS_VIEWPORTS</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_RS_VIEWPORTS</unmanaged-short>
        RasterizerViewports = unchecked ((System.Int32)(64)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS</unmanaged-short>
        RasterizerScissorRectangles = unchecked ((System.Int32)(128)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_PREDICATION</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_PREDICATION</unmanaged-short>
        Predication = unchecked ((System.Int32)(256)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS</unmanaged-short>
        OutputMergerRenderTargets = unchecked ((System.Int32)(512)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_OM_STENCIL_REF</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_OM_STENCIL_REF</unmanaged-short>
        OutputMergerStencilRef = unchecked ((System.Int32)(1024)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR</unmanaged-short>
        OutputMergerBlendFactor = unchecked ((System.Int32)(2048)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_PIPELINE_STATE</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_PIPELINE_STATE</unmanaged-short>
        PipelineState = unchecked ((System.Int32)(4096)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_SO_TARGETS</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_SO_TARGETS</unmanaged-short>
        StreamOutputTargets = unchecked ((System.Int32)(8192)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS</unmanaged-short>
        OutputMergerDepthBounds = unchecked ((System.Int32)(16384)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS</unmanaged-short>
        SamplePositions = unchecked ((System.Int32)(32768)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK</unmanaged>
        /// <unmanaged-short>D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK</unmanaged-short>
        ViewInstanceMask = unchecked ((System.Int32)(65536))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p> Specifies heap options, such as whether the heap can contain textures, and whether resources are shared across adapters. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the following API items: </p><ul> <li> <strong>ID3D12Device::CreateHeap</strong> </li> <li> <strong>ID3D12Device::CreateCommittedResource</strong> </li> <li> <strong><see cref = "SharpDX.Direct3D12.HeapDescription"/></strong> structure </li> </ul><p> The following heap flags must be used with <strong>ID3D12Device::CreateHeap</strong>, but will be set automatically for implicit heaps created by <strong>ID3D12Device::CreateCommittedResource</strong>. </p><p> Adapters that only support <strong>heap tier 1</strong> must set two out of the three following flags. </p><table> <tr><th>Value</th><th>Description</th></tr> <tr><td>D3D12_HEAP_FLAG_DENY_BUFFERS</td><td> The heap isn't allowed to contain resources with D3D12_RESOURCE_DIMENSION_BUFFER (which is a <strong><see cref = "SharpDX.Direct3D12.ResourceDimension"/></strong> enumeration constant). </td></tr> <tr><td>D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES</td><td> The heap isn't allowed to contain resources with D3D12_RESOURCE_DIMENSION_TEXTURE1D, D3D12_RESOURCE_DIMENSION_TEXTURE2D, or D3D12_RESOURCE_DIMENSION_TEXTURE3D together with either D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET or D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL. (The latter two items are <strong><see cref = "SharpDX.Direct3D12.ResourceFlags"/></strong> enumeration constants.) </td></tr> <tr><td>D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES</td><td> The heap isn't allowed to contain resources with D3D12_RESOURCE_DIMENSION_TEXTURE1D, D3D12_RESOURCE_DIMENSION_TEXTURE2D, or D3D12_RESOURCE_DIMENSION_TEXTURE3D unless D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET and D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL are absent. </td></tr> </table><p>?</p>
    /// </remarks>
    /// <doc-id>dn986730</doc-id>
    /// <unmanaged>D3D12_HEAP_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_HEAP_FLAGS</unmanaged-short>
    public enum HeapFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p> No options are specified. </p> </dd>
        /// </summary>
        /// <doc-id>dn986730</doc-id>
        /// <unmanaged>D3D12_HEAP_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The heap is shared. Refer to Shared Heaps.</p> </dd>
        /// </summary>
        /// <doc-id>dn986730</doc-id>
        /// <unmanaged>D3D12_HEAP_FLAG_SHARED</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_FLAG_SHARED</unmanaged-short>
        Shared = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> The heap isn't allowed to contain buffers. </p> </dd>
        /// </summary>
        /// <doc-id>dn986730</doc-id>
        /// <unmanaged>D3D12_HEAP_FLAG_DENY_BUFFERS</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_FLAG_DENY_BUFFERS</unmanaged-short>
        DenyBuffers = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p> The heap is allowed to contain swap-chain surfaces. </p> </dd>
        /// </summary>
        /// <doc-id>dn986730</doc-id>
        /// <unmanaged>D3D12_HEAP_FLAG_ALLOW_DISPLAY</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_FLAG_ALLOW_DISPLAY</unmanaged-short>
        AllowDisplay = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p> The heap is allowed to share resources across adapters. Refer to Shared Heaps. </p> </dd>
        /// </summary>
        /// <doc-id>dn986730</doc-id>
        /// <unmanaged>D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER</unmanaged-short>
        SharedCrossAdapter = unchecked ((System.Int32)(32)),
        /// <summary>
        /// <dd> <p> The heap is not allowed to store Render Target (RT) and/or Depth-Stencil (DS) textures. </p> </dd>
        /// </summary>
        /// <doc-id>dn986730</doc-id>
        /// <unmanaged>D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES</unmanaged-short>
        DenyRtDomainShaderTextureS = unchecked ((System.Int32)(64)),
        /// <summary>
        /// <dd> <p>The heap is not allowed to contain resources with D3D12_RESOURCE_DIMENSION_TEXTURE1D, D3D12_RESOURCE_DIMENSION_TEXTURE2D, or D3D12_RESOURCE_DIMENSION_TEXTURE3D  unless either D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET or D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL are present. Refer to <strong><see cref = "SharpDX.Direct3D12.ResourceDimension"/></strong> and <strong><see cref = "SharpDX.Direct3D12.ResourceFlags"/></strong>.</p> </dd>
        /// </summary>
        /// <doc-id>dn986730</doc-id>
        /// <unmanaged>D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES</unmanaged-short>
        DenyNonRtDomainShaderTextureS = unchecked ((System.Int32)(128)),
        /// <summary>
        /// <dd> <p>_</p> </dd>
        /// </summary>
        /// <doc-id>dn986730</doc-id>
        /// <unmanaged>D3D12_HEAP_FLAG_HARDWARE_PROTECTED</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_FLAG_HARDWARE_PROTECTED</unmanaged-short>
        HardwareProtected = unchecked ((System.Int32)(256)),
        /// <summary>
        /// <dd> <p> The heap is allowed to store all types of buffers and/or textures. This is an alias; for more details, see "Aliases" in the Remarks section. </p> </dd>
        /// </summary>
        /// <doc-id>dn986730</doc-id>
        /// <unmanaged>D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH</unmanaged-short>
        AllowWriteWatch = unchecked ((System.Int32)(512)),
        /// <summary>
        /// <dd> <p> The heap is only allowed to store buffers. This is an alias; for more details, see "Aliases" in the Remarks section. </p> </dd>
        /// </summary>
        /// <doc-id>dn986730</doc-id>
        /// <unmanaged>D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS</unmanaged-short>
        AllowShaderAtomics = unchecked ((System.Int32)(1024)),
        /// <summary>
        /// <dd> <p> The heap is allowed to store all types of buffers and/or textures. This is an alias; for more details, see "Aliases" in the Remarks section. </p> </dd>
        /// </summary>
        /// <doc-id>dn986730</doc-id>
        /// <unmanaged>D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES</unmanaged-short>
        AllowAllBuffersAndTextureS = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The heap is only allowed to store buffers. This is an alias; for more details, see "Aliases" in the Remarks section. </p> </dd>
        /// </summary>
        /// <doc-id>dn986730</doc-id>
        /// <unmanaged>D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS</unmanaged-short>
        AllowOnlyBuffers = unchecked ((System.Int32)(192)),
        /// <summary>
        /// <dd> <p> The heap is only allowed to store non-RT, non-DS textures. This is an alias; for more details, see "Aliases" in the Remarks section. </p> </dd>
        /// </summary>
        /// <doc-id>dn986730</doc-id>
        /// <unmanaged>D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES</unmanaged-short>
        AllowOnlyNonRtDomainShaderTextureS = unchecked ((System.Int32)(68)),
        /// <summary>
        /// <dd> <p> The heap is only allowed to store RT and/or DS textures. This is an alias; for more details, see "Aliases" in the Remarks section. </p> </dd>
        /// </summary>
        /// <doc-id>dn986730</doc-id>
        /// <unmanaged>D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES</unmanaged-short>
        AllowOnlyRtDomainShaderTextureS = unchecked ((System.Int32)(132))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_HEAP_SERIALIZATION_TIER</unmanaged>
    /// <unmanaged-short>D3D12_HEAP_SERIALIZATION_TIER</unmanaged-short>
    public enum HeapSerializationTier : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_HEAP_SERIALIZATION_TIER_0</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_SERIALIZATION_TIER_0</unmanaged-short>
        Tier0 = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_HEAP_SERIALIZATION_TIER_10</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_SERIALIZATION_TIER_10</unmanaged-short>
        Tier10 = unchecked ((System.Int32)(10))}

    /// <summary>
    /// <p> Specifies the type of heap. When resident, heaps reside in a particular physical memory pool with certain CPU cache properties. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the following API items: </p><ul> <li> <strong><see cref = "SharpDX.Direct3D12.HeapDescription"/></strong> </li> <li> <strong><see cref = "SharpDX.Direct3D12.HeapProperties"/></strong> </li> <li> <strong>GetCustomHeapProperties</strong> </li> </ul><p> The heap types fall into two categories: abstracted heap types, and custom heap types. </p><p> The following are abstracted heap types: </p><ul> <li>D3D12_HEAP_TYPE_DEFAULT</li> <li>D3D12_HEAP_TYPE_UPLOAD</li> <li>D3D12_HEAP_TYPE_READBACK</li> </ul><p> The following is a custom heap type: </p><ul> <li>D3D12_HEAP_TYPE_CUSTOM</li> </ul><p> The abstracted heap types (_DEFAULT, _UPLOAD, and _READBACK) are useful to simplify writing adapter-neutral applications, because such applications don't need to be aware of the adapter memory architecture. To use an abstracted heap type to simplify writing adapter-neutral applications, the application essentially treats the adapter as if it were a discrete or NUMA adapter. But, using the heap types enables efficient translation for UMA adapters. Adapter architecture neutral applications should assume there are two memory pools available, where the pool with the most GPU bandwidth cannot provide CPU access. The pool with the least GPU bandwidth can have CPU access; but must be either optimized for upload to GPU or readback from GPU. </p>
    /// </remarks>
    /// <doc-id>dn770374</doc-id>
    /// <unmanaged>D3D12_HEAP_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_HEAP_TYPE</unmanaged-short>
    public enum HeapType : System.Int32
    {
        /// <summary>
        /// <dd> <p> Specifies the default heap. This heap type experiences the most bandwidth for the GPU, but cannot provide CPU access. The GPU can read and write to the memory from this pool, and resource transition barriers may be changed. The majority of heaps and resources are expected to be located here, and are typically populated through resources in upload heaps. </p> </dd>
        /// </summary>
        /// <doc-id>dn770374</doc-id>
        /// <unmanaged>D3D12_HEAP_TYPE_DEFAULT</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_TYPE_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Specifies a heap used for uploading. This heap type has CPU access optimized for uploading to the GPU, but does not experience the maximum amount of bandwidth for the GPU. This heap type is best for CPU-write-once, GPU-read-once data; but GPU-read-once is stricter than necessary. GPU-read-once-or-from-cache is an acceptable use-case for the data; but such usages are hard to judge due to differing GPU cache designs and sizes. If in doubt, stick to the GPU-read-once definition or profile the difference on many GPUs between copying the data to a _DEFAULT heap vs. reading the data from an _UPLOAD heap. </p> <p> Resources in this heap must be created with <strong>D3D12_RESOURCE_STATE</strong>_GENERIC_READ and cannot be changed away from this. The CPU address for such heaps is commonly not efficient for CPU reads. </p> <p> The following are typical usages for _UPLOAD heaps: </p> <ul> <li> Initializing resources in a _DEFAULT heap with data from the CPU. </li> <li> Uploading dynamic data in a constant buffer that is read, repeatedly, by each vertex or pixel. </li> </ul> <p> The following are likely not good usages for _UPLOAD heaps: </p> <ul> <li> Re-initializing the contents of a resource every frame. </li> <li> Uploading constant data which is only used every other Draw call, where each Draw uses a non-trivial amount of other data. </li> </ul> </dd>
        /// </summary>
        /// <doc-id>dn770374</doc-id>
        /// <unmanaged>D3D12_HEAP_TYPE_UPLOAD</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_TYPE_UPLOAD</unmanaged-short>
        Upload = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> Specifies a heap used for reading back. This heap type has CPU access optimized for reading data back from the GPU, but does not experience the maximum amount of bandwidth for the GPU. This heap type is best for GPU-write-once, CPU-readable data. The CPU cache behavior is write-back, which is conducive for multiple sub-cache-line CPU reads. </p> <p> Resources in this heap must be created with <strong>D3D12_RESOURCE_STATE</strong>_COPY_DEST, and cannot be changed away from this. </p> </dd>
        /// </summary>
        /// <doc-id>dn770374</doc-id>
        /// <unmanaged>D3D12_HEAP_TYPE_READBACK</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_TYPE_READBACK</unmanaged-short>
        Readback = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p> Specifies a custom heap. The application may specify the memory pool and CPU cache properties directly, which can be useful for UMA optimizations, multi-engine, multi-adapter, or other special cases. To do so, the application is expected to understand the adapter architecture to make the right choice. For more details, see  <strong><see cref = "SharpDX.Direct3D12.Feature"/></strong>_ARCHITECTURE,  <strong><see cref = "SharpDX.Direct3D12.FeatureDataArchitecture"/></strong>, and  <strong>GetCustomHeapProperties</strong>. </p> </dd>
        /// </summary>
        /// <doc-id>dn770374</doc-id>
        /// <unmanaged>D3D12_HEAP_TYPE_CUSTOM</unmanaged>
        /// <unmanaged-short>D3D12_HEAP_TYPE_CUSTOM</unmanaged-short>
        Custom = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_HIT_GROUP_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_HIT_GROUP_TYPE</unmanaged-short>
    public enum HitGroupType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_HIT_GROUP_TYPE_TRIANGLES</unmanaged>
        /// <unmanaged-short>D3D12_HIT_GROUP_TYPE_TRIANGLES</unmanaged-short>
        TriangleS = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE</unmanaged>
        /// <unmanaged-short>D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE</unmanaged-short>
        ProceduralPrimitive = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_HIT_KIND</unmanaged>
    /// <unmanaged-short>D3D12_HIT_KIND</unmanaged-short>
    public enum HitKind : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_HIT_KIND_TRIANGLE_FRONT_FACE</unmanaged>
        /// <unmanaged-short>D3D12_HIT_KIND_TRIANGLE_FRONT_FACE</unmanaged-short>
        TriangleFrontFace = unchecked ((System.Int32)(254)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_HIT_KIND_TRIANGLE_BACK_FACE</unmanaged>
        /// <unmanaged-short>D3D12_HIT_KIND_TRIANGLE_BACK_FACE</unmanaged-short>
        TriangleBackFace = unchecked ((System.Int32)(255))}

    /// <summary>
    /// <p> When using triangle strip primitive topology, vertex positions are interpreted as vertices of a continuous triangle ?strip?.  There is a special index value that represents the desire to have a discontinuity in the strip, the cut index value. This enum lists the supported cut values.
    /// </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.GraphicsPipelineStateDescription"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn986732</doc-id>
    /// <unmanaged>D3D12_INDEX_BUFFER_STRIP_CUT_VALUE</unmanaged>
    /// <unmanaged-short>D3D12_INDEX_BUFFER_STRIP_CUT_VALUE</unmanaged-short>
    public enum IndexBufferStripCutValue : System.Int32
    {
        /// <summary>
        /// <dd> <p> Indicates that there is no cut value. </p> </dd>
        /// </summary>
        /// <doc-id>dn986732</doc-id>
        /// <unmanaged>D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED</unmanaged>
        /// <unmanaged-short>D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED</unmanaged-short>
        Disabled = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Indicates that 0xFFFF should be used as the cut value. </p> </dd>
        /// </summary>
        /// <doc-id>dn986732</doc-id>
        /// <unmanaged>D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF</unmanaged>
        /// <unmanaged-short>D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF</unmanaged-short>
        Value0xFFFF = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Indicates that 0xFFFFFFFF should be used as the cut value. </p> </dd>
        /// </summary>
        /// <doc-id>dn986732</doc-id>
        /// <unmanaged>D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF</unmanaged>
        /// <unmanaged-short>D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF</unmanaged-short>
        Value0xFFFFFFFF = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p> Specifies the type of the indirect parameter. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.IndirectArgumentDescription"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn986734</doc-id>
    /// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_TYPE</unmanaged-short>
    public enum IndirectArgumentType : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates the type is a Draw call.</p> </dd>
        /// </summary>
        /// <doc-id>dn986734</doc-id>
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_DRAW</unmanaged>
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_TYPE_DRAW</unmanaged-short>
        Draw = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Indicates the type is a DrawIndexed call.</p> </dd>
        /// </summary>
        /// <doc-id>dn986734</doc-id>
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED</unmanaged>
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED</unmanaged-short>
        DrawIndexed = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Indicates the type is a Dispatch call.</p> </dd>
        /// </summary>
        /// <doc-id>dn986734</doc-id>
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH</unmanaged>
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH</unmanaged-short>
        Dispatch = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Indicates the type is a vertex buffer view.</p> </dd>
        /// </summary>
        /// <doc-id>dn986734</doc-id>
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW</unmanaged>
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW</unmanaged-short>
        VertexBufferView = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Indicates the type is an index buffer view.</p> </dd>
        /// </summary>
        /// <doc-id>dn986734</doc-id>
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW</unmanaged>
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW</unmanaged-short>
        IndexBufferView = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Indicates the type is a constant.</p> </dd>
        /// </summary>
        /// <doc-id>dn986734</doc-id>
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT</unmanaged>
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT</unmanaged-short>
        Constant = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>Indicates the type is a constant buffer view (CBV).</p> </dd>
        /// </summary>
        /// <doc-id>dn986734</doc-id>
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW</unmanaged>
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW</unmanaged-short>
        ConstantBufferView = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>Indicates the type is a shader resource view (SRV).</p> </dd>
        /// </summary>
        /// <doc-id>dn986734</doc-id>
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW</unmanaged>
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW</unmanaged-short>
        ShaderResourceView = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>Indicates the type is an unordered access view (UAV).</p> </dd>
        /// </summary>
        /// <doc-id>dn986734</doc-id>
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW</unmanaged>
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW</unmanaged-short>
        UnorderedAccessView = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p>Identifies the type of data contained in an input slot.</p>
    /// </summary>
    /// <remarks>
    /// <p> Specify one of these values in the member of a <strong><see cref = "SharpDX.Direct3D12.InputElement"/></strong> structure to specify the type of data for the input element of a pipeline state object. </p>
    /// </remarks>
    /// <doc-id>dn770376</doc-id>
    /// <unmanaged>D3D12_INPUT_CLASSIFICATION</unmanaged>
    /// <unmanaged-short>D3D12_INPUT_CLASSIFICATION</unmanaged-short>
    public enum InputClassification : System.Int32
    {
        /// <summary>
        /// <dd> <p>Input data is per-vertex data.</p> </dd>
        /// </summary>
        /// <doc-id>dn770376</doc-id>
        /// <unmanaged>D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA</unmanaged>
        /// <unmanaged-short>D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA</unmanaged-short>
        PerVertexData = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Input data is per-instance data.</p> </dd>
        /// </summary>
        /// <doc-id>dn770376</doc-id>
        /// <unmanaged>D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA</unmanaged>
        /// <unmanaged-short>D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA</unmanaged-short>
        PerInstanceData = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_LIFETIME_STATE</unmanaged>
    /// <unmanaged-short>D3D12_LIFETIME_STATE</unmanaged-short>
    public enum LifetimeState : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_LIFETIME_STATE_IN_USE</unmanaged>
        /// <unmanaged-short>D3D12_LIFETIME_STATE_IN_USE</unmanaged-short>
        InUse = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_LIFETIME_STATE_NOT_IN_USE</unmanaged>
        /// <unmanaged-short>D3D12_LIFETIME_STATE_NOT_IN_USE</unmanaged-short>
        NotInUse = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies logical operations to configure for a render target.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.RenderTargetBlendDescription"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>dn770379</doc-id>
    /// <unmanaged>D3D12_LOGIC_OP</unmanaged>
    /// <unmanaged-short>D3D12_LOGIC_OP</unmanaged-short>
    public enum LogicOperation : System.Int32
    {
        /// <summary>
        /// <dd> <p>Clears the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_CLEAR</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_CLEAR</unmanaged-short>
        Clear = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Sets the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_SET</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_SET</unmanaged-short>
        Set = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Copys the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_COPY</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_COPY</unmanaged-short>
        Copy = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Performs an inverted-copy of the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_COPY_INVERTED</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_COPY_INVERTED</unmanaged-short>
        CopyInverted = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>No operation is performed on the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_NOOP</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_NOOP</unmanaged-short>
        Noop = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Inverts the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_INVERT</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_INVERT</unmanaged-short>
        Invert = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>Performs a logical AND operation on the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_AND</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_AND</unmanaged-short>
        And = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>Performs a logical NAND operation on the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_NAND</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_NAND</unmanaged-short>
        Nand = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>Performs a logical OR operation on the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_OR</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_OR</unmanaged-short>
        Or = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>Performs a logical NOR operation on the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_NOR</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_NOR</unmanaged-short>
        Nor = unchecked ((System.Int32)(9)),
        /// <summary>
        /// <dd> <p>Performs a logical XOR operation on the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_XOR</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_XOR</unmanaged-short>
        Xor = unchecked ((System.Int32)(10)),
        /// <summary>
        /// <dd> <p>Performs a logical equal operation on the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_EQUIV</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_EQUIV</unmanaged-short>
        Equiv = unchecked ((System.Int32)(11)),
        /// <summary>
        /// <dd> <p>Performs a logical AND and reverse operation on the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_AND_REVERSE</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_AND_REVERSE</unmanaged-short>
        AndReverse = unchecked ((System.Int32)(12)),
        /// <summary>
        /// <dd> <p>Performs a logical AND and invert operation on the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_AND_INVERTED</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_AND_INVERTED</unmanaged-short>
        AndInverted = unchecked ((System.Int32)(13)),
        /// <summary>
        /// <dd> <p>Performs a logical OR and reverse operation on the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_OR_REVERSE</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_OR_REVERSE</unmanaged-short>
        OrReverse = unchecked ((System.Int32)(14)),
        /// <summary>
        /// <dd> <p>Performs a logical OR and invert operation on the render target.</p> </dd>
        /// </summary>
        /// <doc-id>dn770379</doc-id>
        /// <unmanaged>D3D12_LOGIC_OP_OR_INVERTED</unmanaged>
        /// <unmanaged-short>D3D12_LOGIC_OP_OR_INVERTED</unmanaged-short>
        OrInverted = unchecked ((System.Int32)(15))}

    /// <summary>
    /// <p>Specifies the memory pool for the heap.</p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.HeapProperties"/></strong> structure. </p><p>When the adapter is UMA, D3D12_MEMORY_POOL_L0 and DXGI_MEMORY_SEGMENT_GROUP_LOCAL refer to the same memory. When</p><p> the adapter is not UMA:
    /// D3D12_MEMORY_POOL_L0 and DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL refer to the same memory.
    /// D3D12_MEMORY_POOL_L1 and DXGI_MEMORY_SEGMENT_GROUP_LOCAL refer to the same memory.</p>
    /// </remarks>
    /// <doc-id>dn770381</doc-id>
    /// <unmanaged>D3D12_MEMORY_POOL</unmanaged>
    /// <unmanaged-short>D3D12_MEMORY_POOL</unmanaged-short>
    public enum MemoryPool : System.Int32
    {
        /// <summary>
        /// <dd> <p> The memory pool is unknown. </p> </dd>
        /// </summary>
        /// <doc-id>dn770381</doc-id>
        /// <unmanaged>D3D12_MEMORY_POOL_UNKNOWN</unmanaged>
        /// <unmanaged-short>D3D12_MEMORY_POOL_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The memory pool is L0. L0 is the physical system memory pool. When the adapter is discrete/NUMA, this pool has greater bandwidth for the CPU and less bandwidth for the GPU. When the adapter is UMA, this pool is the only one which is valid. </p> </dd>
        /// </summary>
        /// <doc-id>dn770381</doc-id>
        /// <unmanaged>D3D12_MEMORY_POOL_L0</unmanaged>
        /// <unmanaged-short>D3D12_MEMORY_POOL_L0</unmanaged-short>
        L0 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> The memory pool is L1. L1 is typically known as the physical video memory pool. L1 is only available when the adapter is discrete/NUMA, and has greater bandwidth for the GPU and cannot even be accessed by the CPU. When the adapter is UMA, this pool is not available. </p> </dd>
        /// </summary>
        /// <doc-id>dn770381</doc-id>
        /// <unmanaged>D3D12_MEMORY_POOL_L1</unmanaged>
        /// <unmanaged-short>D3D12_MEMORY_POOL_L1</unmanaged-short>
        L1 = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p> Specifies categories of debug messages. This will identify the category of a message when retrieving a message with <strong>ID3D12InfoQueue::GetMessage</strong> and when adding a message with <strong>ID3D12InfoQueue::AddMessage</strong>. When creating an info queue filter, these values can be used to allow or deny any categories of messages to pass through the storage and retrieval filters. </p>
    /// </summary>
    /// <remarks>
    /// <p>This is part of the Information Queue feature, refer to the <strong><see cref = "SharpDX.Direct3D12.InfoQueue"/></strong> Interface.</p>
    /// </remarks>
    /// <doc-id>dn950145</doc-id>
    /// <unmanaged>D3D12_MESSAGE_CATEGORY</unmanaged>
    /// <unmanaged-short>D3D12_MESSAGE_CATEGORY</unmanaged-short>
    public enum MessageCategory : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950145</doc-id>
        /// <unmanaged>D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED</unmanaged-short>
        ApplicationDefined = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950145</doc-id>
        /// <unmanaged>D3D12_MESSAGE_CATEGORY_MISCELLANEOUS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_CATEGORY_MISCELLANEOUS</unmanaged-short>
        Miscellaneous = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950145</doc-id>
        /// <unmanaged>D3D12_MESSAGE_CATEGORY_INITIALIZATION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_CATEGORY_INITIALIZATION</unmanaged-short>
        Initialization = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950145</doc-id>
        /// <unmanaged>D3D12_MESSAGE_CATEGORY_CLEANUP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_CATEGORY_CLEANUP</unmanaged-short>
        Cleanup = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950145</doc-id>
        /// <unmanaged>D3D12_MESSAGE_CATEGORY_COMPILATION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_CATEGORY_COMPILATION</unmanaged-short>
        Compilation = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950145</doc-id>
        /// <unmanaged>D3D12_MESSAGE_CATEGORY_STATE_CREATION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_CATEGORY_STATE_CREATION</unmanaged-short>
        StateCreation = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950145</doc-id>
        /// <unmanaged>D3D12_MESSAGE_CATEGORY_STATE_SETTING</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_CATEGORY_STATE_SETTING</unmanaged-short>
        StateSetting = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950145</doc-id>
        /// <unmanaged>D3D12_MESSAGE_CATEGORY_STATE_GETTING</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_CATEGORY_STATE_GETTING</unmanaged-short>
        StateGetting = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950145</doc-id>
        /// <unmanaged>D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION</unmanaged-short>
        ResourceManipulation = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950145</doc-id>
        /// <unmanaged>D3D12_MESSAGE_CATEGORY_EXECUTION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_CATEGORY_EXECUTION</unmanaged-short>
        Execution = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950145</doc-id>
        /// <unmanaged>D3D12_MESSAGE_CATEGORY_SHADER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_CATEGORY_SHADER</unmanaged-short>
        Shader = unchecked ((System.Int32)(10))}

    /// <summary>
    /// <p> Specifies debug message IDs for setting up an info-queue filter  (see <strong><see cref = "SharpDX.Direct3D12.InfoQueueFilter"/></strong>);  use these messages to allow or deny message categories to pass through the storage and retrieval filters.  These IDs are used by methods such as  <strong>ID3D12InfoQueue::GetMessage</strong> or  <strong>ID3D12InfoQueue::AddMessage</strong>. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by <strong>AddMessage</strong>. </p>
    /// </remarks>
    /// <doc-id>dn950146</doc-id>
    /// <unmanaged>D3D12_MESSAGE_ID</unmanaged>
    /// <unmanaged-short>D3D12_MESSAGE_ID</unmanaged-short>
    public enum MessageId : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UNKNOWN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_STRING_FROM_APPLICATION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_STRING_FROM_APPLICATION</unmanaged-short>
        StringFromApplication = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_THIS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_THIS</unmanaged-short>
        CorruptedThis = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1</unmanaged-short>
        CorruptedParameter1 = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2</unmanaged-short>
        CorruptedParameter2 = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3</unmanaged-short>
        CorruptedParameter3 = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4</unmanaged-short>
        CorruptedParameter4 = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5</unmanaged-short>
        CorruptedParameter5 = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6</unmanaged-short>
        CorruptedParameter6 = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7</unmanaged-short>
        CorruptedParameter7 = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8</unmanaged-short>
        CorruptedParameter8 = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9</unmanaged-short>
        CorruptedParameter9 = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10</unmanaged-short>
        CorruptedParameter10 = unchecked ((System.Int32)(12)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11</unmanaged-short>
        CorruptedParameter11 = unchecked ((System.Int32)(13)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12</unmanaged-short>
        CorruptedParameter12 = unchecked ((System.Int32)(14)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13</unmanaged-short>
        CorruptedParameter13 = unchecked ((System.Int32)(15)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14</unmanaged-short>
        CorruptedParameter14 = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15</unmanaged-short>
        CorruptedParameter15 = unchecked ((System.Int32)(17)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING</unmanaged-short>
        CorruptedMultithreading = unchecked ((System.Int32)(18)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY</unmanaged-short>
        MessageReportingOufOfMemory = unchecked ((System.Int32)(19)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA</unmanaged-short>
        GetPrivateDataMoreData = unchecked ((System.Int32)(20)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA</unmanaged-short>
        SetPrivateDataInvalidFreeData = unchecked ((System.Int32)(21)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN</unmanaged-short>
        SetPrivateDataInvalidIUnknown = unchecked ((System.Int32)(22)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS</unmanaged-short>
        SetPrivateDataInvalidFlags = unchecked ((System.Int32)(23)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS</unmanaged-short>
        SetPrivateDataChangingparams = unchecked ((System.Int32)(24)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY</unmanaged-short>
        SetPrivateDataOufOfMemory = unchecked ((System.Int32)(25)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT</unmanaged-short>
        CreateShaderResourceViewUnrecognizedFormat = unchecked ((System.Int32)(26)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC</unmanaged-short>
        CreateShaderResourceViewInvalidDescription = unchecked ((System.Int32)(27)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT</unmanaged-short>
        CreateShaderResourceViewInvalidFormat = unchecked ((System.Int32)(28)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE</unmanaged-short>
        CreateShaderResourceViewInvalidVideoPlaneslice = unchecked ((System.Int32)(29)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE</unmanaged-short>
        CreateShaderResourceViewInvalidPlaneslice = unchecked ((System.Int32)(30)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS</unmanaged-short>
        CreateShaderResourceViewInvalidDimensions = unchecked ((System.Int32)(31)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE</unmanaged-short>
        CreateShaderResourceViewInvalidResource = unchecked ((System.Int32)(32)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN</unmanaged-short>
        CreateShaderResourceViewInvalidArgumentReturn = unchecked ((System.Int32)(33)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN</unmanaged-short>
        CreateShaderResourceViewOufOfMemoryReturn = unchecked ((System.Int32)(34)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT</unmanaged-short>
        CreateRenderTargetViewUnrecognizedFormat = unchecked ((System.Int32)(35)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT</unmanaged-short>
        CreateRenderTargetViewUnsupportedFormat = unchecked ((System.Int32)(36)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC</unmanaged-short>
        CreateRenderTargetViewInvalidDescription = unchecked ((System.Int32)(37)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT</unmanaged-short>
        CreateRenderTargetViewInvalidFormat = unchecked ((System.Int32)(38)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE</unmanaged-short>
        CreateRenderTargetViewInvalidVideoPlaneslice = unchecked ((System.Int32)(39)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE</unmanaged-short>
        CreateRenderTargetViewInvalidPlaneslice = unchecked ((System.Int32)(40)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS</unmanaged-short>
        CreateRenderTargetViewInvalidDimensions = unchecked ((System.Int32)(41)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE</unmanaged-short>
        CreateRenderTargetViewInvalidResource = unchecked ((System.Int32)(42)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN</unmanaged-short>
        CreateRenderTargetViewInvalidArgumentReturn = unchecked ((System.Int32)(43)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN</unmanaged-short>
        CreateRenderTargetViewOufOfMemoryReturn = unchecked ((System.Int32)(44)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT</unmanaged-short>
        CreateDepthStencilViewUnrecognizedFormat = unchecked ((System.Int32)(45)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC</unmanaged-short>
        CreateDepthStencilViewInvalidDescription = unchecked ((System.Int32)(46)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT</unmanaged-short>
        CreateDepthStencilViewInvalidFormat = unchecked ((System.Int32)(47)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS</unmanaged-short>
        CreateDepthStencilViewInvalidDimensions = unchecked ((System.Int32)(48)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE</unmanaged-short>
        CreateDepthStencilViewInvalidResource = unchecked ((System.Int32)(49)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN</unmanaged-short>
        CreateDepthStencilViewInvalidArgumentReturn = unchecked ((System.Int32)(50)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN</unmanaged-short>
        CreateDepthStencilViewOufOfMemoryReturn = unchecked ((System.Int32)(51)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY</unmanaged-short>
        CreateInputLayoutOufOfMemory = unchecked ((System.Int32)(52)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS</unmanaged-short>
        CreateInputLayoutTooManyElements = unchecked ((System.Int32)(53)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT</unmanaged-short>
        CreateInputLayoutInvalidFormat = unchecked ((System.Int32)(54)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT</unmanaged-short>
        CreateInputLayoutIncompatibleformat = unchecked ((System.Int32)(55)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT</unmanaged-short>
        CreateInputLayoutInvalidSlot = unchecked ((System.Int32)(56)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS</unmanaged-short>
        CreateInputLayoutInvalidInputsLotclass = unchecked ((System.Int32)(57)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH</unmanaged-short>
        CreateInputLayoutSteprateslotclassmismatch = unchecked ((System.Int32)(58)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE</unmanaged-short>
        CreateInputLayoutInvalidSlotClassChange = unchecked ((System.Int32)(59)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE</unmanaged-short>
        CreateInputLayoutInvalidStepratechange = unchecked ((System.Int32)(60)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT</unmanaged-short>
        CreateInputLayoutInvalidAlignment = unchecked ((System.Int32)(61)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC</unmanaged-short>
        CreateInputLayoutDuplicatesemantic = unchecked ((System.Int32)(62)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE</unmanaged-short>
        CreateInputLayoutUnparseableinputsignature = unchecked ((System.Int32)(63)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC</unmanaged-short>
        CreateInputLayoutNullSemantic = unchecked ((System.Int32)(64)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT</unmanaged-short>
        CreateInputLayoutMissingElement = unchecked ((System.Int32)(65)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY</unmanaged-short>
        CreateVertexShaderOufOfMemory = unchecked ((System.Int32)(66)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE</unmanaged-short>
        CreateVertexShaderInvalidShaderBytecode = unchecked ((System.Int32)(67)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE</unmanaged-short>
        CreateVertexShaderInvalidShaderType = unchecked ((System.Int32)(68)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY</unmanaged-short>
        CreateGeometryShaderOufOfMemory = unchecked ((System.Int32)(69)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE</unmanaged-short>
        CreateGeometryShaderInvalidShaderBytecode = unchecked ((System.Int32)(70)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE</unmanaged-short>
        CreateGeometryShaderInvalidShaderType = unchecked ((System.Int32)(71)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY</unmanaged-short>
        CreateGeometryShaderWithStreamOutputOufOfMemory = unchecked ((System.Int32)(72)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE</unmanaged-short>
        CreateGeometryShaderWithStreamOutputInvalidShaderBytecode = unchecked ((System.Int32)(73)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE</unmanaged-short>
        CreateGeometryShaderWithStreamOutputInvalidShaderType = unchecked ((System.Int32)(74)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES</unmanaged-short>
        CreateGeometryShaderWithStreamOutputInvalidNumentries = unchecked ((System.Int32)(75)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED</unmanaged-short>
        CreateGeometryShaderWithStreamOutputOutputStreamsTrideunused = unchecked ((System.Int32)(76)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL</unmanaged-short>
        CreateGeometryShaderWithStreamOutputUnexpectedDeclaration = unchecked ((System.Int32)(77)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL</unmanaged-short>
        CreateGeometryShaderWithStreamOutputExpectedDeclaration = unchecked ((System.Int32)(78)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED</unmanaged-short>
        CreateGeometryShaderWithStreamOutputOutputSlot0expected = unchecked ((System.Int32)(79)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT</unmanaged-short>
        CreateGeometryShaderWithStreamOutputInvalidOutputSlot = unchecked ((System.Int32)(80)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT</unmanaged-short>
        CreateGeometryShaderWithStreamOutputOnlyoneelementperslot = unchecked ((System.Int32)(81)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT</unmanaged-short>
        CreateGeometryShaderWithStreamOutputInvalidComponentcount = unchecked ((System.Int32)(82)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT</unmanaged-short>
        CreateGeometryShaderWithStreamOutputInvalidStartcomponentandcomponentcount = unchecked ((System.Int32)(83)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION</unmanaged-short>
        CreateGeometryShaderWithStreamOutputInvalidGapdefinition = unchecked ((System.Int32)(84)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT</unmanaged-short>
        CreateGeometryShaderWithStreamOutputRepeatedoutput = unchecked ((System.Int32)(85)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE</unmanaged-short>
        CreateGeometryShaderWithStreamOutputInvalidOutputStreamsTride = unchecked ((System.Int32)(86)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC</unmanaged-short>
        CreateGeometryShaderWithStreamOutputMissingSemantic = unchecked ((System.Int32)(87)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH</unmanaged-short>
        CreateGeometryShaderWithStreamOutputMaskmismatch = unchecked ((System.Int32)(88)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS</unmanaged-short>
        CreateGeometryShaderWithStreamOutputCanthaveonlygaps = unchecked ((System.Int32)(89)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX</unmanaged-short>
        CreateGeometryShaderWithStreamOutputDeclarationTooComplex = unchecked ((System.Int32)(90)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE</unmanaged-short>
        CreateGeometryShaderWithStreamOutputMissingOutputSignature = unchecked ((System.Int32)(91)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY</unmanaged-short>
        CreatePixelShaderOufOfMemory = unchecked ((System.Int32)(92)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE</unmanaged-short>
        CreatePixelShaderInvalidShaderBytecode = unchecked ((System.Int32)(93)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE</unmanaged-short>
        CreatePixelShaderInvalidShaderType = unchecked ((System.Int32)(94)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE</unmanaged-short>
        CreateRasterizerstateInvalidFillmode = unchecked ((System.Int32)(95)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE</unmanaged-short>
        CreateRasterizerstateInvalidCullmode = unchecked ((System.Int32)(96)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP</unmanaged-short>
        CreateRasterizerstateInvalidDepthBiasclamp = unchecked ((System.Int32)(97)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS</unmanaged-short>
        CreateRasterizerstateInvalidSlopescaleddepthbias = unchecked ((System.Int32)(98)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC</unmanaged-short>
        CreateRasterizerstateNullDescription = unchecked ((System.Int32)(99)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK</unmanaged-short>
        CreateDepthStencilStateInvalidDepthWriteMask = unchecked ((System.Int32)(100)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC</unmanaged-short>
        CreateDepthStencilStateInvalidDepthFunction = unchecked ((System.Int32)(101)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP</unmanaged-short>
        CreateDepthStencilStateInvalidFrontfacestencilfailop = unchecked ((System.Int32)(102)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP</unmanaged-short>
        CreateDepthStencilStateInvalidFrontfacestencilzfailop = unchecked ((System.Int32)(103)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP</unmanaged-short>
        CreateDepthStencilStateInvalidFrontfacestencilpassop = unchecked ((System.Int32)(104)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC</unmanaged-short>
        CreateDepthStencilStateInvalidFrontfacestencilfunc = unchecked ((System.Int32)(105)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP</unmanaged-short>
        CreateDepthStencilStateInvalidBackfaceStencilFailop = unchecked ((System.Int32)(106)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP</unmanaged-short>
        CreateDepthStencilStateInvalidBackfaceStencilZfailop = unchecked ((System.Int32)(107)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP</unmanaged-short>
        CreateDepthStencilStateInvalidBackfaceStencilPassop = unchecked ((System.Int32)(108)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC</unmanaged-short>
        CreateDepthStencilStateInvalidBackfaceStencilFunction = unchecked ((System.Int32)(109)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC</unmanaged-short>
        CreateDepthStencilStateNullDescription = unchecked ((System.Int32)(110)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND</unmanaged-short>
        CreateBlendStateInvalidSourceBlend = unchecked ((System.Int32)(111)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND</unmanaged-short>
        CreateBlendStateInvalidDestinationBlend = unchecked ((System.Int32)(112)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP</unmanaged-short>
        CreateBlendStateInvalidBlendOperation = unchecked ((System.Int32)(113)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA</unmanaged-short>
        CreateBlendStateInvalidSourceBlendAlpha = unchecked ((System.Int32)(114)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA</unmanaged-short>
        CreateBlendStateInvalidDestinationBlendAlpha = unchecked ((System.Int32)(115)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA</unmanaged-short>
        CreateBlendStateInvalidBlendOperationAlpha = unchecked ((System.Int32)(116)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK</unmanaged-short>
        CreateBlendStateInvalidRenderTargetWriteMask = unchecked ((System.Int32)(117)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC</unmanaged-short>
        CreateBlendStateNullDescription = unchecked ((System.Int32)(118)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER</unmanaged-short>
        CreateSamplerStateInvalidFilter = unchecked ((System.Int32)(119)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU</unmanaged-short>
        CreateSamplerStateInvalidAddressU = unchecked ((System.Int32)(120)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV</unmanaged-short>
        CreateSamplerStateInvalidAddressV = unchecked ((System.Int32)(121)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW</unmanaged-short>
        CreateSamplerStateInvalidAddressW = unchecked ((System.Int32)(122)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS</unmanaged-short>
        CreateSamplerStateInvalidMiplodbias = unchecked ((System.Int32)(123)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY</unmanaged-short>
        CreateSamplerStateInvalidMaximumAnisotropy = unchecked ((System.Int32)(124)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC</unmanaged-short>
        CreateSamplerStateInvalidComparisonfunc = unchecked ((System.Int32)(125)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD</unmanaged-short>
        CreateSamplerStateInvalidMinimumLod = unchecked ((System.Int32)(126)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD</unmanaged-short>
        CreateSamplerStateInvalidMaximumLod = unchecked ((System.Int32)(127)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC</unmanaged-short>
        CreateSamplerStateNullDescription = unchecked ((System.Int32)(128)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED</unmanaged-short>
        DeviceInputAssemblySetPrimitivetopologyTopologyUnrecognized = unchecked ((System.Int32)(129)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED</unmanaged-short>
        DeviceInputAssemblySetPrimitivetopologyTopologyUndefined = unchecked ((System.Int32)(130)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT</unmanaged-short>
        DeviceRasterizerSetViewportsInvalidViewport = unchecked ((System.Int32)(131)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR</unmanaged-short>
        DeviceRasterizerSetScissorRectanglesInvalidScissor = unchecked ((System.Int32)(132)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH</unmanaged-short>
        ClearRenderTargetViewDenormFlush = unchecked ((System.Int32)(133)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH</unmanaged-short>
        ClearDepthStencilViewDenormFlush = unchecked ((System.Int32)(134)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID</unmanaged-short>
        ClearDepthStencilViewInvalid = unchecked ((System.Int32)(135)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE</unmanaged-short>
        CopyResourceInvalidSource = unchecked ((System.Int32)(136)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE</unmanaged-short>
        CopyResourceInvalidDestinationState = unchecked ((System.Int32)(137)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE</unmanaged-short>
        CopyResourceInvalidSourceState = unchecked ((System.Int32)(138)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE</unmanaged-short>
        UpdatesUbresourceInvalidDestinationSubResource = unchecked ((System.Int32)(139)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX</unmanaged-short>
        UpdatesUbresourceInvalidDestinationBox = unchecked ((System.Int32)(140)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE</unmanaged-short>
        UpdatesUbresourceInvalidDestinationState = unchecked ((System.Int32)(141)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID</unmanaged-short>
        DeviceResolvesubresourceDestinationInvalid = unchecked ((System.Int32)(142)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID</unmanaged-short>
        DeviceResolvesubresourceDestinationSubResourceInvalid = unchecked ((System.Int32)(143)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID</unmanaged-short>
        DeviceResolvesubresourceSourceInvalid = unchecked ((System.Int32)(144)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID</unmanaged-short>
        DeviceResolvesubresourceSourceSubResourceInvalid = unchecked ((System.Int32)(145)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID</unmanaged-short>
        DeviceResolvesubresourceFormatInvalid = unchecked ((System.Int32)(146)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE</unmanaged-short>
        BufferMapInvalidMaptype = unchecked ((System.Int32)(147)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS</unmanaged-short>
        BufferMapInvalidFlags = unchecked ((System.Int32)(148)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED</unmanaged-short>
        BufferMapAlreadymapped = unchecked ((System.Int32)(149)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN</unmanaged-short>
        BufferMapDeviceremovedReturn = unchecked ((System.Int32)(150)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED</unmanaged-short>
        BufferUnmapNotMapped = unchecked ((System.Int32)(151)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE</unmanaged-short>
        Texture1DMapInvalidMaptype = unchecked ((System.Int32)(152)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE</unmanaged-short>
        Texture1DMapInvalidSubResource = unchecked ((System.Int32)(153)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS</unmanaged-short>
        Texture1DMapInvalidFlags = unchecked ((System.Int32)(154)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED</unmanaged-short>
        Texture1DMapAlreadymapped = unchecked ((System.Int32)(155)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN</unmanaged-short>
        Texture1DMapDeviceremovedReturn = unchecked ((System.Int32)(156)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE</unmanaged-short>
        Texture1DUnmapInvalidSubResource = unchecked ((System.Int32)(157)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED</unmanaged-short>
        Texture1DUnmapNotMapped = unchecked ((System.Int32)(158)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE</unmanaged-short>
        Texture2DMapInvalidMaptype = unchecked ((System.Int32)(159)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE</unmanaged-short>
        Texture2DMapInvalidSubResource = unchecked ((System.Int32)(160)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS</unmanaged-short>
        Texture2DMapInvalidFlags = unchecked ((System.Int32)(161)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED</unmanaged-short>
        Texture2DMapAlreadymapped = unchecked ((System.Int32)(162)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN</unmanaged-short>
        Texture2DMapDeviceremovedReturn = unchecked ((System.Int32)(163)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE</unmanaged-short>
        Texture2DUnmapInvalidSubResource = unchecked ((System.Int32)(164)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED</unmanaged-short>
        Texture2DUnmapNotMapped = unchecked ((System.Int32)(165)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE</unmanaged-short>
        Texture3DMapInvalidMaptype = unchecked ((System.Int32)(166)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE</unmanaged-short>
        Texture3DMapInvalidSubResource = unchecked ((System.Int32)(167)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS</unmanaged-short>
        Texture3DMapInvalidFlags = unchecked ((System.Int32)(168)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED</unmanaged-short>
        Texture3DMapAlreadymapped = unchecked ((System.Int32)(169)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN</unmanaged-short>
        Texture3DMapDeviceremovedReturn = unchecked ((System.Int32)(170)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE</unmanaged-short>
        Texture3DUnmapInvalidSubResource = unchecked ((System.Int32)(171)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED</unmanaged-short>
        Texture3DUnmapNotMapped = unchecked ((System.Int32)(172)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED</unmanaged-short>
        CheckFormatSupportFormatDeprecated = unchecked ((System.Int32)(173)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED</unmanaged-short>
        CheckMultisamplequalitylevelsFormatDeprecated = unchecked ((System.Int32)(174)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS</unmanaged-short>
        SetExceptionmodeUnrecognizedFlags = unchecked ((System.Int32)(175)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN</unmanaged-short>
        SetExceptionmodeInvalidArgumentReturn = unchecked ((System.Int32)(176)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN</unmanaged-short>
        SetExceptionmodeDeviceremovedReturn = unchecked ((System.Int32)(177)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE</unmanaged-short>
        RefSimulatingInfinitelyFastHardware = unchecked ((System.Int32)(178)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_REF_THREADING_MODE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_REF_THREADING_MODE</unmanaged-short>
        RefThreadingMode = unchecked ((System.Int32)(179)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_REF_UMDRIVER_EXCEPTION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_REF_UMDRIVER_EXCEPTION</unmanaged-short>
        RefUmdriverException = unchecked ((System.Int32)(180)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_REF_KMDRIVER_EXCEPTION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_REF_KMDRIVER_EXCEPTION</unmanaged-short>
        RefKmdriverException = unchecked ((System.Int32)(181)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_REF_HARDWARE_EXCEPTION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_REF_HARDWARE_EXCEPTION</unmanaged-short>
        RefHardwareException = unchecked ((System.Int32)(182)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE</unmanaged-short>
        RefAccessIngIndexAbleTempOutOfRange = unchecked ((System.Int32)(183)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER</unmanaged-short>
        RefProblemParsingShader = unchecked ((System.Int32)(184)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_REF_OUT_OF_MEMORY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_REF_OUT_OF_MEMORY</unmanaged-short>
        RefOutOfMemory = unchecked ((System.Int32)(185)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_REF_INFO</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_REF_INFO</unmanaged-short>
        RefInformation = unchecked ((System.Int32)(186)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW</unmanaged-short>
        DeviceDrawVertexPosOverflow = unchecked ((System.Int32)(187)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW</unmanaged-short>
        DeviceDrawIndexedIndexPosOverflow = unchecked ((System.Int32)(188)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW</unmanaged-short>
        DeviceDrawInstancedVertexPosOverflow = unchecked ((System.Int32)(189)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW</unmanaged-short>
        DeviceDrawInstancedInstancePosOverflow = unchecked ((System.Int32)(190)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW</unmanaged-short>
        DeviceDrawIndexedInstancedInstancePosOverflow = unchecked ((System.Int32)(191)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW</unmanaged-short>
        DeviceDrawIndexedInstancedIndexPosOverflow = unchecked ((System.Int32)(192)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET</unmanaged-short>
        DeviceDrawVertexShaderNotSet = unchecked ((System.Int32)(193)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND</unmanaged-short>
        DeviceShaderLinkageSemanticnameNotFound = unchecked ((System.Int32)(194)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX</unmanaged-short>
        DeviceShaderLinkageRegisterindex = unchecked ((System.Int32)(195)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE</unmanaged-short>
        DeviceShaderLinkageComponenttype = unchecked ((System.Int32)(196)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK</unmanaged-short>
        DeviceShaderLinkageRegistermask = unchecked ((System.Int32)(197)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE</unmanaged-short>
        DeviceShaderLinkageSystemvalue = unchecked ((System.Int32)(198)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS</unmanaged-short>
        DeviceShaderLinkageNeverwrittenAlwaysreads = unchecked ((System.Int32)(199)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET</unmanaged-short>
        CommandListDrawRootSignatureNotSet = unchecked ((System.Int32)(200)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH</unmanaged-short>
        CommandListDrawRootSignatureMismatch = unchecked ((System.Int32)(201)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET</unmanaged-short>
        CommandListDrawVertexBufferNotSet = unchecked ((System.Int32)(202)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INPUTLAYOUT_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INPUTLAYOUT_NOT_SET</unmanaged-short>
        CommandListDrawInputLayoutNotSet = unchecked ((System.Int32)(203)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_CONSTANT_BUFFER_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_CONSTANT_BUFFER_NOT_SET</unmanaged-short>
        CommandListDrawConstantBufferNotSet = unchecked ((System.Int32)(204)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_CONSTANT_BUFFER_TOO_SMALL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_CONSTANT_BUFFER_TOO_SMALL</unmanaged-short>
        CommandListDrawConstantBufferTooSmall = unchecked ((System.Int32)(205)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SAMPLER_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SAMPLER_NOT_SET</unmanaged-short>
        CommandListDrawSamplerNotSet = unchecked ((System.Int32)(206)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SHADERRESOURCEVIEW_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SHADERRESOURCEVIEW_NOT_SET</unmanaged-short>
        CommandListDrawShaderResourceViewNotSet = unchecked ((System.Int32)(207)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VIEW_DIMENSION_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VIEW_DIMENSION_MISMATCH</unmanaged-short>
        CommandListDrawViewDimensionMismatch = unchecked ((System.Int32)(208)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL</unmanaged-short>
        CommandListDrawVertexBufferStrideTooSmall = unchecked ((System.Int32)(209)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL</unmanaged-short>
        CommandListDrawVertexBufferTooSmall = unchecked ((System.Int32)(210)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET</unmanaged-short>
        CommandListDrawIndexBufferNotSet = unchecked ((System.Int32)(211)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID</unmanaged-short>
        CommandListDrawIndexBufferFormatInvalid = unchecked ((System.Int32)(212)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL</unmanaged-short>
        CommandListDrawIndexBufferTooSmall = unchecked ((System.Int32)(213)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_GS_INPUT_PRIMITIVE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_GS_INPUT_PRIMITIVE_MISMATCH</unmanaged-short>
        CommandListDrawGeometryShaderInputPrimitiveMismatch = unchecked ((System.Int32)(214)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_RETURN_TYPE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_RETURN_TYPE_MISMATCH</unmanaged-short>
        CommandListDrawResourceReturnTypeMismatch = unchecked ((System.Int32)(215)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_POSITION_NOT_PRESENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_POSITION_NOT_PRESENT</unmanaged-short>
        CommandListDrawPositionNotPresent = unchecked ((System.Int32)(216)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OUTPUT_STREAM_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OUTPUT_STREAM_NOT_SET</unmanaged-short>
        CommandListDrawOutputStreamNotSet = unchecked ((System.Int32)(217)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_BOUND_RESOURCE_MAPPED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_BOUND_RESOURCE_MAPPED</unmanaged-short>
        CommandListDrawBoundResourceMapped = unchecked ((System.Int32)(218)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY</unmanaged-short>
        CommandListDrawInvalidPrimitivetopology = unchecked ((System.Int32)(219)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_OFFSET_UNALIGNED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_OFFSET_UNALIGNED</unmanaged-short>
        CommandListDrawVertexOffsetUnaligned = unchecked ((System.Int32)(220)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED</unmanaged-short>
        CommandListDrawVertexStrideUnaligned = unchecked ((System.Int32)(221)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED</unmanaged-short>
        CommandListDrawIndexOffsetUnaligned = unchecked ((System.Int32)(222)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED</unmanaged-short>
        CommandListDrawOutputStreamOffsetUnaligned = unchecked ((System.Int32)(223)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED</unmanaged-short>
        CommandListDrawResourceFormatLdUnsupported = unchecked ((System.Int32)(224)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED</unmanaged-short>
        CommandListDrawResourceFormatSampleUnsupported = unchecked ((System.Int32)(225)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED</unmanaged-short>
        CommandListDrawResourceFormatSampleCUnsupported = unchecked ((System.Int32)(226)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED</unmanaged-short>
        CommandListDrawResourceMultisampleUnsupported = unchecked ((System.Int32)(227)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE</unmanaged-short>
        CommandListDrawStreamOutputTargetsBoundWithoutSource = unchecked ((System.Int32)(228)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SO_STRIDE_LARGER_THAN_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SO_STRIDE_LARGER_THAN_BUFFER</unmanaged-short>
        CommandListDrawStreamOutputStrideLargeRThanBuffer = unchecked ((System.Int32)(229)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING</unmanaged-short>
        CommandListDrawOutputMergerRenderTargetDoesNotSupportBlending = unchecked ((System.Int32)(230)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0</unmanaged-short>
        CommandListDrawOutputMergerDualSourceBlendingCanOnlyHaveRenderTarget0 = unchecked ((System.Int32)(231)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT</unmanaged-short>
        DeviceRemovalProcessAtFault = unchecked ((System.Int32)(232)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT</unmanaged-short>
        DeviceRemovalProcessPossiblyAtFault = unchecked ((System.Int32)(233)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT</unmanaged-short>
        DeviceRemovalProcessNotAtFault = unchecked ((System.Int32)(234)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN</unmanaged-short>
        DeviceOpenSharedResourceInvalidArgumentReturn = unchecked ((System.Int32)(235)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN</unmanaged-short>
        DeviceOpenSharedResourceOufOfMemoryReturn = unchecked ((System.Int32)(236)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN</unmanaged-short>
        DeviceOpenSharedResourceBadinterfaceReturn = unchecked ((System.Int32)(237)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET</unmanaged-short>
        DeviceDrawViewportNotSet = unchecked ((System.Int32)(238)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC</unmanaged-short>
        CreateInputLayoutTrailingDigitInSemantic = unchecked ((System.Int32)(239)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC</unmanaged-short>
        CreateGeometryShaderWithStreamOutputTrailingDigitInSemantic = unchecked ((System.Int32)(240)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH</unmanaged-short>
        DeviceRasterizerSetViewportsDenormflush = unchecked ((System.Int32)(241)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW</unmanaged-short>
        OutputMergerSetRenderTargetsInvalidView = unchecked ((System.Int32)(242)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS</unmanaged-short>
        DeviceSetTextFiltersizeInvalidDimensions = unchecked ((System.Int32)(243)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH</unmanaged-short>
        DeviceDrawSamplerMismatch = unchecked ((System.Int32)(244)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH</unmanaged-short>
        CreateInputLayoutTypeMismatch = unchecked ((System.Int32)(245)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY</unmanaged-short>
        BlendStateGetDescriptionLegacy = unchecked ((System.Int32)(246)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY</unmanaged-short>
        ShaderResourceViewGetDescriptionLegacy = unchecked ((System.Int32)(247)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH</unmanaged-short>
        DeviceDrawPixelShaderOutputTypeMismatch = unchecked ((System.Int32)(248)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED</unmanaged-short>
        DeviceDrawResourceFormatGatherUnsupported = unchecked ((System.Int32)(249)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN</unmanaged-short>
        DeviceDrawInvalidUseOfCenterMultisamplePattern = unchecked ((System.Int32)(250)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE</unmanaged-short>
        DeviceInputAssemblySetVertexBuffersStrideTooLarge = unchecked ((System.Int32)(251)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE</unmanaged-short>
        DeviceInputAssemblySetVertexBuffersInvalidRange = unchecked ((System.Int32)(252)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT</unmanaged-short>
        CreateInputLayoutEmptyLayout = unchecked ((System.Int32)(253)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH</unmanaged-short>
        DeviceDrawResourceSampleCountMismatch = unchecked ((System.Int32)(254)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY</unmanaged-short>
        LiveObjectSummary = unchecked ((System.Int32)(255)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_BUFFER</unmanaged-short>
        LiveBuffer = unchecked ((System.Int32)(256)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_TEXTURE1D</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_TEXTURE1D</unmanaged-short>
        LiveTexture1D = unchecked ((System.Int32)(257)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_TEXTURE2D</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_TEXTURE2D</unmanaged-short>
        LiveTexture2D = unchecked ((System.Int32)(258)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_TEXTURE3D</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_TEXTURE3D</unmanaged-short>
        LiveTexture3D = unchecked ((System.Int32)(259)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW</unmanaged-short>
        LiveShaderResourceView = unchecked ((System.Int32)(260)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_RENDERTARGETVIEW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_RENDERTARGETVIEW</unmanaged-short>
        LiveRenderTargetView = unchecked ((System.Int32)(261)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW</unmanaged-short>
        LiveDepthStencilView = unchecked ((System.Int32)(262)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_VERTEXSHADER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_VERTEXSHADER</unmanaged-short>
        LiveVertexShader = unchecked ((System.Int32)(263)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_GEOMETRYSHADER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_GEOMETRYSHADER</unmanaged-short>
        LiveGeometryShader = unchecked ((System.Int32)(264)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_PIXELSHADER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_PIXELSHADER</unmanaged-short>
        LivePixelShader = unchecked ((System.Int32)(265)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_INPUTLAYOUT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_INPUTLAYOUT</unmanaged-short>
        LiveInputLayout = unchecked ((System.Int32)(266)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_SAMPLER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_SAMPLER</unmanaged-short>
        LiveSampler = unchecked ((System.Int32)(267)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_BLENDSTATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_BLENDSTATE</unmanaged-short>
        LiveBlendState = unchecked ((System.Int32)(268)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE</unmanaged-short>
        LiveDepthStencilState = unchecked ((System.Int32)(269)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_RASTERIZERSTATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_RASTERIZERSTATE</unmanaged-short>
        LiveRasterizerstate = unchecked ((System.Int32)(270)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_QUERY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_QUERY</unmanaged-short>
        LiveQuery = unchecked ((System.Int32)(271)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_PREDICATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_PREDICATE</unmanaged-short>
        LivePredicate = unchecked ((System.Int32)(272)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_COUNTER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_COUNTER</unmanaged-short>
        LiveCounter = unchecked ((System.Int32)(273)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_DEVICE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_DEVICE</unmanaged-short>
        LiveDevice = unchecked ((System.Int32)(274)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_SWAPCHAIN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_SWAPCHAIN</unmanaged-short>
        LiveSwapchain = unchecked ((System.Int32)(275)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS</unmanaged-short>
        CreateDepthStencilViewInvalidFlags = unchecked ((System.Int32)(276)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE</unmanaged-short>
        CreateVertexShaderInvalidClassLinkage = unchecked ((System.Int32)(277)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE</unmanaged-short>
        CreateGeometryShaderInvalidClassLinkage = unchecked ((System.Int32)(278)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS</unmanaged-short>
        CreateGeometryShaderWithStreamOutputInvalidNumstreams = unchecked ((System.Int32)(279)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER</unmanaged-short>
        CreateGeometryShaderWithStreamOutputInvalidStreamTorasterizer = unchecked ((System.Int32)(280)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS</unmanaged-short>
        CreateGeometryShaderWithStreamOutputUnexpectedStreams = unchecked ((System.Int32)(281)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE</unmanaged-short>
        CreateGeometryShaderWithStreamOutputInvalidClassLinkage = unchecked ((System.Int32)(282)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE</unmanaged-short>
        CreatePixelShaderInvalidClassLinkage = unchecked ((System.Int32)(283)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM</unmanaged-short>
        CreateGeometryShaderWithStreamOutputInvalidStream = unchecked ((System.Int32)(284)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES</unmanaged-short>
        CreateGeometryShaderWithStreamOutputUnexpectedEntries = unchecked ((System.Int32)(285)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES</unmanaged-short>
        CreateGeometryShaderWithStreamOutputUnexpectedStrides = unchecked ((System.Int32)(286)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES</unmanaged-short>
        CreateGeometryShaderWithStreamOutputInvalidNumstrides = unchecked ((System.Int32)(287)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL</unmanaged-short>
        CreateHullShaderInvalidCall = unchecked ((System.Int32)(288)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY</unmanaged-short>
        CreateHullShaderOufOfMemory = unchecked ((System.Int32)(289)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE</unmanaged-short>
        CreateHullShaderInvalidShaderBytecode = unchecked ((System.Int32)(290)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE</unmanaged-short>
        CreateHullShaderInvalidShaderType = unchecked ((System.Int32)(291)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE</unmanaged-short>
        CreateHullShaderInvalidClassLinkage = unchecked ((System.Int32)(292)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL</unmanaged-short>
        CreateDomainShaderInvalidCall = unchecked ((System.Int32)(293)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY</unmanaged-short>
        CreateDomainShaderOufOfMemory = unchecked ((System.Int32)(294)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE</unmanaged-short>
        CreateDomainShaderInvalidShaderBytecode = unchecked ((System.Int32)(295)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE</unmanaged-short>
        CreateDomainShaderInvalidShaderType = unchecked ((System.Int32)(296)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE</unmanaged-short>
        CreateDomainShaderInvalidClassLinkage = unchecked ((System.Int32)(297)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH</unmanaged-short>
        DeviceDrawHullShaderXorDomainShaderMismatch = unchecked ((System.Int32)(298)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER</unmanaged-short>
        DeviceDrawIndirectInvalidArgumentBuffer = unchecked ((System.Int32)(299)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED</unmanaged-short>
        DeviceDrawIndirectOffsetUnaligned = unchecked ((System.Int32)(300)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW</unmanaged-short>
        DeviceDrawIndirectOffsetOverflow = unchecked ((System.Int32)(301)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE</unmanaged-short>
        ResourceMapInvalidMaptype = unchecked ((System.Int32)(302)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE</unmanaged-short>
        ResourceMapInvalidSubResource = unchecked ((System.Int32)(303)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS</unmanaged-short>
        ResourceMapInvalidFlags = unchecked ((System.Int32)(304)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED</unmanaged-short>
        ResourceMapAlreadymapped = unchecked ((System.Int32)(305)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN</unmanaged-short>
        ResourceMapDeviceremovedReturn = unchecked ((System.Int32)(306)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN</unmanaged-short>
        ResourceMapOufOfMemoryReturn = unchecked ((System.Int32)(307)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD</unmanaged-short>
        ResourceMapWithoutInitialDiscard = unchecked ((System.Int32)(308)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE</unmanaged-short>
        ResourceUnmapInvalidSubResource = unchecked ((System.Int32)(309)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED</unmanaged-short>
        ResourceUnmapNotMapped = unchecked ((System.Int32)(310)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS</unmanaged-short>
        DeviceDrawRasterizingControlPoints = unchecked ((System.Int32)(311)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED</unmanaged-short>
        DeviceInputAssemblySetPrimitivetopologyTopologyUnsupported = unchecked ((System.Int32)(312)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH</unmanaged-short>
        DeviceDrawHullShaderDomainShaderSignatureMismatch = unchecked ((System.Int32)(313)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH</unmanaged-short>
        DeviceDrawHullShaderInputTopologyMismatch = unchecked ((System.Int32)(314)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH</unmanaged-short>
        DeviceDrawHullShaderDomainShaderControlPointCountMismatch = unchecked ((System.Int32)(315)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH</unmanaged-short>
        DeviceDrawHullShaderDomainShaderTessellatorDomainMismatch = unchecked ((System.Int32)(316)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE</unmanaged-short>
        DeviceCheckFeaturesupportUnrecognizedFeature = unchecked ((System.Int32)(317)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE</unmanaged-short>
        DeviceCheckFeaturesupportMismatchedDataSize = unchecked ((System.Int32)(318)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN</unmanaged-short>
        DeviceCheckFeaturesupportInvalidArgumentReturn = unchecked ((System.Int32)(319)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL</unmanaged-short>
        CreateComputeShaderInvalidCall = unchecked ((System.Int32)(320)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY</unmanaged-short>
        CreateComputeShaderOufOfMemory = unchecked ((System.Int32)(321)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE</unmanaged-short>
        CreateComputeShaderInvalidShaderBytecode = unchecked ((System.Int32)(322)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE</unmanaged-short>
        CreateComputeShaderInvalidClassLinkage = unchecked ((System.Int32)(323)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY</unmanaged-short>
        DeviceComputeShaderSetShaderResourcesViewsEmpty = unchecked ((System.Int32)(324)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER</unmanaged-short>
        ComputeShaderSetConstantBuffersInvalidBuffer = unchecked ((System.Int32)(325)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged-short>
        DeviceComputeShaderSetConstantBuffersBuffersEmpty = unchecked ((System.Int32)(326)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY</unmanaged-short>
        DeviceComputeShaderSetSamplersSamplersEmpty = unchecked ((System.Int32)(327)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY</unmanaged-short>
        DeviceComputeShaderGetShaderResourcesViewsEmpty = unchecked ((System.Int32)(328)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged-short>
        DeviceComputeShaderGetConstantBuffersBuffersEmpty = unchecked ((System.Int32)(329)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY</unmanaged-short>
        DeviceComputeShaderGetSamplersSamplersEmpty = unchecked ((System.Int32)(330)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged-short>
        DeviceCreateVertexShaderDoubleFloatopsnotsupported = unchecked ((System.Int32)(331)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged-short>
        DeviceCreateHullShaderDoubleFloatopsnotsupported = unchecked ((System.Int32)(332)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged-short>
        DeviceCreateDomainShaderDoubleFloatopsnotsupported = unchecked ((System.Int32)(333)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged-short>
        DeviceCreateGeometryShaderDoubleFloatopsnotsupported = unchecked ((System.Int32)(334)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged-short>
        DeviceCreateGeometryShaderWithStreamOutputDoubleFloatopsnotsupported = unchecked ((System.Int32)(335)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged-short>
        DeviceCreatePixelShaderDoubleFloatopsnotsupported = unchecked ((System.Int32)(336)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged-short>
        DeviceCreateComputeShaderDoubleFloatopsnotsupported = unchecked ((System.Int32)(337)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE</unmanaged-short>
        CreateBufferInvalidStructurestride = unchecked ((System.Int32)(338)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS</unmanaged-short>
        CreateShaderResourceViewInvalidFlags = unchecked ((System.Int32)(339)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE</unmanaged-short>
        CreateUnorderedAccessViewInvalidResource = unchecked ((System.Int32)(340)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC</unmanaged-short>
        CreateUnorderedAccessViewInvalidDescription = unchecked ((System.Int32)(341)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT</unmanaged-short>
        CreateUnorderedAccessViewInvalidFormat = unchecked ((System.Int32)(342)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE</unmanaged-short>
        CreateUnorderedAccessViewInvalidVideoPlaneslice = unchecked ((System.Int32)(343)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE</unmanaged-short>
        CreateUnorderedAccessViewInvalidPlaneslice = unchecked ((System.Int32)(344)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS</unmanaged-short>
        CreateUnorderedAccessViewInvalidDimensions = unchecked ((System.Int32)(345)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT</unmanaged-short>
        CreateUnorderedAccessViewUnrecognizedFormat = unchecked ((System.Int32)(346)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS</unmanaged-short>
        DeviceOutputMergerSetRenderTargetsAndUnorderedAccessViewsOverlappingOldSlots = unchecked ((System.Int32)(347)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP</unmanaged-short>
        DeviceOutputMergerSetRenderTargetsAndUnorderedAccessViewsNoOperation = unchecked ((System.Int32)(348)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN</unmanaged-short>
        CreateUnorderedAccessViewInvalidArgumentReturn = unchecked ((System.Int32)(349)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN</unmanaged-short>
        CreateUnorderedAccessViewOufOfMemoryReturn = unchecked ((System.Int32)(350)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH</unmanaged-short>
        ClearUnorderedAccessViewDenormFlush = unchecked ((System.Int32)(351)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY</unmanaged-short>
        DeviceComputeShaderSetUnorderedAccessSViewsEmpty = unchecked ((System.Int32)(352)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY</unmanaged-short>
        DeviceComputeShaderGetUnorderedAccessSViewsEmpty = unchecked ((System.Int32)(353)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS</unmanaged-short>
        CreateUnorderedAccessViewInvalidFlags = unchecked ((System.Int32)(354)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER</unmanaged-short>
        DeviceDispatchindirectInvalidArgumentBuffer = unchecked ((System.Int32)(355)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED</unmanaged-short>
        DeviceDispatchindirectOffsetUnaligned = unchecked ((System.Int32)(356)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW</unmanaged-short>
        DeviceDispatchindirectOffsetOverflow = unchecked ((System.Int32)(357)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY</unmanaged-short>
        CleardepthstencilviewDepthReadonly = unchecked ((System.Int32)(358)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY</unmanaged-short>
        CleardepthstencilviewStencilReadonly = unchecked ((System.Int32)(359)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED</unmanaged-short>
        CheckFeaturesupportFormatDeprecated = unchecked ((System.Int32)(360)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH</unmanaged-short>
        DeviceUnorderedAccessViewReturnTypeMismatch = unchecked ((System.Int32)(361)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET</unmanaged-short>
        DeviceUnorderedAccessViewNotSet = unchecked ((System.Int32)(362)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP</unmanaged-short>
        DeviceDrawUnorderedAccessViewRenderTargetViewOverlap = unchecked ((System.Int32)(363)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH</unmanaged-short>
        DeviceUnorderedAccessViewDimensionMismatch = unchecked ((System.Int32)(364)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED</unmanaged-short>
        DeviceUnorderedAccessViewAppendUnsupported = unchecked ((System.Int32)(365)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED</unmanaged-short>
        DeviceUnorderedAccessViewAtomicsUnsupported = unchecked ((System.Int32)(366)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH</unmanaged-short>
        DeviceUnorderedAccessViewStructureStrideMismatch = unchecked ((System.Int32)(367)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH</unmanaged-short>
        DeviceUnorderedAccessViewBufferTypeMismatch = unchecked ((System.Int32)(368)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED</unmanaged-short>
        DeviceUnorderedAccessViewRawUnsupported = unchecked ((System.Int32)(369)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED</unmanaged-short>
        DeviceUnorderedAccessViewFormatLdUnsupported = unchecked ((System.Int32)(370)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED</unmanaged-short>
        DeviceUnorderedAccessViewFormatStoreUnsupported = unchecked ((System.Int32)(371)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED</unmanaged-short>
        DeviceUnorderedAccessViewAtomicAddUnsupported = unchecked ((System.Int32)(372)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED</unmanaged-short>
        DeviceUnorderedAccessViewAtomicBitwiseOperationsUnsupported = unchecked ((System.Int32)(373)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED</unmanaged-short>
        DeviceUnorderedAccessViewAtomicCmpstoreCmpexchangeUnsupported = unchecked ((System.Int32)(374)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED</unmanaged-short>
        DeviceUnorderedAccessViewAtomicExchangeUnsupported = unchecked ((System.Int32)(375)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED</unmanaged-short>
        DeviceUnorderedAccessViewAtomicSignedMinimumMaximumUnsupported = unchecked ((System.Int32)(376)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED</unmanaged-short>
        DeviceUnorderedAccessViewAtomicUnsignedMinimumMaximumUnsupported = unchecked ((System.Int32)(377)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED</unmanaged-short>
        DeviceDispatchBoundResourceMapped = unchecked ((System.Int32)(378)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW</unmanaged-short>
        DeviceDispatchThreadgroupcountOverflow = unchecked ((System.Int32)(379)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO</unmanaged-short>
        DeviceDispatchThreadgroupcountZero = unchecked ((System.Int32)(380)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH</unmanaged-short>
        DeviceShaderResourceViewStructureStrideMismatch = unchecked ((System.Int32)(381)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH</unmanaged-short>
        DeviceShaderResourceViewBufferTypeMismatch = unchecked ((System.Int32)(382)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED</unmanaged-short>
        DeviceShaderResourceViewRawUnsupported = unchecked ((System.Int32)(383)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED</unmanaged-short>
        DeviceDispatchUnsupported = unchecked ((System.Int32)(384)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED</unmanaged-short>
        DeviceDispatchindirectUnsupported = unchecked ((System.Int32)(385)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET</unmanaged-short>
        CopyStructurecountInvalidOffset = unchecked ((System.Int32)(386)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET</unmanaged-short>
        CopyStructurecountLargeOffset = unchecked ((System.Int32)(387)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE</unmanaged-short>
        CopyStructurecountInvalidDestinationState = unchecked ((System.Int32)(388)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE</unmanaged-short>
        CopyStructurecountInvalidSourceState = unchecked ((System.Int32)(389)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED</unmanaged-short>
        CheckFormatSupportFormatNotSupported = unchecked ((System.Int32)(390)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT</unmanaged-short>
        ClearunorderedaccessviewfloatInvalidFormat = unchecked ((System.Int32)(391)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED</unmanaged-short>
        DeviceUnorderedAccessViewCounterUnsupported = unchecked ((System.Int32)(392)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV</unmanaged-short>
        DeviceDrawPixelShaderWithoutRenderTargetViewOrDepthStencilView = unchecked ((System.Int32)(393)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SHADER_ABORT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SHADER_ABORT</unmanaged-short>
        ShaderAbort = unchecked ((System.Int32)(394)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SHADER_MESSAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SHADER_MESSAGE</unmanaged-short>
        ShaderMessage = unchecked ((System.Int32)(395)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SHADER_ERROR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SHADER_ERROR</unmanaged-short>
        ShaderError = unchecked ((System.Int32)(396)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE</unmanaged-short>
        OfferresourcesInvalidResource = unchecked ((System.Int32)(397)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN</unmanaged-short>
        EnqueueSetEventInvalidArgumentReturn = unchecked ((System.Int32)(398)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN</unmanaged-short>
        EnqueueSetEventOufOfMemoryReturn = unchecked ((System.Int32)(399)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN</unmanaged-short>
        EnqueueSetEventAccessDeniedReturn = unchecked ((System.Int32)(400)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT</unmanaged-short>
        CreateRasterizerstateInvalidForcedSamplecount = unchecked ((System.Int32)(401)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT</unmanaged-short>
        DeviceDrawInvalidUseOfForcedSampleCount = unchecked ((System.Int32)(402)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS</unmanaged-short>
        CreateBlendStateInvalidLogicOperations = unchecked ((System.Int32)(403)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARRAYWITHDECODER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARRAYWITHDECODER</unmanaged-short>
        CreateShaderResourceViewInvalidArrayWithDecoder = unchecked ((System.Int32)(404)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARRAYWITHDECODER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARRAYWITHDECODER</unmanaged-short>
        CreateUnorderedAccessViewInvalidArrayWithDecoder = unchecked ((System.Int32)(405)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARRAYWITHDECODER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARRAYWITHDECODER</unmanaged-short>
        CreateRenderTargetViewInvalidArrayWithDecoder = unchecked ((System.Int32)(406)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE</unmanaged-short>
        DeviceLockedoutInterface = unchecked ((System.Int32)(407)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY</unmanaged-short>
        OfferresourcesInvalidPriority = unchecked ((System.Int32)(408)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW</unmanaged-short>
        DeviceClearviewInvalidView = unchecked ((System.Int32)(409)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged-short>
        DeviceCreateVertexShaderDoubleExtensionSnotsupported = unchecked ((System.Int32)(410)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED</unmanaged-short>
        DeviceCreateVertexShaderShaderExtensionSnotsupported = unchecked ((System.Int32)(411)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged-short>
        DeviceCreateHullShaderDoubleExtensionSnotsupported = unchecked ((System.Int32)(412)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED</unmanaged-short>
        DeviceCreateHullShaderShaderExtensionSnotsupported = unchecked ((System.Int32)(413)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged-short>
        DeviceCreateDomainShaderDoubleExtensionSnotsupported = unchecked ((System.Int32)(414)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED</unmanaged-short>
        DeviceCreateDomainShaderShaderExtensionSnotsupported = unchecked ((System.Int32)(415)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged-short>
        DeviceCreateGeometryShaderDoubleExtensionSnotsupported = unchecked ((System.Int32)(416)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED</unmanaged-short>
        DeviceCreateGeometryShaderShaderExtensionSnotsupported = unchecked ((System.Int32)(417)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged-short>
        DeviceCreateGeometryShaderWithStreamOutputDoubleExtensionSnotsupported = unchecked ((System.Int32)(418)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED</unmanaged-short>
        DeviceCreateGeometryShaderWithStreamOutputShaderExtensionSnotsupported = unchecked ((System.Int32)(419)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged-short>
        DeviceCreatePixelShaderDoubleExtensionSnotsupported = unchecked ((System.Int32)(420)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED</unmanaged-short>
        DeviceCreatePixelShaderShaderExtensionSnotsupported = unchecked ((System.Int32)(421)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged-short>
        DeviceCreateComputeShaderDoubleExtensionSnotsupported = unchecked ((System.Int32)(422)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED</unmanaged-short>
        DeviceCreateComputeShaderShaderExtensionSnotsupported = unchecked ((System.Int32)(423)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION</unmanaged-short>
        DeviceShaderLinkageMinimumPrecision = unchecked ((System.Int32)(424)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED</unmanaged-short>
        DeviceCreateVertexShaderUnorderedAccessViewsNotSupported = unchecked ((System.Int32)(425)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED</unmanaged-short>
        DeviceCreateHullShaderUnorderedAccessViewsNotSupported = unchecked ((System.Int32)(426)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED</unmanaged-short>
        DeviceCreateDomainShaderUnorderedAccessViewsNotSupported = unchecked ((System.Int32)(427)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED</unmanaged-short>
        DeviceCreateGeometryShaderUnorderedAccessViewsNotSupported = unchecked ((System.Int32)(428)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED</unmanaged-short>
        DeviceCreateGeometryShaderWithStreamOutputUnorderedAccessViewsNotSupported = unchecked ((System.Int32)(429)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED</unmanaged-short>
        DeviceCreatePixelShaderUnorderedAccessViewsNotSupported = unchecked ((System.Int32)(430)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED</unmanaged-short>
        DeviceCreateComputeShaderUnorderedAccessViewsNotSupported = unchecked ((System.Int32)(431)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET</unmanaged-short>
        DeviceOutputMergerSetRenderTargetsAndUnorderedAccessViewsInvalidOffset = unchecked ((System.Int32)(432)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS</unmanaged-short>
        DeviceOutputMergerSetRenderTargetsAndUnorderedAccessViewsTooManyViews = unchecked ((System.Int32)(433)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED</unmanaged-short>
        DeviceClearviewNotSupported = unchecked ((System.Int32)(434)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED</unmanaged-short>
        SwapdevicecontextstateNotSupported = unchecked ((System.Int32)(435)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1</unmanaged-short>
        UpdatesUbresourcePreferUpdatesUbresource1 = unchecked ((System.Int32)(436)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GETDC_INACCESSIBLE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GETDC_INACCESSIBLE</unmanaged-short>
        GetDeviceContextInaccessible = unchecked ((System.Int32)(437)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT</unmanaged-short>
        DeviceClearviewInvalidRectangle = unchecked ((System.Int32)(438)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9</unmanaged-short>
        DeviceDrawSampleMaskIgnoredOnFl9 = unchecked ((System.Int32)(439)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED</unmanaged-short>
        DeviceOpenSharedResource1NotSupported = unchecked ((System.Int32)(440)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED</unmanaged-short>
        DeviceOpenSharedResourceByNameNotSupported = unchecked ((System.Int32)(441)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED</unmanaged-short>
        EnqueueSetEventNotSupported = unchecked ((System.Int32)(442)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED</unmanaged-short>
        OfferreleaseNotSupported = unchecked ((System.Int32)(443)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE</unmanaged-short>
        OfferresourcesInaccessible = unchecked ((System.Int32)(444)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA</unmanaged-short>
        CreateVideoProcessorInputViewInvalidMSAA = unchecked ((System.Int32)(445)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA</unmanaged-short>
        CreateVideoProcessorOutputViewInvalidMSAA = unchecked ((System.Int32)(446)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT</unmanaged-short>
        DeviceClearviewInvalidSourceRectangle = unchecked ((System.Int32)(447)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT</unmanaged-short>
        DeviceClearviewEmptyRectangle = unchecked ((System.Int32)(448)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX</unmanaged-short>
        UpdatesUbresourceEmptyDestinationBox = unchecked ((System.Int32)(449)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX</unmanaged-short>
        CopySubResourceRegionEmptySourceBox = unchecked ((System.Int32)(450)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS</unmanaged-short>
        DeviceDrawOutputMergerRenderTargetDoesNotSupportLogicOperations = unchecked ((System.Int32)(451)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET</unmanaged-short>
        DeviceDrawDepthStencilViewNotSet = unchecked ((System.Int32)(452)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET</unmanaged-short>
        DeviceDrawRenderTargetViewNotSet = unchecked ((System.Int32)(453)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT</unmanaged-short>
        DeviceDrawRenderTargetViewNotSetDueToFlipPresent = unchecked ((System.Int32)(454)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT</unmanaged-short>
        DeviceUnorderedAccessViewNotSetDueToFlipPresent = unchecked ((System.Int32)(455)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GETDATAFORNEWHARDWAREKEY_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GETDATAFORNEWHARDWAREKEY_NULLPARAM</unmanaged-short>
        GetDataFornewhardwarekeyNullParam = unchecked ((System.Int32)(456)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CHECKCRYPTOSESSIONSTATUS_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CHECKCRYPTOSESSIONSTATUS_NULLPARAM</unmanaged-short>
        CheckCryptosessionstatusNullParam = unchecked ((System.Int32)(457)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SETEVENTONHARDWARECONTENTPROTECTIONTILT_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SETEVENTONHARDWARECONTENTPROTECTIONTILT_NULLPARAM</unmanaged-short>
        SetEventonhardwarecontentprotectiontiltNullParam = unchecked ((System.Int32)(458)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GETVIDEODECODERCAPS_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GETVIDEODECODERCAPS_NULLPARAM</unmanaged-short>
        GetVideoDecodercapsNullParam = unchecked ((System.Int32)(459)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT</unmanaged-short>
        GetVideoDecodercapsZerowidthheight = unchecked ((System.Int32)(460)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM</unmanaged-short>
        CheckVideoDecoderdownsamplingNullParam = unchecked ((System.Int32)(461)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE</unmanaged-short>
        CheckVideoDecoderdownsamplingInvalidColorSpace = unchecked ((System.Int32)(462)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT</unmanaged-short>
        CheckVideoDecoderdownsamplingZerowidthheight = unchecked ((System.Int32)(463)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM</unmanaged-short>
        VideoDecoderenabledownsamplingNullParam = unchecked ((System.Int32)(464)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED</unmanaged-short>
        VideoDecoderenabledownsamplingUnsupported = unchecked ((System.Int32)(465)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM</unmanaged-short>
        VideoDecoderupdatedownsamplingNullParam = unchecked ((System.Int32)(466)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED</unmanaged-short>
        VideoDecoderupdatedownsamplingUnsupported = unchecked ((System.Int32)(467)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM</unmanaged-short>
        CheckVideoProcessorFormatConversionNullParam = unchecked ((System.Int32)(468)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM</unmanaged-short>
        VideoProcessorSetOutputColorSpace1NullParam = unchecked ((System.Int32)(469)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM</unmanaged-short>
        VideoProcessorGetOutputColorSpace1NullParam = unchecked ((System.Int32)(470)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM</unmanaged-short>
        VideoProcessorSetStreamColorSpace1NullParam = unchecked ((System.Int32)(471)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM</unmanaged-short>
        VideoProcessorSetStreamColorSpace1InvalidStream = unchecked ((System.Int32)(472)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM</unmanaged-short>
        VideoProcessorSetStreamMirrorNullParam = unchecked ((System.Int32)(473)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM</unmanaged-short>
        VideoProcessorSetStreamMirrorInvalidStream = unchecked ((System.Int32)(474)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED</unmanaged-short>
        VideoProcessorSetStreamMirrorUnsupported = unchecked ((System.Int32)(475)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM</unmanaged-short>
        VideoProcessorGetStreamColorSpace1NullParam = unchecked ((System.Int32)(476)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM</unmanaged-short>
        VideoProcessorGetStreamMirrorNullParam = unchecked ((System.Int32)(477)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM</unmanaged-short>
        RecommendvideodecoderdownsamplingNullParam = unchecked ((System.Int32)(478)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE</unmanaged-short>
        RecommendvideodecoderdownsamplingInvalidColorSpace = unchecked ((System.Int32)(479)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT</unmanaged-short>
        RecommendvideodecoderdownsamplingZerowidthheight = unchecked ((System.Int32)(480)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM</unmanaged-short>
        VideoProcessorSetOutputShaderUsageNullParam = unchecked ((System.Int32)(481)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM</unmanaged-short>
        VideoProcessorGetOutputShaderUsageNullParam = unchecked ((System.Int32)(482)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM</unmanaged-short>
        VideoProcessorGetBehaviorhintsNullParam = unchecked ((System.Int32)(483)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT</unmanaged-short>
        VideoProcessorGetBehaviorhintsInvalidStreamCount = unchecked ((System.Int32)(484)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT</unmanaged-short>
        VideoProcessorGetBehaviorhintsTargetRectangle = unchecked ((System.Int32)(485)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT</unmanaged-short>
        VideoProcessorGetBehaviorhintsInvalidSourceRectangle = unchecked ((System.Int32)(486)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT</unmanaged-short>
        VideoProcessorGetBehaviorhintsInvalidDestinationRectangle = unchecked ((System.Int32)(487)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE</unmanaged-short>
        CreateBufferInvalidUsage = unchecked ((System.Int32)(488)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE</unmanaged-short>
        CreateTexture1DInvalidUsage = unchecked ((System.Int32)(489)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE</unmanaged-short>
        CreateTexture2DInvalidUsage = unchecked ((System.Int32)(490)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1</unmanaged-short>
        CreateInputLayoutLevel9SteprateNot1 = unchecked ((System.Int32)(491)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED</unmanaged-short>
        CreateInputLayoutLevel9InstancingNotSupported = unchecked ((System.Int32)(492)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER</unmanaged-short>
        UpdateTilemappingsInvalidParameter = unchecked ((System.Int32)(493)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER</unmanaged-short>
        CopyTilemappingsInvalidParameter = unchecked ((System.Int32)(494)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTILES_INVALID_PARAMETER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTILES_INVALID_PARAMETER</unmanaged-short>
        CopyTilesInvalidParameter = unchecked ((System.Int32)(495)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING</unmanaged-short>
        NullTileMappingAccessWarning = unchecked ((System.Int32)(496)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR</unmanaged-short>
        NullTileMappingAccessError = unchecked ((System.Int32)(497)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS</unmanaged-short>
        DirtyTileMappingAccess = unchecked ((System.Int32)(498)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA</unmanaged-short>
        DuplicateTileMappingsInCoveredArea = unchecked ((System.Int32)(499)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE</unmanaged-short>
        TileMappingsInCoveredAreaDuplicatedOutside = unchecked ((System.Int32)(500)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES</unmanaged-short>
        TileMappingsSharedBetweenIncompatibleResources = unchecked ((System.Int32)(501)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT</unmanaged-short>
        TileMappingsSharedBetweenInputAndOutput = unchecked ((System.Int32)(502)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS</unmanaged-short>
        CheckMultisamplequalitylevelsInvalidFlags = unchecked ((System.Int32)(503)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE</unmanaged-short>
        GetResourceTilingNontiledResource = unchecked ((System.Int32)(504)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER</unmanaged-short>
        NeedToCallTiledresourcebarrier = unchecked ((System.Int32)(505)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS</unmanaged-short>
        CreateDeviceInvalidArguments = unchecked ((System.Int32)(506)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEVICE_WARNING</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEVICE_WARNING</unmanaged-short>
        CreateDeviceWarning = unchecked ((System.Int32)(507)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH</unmanaged-short>
        TiledResourceTier1BufferTextureMismatch = unchecked ((System.Int32)(508)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_CRYPTOSESSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_CRYPTOSESSION</unmanaged-short>
        CreateCryptosession = unchecked ((System.Int32)(509)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_AUTHENTICATEDCHANNEL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_AUTHENTICATEDCHANNEL</unmanaged-short>
        CreateAuthenticatedChannel = unchecked ((System.Int32)(510)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_CRYPTOSESSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_CRYPTOSESSION</unmanaged-short>
        LiveCryptosession = unchecked ((System.Int32)(511)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_AUTHENTICATEDCHANNEL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_AUTHENTICATEDCHANNEL</unmanaged-short>
        LiveAuthenticatedChannel = unchecked ((System.Int32)(512)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_CRYPTOSESSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_CRYPTOSESSION</unmanaged-short>
        DestroyCryptosession = unchecked ((System.Int32)(513)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_AUTHENTICATEDCHANNEL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_AUTHENTICATEDCHANNEL</unmanaged-short>
        DestroyAuthenticatedChannel = unchecked ((System.Int32)(514)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALID_SUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MAP_INVALID_SUBRESOURCE</unmanaged-short>
        MapInvalidSubResource2 = unchecked ((System.Int32)(515)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALID_TYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MAP_INVALID_TYPE</unmanaged-short>
        MapInvalidType = unchecked ((System.Int32)(516)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MAP_UNSUPPORTED_TYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MAP_UNSUPPORTED_TYPE</unmanaged-short>
        MapUnsupportedType = unchecked ((System.Int32)(517)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UNMAP_INVALID_SUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UNMAP_INVALID_SUBRESOURCE</unmanaged-short>
        UnmapInvalidSubResource2 = unchecked ((System.Int32)(518)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE</unmanaged-short>
        ResourceBarrierInvalidType = unchecked ((System.Int32)(519)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER</unmanaged-short>
        ResourceBarrierNullPointer = unchecked ((System.Int32)(520)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE</unmanaged-short>
        ResourceBarrierInvalidSubResource = unchecked ((System.Int32)(521)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS</unmanaged-short>
        ResourceBarrierReservedBits = unchecked ((System.Int32)(522)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS</unmanaged-short>
        ResourceBarrierMissingBindFlags = unchecked ((System.Int32)(523)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS</unmanaged-short>
        ResourceBarrierMismatchingMiscFlags = unchecked ((System.Int32)(524)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES</unmanaged-short>
        ResourceBarrierMatchingStates = unchecked ((System.Int32)(525)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION</unmanaged-short>
        ResourceBarrierInvalidCombination = unchecked ((System.Int32)(526)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH</unmanaged-short>
        ResourceBarrierBeforeAfterMismatch = unchecked ((System.Int32)(527)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE</unmanaged-short>
        ResourceBarrierInvalidResource = unchecked ((System.Int32)(528)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT</unmanaged-short>
        ResourceBarrierSampleCount = unchecked ((System.Int32)(529)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS</unmanaged-short>
        ResourceBarrierInvalidFlags = unchecked ((System.Int32)(530)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS</unmanaged-short>
        ResourceBarrierInvalidCombinedFlags = unchecked ((System.Int32)(531)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT</unmanaged-short>
        ResourceBarrierInvalidFlagsForFormat = unchecked ((System.Int32)(532)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER</unmanaged-short>
        ResourceBarrierInvalidSplitBarrier = unchecked ((System.Int32)(533)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END</unmanaged-short>
        ResourceBarrierUnmatchedEnd = unchecked ((System.Int32)(534)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN</unmanaged-short>
        ResourceBarrierUnmatchedBegin = unchecked ((System.Int32)(535)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG</unmanaged-short>
        ResourceBarrierInvalidFlag = unchecked ((System.Int32)(536)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE</unmanaged-short>
        ResourceBarrierInvalidCommandListType = unchecked ((System.Int32)(537)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE</unmanaged-short>
        InvalidSubResourceState = unchecked ((System.Int32)(538)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_INEFFICIENT_PRESENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_INEFFICIENT_PRESENT</unmanaged-short>
        InefficientPresent = unchecked ((System.Int32)(539)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION</unmanaged-short>
        CommandAllOcatorContention = unchecked ((System.Int32)(540)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET</unmanaged-short>
        CommandAllOcatorReset = unchecked ((System.Int32)(541)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE</unmanaged-short>
        CommandAllOcatorResetBundle = unchecked ((System.Int32)(542)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET</unmanaged-short>
        CommandAllOcatorCannotReset = unchecked ((System.Int32)(543)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_OPEN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_OPEN</unmanaged-short>
        CommandListOpen = unchecked ((System.Int32)(544)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_QUERY_STATE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_QUERY_STATE_MISMATCH</unmanaged-short>
        QueryStateMismatch = unchecked ((System.Int32)(545)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_INVALID_BUNDLE_API</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_INVALID_BUNDLE_API</unmanaged-short>
        InvalidBundleApi = unchecked ((System.Int32)(546)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED</unmanaged-short>
        CommandListClosed = unchecked ((System.Int32)(547)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED_WITH_INVALID_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED_WITH_INVALID_RESOURCE</unmanaged-short>
        CommandListClosedWithInvalidResource = unchecked ((System.Int32)(548)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE</unmanaged-short>
        WrongCommandAllOcatorType = unchecked ((System.Int32)(549)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_INVALID_INDIRECT_ARGUMENT_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_INVALID_INDIRECT_ARGUMENT_BUFFER</unmanaged-short>
        InvalidIndirectArgumentBuffer = unchecked ((System.Int32)(550)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMPUTE_AND_GRAPHICS_PIPELINE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMPUTE_AND_GRAPHICS_PIPELINE</unmanaged-short>
        ComputeAndGraphicsPipeline = unchecked ((System.Int32)(551)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC</unmanaged-short>
        CommandAllOcatorSync = unchecked ((System.Int32)(552)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_SYNC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_SYNC</unmanaged-short>
        CommandListSync = unchecked ((System.Int32)(553)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID</unmanaged-short>
        SetDescriptorHeapInvalid = unchecked ((System.Int32)(554)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_QUEUE_IMAGE_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_QUEUE_IMAGE_NOT_SUPPORTED</unmanaged-short>
        CreateQueueImageNotSupported = unchecked ((System.Int32)(555)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_IMAGE_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_IMAGE_NOT_SUPPORTED</unmanaged-short>
        CreateCommandAllOcatorImageNotSupported = unchecked ((System.Int32)(556)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE</unmanaged-short>
        CreateCommandqueue = unchecked ((System.Int32)(557)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR</unmanaged-short>
        CreateCommandallocator = unchecked ((System.Int32)(558)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_PIPELINESTATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_PIPELINESTATE</unmanaged-short>
        CreatePipelinestate = unchecked ((System.Int32)(559)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMANDLIST12</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMANDLIST12</unmanaged-short>
        CreateCommandlist12 = unchecked ((System.Int32)(560)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_IMAGECOMMANDLIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_IMAGECOMMANDLIST</unmanaged-short>
        CreateImagecommandlist = unchecked ((System.Int32)(561)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_RESOURCE</unmanaged-short>
        CreateResource = unchecked ((System.Int32)(562)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP</unmanaged-short>
        CreateDescriptorHeap = unchecked ((System.Int32)(563)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE</unmanaged-short>
        CreateRootsignature = unchecked ((System.Int32)(564)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_LIBRARY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_LIBRARY</unmanaged-short>
        CreateLibrary = unchecked ((System.Int32)(565)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_HEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_HEAP</unmanaged-short>
        CreateHeap = unchecked ((System.Int32)(566)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE</unmanaged-short>
        CreateMonitoredfence = unchecked ((System.Int32)(567)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_QUERYHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_QUERYHEAP</unmanaged-short>
        CreateQueryHeap = unchecked ((System.Int32)(568)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE</unmanaged-short>
        CreateCommandsignature = unchecked ((System.Int32)(569)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE</unmanaged-short>
        LiveCommandqueue = unchecked ((System.Int32)(570)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR</unmanaged-short>
        LiveCommandallocator = unchecked ((System.Int32)(571)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_PIPELINESTATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_PIPELINESTATE</unmanaged-short>
        LivePipelinestate = unchecked ((System.Int32)(572)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_COMMANDLIST12</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_COMMANDLIST12</unmanaged-short>
        LiveCommandlist12 = unchecked ((System.Int32)(573)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_IMAGECOMMANDLIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_IMAGECOMMANDLIST</unmanaged-short>
        LiveImagecommandlist = unchecked ((System.Int32)(574)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_RESOURCE</unmanaged-short>
        LiveResource = unchecked ((System.Int32)(575)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP</unmanaged-short>
        LiveDescriptorHeap = unchecked ((System.Int32)(576)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE</unmanaged-short>
        LiveRootsignature = unchecked ((System.Int32)(577)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_LIBRARY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_LIBRARY</unmanaged-short>
        LiveLibrary = unchecked ((System.Int32)(578)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_HEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_HEAP</unmanaged-short>
        LiveHeap = unchecked ((System.Int32)(579)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE</unmanaged-short>
        LiveMonitoredfence = unchecked ((System.Int32)(580)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_QUERYHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_QUERYHEAP</unmanaged-short>
        LiveQueryHeap = unchecked ((System.Int32)(581)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE</unmanaged-short>
        LiveCommandsignature = unchecked ((System.Int32)(582)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE</unmanaged-short>
        DestroyCommandqueue = unchecked ((System.Int32)(583)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR</unmanaged-short>
        DestroyCommandallocator = unchecked ((System.Int32)(584)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE</unmanaged-short>
        DestroyPipelinestate = unchecked ((System.Int32)(585)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12</unmanaged-short>
        DestroyCommandlist12 = unchecked ((System.Int32)(586)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_IMAGECOMMANDLIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_IMAGECOMMANDLIST</unmanaged-short>
        DestroyImagecommandlist = unchecked ((System.Int32)(587)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_RESOURCE</unmanaged-short>
        DestroyResource = unchecked ((System.Int32)(588)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP</unmanaged-short>
        DestroyDescriptorHeap = unchecked ((System.Int32)(589)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE</unmanaged-short>
        DestroyRootsignature = unchecked ((System.Int32)(590)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_LIBRARY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_LIBRARY</unmanaged-short>
        DestroyLibrary = unchecked ((System.Int32)(591)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_HEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_HEAP</unmanaged-short>
        DestroyHeap = unchecked ((System.Int32)(592)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE</unmanaged-short>
        DestroyMonitoredfence = unchecked ((System.Int32)(593)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_QUERYHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_QUERYHEAP</unmanaged-short>
        DestroyQueryHeap = unchecked ((System.Int32)(594)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE</unmanaged-short>
        DestroyCommandsignature = unchecked ((System.Int32)(595)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDHEAPTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDHEAPTYPE</unmanaged-short>
        CreateResourceUnrecognizedHeaptype = unchecked ((System.Int32)(596)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS</unmanaged-short>
        CreateResourceInvalidDimensions = unchecked ((System.Int32)(597)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDMISCFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDMISCFLAGS</unmanaged-short>
        CreateResourceUnrecognizedMiscFlags = unchecked ((System.Int32)(598)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS</unmanaged-short>
        CreateResourceInvalidMiscFlags = unchecked ((System.Int32)(599)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_LARGEALLOCATION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_LARGEALLOCATION</unmanaged-short>
        CreateResourceLargeAllocation = unchecked ((System.Int32)(600)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_SMALLALLOCATION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_SMALLALLOCATION</unmanaged-short>
        CreateResourceSmallallocation = unchecked ((System.Int32)(601)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN</unmanaged-short>
        CreateResourceInvalidArgumentReturn = unchecked ((System.Int32)(602)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN</unmanaged-short>
        CreateResourceOufOfMemoryReturn = unchecked ((System.Int32)(603)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC</unmanaged-short>
        CreateResourceInvalidDescription = unchecked ((System.Int32)(604)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDINITIALSTATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDINITIALSTATE</unmanaged-short>
        CreateResourceInvalidInitialsTate = unchecked ((System.Int32)(605)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_HAS_PENDING_INITIAL_DATA</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_HAS_PENDING_INITIAL_DATA</unmanaged-short>
        ResourceHasPendingInitialData = unchecked ((System.Int32)(606)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE</unmanaged-short>
        PossiblyInvalidSubResourceState = unchecked ((System.Int32)(607)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE</unmanaged-short>
        InvalidUseOfNonResidentResource = unchecked ((System.Int32)(608)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE</unmanaged-short>
        PossibleInvalidUseOfNonResidentResource = unchecked ((System.Int32)(609)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH</unmanaged-short>
        BundlePipelineStateMismatch = unchecked ((System.Int32)(610)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE</unmanaged-short>
        PrimitiveTopologyMismatchPipelineState = unchecked ((System.Int32)(611)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_TARGET_NUMBER_MISMATCH_PIPELINE_STATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_TARGET_NUMBER_MISMATCH_PIPELINE_STATE</unmanaged-short>
        RenderTargetNumberMismatchPipelineState = unchecked ((System.Int32)(612)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE</unmanaged-short>
        RenderTargetFormatMismatchPipelineState = unchecked ((System.Int32)(613)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE</unmanaged-short>
        RenderTargetSampleDescriptionMismatchPipelineState = unchecked ((System.Int32)(614)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE</unmanaged-short>
        DepthStencilFormatMismatchPipelineState = unchecked ((System.Int32)(615)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE</unmanaged-short>
        DepthStencilSampleDescriptionMismatchPipelineState = unchecked ((System.Int32)(616)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_TARGET_NUMBER_MISMATCH_BUNDLE_PIPELINE_STATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_TARGET_NUMBER_MISMATCH_BUNDLE_PIPELINE_STATE</unmanaged-short>
        RenderTargetNumberMismatchBundlePipelineState = unchecked ((System.Int32)(617)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_BUNDLE_PIPELINE_STATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_BUNDLE_PIPELINE_STATE</unmanaged-short>
        RenderTargetFormatMismatchBundlePipelineState = unchecked ((System.Int32)(618)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_BUNDLE_PIPELINE_STATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_BUNDLE_PIPELINE_STATE</unmanaged-short>
        RenderTargetSampleDescriptionMismatchBundlePipelineState = unchecked ((System.Int32)(619)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_BUNDLE_PIPELINE_STATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_BUNDLE_PIPELINE_STATE</unmanaged-short>
        DepthStencilFormatMismatchBundlePipelineState = unchecked ((System.Int32)(620)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_BUNDLE_PIPELINE_STATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_BUNDLE_PIPELINE_STATE</unmanaged-short>
        DepthStencilSampleDescriptionMismatchBundlePipelineState = unchecked ((System.Int32)(621)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE</unmanaged-short>
        CreateShaderInvalidBytecode = unchecked ((System.Int32)(622)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC</unmanaged-short>
        CreateHeapNullDescription = unchecked ((System.Int32)(623)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE</unmanaged-short>
        CreateHeapInvalidSize = unchecked ((System.Int32)(624)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE</unmanaged-short>
        CreateHeapUnrecognizedHeaptype = unchecked ((System.Int32)(625)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES</unmanaged-short>
        CreateHeapUnrecognizedCpuPageproperties = unchecked ((System.Int32)(626)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL</unmanaged-short>
        CreateHeapUnrecognizedMemoryPool = unchecked ((System.Int32)(627)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES</unmanaged-short>
        CreateHeapInvalidProperties = unchecked ((System.Int32)(628)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT</unmanaged-short>
        CreateHeapInvalidAlignment = unchecked ((System.Int32)(629)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS</unmanaged-short>
        CreateHeapUnrecognizedMiscFlags = unchecked ((System.Int32)(630)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS</unmanaged-short>
        CreateHeapInvalidMiscFlags = unchecked ((System.Int32)(631)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN</unmanaged-short>
        CreateHeapInvalidArgumentReturn = unchecked ((System.Int32)(632)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN</unmanaged-short>
        CreateHeapOufOfMemoryReturn = unchecked ((System.Int32)(633)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES</unmanaged-short>
        CreateResourceAndHeapNullHeapproperties = unchecked ((System.Int32)(634)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE</unmanaged-short>
        CreateResourceAndHeapUnrecognizedHeaptype = unchecked ((System.Int32)(635)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES</unmanaged-short>
        CreateResourceAndHeapUnrecognizedCpuPageproperties = unchecked ((System.Int32)(636)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL</unmanaged-short>
        CreateResourceAndHeapUnrecognizedMemoryPool = unchecked ((System.Int32)(637)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES</unmanaged-short>
        CreateResourceAndHeapInvalidHeapproperties = unchecked ((System.Int32)(638)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS</unmanaged-short>
        CreateResourceAndHeapUnrecognizedHeapmiscflags = unchecked ((System.Int32)(639)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS</unmanaged-short>
        CreateResourceAndHeapInvalidHeapmiscflags = unchecked ((System.Int32)(640)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN</unmanaged-short>
        CreateResourceAndHeapInvalidArgumentReturn = unchecked ((System.Int32)(641)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN</unmanaged-short>
        CreateResourceAndHeapOufOfMemoryReturn = unchecked ((System.Int32)(642)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE</unmanaged-short>
        GetCustomheappropertiesUnrecognizedHeaptype = unchecked ((System.Int32)(643)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE</unmanaged-short>
        GetCustomheappropertiesInvalidHeaptype = unchecked ((System.Int32)(644)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC</unmanaged-short>
        CreateDescriptorHeapInvalidDescription = unchecked ((System.Int32)(645)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE</unmanaged-short>
        InvalidDescriptorHandle = unchecked ((System.Int32)(646)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE</unmanaged-short>
        CreateRasterizerstateInvalidConservativerastermode = unchecked ((System.Int32)(647)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_DRAW_INVALID_SYSTEMVALUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_DRAW_INVALID_SYSTEMVALUE</unmanaged-short>
        DeviceDrawInvalidSystemvalue = unchecked ((System.Int32)(648)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE</unmanaged-short>
        CreateConstantBufferViewInvalidResource = unchecked ((System.Int32)(649)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC</unmanaged-short>
        CreateConstantBufferViewInvalidDescription = unchecked ((System.Int32)(650)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_LARGE_OFFSET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_LARGE_OFFSET</unmanaged-short>
        CreateConstantBufferViewLargeOffset = unchecked ((System.Int32)(651)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE</unmanaged-short>
        CreateUnorderedAccessViewInvalidCounterUsage = unchecked ((System.Int32)(652)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES</unmanaged-short>
        CopyDescriptorSInvalidRanges = unchecked ((System.Int32)(653)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR</unmanaged-short>
        CopyDescriptorSWriteOnlyDescriptor = unchecked ((System.Int32)(654)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN</unmanaged-short>
        CreateGraphicspipelinestateRenderTargetViewFormatNotUnknown = unchecked ((System.Int32)(655)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT</unmanaged-short>
        CreateGraphicspipelinestateInvalidRenderTargetCount = unchecked ((System.Int32)(656)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET</unmanaged-short>
        CreateGraphicspipelinestateVertexShaderNotSet = unchecked ((System.Int32)(657)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET</unmanaged-short>
        CreateGraphicspipelinestateInputLayoutNotSet = unchecked ((System.Int32)(658)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH</unmanaged-short>
        CreateGraphicspipelinestateShaderLinkageHullShaderDomainShaderSignatureMismatch = unchecked ((System.Int32)(659)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX</unmanaged-short>
        CreateGraphicspipelinestateShaderLinkageRegisterindex = unchecked ((System.Int32)(660)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE</unmanaged-short>
        CreateGraphicspipelinestateShaderLinkageComponenttype = unchecked ((System.Int32)(661)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK</unmanaged-short>
        CreateGraphicspipelinestateShaderLinkageRegistermask = unchecked ((System.Int32)(662)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE</unmanaged-short>
        CreateGraphicspipelinestateShaderLinkageSystemvalue = unchecked ((System.Int32)(663)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS</unmanaged-short>
        CreateGraphicspipelinestateShaderLinkageNeverwrittenAlwaysreads = unchecked ((System.Int32)(664)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION</unmanaged-short>
        CreateGraphicspipelinestateShaderLinkageMinimumPrecision = unchecked ((System.Int32)(665)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND</unmanaged-short>
        CreateGraphicspipelinestateShaderLinkageSemanticnameNotFound = unchecked ((System.Int32)(666)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH</unmanaged-short>
        CreateGraphicspipelinestateHullShaderXorDomainShaderMismatch = unchecked ((System.Int32)(667)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH</unmanaged-short>
        CreateGraphicspipelinestateHullShaderInputTopologyMismatch = unchecked ((System.Int32)(668)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH</unmanaged-short>
        CreateGraphicspipelinestateHullShaderDomainShaderControlPointCountMismatch = unchecked ((System.Int32)(669)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH</unmanaged-short>
        CreateGraphicspipelinestateHullShaderDomainShaderTessellatorDomainMismatch = unchecked ((System.Int32)(670)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN</unmanaged-short>
        CreateGraphicspipelinestateInvalidUseOfCenterMultisamplePattern = unchecked ((System.Int32)(671)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT</unmanaged-short>
        CreateGraphicspipelinestateInvalidUseOfForcedSampleCount = unchecked ((System.Int32)(672)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY</unmanaged-short>
        CreateGraphicspipelinestateInvalidPrimitivetopology = unchecked ((System.Int32)(673)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE</unmanaged-short>
        CreateGraphicspipelinestateInvalidSystemvalue = unchecked ((System.Int32)(674)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0</unmanaged-short>
        CreateGraphicspipelinestateOutputMergerDualSourceBlendingCanOnlyHaveRenderTarget0 = unchecked ((System.Int32)(675)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING</unmanaged-short>
        CreateGraphicspipelinestateOutputMergerRenderTargetDoesNotSupportBlending = unchecked ((System.Int32)(676)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH</unmanaged-short>
        CreateGraphicspipelinestatePixelShaderOutputTypeMismatch = unchecked ((System.Int32)(677)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS</unmanaged-short>
        CreateGraphicspipelinestateOutputMergerRenderTargetDoesNotSupportLogicOperations = unchecked ((System.Int32)(678)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET</unmanaged-short>
        CreateGraphicspipelinestateRenderTargetViewNotSet = unchecked ((System.Int32)(679)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET</unmanaged-short>
        CreateGraphicspipelinestateDepthStencilViewNotSet = unchecked ((System.Int32)(680)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH</unmanaged-short>
        CreateGraphicspipelinestateGeometryShaderInputPrimitiveMismatch = unchecked ((System.Int32)(681)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT</unmanaged-short>
        CreateGraphicspipelinestatePositionNotPresent = unchecked ((System.Int32)(682)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS</unmanaged-short>
        CreateGraphicspipelinestateMissingRootSignatureFlags = unchecked ((System.Int32)(683)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES</unmanaged-short>
        CreateGraphicspipelinestateInvalidIndexBufferProperties = unchecked ((System.Int32)(684)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC</unmanaged-short>
        CreateGraphicspipelinestateInvalidSampleDescription = unchecked ((System.Int32)(685)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH</unmanaged-short>
        CreateGraphicspipelinestateHullShaderRootSignatureMismatch = unchecked ((System.Int32)(686)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH</unmanaged-short>
        CreateGraphicspipelinestateDomainShaderRootSignatureMismatch = unchecked ((System.Int32)(687)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH</unmanaged-short>
        CreateGraphicspipelinestateVertexShaderRootSignatureMismatch = unchecked ((System.Int32)(688)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH</unmanaged-short>
        CreateGraphicspipelinestateGeometryShaderRootSignatureMismatch = unchecked ((System.Int32)(689)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH</unmanaged-short>
        CreateGraphicspipelinestatePixelShaderRootSignatureMismatch = unchecked ((System.Int32)(690)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE</unmanaged-short>
        CreateGraphicspipelinestateMissingRootSignature = unchecked ((System.Int32)(691)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE</unmanaged-short>
        ExecuteBundleOpenBundle = unchecked ((System.Int32)(692)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH</unmanaged-short>
        ExecuteBundleDescriptorHeapMismatch = unchecked ((System.Int32)(693)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE</unmanaged-short>
        ExecuteBundleType = unchecked ((System.Int32)(694)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE</unmanaged-short>
        DrawEmptyScissorRectangle = unchecked ((System.Int32)(695)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND</unmanaged-short>
        CreateRootSignatureBlobNotFound = unchecked ((System.Int32)(696)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED</unmanaged-short>
        CreateRootSignatureDeserializeFailed = unchecked ((System.Int32)(697)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION</unmanaged-short>
        CreateRootSignatureInvalidConfiguration = unchecked ((System.Int32)(698)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE</unmanaged-short>
        CreateRootSignatureNotSupportedOnDevice = unchecked ((System.Int32)(699)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES</unmanaged-short>
        CreateResourceAndHeapNullResourceProperties = unchecked ((System.Int32)(700)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP</unmanaged-short>
        CreateResourceAndHeapNullHeap = unchecked ((System.Int32)(701)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS</unmanaged-short>
        GetResourceAllocationInformationInvalidRdescs = unchecked ((System.Int32)(702)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY</unmanaged-short>
        MakeresidentNullObjectArray = unchecked ((System.Int32)(703)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MAKERESIDENT_INVALIDOBJECT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MAKERESIDENT_INVALIDOBJECT</unmanaged-short>
        MakeresidentInvalidObject = unchecked ((System.Int32)(704)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY</unmanaged-short>
        EvictNullObjectArray = unchecked ((System.Int32)(705)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_EVICT_INVALIDOBJECT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_EVICT_INVALIDOBJECT</unmanaged-short>
        EvictInvalidObject = unchecked ((System.Int32)(706)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_HEAPS_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_HEAPS_UNSUPPORTED</unmanaged-short>
        HeapsUnsupported = unchecked ((System.Int32)(707)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID</unmanaged-short>
        SetDescriptorTableInvalid = unchecked ((System.Int32)(708)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID</unmanaged-short>
        SetRootConstantInvalid = unchecked ((System.Int32)(709)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID</unmanaged-short>
        SetRootConstantBufferViewInvalid = unchecked ((System.Int32)(710)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID</unmanaged-short>
        SetRootShaderResourceViewInvalid = unchecked ((System.Int32)(711)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID</unmanaged-short>
        SetRootUnorderedAccessViewInvalid = unchecked ((System.Int32)(712)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC</unmanaged-short>
        SetVertexBuffersInvalidDescription = unchecked ((System.Int32)(713)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_LARGE_OFFSET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_LARGE_OFFSET</unmanaged-short>
        SetVertexBuffersLargeOffset = unchecked ((System.Int32)(714)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC</unmanaged-short>
        SetIndexBufferInvalidDescription = unchecked ((System.Int32)(715)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_INDEX_BUFFER_LARGE_OFFSET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_INDEX_BUFFER_LARGE_OFFSET</unmanaged-short>
        SetIndexBufferLargeOffset = unchecked ((System.Int32)(716)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC</unmanaged-short>
        SetStreamOutputBuffersInvalidDescription = unchecked ((System.Int32)(717)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY</unmanaged-short>
        CreateResourceUnrecognizedDimensionality = unchecked ((System.Int32)(718)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT</unmanaged-short>
        CreateResourceUnrecognizedLayout = unchecked ((System.Int32)(719)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY</unmanaged-short>
        CreateResourceInvalidDimensionality = unchecked ((System.Int32)(720)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT</unmanaged-short>
        CreateResourceInvalidAlignment = unchecked ((System.Int32)(721)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS</unmanaged-short>
        CreateResourceInvalidMipLevels = unchecked ((System.Int32)(722)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC</unmanaged-short>
        CreateResourceInvalidSampledesc = unchecked ((System.Int32)(723)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT</unmanaged-short>
        CreateResourceInvalidLayout = unchecked ((System.Int32)(724)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID</unmanaged-short>
        SetIndexBufferInvalid = unchecked ((System.Int32)(725)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID</unmanaged-short>
        SetVertexBuffersInvalid = unchecked ((System.Int32)(726)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID</unmanaged-short>
        SetStreamOutputBuffersInvalid = unchecked ((System.Int32)(727)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID</unmanaged-short>
        SetRenderTargetsInvalid = unchecked ((System.Int32)(728)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS</unmanaged-short>
        CreateQueryHeapInvalidParameters = unchecked ((System.Int32)(729)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEQUERY_HEAP_JPEG_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEQUERY_HEAP_JPEG_NOT_SUPPORTED</unmanaged-short>
        CreateQueryHeapJpegNotSupported = unchecked ((System.Int32)(730)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS</unmanaged-short>
        BeginEndQueryInvalidParameters = unchecked ((System.Int32)(731)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY</unmanaged-short>
        CloseCommandListOpenQuery = unchecked ((System.Int32)(732)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS</unmanaged-short>
        ResolveQueryDataInvalidParameters = unchecked ((System.Int32)(733)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS</unmanaged-short>
        SetPredicationInvalidParameters = unchecked ((System.Int32)(734)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED</unmanaged-short>
        TimestampsNotSupported = unchecked ((System.Int32)(735)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UNSTABLE_POWER_STATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UNSTABLE_POWER_STATE</unmanaged-short>
        UnstablePowerState = unchecked ((System.Int32)(736)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT</unmanaged-short>
        CreateResourceUnrecognizedFormat = unchecked ((System.Int32)(737)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT</unmanaged-short>
        CreateResourceInvalidFormat = unchecked ((System.Int32)(738)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE</unmanaged-short>
        GetCopyAblelayoutInvalidSubResourceRange = unchecked ((System.Int32)(739)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET</unmanaged-short>
        GetCopyAblelayoutInvalidBaseoffset = unchecked ((System.Int32)(740)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP</unmanaged-short>
        ResourceBarrierInvalidHeap = unchecked ((System.Int32)(741)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID</unmanaged-short>
        CreateSamplerInvalid = unchecked ((System.Int32)(742)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID</unmanaged-short>
        CreateCommandsignatureInvalid = unchecked ((System.Int32)(743)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS</unmanaged-short>
        ExecuteIndirectInvalidParameters = unchecked ((System.Int32)(744)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION</unmanaged-short>
        GetGpuvirtualaddressInvalidResourceDimension = unchecked ((System.Int32)(745)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX</unmanaged-short>
        CreateShaderResourceViewInvalidPlaneindex = unchecked ((System.Int32)(749)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX</unmanaged-short>
        CreateShaderResourceViewInvalidVideoPlaneindex = unchecked ((System.Int32)(750)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX</unmanaged-short>
        CreateShaderResourceViewAmbiguousvideoplaneindex = unchecked ((System.Int32)(751)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANEINDEX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANEINDEX</unmanaged-short>
        CreateRenderTargetViewInvalidPlaneindex = unchecked ((System.Int32)(752)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX</unmanaged-short>
        CreateRenderTargetViewInvalidVideoPlaneindex = unchecked ((System.Int32)(753)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX</unmanaged-short>
        CreateRenderTargetViewAmbiguousvideoplaneindex = unchecked ((System.Int32)(754)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX</unmanaged-short>
        CreateUnorderedAccessViewInvalidPlaneindex = unchecked ((System.Int32)(755)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX</unmanaged-short>
        CreateUnorderedAccessViewInvalidVideoPlaneindex = unchecked ((System.Int32)(756)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX</unmanaged-short>
        CreateUnorderedAccessViewAmbiguousvideoplaneindex = unchecked ((System.Int32)(757)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_INVALIDSCANDATAOFFSET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_INVALIDSCANDATAOFFSET</unmanaged-short>
        JpegdecodeInvalidScandataoffset = unchecked ((System.Int32)(758)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_NOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_NOTSUPPORTED</unmanaged-short>
        JpegdecodeNotSupported = unchecked ((System.Int32)(759)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_DIMENSIONSTOOLARGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_DIMENSIONSTOOLARGE</unmanaged-short>
        JpegdecodeDimensionstoolarge = unchecked ((System.Int32)(760)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_INVALIDCOMPONENTS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_INVALIDCOMPONENTS</unmanaged-short>
        JpegdecodeInvalidComponents = unchecked ((System.Int32)(761)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDCOMPONENTS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDCOMPONENTS</unmanaged-short>
        JpegdecodeUnsupportedComponents = unchecked ((System.Int32)(762)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_DESTINATIONNOT2D</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_DESTINATIONNOT2D</unmanaged-short>
        JpegdecodeDestinationNot2D = unchecked ((System.Int32)(763)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_TILEDRESOURCESUNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_TILEDRESOURCESUNSUPPORTED</unmanaged-short>
        JpegdecodeTiledresourcesunsupported = unchecked ((System.Int32)(764)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_GUARDRECTSUNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_GUARDRECTSUNSUPPORTED</unmanaged-short>
        JpegdecodeGuardrectsunsupported = unchecked ((System.Int32)(765)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_FORMATUNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_FORMATUNSUPPORTED</unmanaged-short>
        JpegdecodeFormatUnsupported = unchecked ((System.Int32)(766)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_INVALIDSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_INVALIDSUBRESOURCE</unmanaged-short>
        JpegdecodeInvalidSubResource = unchecked ((System.Int32)(767)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_INVALIDMIPLEVEL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_INVALIDMIPLEVEL</unmanaged-short>
        JpegdecodeInvalidMiplevel = unchecked ((System.Int32)(768)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_EMPTYDESTBOX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_EMPTYDESTBOX</unmanaged-short>
        JpegdecodeEmptyDestinationBox = unchecked ((System.Int32)(769)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_DESTBOXNOT2D</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_DESTBOXNOT2D</unmanaged-short>
        JpegdecodeDestinationBoxnot2d = unchecked ((System.Int32)(770)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_DESTBOXNOTSUB</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_DESTBOXNOTSUB</unmanaged-short>
        JpegdecodeDestinationBoxnotsub = unchecked ((System.Int32)(771)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_DESTBOXESINTERSECT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_DESTBOXESINTERSECT</unmanaged-short>
        JpegdecodeDestinationBoxesintersect = unchecked ((System.Int32)(772)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEMISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEMISMATCH</unmanaged-short>
        JpegdecodeXsubsamplemismatch = unchecked ((System.Int32)(773)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEMISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEMISMATCH</unmanaged-short>
        JpegdecodeYsubsamplemismatch = unchecked ((System.Int32)(774)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEODD</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEODD</unmanaged-short>
        JpegdecodeXsubsampleodd = unchecked ((System.Int32)(775)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEODD</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEODD</unmanaged-short>
        JpegdecodeYsubsampleodd = unchecked ((System.Int32)(776)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_UPSCALEUNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_UPSCALEUNSUPPORTED</unmanaged-short>
        JpegdecodeUpscaleunsupported = unchecked ((System.Int32)(777)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_TIER4DOWNSCALETOLARGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_TIER4DOWNSCALETOLARGE</unmanaged-short>
        JpegdecodeTier4downscaletolarge = unchecked ((System.Int32)(778)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_TIER3DOWNSCALEUNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_TIER3DOWNSCALEUNSUPPORTED</unmanaged-short>
        JpegdecodeTier3downscaleunsupported = unchecked ((System.Int32)(779)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_CHROMASIZEMISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_CHROMASIZEMISMATCH</unmanaged-short>
        JpegdecodeChromasizemismatch = unchecked ((System.Int32)(780)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_LUMACHROMASIZEMISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_LUMACHROMASIZEMISMATCH</unmanaged-short>
        JpegdecodeLumachromasizemismatch = unchecked ((System.Int32)(781)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_INVALIDNUMDESTINATIONS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_INVALIDNUMDESTINATIONS</unmanaged-short>
        JpegdecodeInvalidNumdestinations = unchecked ((System.Int32)(782)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_SUBBOXUNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_SUBBOXUNSUPPORTED</unmanaged-short>
        JpegdecodeSubBoxunsupported = unchecked ((System.Int32)(783)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_1DESTUNSUPPORTEDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_1DESTUNSUPPORTEDFORMAT</unmanaged-short>
        Jpegdecode1DEstunsupportedformat = unchecked ((System.Int32)(784)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_3DESTUNSUPPORTEDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_3DESTUNSUPPORTEDFORMAT</unmanaged-short>
        Jpegdecode3DEstunsupportedformat = unchecked ((System.Int32)(785)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_SCALEUNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_SCALEUNSUPPORTED</unmanaged-short>
        JpegdecodeScaleunsupported = unchecked ((System.Int32)(786)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_INVALIDSOURCESIZE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_INVALIDSOURCESIZE</unmanaged-short>
        JpegdecodeInvalidSourceSize = unchecked ((System.Int32)(787)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_INVALIDCOPYFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_INVALIDCOPYFLAGS</unmanaged-short>
        JpegdecodeInvalidCopyFlags = unchecked ((System.Int32)(788)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_HAZARD</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_HAZARD</unmanaged-short>
        JpegdecodeHazard = unchecked ((System.Int32)(789)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE</unmanaged-short>
        JpegdecodeUnsupportedSourceBufferUsage = unchecked ((System.Int32)(790)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS</unmanaged-short>
        JpegdecodeUnsupportedSourceBufferMiscFlags = unchecked ((System.Int32)(791)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE</unmanaged-short>
        JpegdecodeUnsupportedDestinationTextureUsage = unchecked ((System.Int32)(792)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_BACKBUFFERNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_BACKBUFFERNOTSUPPORTED</unmanaged-short>
        JpegdecodeBackbuffernotsupported = unchecked ((System.Int32)(793)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDCOPYFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDCOPYFLAGS</unmanaged-short>
        JpegdecodeUnsupportedCopyFlags = unchecked ((System.Int32)(794)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_NOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_NOTSUPPORTED</unmanaged-short>
        JpegencodeNotSupported = unchecked ((System.Int32)(795)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_INVALIDSCANDATAOFFSET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_INVALIDSCANDATAOFFSET</unmanaged-short>
        JpegencodeInvalidScandataoffset = unchecked ((System.Int32)(796)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_INVALIDCOMPONENTS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_INVALIDCOMPONENTS</unmanaged-short>
        JpegencodeInvalidComponents = unchecked ((System.Int32)(797)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_SOURCENOT2D</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_SOURCENOT2D</unmanaged-short>
        JpegencodeSourceNot2D = unchecked ((System.Int32)(798)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_TILEDRESOURCESUNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_TILEDRESOURCESUNSUPPORTED</unmanaged-short>
        JpegencodeTiledresourcesunsupported = unchecked ((System.Int32)(799)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_GUARDRECTSUNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_GUARDRECTSUNSUPPORTED</unmanaged-short>
        JpegencodeGuardrectsunsupported = unchecked ((System.Int32)(800)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_XSUBSAMPLEMISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_XSUBSAMPLEMISMATCH</unmanaged-short>
        JpegencodeXsubsamplemismatch = unchecked ((System.Int32)(801)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_YSUBSAMPLEMISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_YSUBSAMPLEMISMATCH</unmanaged-short>
        JpegencodeYsubsamplemismatch = unchecked ((System.Int32)(802)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDCOMPONENTS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDCOMPONENTS</unmanaged-short>
        JpegencodeUnsupportedComponents = unchecked ((System.Int32)(803)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_FORMATUNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_FORMATUNSUPPORTED</unmanaged-short>
        JpegencodeFormatUnsupported = unchecked ((System.Int32)(804)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_INVALIDSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_INVALIDSUBRESOURCE</unmanaged-short>
        JpegencodeInvalidSubResource = unchecked ((System.Int32)(805)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_INVALIDMIPLEVEL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_INVALIDMIPLEVEL</unmanaged-short>
        JpegencodeInvalidMiplevel = unchecked ((System.Int32)(806)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_DIMENSIONSTOOLARGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_DIMENSIONSTOOLARGE</unmanaged-short>
        JpegencodeDimensionstoolarge = unchecked ((System.Int32)(807)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_HAZARD</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_HAZARD</unmanaged-short>
        JpegencodeHazard = unchecked ((System.Int32)(808)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE</unmanaged-short>
        JpegencodeUnsupportedDestinationBufferUsage = unchecked ((System.Int32)(809)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS</unmanaged-short>
        JpegencodeUnsupportedDestinationBufferMiscFlags = unchecked ((System.Int32)(810)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE</unmanaged-short>
        JpegencodeUnsupportedSourceTextureUsage = unchecked ((System.Int32)(811)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_JPEGENCODE_BACKBUFFERNOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_JPEGENCODE_BACKBUFFERNOTSUPPORTED</unmanaged-short>
        JpegencodeBackbuffernotsupported = unchecked ((System.Int32)(812)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTYPEFORQUERY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTYPEFORQUERY</unmanaged-short>
        CreateQueryOrpredicateUnsupportedContextTypeforquery = unchecked ((System.Int32)(813)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_FLUSH1_INVALIDCONTEXTTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_FLUSH1_INVALIDCONTEXTTYPE</unmanaged-short>
        Flush1InvalidContextType = unchecked ((System.Int32)(814)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE</unmanaged-short>
        CreateResourceInvalidClearvalue = unchecked ((System.Int32)(815)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT</unmanaged-short>
        CreateResourceUnrecognizedClearvalueformat = unchecked ((System.Int32)(816)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT</unmanaged-short>
        CreateResourceInvalidClearvalueformat = unchecked ((System.Int32)(817)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH</unmanaged-short>
        CreateResourceClearvaluedenormflush = unchecked ((System.Int32)(818)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALIDDEPTH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALIDDEPTH</unmanaged-short>
        CleardepthstencilviewInvalidDepth = unchecked ((System.Int32)(819)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE</unmanaged-short>
        ClearRenderTargetViewMismatchingClearValue = unchecked ((System.Int32)(820)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE</unmanaged-short>
        ClearDepthStencilViewMismatchingClearValue = unchecked ((System.Int32)(821)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALIDHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MAP_INVALIDHEAP</unmanaged-short>
        MapInvalidHeap = unchecked ((System.Int32)(822)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP</unmanaged-short>
        UnmapInvalidHeap = unchecked ((System.Int32)(823)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE</unmanaged-short>
        MapInvalidResource = unchecked ((System.Int32)(824)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE</unmanaged-short>
        UnmapInvalidResource = unchecked ((System.Int32)(825)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE</unmanaged-short>
        MapInvalidSubResource = unchecked ((System.Int32)(826)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE</unmanaged-short>
        UnmapInvalidSubResource = unchecked ((System.Int32)(827)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALIDRANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MAP_INVALIDRANGE</unmanaged-short>
        MapInvalidRange = unchecked ((System.Int32)(828)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE</unmanaged-short>
        UnmapInvalidRange = unchecked ((System.Int32)(829)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MAP_NULLRANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MAP_NULLRANGE</unmanaged-short>
        MapNullRange = unchecked ((System.Int32)(830)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UNMAP_NULLRANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UNMAP_NULLRANGE</unmanaged-short>
        UnmapNullRange = unchecked ((System.Int32)(831)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER</unmanaged-short>
        MapInvalidDataPointer = unchecked ((System.Int32)(832)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN</unmanaged-short>
        MapInvalidArgumentReturn = unchecked ((System.Int32)(833)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN</unmanaged-short>
        MapOufOfMemoryReturn = unchecked ((System.Int32)(834)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED</unmanaged-short>
        ExecutecommandlistsBundlenotsupported = unchecked ((System.Int32)(835)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH</unmanaged-short>
        ExecutecommandlistsCommandlistmismatch = unchecked ((System.Int32)(836)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST</unmanaged-short>
        ExecutecommandlistsOpenCommandlist = unchecked ((System.Int32)(837)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST</unmanaged-short>
        ExecutecommandlistsFailedcommandlist = unchecked ((System.Int32)(838)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST</unmanaged-short>
        CopyBufferRegionNullDestination = unchecked ((System.Int32)(839)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION</unmanaged-short>
        CopyBufferRegionInvalidDestinationResourceDimension = unchecked ((System.Int32)(840)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS</unmanaged-short>
        CopyBufferRegionDestinationRangeoutofbounds = unchecked ((System.Int32)(841)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC</unmanaged-short>
        CopyBufferRegionNullSource = unchecked ((System.Int32)(842)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION</unmanaged-short>
        CopyBufferRegionInvalidSourceResourceDimension = unchecked ((System.Int32)(843)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS</unmanaged-short>
        CopyBufferRegionSourceRangeoutofbounds = unchecked ((System.Int32)(844)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS</unmanaged-short>
        CopyBufferRegionInvalidCopyFlags = unchecked ((System.Int32)(845)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST</unmanaged-short>
        CopyTextureRegionNullDestination = unchecked ((System.Int32)(846)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE</unmanaged-short>
        CopyTextureRegionUnrecognizedDestinationType = unchecked ((System.Int32)(847)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION</unmanaged-short>
        CopyTextureRegionInvalidDestinationResourceDimension = unchecked ((System.Int32)(848)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE</unmanaged-short>
        CopyTextureRegionInvalidDestinationResource = unchecked ((System.Int32)(849)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE</unmanaged-short>
        CopyTextureRegionInvalidDestinationSubResource = unchecked ((System.Int32)(850)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET</unmanaged-short>
        CopyTextureRegionInvalidDestinationOffset = unchecked ((System.Int32)(851)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT</unmanaged-short>
        CopyTextureRegionUnrecognizedDestinationFormat = unchecked ((System.Int32)(852)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT</unmanaged-short>
        CopyTextureRegionInvalidDestinationFormat = unchecked ((System.Int32)(853)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS</unmanaged-short>
        CopyTextureRegionInvalidDestinationDimensions = unchecked ((System.Int32)(854)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH</unmanaged-short>
        CopyTextureRegionInvalidDestinationRowpitch = unchecked ((System.Int32)(855)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT</unmanaged-short>
        CopyTextureRegionInvalidDestinationPlacement = unchecked ((System.Int32)(856)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT</unmanaged-short>
        CopyTextureRegionInvalidDestinationDspLacedfootprintformat = unchecked ((System.Int32)(857)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS</unmanaged-short>
        CopyTextureRegionDestinationRegionOufOfBounds = unchecked ((System.Int32)(858)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC</unmanaged-short>
        CopyTextureRegionNullSource = unchecked ((System.Int32)(859)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE</unmanaged-short>
        CopyTextureRegionUnrecognizedSourceType = unchecked ((System.Int32)(860)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION</unmanaged-short>
        CopyTextureRegionInvalidSourceResourceDimension = unchecked ((System.Int32)(861)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE</unmanaged-short>
        CopyTextureRegionInvalidSourceResource = unchecked ((System.Int32)(862)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE</unmanaged-short>
        CopyTextureRegionInvalidSourceSubResource = unchecked ((System.Int32)(863)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET</unmanaged-short>
        CopyTextureRegionInvalidSourceOffset = unchecked ((System.Int32)(864)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT</unmanaged-short>
        CopyTextureRegionUnrecognizedSourceFormat = unchecked ((System.Int32)(865)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT</unmanaged-short>
        CopyTextureRegionInvalidSourceFormat = unchecked ((System.Int32)(866)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS</unmanaged-short>
        CopyTextureRegionInvalidSourceDimensions = unchecked ((System.Int32)(867)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH</unmanaged-short>
        CopyTextureRegionInvalidSourceRowpitch = unchecked ((System.Int32)(868)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT</unmanaged-short>
        CopyTextureRegionInvalidSourcePlacement = unchecked ((System.Int32)(869)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT</unmanaged-short>
        CopyTextureRegionInvalidSourceDspLacedfootprintformat = unchecked ((System.Int32)(870)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS</unmanaged-short>
        CopyTextureRegionSourceRegionOufOfBounds = unchecked ((System.Int32)(871)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES</unmanaged-short>
        CopyTextureRegionInvalidDestinationCoordinates = unchecked ((System.Int32)(872)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX</unmanaged-short>
        CopyTextureRegionInvalidSourceBox = unchecked ((System.Int32)(873)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH</unmanaged-short>
        CopyTextureRegionFormatMismatch = unchecked ((System.Int32)(874)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX</unmanaged-short>
        CopyTextureRegionEmptyBox = unchecked ((System.Int32)(875)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS</unmanaged-short>
        CopyTextureRegionInvalidCopyFlags = unchecked ((System.Int32)(876)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX</unmanaged-short>
        ResolvesubresourceInvalidSubResourceIndex = unchecked ((System.Int32)(877)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT</unmanaged-short>
        ResolvesubresourceInvalidFormat = unchecked ((System.Int32)(878)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH</unmanaged-short>
        ResolvesubresourceResourceMismatch = unchecked ((System.Int32)(879)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT</unmanaged-short>
        ResolvesubresourceInvalidSampleCount = unchecked ((System.Int32)(880)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER</unmanaged-short>
        CreateComputePipelinestateInvalidShader = unchecked ((System.Int32)(881)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH</unmanaged-short>
        CreateComputePipelinestateComputeShaderRootSignatureMismatch = unchecked ((System.Int32)(882)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE</unmanaged-short>
        CreateComputePipelinestateMissingRootSignature = unchecked ((System.Int32)(883)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB</unmanaged-short>
        CreatePipelinestateInvalidCachedblob = unchecked ((System.Int32)(884)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH</unmanaged-short>
        CreatePipelinestateCachedblobadaptermismatch = unchecked ((System.Int32)(885)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH</unmanaged-short>
        CreatePipelinestateCachedblobdriverversionmismatch = unchecked ((System.Int32)(886)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH</unmanaged-short>
        CreatePipelinestateCachedblobdescmismatch = unchecked ((System.Int32)(887)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED</unmanaged-short>
        CreatePipelinestateCachedblobignored = unchecked ((System.Int32)(888)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP</unmanaged-short>
        WriteTosubresourceInvalidHeap = unchecked ((System.Int32)(889)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE</unmanaged-short>
        WriteTosubresourceInvalidResource = unchecked ((System.Int32)(890)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX</unmanaged-short>
        WriteTosubresourceInvalidBox = unchecked ((System.Int32)(891)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE</unmanaged-short>
        WriteTosubresourceInvalidSubResource = unchecked ((System.Int32)(892)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX</unmanaged-short>
        WriteTosubresourceEmptyBox = unchecked ((System.Int32)(893)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP</unmanaged-short>
        ReadfromsubresourceInvalidHeap = unchecked ((System.Int32)(894)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE</unmanaged-short>
        ReadfromsubresourceInvalidResource = unchecked ((System.Int32)(895)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX</unmanaged-short>
        ReadfromsubresourceInvalidBox = unchecked ((System.Int32)(896)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE</unmanaged-short>
        ReadfromsubresourceInvalidSubResource = unchecked ((System.Int32)(897)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX</unmanaged-short>
        ReadfromsubresourceEmptyBox = unchecked ((System.Int32)(898)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED</unmanaged-short>
        TooManyNodesSpecified = unchecked ((System.Int32)(899)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_INVALID_NODE_INDEX</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_INVALID_NODE_INDEX</unmanaged-short>
        InvalidNodeIndex = unchecked ((System.Int32)(900)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE</unmanaged-short>
        GetHeappropertiesInvalidResource = unchecked ((System.Int32)(901)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_NODE_MASK_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_NODE_MASK_MISMATCH</unmanaged-short>
        NodeMaskMismatch = unchecked ((System.Int32)(902)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY</unmanaged-short>
        CommandListOufOfMemory = unchecked ((System.Int32)(903)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES</unmanaged-short>
        CommandListMultipleSwapchainBufferReferences = unchecked ((System.Int32)(904)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES</unmanaged-short>
        CommandListTooManySwapchainReferences = unchecked ((System.Int32)(905)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES</unmanaged-short>
        CommandQueueTooManySwapchainReferences = unchecked ((System.Int32)(906)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE</unmanaged-short>
        ExecutecommandlistsWrongSwapchainbufferreference = unchecked ((System.Int32)(907)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS</unmanaged-short>
        CommandListSetRenderTargetsInvalidNumrendertargets = unchecked ((System.Int32)(908)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE</unmanaged-short>
        CreateQueueInvalidType = unchecked ((System.Int32)(909)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS</unmanaged-short>
        CreateQueueInvalidFlags = unchecked ((System.Int32)(910)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS</unmanaged-short>
        CreateSharedresourceInvalidFlags = unchecked ((System.Int32)(911)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT</unmanaged-short>
        CreateSharedresourceInvalidFormat = unchecked ((System.Int32)(912)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS</unmanaged-short>
        CreateSharedheapInvalidFlags = unchecked ((System.Int32)(913)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES</unmanaged-short>
        ReflectsharedpropertiesUnrecognizedProperties = unchecked ((System.Int32)(914)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE</unmanaged-short>
        ReflectsharedpropertiesInvalidSize = unchecked ((System.Int32)(915)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT</unmanaged-short>
        ReflectsharedpropertiesInvalidObject = unchecked ((System.Int32)(916)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT</unmanaged-short>
        KeyedmutexInvalidObject = unchecked ((System.Int32)(917)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY</unmanaged-short>
        KeyedmutexInvalidKey = unchecked ((System.Int32)(918)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE</unmanaged-short>
        KeyedmutexWrongState = unchecked ((System.Int32)(919)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY</unmanaged-short>
        CreateQueueInvalidPriority = unchecked ((System.Int32)(920)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE</unmanaged-short>
        ObjectDeletedWhileStillInUse = unchecked ((System.Int32)(921)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS</unmanaged-short>
        CreatePipelinestateInvalidFlags = unchecked ((System.Int32)(922)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE</unmanaged-short>
        HeapAddressRangeHasNoResource = unchecked ((System.Int32)(923)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED</unmanaged-short>
        CommandListDrawRenderTargetDeleted = unchecked ((System.Int32)(924)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT</unmanaged-short>
        CreateGraphicspipelinestateAllRenderTargetsHaveUnknownFormat = unchecked ((System.Int32)(925)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS</unmanaged-short>
        HeapAddressRangeIntersectsMultipleBuffers = unchecked ((System.Int32)(926)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED</unmanaged-short>
        ExecutecommandlistsGpuWrittenReadbackResourceMapped = unchecked ((System.Int32)(927)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_NEEDED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_NEEDED</unmanaged-short>
        UnmapRangeNotNeeded = unchecked ((System.Int32)(928)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY</unmanaged-short>
        UnmapRangeNotEmpty = unchecked ((System.Int32)(929)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE</unmanaged-short>
        MapInvalidNullRange = unchecked ((System.Int32)(930)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE</unmanaged-short>
        UnmapInvalidNullRange = unchecked ((System.Int32)(931)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT</unmanaged-short>
        NoGraphicsApiSupport = unchecked ((System.Int32)(932)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT</unmanaged-short>
        NoComputeApiSupport = unchecked ((System.Int32)(933)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_FLAGS_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_FLAGS_NOT_SUPPORTED</unmanaged-short>
        ResolvesubresourceResourceFlagsNotSupported = unchecked ((System.Int32)(934)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_ARGUMENT_UNINITIALIZED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_ARGUMENT_UNINITIALIZED</unmanaged-short>
        GpuBasedValidationRootArgumentUninitialized = unchecked ((System.Int32)(935)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_HEAP_INDEX_OUT_OF_BOUNDS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_HEAP_INDEX_OUT_OF_BOUNDS</unmanaged-short>
        GpuBasedValidationDescriptorHeapIndexOutOfBounds = unchecked ((System.Int32)(936)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TABLE_REGISTER_INDEX_OUT_OF_BOUNDS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TABLE_REGISTER_INDEX_OUT_OF_BOUNDS</unmanaged-short>
        GpuBasedValidationDescriptorTableRegisterIndexOutOfBounds = unchecked ((System.Int32)(937)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_UNINITIALIZED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_UNINITIALIZED</unmanaged-short>
        GpuBasedValidationDescriptorUninitialized = unchecked ((System.Int32)(938)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TYPE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TYPE_MISMATCH</unmanaged-short>
        GpuBasedValidationDescriptorTypeMismatch = unchecked ((System.Int32)(939)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SRV_RESOURCE_DIMENSION_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SRV_RESOURCE_DIMENSION_MISMATCH</unmanaged-short>
        GpuBasedValidationShaderResourceViewResourceDimensionMismatch = unchecked ((System.Int32)(940)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UAV_RESOURCE_DIMENSION_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UAV_RESOURCE_DIMENSION_MISMATCH</unmanaged-short>
        GpuBasedValidationUnorderedAccessViewResourceDimensionMismatch = unchecked ((System.Int32)(941)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INCOMPATIBLE_RESOURCE_STATE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INCOMPATIBLE_RESOURCE_STATE</unmanaged-short>
        GpuBasedValidationIncompatibleResourceState = unchecked ((System.Int32)(942)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYRESOURCE_NULLDST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYRESOURCE_NULLDST</unmanaged-short>
        CopyResourceNullDestination = unchecked ((System.Int32)(943)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDSTRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDSTRESOURCE</unmanaged-short>
        CopyResourceInvalidDestinationResource = unchecked ((System.Int32)(944)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYRESOURCE_NULLSRC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYRESOURCE_NULLSRC</unmanaged-short>
        CopyResourceNullSource = unchecked ((System.Int32)(945)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSRCRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSRCRESOURCE</unmanaged-short>
        CopyResourceInvalidSourceResource = unchecked ((System.Int32)(946)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLDST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLDST</unmanaged-short>
        ResolvesubresourceNullDestination = unchecked ((System.Int32)(947)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDDSTRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDDSTRESOURCE</unmanaged-short>
        ResolvesubresourceInvalidDestinationResource = unchecked ((System.Int32)(948)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLSRC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLSRC</unmanaged-short>
        ResolvesubresourceNullSource = unchecked ((System.Int32)(949)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDSRCRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDSRCRESOURCE</unmanaged-short>
        ResolvesubresourceInvalidSourceResource = unchecked ((System.Int32)(950)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_PIPELINE_STATE_TYPE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_PIPELINE_STATE_TYPE_MISMATCH</unmanaged-short>
        PipelineStateTypeMismatch = unchecked ((System.Int32)(951)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_NOT_SET</unmanaged-short>
        CommandListDispatchRootSignatureNotSet = unchecked ((System.Int32)(952)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_MISMATCH</unmanaged-short>
        CommandListDispatchRootSignatureMismatch = unchecked ((System.Int32)(953)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_ZERO_BARRIERS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_ZERO_BARRIERS</unmanaged-short>
        ResourceBarrierZeroBarriers = unchecked ((System.Int32)(954)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_BEGIN_END_EVENT_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_BEGIN_END_EVENT_MISMATCH</unmanaged-short>
        BeginEndEventMismatch = unchecked ((System.Int32)(955)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_POSSIBLE_BEFORE_AFTER_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_POSSIBLE_BEFORE_AFTER_MISMATCH</unmanaged-short>
        ResourceBarrierPossibleBeforeAfterMismatch = unchecked ((System.Int32)(956)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_BEGIN_END</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_BEGIN_END</unmanaged-short>
        ResourceBarrierMismatchingBeginEnd = unchecked ((System.Int32)(957)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INVALID_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INVALID_RESOURCE</unmanaged-short>
        GpuBasedValidationInvalidResource = unchecked ((System.Int32)(958)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT</unmanaged-short>
        UseOfZeroRefcountObject = unchecked ((System.Int32)(959)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_OBJECT_EVICTED_WHILE_STILL_IN_USE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_OBJECT_EVICTED_WHILE_STILL_IN_USE</unmanaged-short>
        ObjectEvictedWhileStillInUse = unchecked ((System.Int32)(960)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_DESCRIPTOR_ACCESS_OUT_OF_BOUNDS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_DESCRIPTOR_ACCESS_OUT_OF_BOUNDS</unmanaged-short>
        GpuBasedValidationRootDescriptorAccessOutOfBounds = unchecked ((System.Int32)(961)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_INVALIDLIBRARYBLOB</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_INVALIDLIBRARYBLOB</unmanaged-short>
        CreatePipelinelibraryInvalidLibraryblob = unchecked ((System.Int32)(962)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_DRIVERVERSIONMISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_DRIVERVERSIONMISMATCH</unmanaged-short>
        CreatePipelinelibraryDriverversionmismatch = unchecked ((System.Int32)(963)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_ADAPTERVERSIONMISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_ADAPTERVERSIONMISMATCH</unmanaged-short>
        CreatePipelinelibraryAdapterversionmismatch = unchecked ((System.Int32)(964)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_UNSUPPORTED</unmanaged-short>
        CreatePipelinelibraryUnsupported = unchecked ((System.Int32)(965)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_PIPELINELIBRARY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_PIPELINELIBRARY</unmanaged-short>
        CreatePipelinelibrary = unchecked ((System.Int32)(966)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_PIPELINELIBRARY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_PIPELINELIBRARY</unmanaged-short>
        LivePipelinelibrary = unchecked ((System.Int32)(967)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_PIPELINELIBRARY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_PIPELINELIBRARY</unmanaged-short>
        DestroyPipelinelibrary = unchecked ((System.Int32)(968)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_STOREPIPELINE_NONAME</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_STOREPIPELINE_NONAME</unmanaged-short>
        StorepipelineNoname = unchecked ((System.Int32)(969)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_STOREPIPELINE_DUPLICATENAME</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_STOREPIPELINE_DUPLICATENAME</unmanaged-short>
        StorepipelineDuplicatename = unchecked ((System.Int32)(970)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LOADPIPELINE_NAMENOTFOUND</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LOADPIPELINE_NAMENOTFOUND</unmanaged-short>
        LoadPipelineNamenotfound = unchecked ((System.Int32)(971)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LOADPIPELINE_INVALIDDESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LOADPIPELINE_INVALIDDESC</unmanaged-short>
        LoadPipelineInvalidDescription = unchecked ((System.Int32)(972)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_PIPELINELIBRARY_SERIALIZE_NOTENOUGHMEMORY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_PIPELINELIBRARY_SERIALIZE_NOTENOUGHMEMORY</unmanaged-short>
        PipelinelibrarySerializeNotEnoughmemory = unchecked ((System.Int32)(973)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_RT_OUTPUT_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_RT_OUTPUT_MISMATCH</unmanaged-short>
        CreateGraphicspipelinestatePixelShaderOutputRtOutputMismatch = unchecked ((System.Int32)(974)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SETEVENTONMULTIPLEFENCECOMPLETION_INVALIDFLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SETEVENTONMULTIPLEFENCECOMPLETION_INVALIDFLAGS</unmanaged-short>
        SetEventonmultiplefencecompletionInvalidFlags = unchecked ((System.Int32)(975)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_QUEUE_VIDEO_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_QUEUE_VIDEO_NOT_SUPPORTED</unmanaged-short>
        CreateQueueVideoNotSupported = unchecked ((System.Int32)(976)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_VIDEO_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_VIDEO_NOT_SUPPORTED</unmanaged-short>
        CreateCommandAllOcatorVideoNotSupported = unchecked ((System.Int32)(977)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEQUERY_HEAP_VIDEO_DECODE_STATISTICS_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEQUERY_HEAP_VIDEO_DECODE_STATISTICS_NOT_SUPPORTED</unmanaged-short>
        CreateQueryHeapVideoDecodeStatisticsNotSupported = unchecked ((System.Int32)(978)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDLIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDLIST</unmanaged-short>
        CreateVideoDecodecommandlist = unchecked ((System.Int32)(979)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEODECODER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEODECODER</unmanaged-short>
        CreateVideoDecoder = unchecked ((System.Int32)(980)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEODECODESTREAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEODECODESTREAM</unmanaged-short>
        CreateVideoDecodestream = unchecked ((System.Int32)(981)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDLIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDLIST</unmanaged-short>
        LiveVideoDecodecommandlist = unchecked ((System.Int32)(982)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEODECODER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_VIDEODECODER</unmanaged-short>
        LiveVideoDecoder = unchecked ((System.Int32)(983)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEODECODESTREAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_VIDEODECODESTREAM</unmanaged-short>
        LiveVideoDecodestream = unchecked ((System.Int32)(984)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDLIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDLIST</unmanaged-short>
        DestroyVideoDecodecommandlist = unchecked ((System.Int32)(985)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEODECODER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_VIDEODECODER</unmanaged-short>
        DestroyVideoDecoder = unchecked ((System.Int32)(986)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEODECODESTREAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_VIDEODECODESTREAM</unmanaged-short>
        DestroyVideoDecodestream = unchecked ((System.Int32)(987)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DECODE_FRAME_INVALID_PARAMETERS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DECODE_FRAME_INVALID_PARAMETERS</unmanaged-short>
        DecodeFrameInvalidParameters = unchecked ((System.Int32)(988)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEPRECATED_API</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEPRECATED_API</unmanaged-short>
        DeprecatedApi = unchecked ((System.Int32)(989)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_COMMAND_LIST_TYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_COMMAND_LIST_TYPE</unmanaged-short>
        ResourceBarrierMismatchingCommandListType = unchecked ((System.Int32)(990)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DESCRIPTOR_TABLE_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_DESCRIPTOR_TABLE_NOT_SET</unmanaged-short>
        CommandListDescriptorTableNotSet = unchecked ((System.Int32)(991)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_CONSTANT_BUFFER_VIEW_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_CONSTANT_BUFFER_VIEW_NOT_SET</unmanaged-short>
        CommandListRootConstantBufferViewNotSet = unchecked ((System.Int32)(992)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_SHADER_RESOURCE_VIEW_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_SHADER_RESOURCE_VIEW_NOT_SET</unmanaged-short>
        CommandListRootShaderResourceViewNotSet = unchecked ((System.Int32)(993)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_UNORDERED_ACCESS_VIEW_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_UNORDERED_ACCESS_VIEW_NOT_SET</unmanaged-short>
        CommandListRootUnorderedAccessViewNotSet = unchecked ((System.Int32)(994)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DISCARD_INVALID_SUBRESOURCE_RANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DISCARD_INVALID_SUBRESOURCE_RANGE</unmanaged-short>
        DiscardInvalidSubResourceRange = unchecked ((System.Int32)(995)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DISCARD_ONE_SUBRESOURCE_FOR_MIPS_WITH_RECTS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DISCARD_ONE_SUBRESOURCE_FOR_MIPS_WITH_RECTS</unmanaged-short>
        DiscardOneSubResourceForMipsWithRectangles = unchecked ((System.Int32)(996)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DISCARD_NO_RECTS_FOR_NON_TEXTURE2D</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DISCARD_NO_RECTS_FOR_NON_TEXTURE2D</unmanaged-short>
        DiscardNoRectanglesForNonTexture2D = unchecked ((System.Int32)(997)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPY_ON_SAME_SUBRESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPY_ON_SAME_SUBRESOURCE</unmanaged-short>
        CopyOnSameSubResource = unchecked ((System.Int32)(998)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PAGEABLE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PAGEABLE</unmanaged-short>
        SetResidencypriorityInvalidPageable = unchecked ((System.Int32)(999)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UNSUPPORTED</unmanaged-short>
        GpuBasedValidationUnsupported = unchecked ((System.Int32)(1000)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_STATIC_DESCRIPTOR_INVALID_DESCRIPTOR_CHANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_STATIC_DESCRIPTOR_INVALID_DESCRIPTOR_CHANGE</unmanaged-short>
        StaticDescriptorInvalidDescriptorChange = unchecked ((System.Int32)(1001)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DATA_STATIC_DESCRIPTOR_INVALID_DATA_CHANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DATA_STATIC_DESCRIPTOR_INVALID_DATA_CHANGE</unmanaged-short>
        DataStaticDescriptorInvalidDataChange = unchecked ((System.Int32)(1002)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DATA_STATIC_WHILE_SET_AT_EXECUTE_DESCRIPTOR_INVALID_DATA_CHANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DATA_STATIC_WHILE_SET_AT_EXECUTE_DESCRIPTOR_INVALID_DATA_CHANGE</unmanaged-short>
        DataStaticWhileSetAtExecuteDescriptorInvalidDataChange = unchecked ((System.Int32)(1003)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_EXECUTE_BUNDLE_STATIC_DESCRIPTOR_DATA_STATIC_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_EXECUTE_BUNDLE_STATIC_DESCRIPTOR_DATA_STATIC_NOT_SET</unmanaged-short>
        ExecuteBundleStaticDescriptorDataStaticNotSet = unchecked ((System.Int32)(1004)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_ACCESS_OUT_OF_BOUNDS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_ACCESS_OUT_OF_BOUNDS</unmanaged-short>
        GpuBasedValidationResourceAccessOutOfBounds = unchecked ((System.Int32)(1005)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SAMPLER_MODE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SAMPLER_MODE_MISMATCH</unmanaged-short>
        GpuBasedValidationSamplerModeMismatch = unchecked ((System.Int32)(1006)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_FENCE_INVALID_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_FENCE_INVALID_FLAGS</unmanaged-short>
        CreateFenceInvalidFlags = unchecked ((System.Int32)(1007)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_DUPLICATE_SUBRESOURCE_TRANSITIONS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOURCE_BARRIER_DUPLICATE_SUBRESOURCE_TRANSITIONS</unmanaged-short>
        ResourceBarrierDuplicateSubResourceTransitions = unchecked ((System.Int32)(1008)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PRIORITY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PRIORITY</unmanaged-short>
        SetResidencypriorityInvalidPriority = unchecked ((System.Int32)(1009)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_PASS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_PASS</unmanaged-short>
        CreatePass = unchecked ((System.Int32)(1010)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_PASS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_PASS</unmanaged-short>
        DestroyPass = unchecked ((System.Int32)(1011)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_PASS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_PASS</unmanaged-short>
        LivePass = unchecked ((System.Int32)(1012)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_LARGE_NUM_DESCRIPTORS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_LARGE_NUM_DESCRIPTORS</unmanaged-short>
        CreateDescriptorHeapLargeNumDescriptorS = unchecked ((System.Int32)(1013)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_BEGIN_EVENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_BEGIN_EVENT</unmanaged-short>
        BeginEvent = unchecked ((System.Int32)(1014)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_END_EVENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_END_EVENT</unmanaged-short>
        EndEvent = unchecked ((System.Int32)(1015)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEVICE_DEBUG_LAYER_STARTUP_OPTIONS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEVICE_DEBUG_LAYER_STARTUP_OPTIONS</unmanaged-short>
        CreateDeviceDebugLayerStartupOptions = unchecked ((System.Int32)(1016)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_DEPTHBOUNDSTEST_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_DEPTHBOUNDSTEST_UNSUPPORTED</unmanaged-short>
        CreateDepthStencilStateDepthBoundstestUnsupported = unchecked ((System.Int32)(1017)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_DUPLICATE_SUBOBJECT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_DUPLICATE_SUBOBJECT</unmanaged-short>
        CreatePipelinestateDuplicateSubObject = unchecked ((System.Int32)(1018)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_UNKNOWN_SUBOBJECT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_UNKNOWN_SUBOBJECT</unmanaged-short>
        CreatePipelinestateUnknownSubObject = unchecked ((System.Int32)(1019)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_ZERO_SIZE_STREAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_ZERO_SIZE_STREAM</unmanaged-short>
        CreatePipelinestateZeroSizeStream = unchecked ((System.Int32)(1020)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_STREAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_STREAM</unmanaged-short>
        CreatePipelinestateInvalidStream = unchecked ((System.Int32)(1021)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CANNOT_DEDUCE_TYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CANNOT_DEDUCE_TYPE</unmanaged-short>
        CreatePipelinestateCannotDeduceType = unchecked ((System.Int32)(1022)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_RESOURCE_DIMENSION_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_RESOURCE_DIMENSION_MISMATCH</unmanaged-short>
        CommandListStaticDescriptorResourceDimensionMismatch = unchecked ((System.Int32)(1023)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_PRIVILEGE_FOR_GLOBAL_REALTIME</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_PRIVILEGE_FOR_GLOBAL_REALTIME</unmanaged-short>
        CreateCommandQueueInsufficientPrivilegeForGlobalRealtime = unchecked ((System.Int32)(1024)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_HARDWARE_SUPPORT_FOR_GLOBAL_REALTIME</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_HARDWARE_SUPPORT_FOR_GLOBAL_REALTIME</unmanaged-short>
        CreateCommandQueueInsufficientHardwareSupportForGlobalRealtime = unchecked ((System.Int32)(1025)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_ARCHITECTURE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_ARCHITECTURE</unmanaged-short>
        AtomiccopybufferInvalidArchitecture = unchecked ((System.Int32)(1026)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DST</unmanaged-short>
        AtomiccopybufferNullDestination = unchecked ((System.Int32)(1027)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE_DIMENSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE_DIMENSION</unmanaged-short>
        AtomiccopybufferInvalidDestinationResourceDimension = unchecked ((System.Int32)(1028)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DST_RANGE_OUT_OF_BOUNDS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DST_RANGE_OUT_OF_BOUNDS</unmanaged-short>
        AtomiccopybufferDestinationRangeOutOfBounds = unchecked ((System.Int32)(1029)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_SRC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_SRC</unmanaged-short>
        AtomiccopybufferNullSource = unchecked ((System.Int32)(1030)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE_DIMENSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE_DIMENSION</unmanaged-short>
        AtomiccopybufferInvalidSourceResourceDimension = unchecked ((System.Int32)(1031)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_SRC_RANGE_OUT_OF_BOUNDS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_SRC_RANGE_OUT_OF_BOUNDS</unmanaged-short>
        AtomiccopybufferSourceRangeOutOfBounds = unchecked ((System.Int32)(1032)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_OFFSET_ALIGNMENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_OFFSET_ALIGNMENT</unmanaged-short>
        AtomiccopybufferInvalidOffsetAlignment = unchecked ((System.Int32)(1033)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_RESOURCES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_RESOURCES</unmanaged-short>
        AtomiccopybufferNullDependentResources = unchecked ((System.Int32)(1034)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_SUBRESOURCE_RANGES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_SUBRESOURCE_RANGES</unmanaged-short>
        AtomiccopybufferNullDependentSubResourceRanges = unchecked ((System.Int32)(1035)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_RESOURCE</unmanaged-short>
        AtomiccopybufferInvalidDependentResource = unchecked ((System.Int32)(1036)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_SUBRESOURCE_RANGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_SUBRESOURCE_RANGE</unmanaged-short>
        AtomiccopybufferInvalidDependentSubResourceRange = unchecked ((System.Int32)(1037)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_SUBRESOURCE_OUT_OF_BOUNDS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_SUBRESOURCE_OUT_OF_BOUNDS</unmanaged-short>
        AtomiccopybufferDependentSubResourceOutOfBounds = unchecked ((System.Int32)(1038)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_RANGE_OUT_OF_BOUNDS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_RANGE_OUT_OF_BOUNDS</unmanaged-short>
        AtomiccopybufferDependentRangeOutOfBounds = unchecked ((System.Int32)(1039)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_ZERO_DEPENDENCIES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_ZERO_DEPENDENCIES</unmanaged-short>
        AtomiccopybufferZeroDependencies = unchecked ((System.Int32)(1040)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATE_SHARED_HANDLE_INVALIDARG</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DEVICE_CREATE_SHARED_HANDLE_INVALIDARG</unmanaged-short>
        DeviceCreateSharedHandleInvalidArgument = unchecked ((System.Int32)(1041)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESCRIPTOR_HANDLE_WITH_INVALID_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESCRIPTOR_HANDLE_WITH_INVALID_RESOURCE</unmanaged-short>
        DescriptorHandleWithInvalidResource = unchecked ((System.Int32)(1042)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SETDEPTHBOUNDS_INVALIDARGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SETDEPTHBOUNDS_INVALIDARGS</unmanaged-short>
        SetDepthBoundsInvalidArguments = unchecked ((System.Int32)(1043)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_STATE_IMPRECISE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_STATE_IMPRECISE</unmanaged-short>
        GpuBasedValidationResourceStateImprecise = unchecked ((System.Int32)(1044)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_PIPELINE_STATE_NOT_SET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_LIST_PIPELINE_STATE_NOT_SET</unmanaged-short>
        CommandListPipelineStateNotSet = unchecked ((System.Int32)(1045)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_MODEL_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_MODEL_MISMATCH</unmanaged-short>
        CreateGraphicspipelinestateShaderModelMismatch = unchecked ((System.Int32)(1046)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_OBJECT_ACCESSED_WHILE_STILL_IN_USE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_OBJECT_ACCESSED_WHILE_STILL_IN_USE</unmanaged-short>
        ObjectAccessEdWhileStillInUse = unchecked ((System.Int32)(1047)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_PROGRAMMABLE_MSAA_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_PROGRAMMABLE_MSAA_UNSUPPORTED</unmanaged-short>
        ProgrammableMSAAUnsupported = unchecked ((System.Int32)(1048)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SETSAMPLEPOSITIONS_INVALIDARGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SETSAMPLEPOSITIONS_INVALIDARGS</unmanaged-short>
        SetSamplepositionsInvalidArguments = unchecked ((System.Int32)(1049)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCEREGION_INVALID_RECT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RESOLVESUBRESOURCEREGION_INVALID_RECT</unmanaged-short>
        ResolvesubresourceregionInvalidRectangle = unchecked ((System.Int32)(1050)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDQUEUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDQUEUE</unmanaged-short>
        CreateVideoDecodecommandqueue = unchecked ((System.Int32)(1051)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDLIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDLIST</unmanaged-short>
        CreateVideoProcesscommandlist = unchecked ((System.Int32)(1052)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDQUEUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDQUEUE</unmanaged-short>
        CreateVideoProcesscommandqueue = unchecked ((System.Int32)(1053)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDQUEUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDQUEUE</unmanaged-short>
        LiveVideoDecodecommandqueue = unchecked ((System.Int32)(1054)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDLIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDLIST</unmanaged-short>
        LiveVideoProcesscommandlist = unchecked ((System.Int32)(1055)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDQUEUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDQUEUE</unmanaged-short>
        LiveVideoProcesscommandqueue = unchecked ((System.Int32)(1056)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDQUEUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDQUEUE</unmanaged-short>
        DestroyVideoDecodecommandqueue = unchecked ((System.Int32)(1057)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDLIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDLIST</unmanaged-short>
        DestroyVideoProcesscommandlist = unchecked ((System.Int32)(1058)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDQUEUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDQUEUE</unmanaged-short>
        DestroyVideoProcesscommandqueue = unchecked ((System.Int32)(1059)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSOR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSOR</unmanaged-short>
        CreateVideoProcessor = unchecked ((System.Int32)(1060)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSSTREAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSSTREAM</unmanaged-short>
        CreateVideoProcessstream = unchecked ((System.Int32)(1061)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSOR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSOR</unmanaged-short>
        LiveVideoProcessor = unchecked ((System.Int32)(1062)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSSTREAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSSTREAM</unmanaged-short>
        LiveVideoProcessstream = unchecked ((System.Int32)(1063)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSOR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSOR</unmanaged-short>
        DestroyVideoProcessor = unchecked ((System.Int32)(1064)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSSTREAM</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSSTREAM</unmanaged-short>
        DestroyVideoProcessstream = unchecked ((System.Int32)(1065)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_PROCESS_FRAME_INVALID_PARAMETERS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_PROCESS_FRAME_INVALID_PARAMETERS</unmanaged-short>
        ProcessFrameInvalidParameters = unchecked ((System.Int32)(1066)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPY_INVALIDLAYOUT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPY_INVALIDLAYOUT</unmanaged-short>
        CopyInvalidLayout = unchecked ((System.Int32)(1067)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION</unmanaged-short>
        CreateCryptoSession = unchecked ((System.Int32)(1068)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION_POLICY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION_POLICY</unmanaged-short>
        CreateCryptoSessionPolicy = unchecked ((System.Int32)(1069)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION</unmanaged-short>
        CreateProtectedResourceSession = unchecked ((System.Int32)(1070)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION</unmanaged-short>
        LiveCryptoSession = unchecked ((System.Int32)(1071)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION_POLICY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION_POLICY</unmanaged-short>
        LiveCryptoSessionPolicy = unchecked ((System.Int32)(1072)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_PROTECTED_RESOURCE_SESSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_PROTECTED_RESOURCE_SESSION</unmanaged-short>
        LiveProtectedResourceSession = unchecked ((System.Int32)(1073)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION</unmanaged-short>
        DestroyCryptoSession = unchecked ((System.Int32)(1074)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION_POLICY</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION_POLICY</unmanaged-short>
        DestroyCryptoSessionPolicy = unchecked ((System.Int32)(1075)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_PROTECTED_RESOURCE_SESSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_PROTECTED_RESOURCE_SESSION</unmanaged-short>
        DestroyProtectedResourceSession = unchecked ((System.Int32)(1076)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_PROTECTED_RESOURCE_SESSION_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_PROTECTED_RESOURCE_SESSION_UNSUPPORTED</unmanaged-short>
        ProtectedResourceSessionUnsupported = unchecked ((System.Int32)(1077)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_FENCE_INVALIDOPERATION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_FENCE_INVALIDOPERATION</unmanaged-short>
        FenceInvalidOperation = unchecked ((System.Int32)(1078)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEQUERY_HEAP_COPY_QUEUE_TIMESTAMPS_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEQUERY_HEAP_COPY_QUEUE_TIMESTAMPS_NOT_SUPPORTED</unmanaged-short>
        CreateQueryHeapCopyQueueTimestampsNotSupported = unchecked ((System.Int32)(1079)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_DEFERRED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_DEFERRED</unmanaged-short>
        SamplepositionsMismatchDeferred = unchecked ((System.Int32)(1080)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMFIRSTUSE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMFIRSTUSE</unmanaged-short>
        SamplepositionsMismatchRecordtimeAssumedfromfirstuse = unchecked ((System.Int32)(1081)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMCLEAR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMCLEAR</unmanaged-short>
        SamplepositionsMismatchRecordtimeAssumedfromclear = unchecked ((System.Int32)(1082)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEODECODERHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEODECODERHEAP</unmanaged-short>
        CreateVideoDecoderheap = unchecked ((System.Int32)(1083)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEODECODERHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_VIDEODECODERHEAP</unmanaged-short>
        LiveVideoDecoderheap = unchecked ((System.Int32)(1084)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEODECODERHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_VIDEODECODERHEAP</unmanaged-short>
        DestroyVideoDecoderheap = unchecked ((System.Int32)(1085)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDARG_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDARG_RETURN</unmanaged-short>
        OpenExistingheapInvalidArgumentReturn = unchecked ((System.Int32)(1086)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_OPENEXISTINGHEAP_OUTOFMEMORY_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_OPENEXISTINGHEAP_OUTOFMEMORY_RETURN</unmanaged-short>
        OpenExistingheapOufOfMemoryReturn = unchecked ((System.Int32)(1087)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDADDRESS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDADDRESS</unmanaged-short>
        OpenExistingheapInvalidAddress = unchecked ((System.Int32)(1088)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDHANDLE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDHANDLE</unmanaged-short>
        OpenExistingheapInvalidHandle = unchecked ((System.Int32)(1089)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_DEST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_DEST</unmanaged-short>
        WriteBufferImmediateInvalidDestination = unchecked ((System.Int32)(1090)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_MODE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_MODE</unmanaged-short>
        WriteBufferImmediateInvalidMode = unchecked ((System.Int32)(1091)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_ALIGNMENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_ALIGNMENT</unmanaged-short>
        WriteBufferImmediateInvalidAlignment = unchecked ((System.Int32)(1092)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_NOT_SUPPORTED</unmanaged-short>
        WriteBufferImmediateNotSupported = unchecked ((System.Int32)(1093)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SETVIEWINSTANCEMASK_INVALIDARGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SETVIEWINSTANCEMASK_INVALIDARGS</unmanaged-short>
        SetViewInstanceMaskInvalidArguments = unchecked ((System.Int32)(1094)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIEW_INSTANCING_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIEW_INSTANCING_UNSUPPORTED</unmanaged-short>
        ViewInstancingUnsupported = unchecked ((System.Int32)(1095)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIEW_INSTANCING_INVALIDARGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIEW_INSTANCING_INVALIDARGS</unmanaged-short>
        ViewInstancingInvalidArguments = unchecked ((System.Int32)(1096)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_DECODE_REFERENCE_ONLY_FLAG</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_DECODE_REFERENCE_ONLY_FLAG</unmanaged-short>
        CopyTextureRegionMismatchDecodeReferenceOnlyFlags = unchecked ((System.Int32)(1097)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_DECODE_REFERENCE_ONLY_FLAG</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_DECODE_REFERENCE_ONLY_FLAG</unmanaged-short>
        CopyResourceMismatchDecodeReferenceOnlyFlags = unchecked ((System.Int32)(1098)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_FAILURE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_FAILURE</unmanaged-short>
        CreateVideoDecodeHeapCapsFailure = unchecked ((System.Int32)(1099)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_UNSUPPORTED</unmanaged-short>
        CreateVideoDecodeHeapCapsUnsupported = unchecked ((System.Int32)(1100)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_INVALID_INPUT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_INVALID_INPUT</unmanaged-short>
        VideoDecodeSupportInvalidInput = unchecked ((System.Int32)(1101)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEO_DECODER_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEO_DECODER_UNSUPPORTED</unmanaged-short>
        CreateVideoDecoderUnsupported = unchecked ((System.Int32)(1102)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_METADATA_ERROR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_METADATA_ERROR</unmanaged-short>
        CreateGraphicspipelinestateMetadataError = unchecked ((System.Int32)(1103)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VIEW_INSTANCING_VERTEX_SIZE_EXCEEDED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VIEW_INSTANCING_VERTEX_SIZE_EXCEEDED</unmanaged-short>
        CreateGraphicspipelinestateViewInstancingVertexSizeExceeded = unchecked ((System.Int32)(1104)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RUNTIME_INTERNAL_ERROR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RUNTIME_INTERNAL_ERROR</unmanaged-short>
        CreateGraphicspipelinestateRuntimeInternalError = unchecked ((System.Int32)(1105)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_NO_VIDEO_API_SUPPORT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_NO_VIDEO_API_SUPPORT</unmanaged-short>
        NoVideoApiSupport = unchecked ((System.Int32)(1106)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_INVALID_INPUT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_INVALID_INPUT</unmanaged-short>
        VideoProcessSupportInvalidInput = unchecked ((System.Int32)(1107)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEO_PROCESSOR_CAPS_FAILURE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEO_PROCESSOR_CAPS_FAILURE</unmanaged-short>
        CreateVideoProcessorCapsFailure = unchecked ((System.Int32)(1108)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_UNSUPPORTED_FORMAT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_UNSUPPORTED_FORMAT</unmanaged-short>
        VideoProcessSupportUnsupportedFormat = unchecked ((System.Int32)(1109)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEO_DECODE_FRAME_INVALID_ARGUMENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEO_DECODE_FRAME_INVALID_ARGUMENT</unmanaged-short>
        VideoDecodeFrameInvalidArgument = unchecked ((System.Int32)(1110)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ENQUEUE_MAKE_RESIDENT_INVALID_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ENQUEUE_MAKE_RESIDENT_INVALID_FLAGS</unmanaged-short>
        EnqueueMakeResidentInvalidFlags = unchecked ((System.Int32)(1111)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_OPENEXISTINGHEAP_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_OPENEXISTINGHEAP_UNSUPPORTED</unmanaged-short>
        OpenExistingheapUnsupported = unchecked ((System.Int32)(1112)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEO_PROCESS_FRAMES_INVALID_ARGUMENT</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEO_PROCESS_FRAMES_INVALID_ARGUMENT</unmanaged-short>
        VideoProcessFramesInvalidArgument = unchecked ((System.Int32)(1113)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_UNSUPPORTED</unmanaged-short>
        VideoDecodeSupportUnsupported = unchecked ((System.Int32)(1114)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMANDRECORDER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMANDRECORDER</unmanaged-short>
        CreateCommandrecorder = unchecked ((System.Int32)(1115)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_COMMANDRECORDER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_COMMANDRECORDER</unmanaged-short>
        LiveCommandrecorder = unchecked ((System.Int32)(1116)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_COMMANDRECORDER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_COMMANDRECORDER</unmanaged-short>
        DestroyCommandrecorder = unchecked ((System.Int32)(1117)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_VIDEO_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_VIDEO_NOT_SUPPORTED</unmanaged-short>
        CreateCommandRecorderVideoNotSupported = unchecked ((System.Int32)(1118)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_SUPPORT_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_SUPPORT_FLAGS</unmanaged-short>
        CreateCommandRecorderInvalidSupportFlags = unchecked ((System.Int32)(1119)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_FLAGS</unmanaged-short>
        CreateCommandRecorderInvalidFlags = unchecked ((System.Int32)(1120)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_MORE_RECORDERS_THAN_LOGICAL_PROCESSORS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_MORE_RECORDERS_THAN_LOGICAL_PROCESSORS</unmanaged-short>
        CreateCommandRecorderMoreRecordersThanLogicalProcessorS = unchecked ((System.Int32)(1121)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMANDPOOL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMANDPOOL</unmanaged-short>
        CreateCommandpool = unchecked ((System.Int32)(1122)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_COMMANDPOOL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_COMMANDPOOL</unmanaged-short>
        LiveCommandpool = unchecked ((System.Int32)(1123)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_COMMANDPOOL</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_COMMANDPOOL</unmanaged-short>
        DestroyCommandpool = unchecked ((System.Int32)(1124)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_POOL_INVALID_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMAND_POOL_INVALID_FLAGS</unmanaged-short>
        CreateCommandPoolInvalidFlags = unchecked ((System.Int32)(1125)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_VIDEO_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_VIDEO_NOT_SUPPORTED</unmanaged-short>
        CreateCommandListVideoNotSupported = unchecked ((System.Int32)(1126)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_RECORDER_SUPPORT_FLAGS_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_RECORDER_SUPPORT_FLAGS_MISMATCH</unmanaged-short>
        CommandRecorderSupportFlagsMismatch = unchecked ((System.Int32)(1127)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_RECORDER_CONTENTION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_RECORDER_CONTENTION</unmanaged-short>
        CommandRecorderContention = unchecked ((System.Int32)(1128)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_RECORDER_USAGE_WITH_CREATECOMMANDLIST_COMMAND_LIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_RECORDER_USAGE_WITH_CREATECOMMANDLIST_COMMAND_LIST</unmanaged-short>
        CommandRecorderUsageWithCreateCommandlistCommandList = unchecked ((System.Int32)(1129)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_USAGE_WITH_CREATECOMMANDLIST1_COMMAND_LIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_USAGE_WITH_CREATECOMMANDLIST1_COMMAND_LIST</unmanaged-short>
        CommandAllOcatorUsageWithCreateCommandlist1CommandList = unchecked ((System.Int32)(1130)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CANNOT_EXECUTE_EMPTY_COMMAND_LIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CANNOT_EXECUTE_EMPTY_COMMAND_LIST</unmanaged-short>
        CannotExecuteEmptyCommandList = unchecked ((System.Int32)(1131)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CANNOT_RESET_COMMAND_POOL_WITH_OPEN_COMMAND_LISTS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CANNOT_RESET_COMMAND_POOL_WITH_OPEN_COMMAND_LISTS</unmanaged-short>
        CannotResetCommandPoolWithOpenCommandListS = unchecked ((System.Int32)(1132)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CANNOT_USE_COMMAND_RECORDER_WITHOUT_CURRENT_TARGET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CANNOT_USE_COMMAND_RECORDER_WITHOUT_CURRENT_TARGET</unmanaged-short>
        CannotUseCommandRecorderWithoutCurrentTarget = unchecked ((System.Int32)(1133)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CANNOT_CHANGE_COMMAND_RECORDER_TARGET_WHILE_RECORDING</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CANNOT_CHANGE_COMMAND_RECORDER_TARGET_WHILE_RECORDING</unmanaged-short>
        CannotChangeCommandRecorderTargetWhileRecording = unchecked ((System.Int32)(1134)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMMAND_POOL_SYNC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMMAND_POOL_SYNC</unmanaged-short>
        CommandPoolSync = unchecked ((System.Int32)(1135)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_EVICT_UNDERFLOW</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_EVICT_UNDERFLOW</unmanaged-short>
        EvictUnderflow = unchecked ((System.Int32)(1136)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_META_COMMAND</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_META_COMMAND</unmanaged-short>
        CreateMetaCommand = unchecked ((System.Int32)(1137)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_META_COMMAND</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_META_COMMAND</unmanaged-short>
        LiveMetaCommand = unchecked ((System.Int32)(1138)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_META_COMMAND</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_META_COMMAND</unmanaged-short>
        DestroyMetaCommand = unchecked ((System.Int32)(1139)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_DST_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_DST_RESOURCE</unmanaged-short>
        CopyBufferRegionInvalidDestinationResource = unchecked ((System.Int32)(1140)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_SRC_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_SRC_RESOURCE</unmanaged-short>
        CopyBufferRegionInvalidSourceResource = unchecked ((System.Int32)(1141)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE</unmanaged-short>
        AtomiccopybufferInvalidDestinationResource = unchecked ((System.Int32)(1142)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE</unmanaged-short>
        AtomiccopybufferInvalidSourceResource = unchecked ((System.Int32)(1143)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_BUFFER</unmanaged-short>
        CreatePlacedresourceonbufferNullBuffer = unchecked ((System.Int32)(1144)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_RESOURCE_DESC</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_RESOURCE_DESC</unmanaged-short>
        CreatePlacedresourceonbufferNullResourceDescription = unchecked ((System.Int32)(1145)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_UNSUPPORTED</unmanaged-short>
        CreatePlacedresourceonbufferUnsupported = unchecked ((System.Int32)(1146)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_DIMENSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_DIMENSION</unmanaged-short>
        CreatePlacedresourceonbufferInvalidBufferDimension = unchecked ((System.Int32)(1147)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_FLAGS</unmanaged-short>
        CreatePlacedresourceonbufferInvalidBufferFlags = unchecked ((System.Int32)(1148)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_OFFSET</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_OFFSET</unmanaged-short>
        CreatePlacedresourceonbufferInvalidBufferOffset = unchecked ((System.Int32)(1149)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_DIMENSION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_DIMENSION</unmanaged-short>
        CreatePlacedresourceonbufferInvalidResourceDimension = unchecked ((System.Int32)(1150)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_FLAGS</unmanaged-short>
        CreatePlacedresourceonbufferInvalidResourceFlags = unchecked ((System.Int32)(1151)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_OUTOFMEMORY_RETURN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_OUTOFMEMORY_RETURN</unmanaged-short>
        CreatePlacedresourceonbufferOufOfMemoryReturn = unchecked ((System.Int32)(1152)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CANNOT_CREATE_GRAPHICS_AND_VIDEO_COMMAND_RECORDER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CANNOT_CREATE_GRAPHICS_AND_VIDEO_COMMAND_RECORDER</unmanaged-short>
        CannotCreateGraphicsAndVideoCommandRecorder = unchecked ((System.Int32)(1153)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_POSSIBLY_MISMATCHING_PROPERTIES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_POSSIBLY_MISMATCHING_PROPERTIES</unmanaged-short>
        UpdateTilemappingsPossiblyMismatchingProperties = unchecked ((System.Int32)(1154)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE</unmanaged-short>
        CreateCommandListInvalidCommandListType = unchecked ((System.Int32)(1155)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INCOMPATIBLE_WITH_STRUCTURED_BUFFERS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INCOMPATIBLE_WITH_STRUCTURED_BUFFERS</unmanaged-short>
        ClearunorderedaccessviewIncompatibleWithStructuredBuffers = unchecked ((System.Int32)(1156)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COMPUTE_ONLY_DEVICE_OPERATION_UNSUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COMPUTE_ONLY_DEVICE_OPERATION_UNSUPPORTED</unmanaged-short>
        ComputeOnlyDeviceOperationUnsupported = unchecked ((System.Int32)(1157)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INVALID</unmanaged-short>
        BuildRaytracingAccelerationStructureInvalid = unchecked ((System.Int32)(1158)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_INVALID</unmanaged-short>
        EmitRaytracingAccelerationStructurePostbuildInformationInvalid = unchecked ((System.Int32)(1159)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_COPY_RAYTRACING_ACCELERATION_STRUCTURE_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_COPY_RAYTRACING_ACCELERATION_STRUCTURE_INVALID</unmanaged-short>
        CopyRaytracingAccelerationStructureInvalid = unchecked ((System.Int32)(1160)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DISPATCH_RAYS_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DISPATCH_RAYS_INVALID</unmanaged-short>
        DispatchRaysInvalid = unchecked ((System.Int32)(1161)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GET_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GET_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_INVALID</unmanaged-short>
        GetRaytracingAccelerationStructurePrebuildInformationInvalid = unchecked ((System.Int32)(1162)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_LIFETIMETRACKER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_LIFETIMETRACKER</unmanaged-short>
        CreateLifetimetracker = unchecked ((System.Int32)(1163)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_LIFETIMETRACKER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_LIFETIMETRACKER</unmanaged-short>
        LiveLifetimetracker = unchecked ((System.Int32)(1164)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_LIFETIMETRACKER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_LIFETIMETRACKER</unmanaged-short>
        DestroyLifetimetracker = unchecked ((System.Int32)(1165)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROYOWNEDOBJECT_OBJECTNOTOWNED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROYOWNEDOBJECT_OBJECTNOTOWNED</unmanaged-short>
        DestroyOwnedobjectObjectNotOwned = unchecked ((System.Int32)(1166)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_TRACKEDWORKLOAD</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_TRACKEDWORKLOAD</unmanaged-short>
        CreateTrackedworkload = unchecked ((System.Int32)(1167)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_TRACKEDWORKLOAD</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_TRACKEDWORKLOAD</unmanaged-short>
        LiveTrackedworkload = unchecked ((System.Int32)(1168)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD</unmanaged-short>
        DestroyTrackedworkload = unchecked ((System.Int32)(1169)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_ERROR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_PASS_ERROR</unmanaged-short>
        RenderPassError = unchecked ((System.Int32)(1170)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_META_COMMAND_ID_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_META_COMMAND_ID_INVALID</unmanaged-short>
        MetaCommandIdInvalid = unchecked ((System.Int32)(1171)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_META_COMMAND_UNSUPPORTED_PARAMS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_META_COMMAND_UNSUPPORTED_PARAMS</unmanaged-short>
        MetaCommandUnsupportedParameters = unchecked ((System.Int32)(1172)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_META_COMMAND_FAILED_ENUMERATION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_META_COMMAND_FAILED_ENUMERATION</unmanaged-short>
        MetaCommandFailedEnumeration = unchecked ((System.Int32)(1173)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_META_COMMAND_PARAMETER_SIZE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_META_COMMAND_PARAMETER_SIZE_MISMATCH</unmanaged-short>
        MetaCommandParameterSizeMismatch = unchecked ((System.Int32)(1174)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_UNINITIALIZED_META_COMMAND</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_UNINITIALIZED_META_COMMAND</unmanaged-short>
        UninitializedMetaCommand = unchecked ((System.Int32)(1175)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_META_COMMAND_INVALID_GPU_VIRTUAL_ADDRESS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_META_COMMAND_INVALID_GPU_VIRTUAL_ADDRESS</unmanaged-short>
        MetaCommandInvalidGpuVirtualAddress = unchecked ((System.Int32)(1176)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDLIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDLIST</unmanaged-short>
        CreateVideoEncodecommandlist = unchecked ((System.Int32)(1177)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDLIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDLIST</unmanaged-short>
        LiveVideoEncodecommandlist = unchecked ((System.Int32)(1178)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDLIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDLIST</unmanaged-short>
        DestroyVideoEncodecommandlist = unchecked ((System.Int32)(1179)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDQUEUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDQUEUE</unmanaged-short>
        CreateVideoEncodecommandqueue = unchecked ((System.Int32)(1180)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDQUEUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDQUEUE</unmanaged-short>
        LiveVideoEncodecommandqueue = unchecked ((System.Int32)(1181)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDQUEUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDQUEUE</unmanaged-short>
        DestroyVideoEncodecommandqueue = unchecked ((System.Int32)(1182)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONESTIMATOR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONESTIMATOR</unmanaged-short>
        CreateVideoMotionestimator = unchecked ((System.Int32)(1183)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONESTIMATOR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONESTIMATOR</unmanaged-short>
        LiveVideoMotionestimator = unchecked ((System.Int32)(1184)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONESTIMATOR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONESTIMATOR</unmanaged-short>
        DestroyVideoMotionestimator = unchecked ((System.Int32)(1185)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONVECTORHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONVECTORHEAP</unmanaged-short>
        CreateVideoMotionvectorheap = unchecked ((System.Int32)(1186)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONVECTORHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONVECTORHEAP</unmanaged-short>
        LiveVideoMotionvectorheap = unchecked ((System.Int32)(1187)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONVECTORHEAP</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONVECTORHEAP</unmanaged-short>
        DestroyVideoMotionvectorheap = unchecked ((System.Int32)(1188)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS</unmanaged-short>
        MultipleTrackedWorkloads = unchecked ((System.Int32)(1189)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS</unmanaged-short>
        MultipleTrackedWorkloadPairs = unchecked ((System.Int32)(1190)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR</unmanaged-short>
        OutOfOrderTrackedWorkloadPair = unchecked ((System.Int32)(1191)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD</unmanaged-short>
        CannotAddTrackedWorkload = unchecked ((System.Int32)(1192)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR</unmanaged-short>
        IncompleteTrackedWorkloadPair = unchecked ((System.Int32)(1193)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CREATE_STATE_OBJECT_ERROR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CREATE_STATE_OBJECT_ERROR</unmanaged-short>
        CreateStateObjectError = unchecked ((System.Int32)(1194)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_ERROR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_ERROR</unmanaged-short>
        GetShaderIdentifierError = unchecked ((System.Int32)(1195)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GET_SHADER_STACK_SIZE_ERROR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GET_SHADER_STACK_SIZE_ERROR</unmanaged-short>
        GetShaderStackSizeError = unchecked ((System.Int32)(1196)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GET_PIPELINE_STACK_SIZE_ERROR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GET_PIPELINE_STACK_SIZE_ERROR</unmanaged-short>
        GetPipelineStackSizeError = unchecked ((System.Int32)(1197)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_SET_PIPELINE_STACK_SIZE_ERROR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_SET_PIPELINE_STACK_SIZE_ERROR</unmanaged-short>
        SetPipelineStackSizeError = unchecked ((System.Int32)(1198)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_SIZE_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_SIZE_INVALID</unmanaged-short>
        GetShaderIdentifierSizeInvalid = unchecked ((System.Int32)(1199)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_INVALID</unmanaged-short>
        CheckDriverMatchingIdentifierInvalid = unchecked ((System.Int32)(1200)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_DRIVER_REPORTED_ISSUE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_DRIVER_REPORTED_ISSUE</unmanaged-short>
        CheckDriverMatchingIdentifierDriverReportedIssue = unchecked ((System.Int32)(1201)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_INVALID_RESOURCE_BARRIER</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_PASS_INVALID_RESOURCE_BARRIER</unmanaged-short>
        RenderPassInvalidResourceBarrier = unchecked ((System.Int32)(1202)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_DISALLOWED_API_CALLED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_PASS_DISALLOWED_API_CALLED</unmanaged-short>
        RenderPassDisallowedApiCalled = unchecked ((System.Int32)(1203)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_NEST_RENDER_PASSES</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_NEST_RENDER_PASSES</unmanaged-short>
        RenderPassCannotNestRenderPasses = unchecked ((System.Int32)(1204)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_END_WITHOUT_BEGIN</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_END_WITHOUT_BEGIN</unmanaged-short>
        RenderPassCannotEndWithoutBegin = unchecked ((System.Int32)(1205)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_CLOSE_COMMAND_LIST</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_CLOSE_COMMAND_LIST</unmanaged-short>
        RenderPassCannotCloseCommandList = unchecked ((System.Int32)(1206)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_GPU_WORK_WHILE_SUSPENDED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_PASS_GPU_WORK_WHILE_SUSPENDED</unmanaged-short>
        RenderPassGpuWorkWhileSuspended = unchecked ((System.Int32)(1207)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_SUSPEND_RESUME</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_SUSPEND_RESUME</unmanaged-short>
        RenderPassMismatchingSuspendResume = unchecked ((System.Int32)(1208)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_NO_PRIOR_SUSPEND_WITHIN_EXECUTECOMMANDLISTS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_PASS_NO_PRIOR_SUSPEND_WITHIN_EXECUTECOMMANDLISTS</unmanaged-short>
        RenderPassNoPriorSuspendWithinExecutecommandlists = unchecked ((System.Int32)(1209)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_NO_SUBSEQUENT_RESUME_WITHIN_EXECUTECOMMANDLISTS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_PASS_NO_SUBSEQUENT_RESUME_WITHIN_EXECUTECOMMANDLISTS</unmanaged-short>
        RenderPassNoSubSequentResumeWithinExecutecommandlists = unchecked ((System.Int32)(1210)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TRACKED_WORKLOAD_COMMAND_QUEUE_MISMATCH</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TRACKED_WORKLOAD_COMMAND_QUEUE_MISMATCH</unmanaged-short>
        TrackedWorkloadCommandQueueMismatch = unchecked ((System.Int32)(1211)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED</unmanaged-short>
        TrackedWorkloadNotSupported = unchecked ((System.Int32)(1212)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_NO_ACCESS</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_NO_ACCESS</unmanaged-short>
        RenderPassMismatchingNoAccess = unchecked ((System.Int32)(1213)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_UNSUPPORTED_RESOLVE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_RENDER_PASS_UNSUPPORTED_RESOLVE</unmanaged-short>
        RenderPassUnsupportedResolve = unchecked ((System.Int32)(1214)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn950146</doc-id>
        /// <unmanaged>D3D12_MESSAGE_ID_D3D12_MESSAGES_END</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_ID_D3D12_MESSAGES_END</unmanaged-short>
        D3D12MessagesEnd = unchecked ((System.Int32)(1215))}

    /// <summary>
    /// <p> Debug message severity levels for an information queue.</p>
    /// </summary>
    /// <remarks>
    /// <p> Use these values to allow or deny message categories to pass through the storage and retrieval filters for an information queue (see <strong><see cref = "SharpDX.Direct3D12.InfoQueueFilter"/></strong>). This API is used by <strong>AddApplicationMessage</strong> and <strong>AddMessage</strong>. </p>
    /// </remarks>
    /// <doc-id>dn950147</doc-id>
    /// <unmanaged>D3D12_MESSAGE_SEVERITY</unmanaged>
    /// <unmanaged-short>D3D12_MESSAGE_SEVERITY</unmanaged-short>
    public enum MessageSeverity : System.Int32
    {
        /// <summary>
        /// <dd> <p> Indicates a corruption error. </p> </dd>
        /// </summary>
        /// <doc-id>dn950147</doc-id>
        /// <unmanaged>D3D12_MESSAGE_SEVERITY_CORRUPTION</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_SEVERITY_CORRUPTION</unmanaged-short>
        Corruption = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Indicates an error. </p> </dd>
        /// </summary>
        /// <doc-id>dn950147</doc-id>
        /// <unmanaged>D3D12_MESSAGE_SEVERITY_ERROR</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_SEVERITY_ERROR</unmanaged-short>
        Error = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Indicates a warning. </p> </dd>
        /// </summary>
        /// <doc-id>dn950147</doc-id>
        /// <unmanaged>D3D12_MESSAGE_SEVERITY_WARNING</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_SEVERITY_WARNING</unmanaged-short>
        Warning = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> Indicates an information message. </p> </dd>
        /// </summary>
        /// <doc-id>dn950147</doc-id>
        /// <unmanaged>D3D12_MESSAGE_SEVERITY_INFO</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_SEVERITY_INFO</unmanaged-short>
        Information = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p> Indicates a message other than corruption, error, warning or information. </p> </dd>
        /// </summary>
        /// <doc-id>dn950147</doc-id>
        /// <unmanaged>D3D12_MESSAGE_SEVERITY_MESSAGE</unmanaged>
        /// <unmanaged-short>D3D12_MESSAGE_SEVERITY_MESSAGE</unmanaged-short>
        Message = unchecked ((System.Int32)(4))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_META_COMMAND_PARAMETER_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_META_COMMAND_PARAMETER_FLAGS</unmanaged-short>
    public enum MetaCommandParameterFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_META_COMMAND_PARAMETER_FLAG_INPUT</unmanaged>
        /// <unmanaged-short>D3D12_META_COMMAND_PARAMETER_FLAG_INPUT</unmanaged-short>
        Input = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT</unmanaged>
        /// <unmanaged-short>D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT</unmanaged-short>
        Output = unchecked ((System.Int32)(2)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_META_COMMAND_PARAMETER_STAGE</unmanaged>
    /// <unmanaged-short>D3D12_META_COMMAND_PARAMETER_STAGE</unmanaged-short>
    public enum MetaCommandParameterStage : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_META_COMMAND_PARAMETER_STAGE_CREATION</unmanaged>
        /// <unmanaged-short>D3D12_META_COMMAND_PARAMETER_STAGE_CREATION</unmanaged-short>
        Creation = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION</unmanaged>
        /// <unmanaged-short>D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION</unmanaged-short>
        Initialization = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION</unmanaged>
        /// <unmanaged-short>D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION</unmanaged-short>
        Execution = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_META_COMMAND_PARAMETER_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_META_COMMAND_PARAMETER_TYPE</unmanaged-short>
    public enum MetaCommandParameterType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT</unmanaged>
        /// <unmanaged-short>D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT</unmanaged-short>
        Float = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_META_COMMAND_PARAMETER_TYPE_UINT64</unmanaged>
        /// <unmanaged-short>D3D12_META_COMMAND_PARAMETER_TYPE_UINT64</unmanaged-short>
        UInt64 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS</unmanaged>
        /// <unmanaged-short>D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS</unmanaged-short>
        GpuVirtualAddress = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV</unmanaged>
        /// <unmanaged-short>D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV</unmanaged-short>
        CpuDescriptorHandleHeapTypeConstantBufferViewShaderResourceViewUnorderedAccessView = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV</unmanaged>
        /// <unmanaged-short>D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV</unmanaged-short>
        GpuDescriptorHandleHeapTypeConstantBufferViewShaderResourceViewUnorderedAccessView = unchecked ((System.Int32)(4))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies multiple wait flags for multiple fences.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong>SetEventOnMultipleFenceCompletion</strong> method.</p>
    /// </remarks>
    /// <doc-id>mt709118</doc-id>
    /// <unmanaged>D3D12_MULTIPLE_FENCE_WAIT_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_MULTIPLE_FENCE_WAIT_FLAGS</unmanaged-short>
    public enum MultipleFenceWaitFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates that none of the fences need to be waited on.</p> </dd>
        /// </summary>
        /// <doc-id>mt709118</doc-id>
        /// <unmanaged>D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Indicates that any one of the fences need to be waited on.</p> </dd>
        /// </summary>
        /// <doc-id>mt709118</doc-id>
        /// <unmanaged>D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY</unmanaged>
        /// <unmanaged-short>D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY</unmanaged-short>
        Any = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Indicates that all the fences need to be waited on.</p> </dd>
        /// </summary>
        /// <doc-id>mt709118</doc-id>
        /// <unmanaged>D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL</unmanaged>
        /// <unmanaged-short>D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL</unmanaged-short>
        All = unchecked ((System.Int32)(0))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p> Specifies options for determining quality levels. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.FeatureDataMultisampleQualityLevels"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn986735</doc-id>
    /// <unmanaged>D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS</unmanaged-short>
    public enum MultisampleQualityLevelFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p> No options are supported. </p> </dd>
        /// </summary>
        /// <doc-id>dn986735</doc-id>
        /// <unmanaged>D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE</unmanaged-short>
        SFlagsNone = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The number of quality levels can be determined for tiled resources. </p> </dd>
        /// </summary>
        /// <doc-id>dn986735</doc-id>
        /// <unmanaged>D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE</unmanaged-short>
        SFlagsTiledResource = unchecked ((System.Int32)(1)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p> Flags to control pipeline state. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong>Flags</strong> member of the <strong><see cref = "SharpDX.Direct3D12.GraphicsPipelineStateDescription"/></strong> and  <strong><see cref = "SharpDX.Direct3D12.ComputePipelineStateDescription"/></strong> structures. </p>
    /// </remarks>
    /// <doc-id>dn986737</doc-id>
    /// <unmanaged>D3D12_PIPELINE_STATE_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_PIPELINE_STATE_FLAGS</unmanaged-short>
    public enum PipelineStateFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p> Indicates no flags. </p> </dd>
        /// </summary>
        /// <doc-id>dn986737</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Indicates that the pipeline state should be compiled with additional information to assist debugging. This can only be set on WARP devices.
        /// </p> </dd>
        /// </summary>
        /// <doc-id>dn986737</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG</unmanaged-short>
        ToolDebug = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies what to clear from the depth stencil view.</p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by <strong>ID3D12GraphicsCommandList::ClearDepthStencilView</strong>. The flags can be combined to clear all. </p>
    /// </remarks>
    /// <doc-id>dn986721</doc-id>
    /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE</unmanaged-short>
    public enum PipelineStateSubObjectType : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates the depth buffer should be cleared.</p> </dd>
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE</unmanaged-short>
        RootSignature = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Indicates the stencil buffer should be cleared.</p> </dd>
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS</unmanaged-short>
        VertexShader = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS</unmanaged-short>
        PixelShader = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS</unmanaged-short>
        DomainShader = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS</unmanaged-short>
        HullShader = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS</unmanaged-short>
        GeometryShader = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS</unmanaged-short>
        ComputeShader = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT</unmanaged-short>
        StreamOutput = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND</unmanaged-short>
        Blend = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK</unmanaged-short>
        SampleMask = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER</unmanaged-short>
        Rasterizer = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL</unmanaged-short>
        DepthStencil = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT</unmanaged-short>
        InputLayout = unchecked ((System.Int32)(12)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE</unmanaged-short>
        IndexBufferStripCutValue = unchecked ((System.Int32)(13)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY</unmanaged-short>
        PrimitiveTopology = unchecked ((System.Int32)(14)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS</unmanaged-short>
        RenderTargetFormatS = unchecked ((System.Int32)(15)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT</unmanaged-short>
        DepthStencilFormat = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC</unmanaged-short>
        SampleDescription = unchecked ((System.Int32)(17)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK</unmanaged-short>
        NodeMask = unchecked ((System.Int32)(18)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO</unmanaged-short>
        CachedPixelShaderO = unchecked ((System.Int32)(19)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS</unmanaged-short>
        Flags = unchecked ((System.Int32)(20)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1</unmanaged-short>
        DepthStencil1 = unchecked ((System.Int32)(21)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING</unmanaged-short>
        ViewInstancing = unchecked ((System.Int32)(22)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID</unmanaged>
        /// <unmanaged-short>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID</unmanaged-short>
        MaximumValid = unchecked ((System.Int32)(23))}

    /// <summary>
    /// <p> Specifies the predication operation to apply. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by <strong>SetPredication</strong>. </p><p> Predication is decoupled from queries. Predication can be set based on the value of 64-bits within a buffer. </p>
    /// </remarks>
    /// <doc-id>dn903807</doc-id>
    /// <unmanaged>D3D12_PREDICATION_OP</unmanaged>
    /// <unmanaged-short>D3D12_PREDICATION_OP</unmanaged-short>
    public enum PredicationOperation : System.Int32
    {
        /// <summary>
        /// <dd> <p> Enables predication if all 64-bits are zero. </p> </dd>
        /// </summary>
        /// <doc-id>dn903807</doc-id>
        /// <unmanaged>D3D12_PREDICATION_OP_EQUAL_ZERO</unmanaged>
        /// <unmanaged-short>D3D12_PREDICATION_OP_EQUAL_ZERO</unmanaged-short>
        EqualZero = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Enables predication if at least one of the 64-bits are not zero. </p> </dd>
        /// </summary>
        /// <doc-id>dn903807</doc-id>
        /// <unmanaged>D3D12_PREDICATION_OP_NOT_EQUAL_ZERO</unmanaged>
        /// <unmanaged-short>D3D12_PREDICATION_OP_NOT_EQUAL_ZERO</unmanaged-short>
        NotEqualZero = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies how the pipeline interprets geometry or hull shader input primitives.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.GraphicsPipelineStateDescription"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>dn770385</doc-id>
    /// <unmanaged>D3D12_PRIMITIVE_TOPOLOGY_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_PRIMITIVE_TOPOLOGY_TYPE</unmanaged-short>
    public enum PrimitiveTopologyType : System.Int32
    {
        /// <summary>
        /// <dd> <p>The shader has not been initialized with an input primitive type.</p> </dd>
        /// </summary>
        /// <doc-id>dn770385</doc-id>
        /// <unmanaged>D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED</unmanaged>
        /// <unmanaged-short>D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED</unmanaged-short>
        Undefined = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Interpret the input primitive as a point.</p> </dd>
        /// </summary>
        /// <doc-id>dn770385</doc-id>
        /// <unmanaged>D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT</unmanaged>
        /// <unmanaged-short>D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT</unmanaged-short>
        Point = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Interpret the input primitive as a line. </p> </dd>
        /// </summary>
        /// <doc-id>dn770385</doc-id>
        /// <unmanaged>D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE</unmanaged>
        /// <unmanaged-short>D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE</unmanaged-short>
        Line = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Interpret the input primitive as a triangle. </p> </dd>
        /// </summary>
        /// <doc-id>dn770385</doc-id>
        /// <unmanaged>D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE</unmanaged>
        /// <unmanaged-short>D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE</unmanaged-short>
        Triangle = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Interpret the input primitive as a control point patch.</p> </dd>
        /// </summary>
        /// <doc-id>dn770385</doc-id>
        /// <unmanaged>D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH</unmanaged>
        /// <unmanaged-short>D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH</unmanaged-short>
        Patch = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p>Specifies what to clear from the depth stencil view.</p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by <strong>ID3D12GraphicsCommandList::ClearDepthStencilView</strong>. The flags can be combined to clear all. </p>
    /// </remarks>
    /// <doc-id>dn986721</doc-id>
    /// <unmanaged>D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER</unmanaged>
    /// <unmanaged-short>D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER</unmanaged-short>
    public enum ProgrammableSamplePositionsTier : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates the depth buffer should be cleared.</p> </dd>
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED</unmanaged-short>
        TierNOTSupported = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Indicates the stencil buffer should be cleared.</p> </dd>
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1</unmanaged>
        /// <unmanaged-short>D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1</unmanaged-short>
        Tier1 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2</unmanaged>
        /// <unmanaged-short>D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2</unmanaged-short>
        Tier2 = unchecked ((System.Int32)(2))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_PROTECTED_RESOURCE_SESSION_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_PROTECTED_RESOURCE_SESSION_FLAGS</unmanaged-short>
    public enum ProtectedResourceSessionFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS</unmanaged-short>
    public enum ProtectedResourceSessionSupportFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED</unmanaged-short>
        Supported = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_PROTECTED_SESSION_STATUS</unmanaged>
    /// <unmanaged-short>D3D12_PROTECTED_SESSION_STATUS</unmanaged-short>
    public enum ProtectedSessionStatus : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_PROTECTED_SESSION_STATUS_OK</unmanaged>
        /// <unmanaged-short>D3D12_PROTECTED_SESSION_STATUS_OK</unmanaged-short>
        Ok = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_PROTECTED_SESSION_STATUS_INVALID</unmanaged>
        /// <unmanaged-short>D3D12_PROTECTED_SESSION_STATUS_INVALID</unmanaged-short>
        Invalid = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the type of query heap to create.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.QueryHeapDescription"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>dn903811</doc-id>
    /// <unmanaged>D3D12_QUERY_HEAP_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_QUERY_HEAP_TYPE</unmanaged-short>
    public enum QueryHeapType : System.Int32
    {
        /// <summary>
        /// <dd> <p>This returns a binary 0/1 result:  0 indicates that no samples passed depth and stencil testing, 1 indicates that at least one sample passed depth and stencil testing.  This enables occlusion queries to not interfere with any GPU performance optimization associated with depth/stencil testing.  </p> </dd>
        /// </summary>
        /// <doc-id>dn903811</doc-id>
        /// <unmanaged>D3D12_QUERY_HEAP_TYPE_OCCLUSION</unmanaged>
        /// <unmanaged-short>D3D12_QUERY_HEAP_TYPE_OCCLUSION</unmanaged-short>
        Occlusion = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Indicates that the heap is for high-performance timing data. </p> </dd>
        /// </summary>
        /// <doc-id>dn903811</doc-id>
        /// <unmanaged>D3D12_QUERY_HEAP_TYPE_TIMESTAMP</unmanaged>
        /// <unmanaged-short>D3D12_QUERY_HEAP_TYPE_TIMESTAMP</unmanaged-short>
        Timestamp = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Indicates the heap is to contain pipeline data. Refer to <strong><see cref = "SharpDX.Direct3D12.QueryDataPipelineStatistics"/></strong>.</p> </dd>
        /// </summary>
        /// <doc-id>dn903811</doc-id>
        /// <unmanaged>D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS</unmanaged>
        /// <unmanaged-short>D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS</unmanaged-short>
        PipelineStatistics = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Indicates the heap is to contain stream output data. Refer to <strong><see cref = "SharpDX.Direct3D12.StreamOutputStatistics"/></strong>.</p> </dd>
        /// </summary>
        /// <doc-id>dn903811</doc-id>
        /// <unmanaged>D3D12_QUERY_HEAP_TYPE_SO_STATISTICS</unmanaged>
        /// <unmanaged-short>D3D12_QUERY_HEAP_TYPE_SO_STATISTICS</unmanaged-short>
        StreamOutputStatistics = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn903811</doc-id>
        /// <unmanaged>D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS</unmanaged>
        /// <unmanaged-short>D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS</unmanaged-short>
        VideoDecodeStatistics = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn903811</doc-id>
        /// <unmanaged>D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP</unmanaged>
        /// <unmanaged-short>D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP</unmanaged-short>
        CopyQueueTimestamp = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p>Specifies the type of query.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by <strong>BeginQuery</strong>, <strong>EndQuery</strong> and <strong>ResolveQueryData.</strong> </p>
    /// </remarks>
    /// <doc-id>dn903812</doc-id>
    /// <unmanaged>D3D12_QUERY_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_QUERY_TYPE</unmanaged-short>
    public enum QueryType : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates the query is for depth/stencil occlusion counts.</p> </dd>
        /// </summary>
        /// <doc-id>dn903812</doc-id>
        /// <unmanaged>D3D12_QUERY_TYPE_OCCLUSION</unmanaged>
        /// <unmanaged-short>D3D12_QUERY_TYPE_OCCLUSION</unmanaged-short>
        Occlusion = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Indicates the query is for a binary depth/stencil occlusion statistics. </p> <p>This new query type acts like D3D12_QUERY_TYPE_OCCLUSION except that it returns simply a binary 0/1 result:  0 indicates that no samples passed depth and stencil testing, 1 indicates that at least one sample passed depth and stencil testing.  This enables occlusion queries to not interfere with any GPU performance optimization associated with depth/stencil testing.  </p> </dd>
        /// </summary>
        /// <doc-id>dn903812</doc-id>
        /// <unmanaged>D3D12_QUERY_TYPE_BINARY_OCCLUSION</unmanaged>
        /// <unmanaged-short>D3D12_QUERY_TYPE_BINARY_OCCLUSION</unmanaged-short>
        BinaryOcclusion = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Indicates the query is for high definition GPU and CPU timestamps.</p> </dd>
        /// </summary>
        /// <doc-id>dn903812</doc-id>
        /// <unmanaged>D3D12_QUERY_TYPE_TIMESTAMP</unmanaged>
        /// <unmanaged-short>D3D12_QUERY_TYPE_TIMESTAMP</unmanaged-short>
        Timestamp = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Indicates the query type is for graphics pipeline statistics, refer to <strong><see cref = "SharpDX.Direct3D12.QueryDataPipelineStatistics"/></strong>.</p> </dd>
        /// </summary>
        /// <doc-id>dn903812</doc-id>
        /// <unmanaged>D3D12_QUERY_TYPE_PIPELINE_STATISTICS</unmanaged>
        /// <unmanaged-short>D3D12_QUERY_TYPE_PIPELINE_STATISTICS</unmanaged-short>
        PipelineStatistics = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Stream 0 output statistics. In Direct3D 12 there is no single stream output (SO) overflow query for all the output streams. Apps need to issue multiple single-stream queries, and then correlate the results. Stream output is the ability of the GPU to write vertices to a buffer. The stream output counters monitor progress.</p> </dd>
        /// </summary>
        /// <doc-id>dn903812</doc-id>
        /// <unmanaged>D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0</unmanaged>
        /// <unmanaged-short>D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0</unmanaged-short>
        StreamOutputStatisticsStream0 = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Stream 1 output statistics.</p> </dd>
        /// </summary>
        /// <doc-id>dn903812</doc-id>
        /// <unmanaged>D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1</unmanaged>
        /// <unmanaged-short>D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1</unmanaged-short>
        StreamOutputStatisticsStream1 = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>Stream 2 output statistics.</p> </dd>
        /// </summary>
        /// <doc-id>dn903812</doc-id>
        /// <unmanaged>D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2</unmanaged>
        /// <unmanaged-short>D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2</unmanaged-short>
        StreamOutputStatisticsStream2 = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>Stream 3 output statistics.</p> </dd>
        /// </summary>
        /// <doc-id>dn903812</doc-id>
        /// <unmanaged>D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3</unmanaged>
        /// <unmanaged-short>D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3</unmanaged-short>
        StreamOutputStatisticsStream3 = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn903812</doc-id>
        /// <unmanaged>D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS</unmanaged>
        /// <unmanaged-short>D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS</unmanaged-short>
        VideoDecodeStatistics = unchecked ((System.Int32)(8))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_RAY_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_RAY_FLAGS</unmanaged-short>
    public enum RayFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAY_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_RAY_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAY_FLAG_FORCE_OPAQUE</unmanaged>
        /// <unmanaged-short>D3D12_RAY_FLAG_FORCE_OPAQUE</unmanaged-short>
        ForceOpaque = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAY_FLAG_FORCE_NON_OPAQUE</unmanaged>
        /// <unmanaged-short>D3D12_RAY_FLAG_FORCE_NON_OPAQUE</unmanaged-short>
        ForceNonOpaque = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH</unmanaged>
        /// <unmanaged-short>D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH</unmanaged-short>
        AcceptFirstHitAndEndSearch = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER</unmanaged>
        /// <unmanaged-short>D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER</unmanaged-short>
        SkipClosestHitShader = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES</unmanaged>
        /// <unmanaged-short>D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES</unmanaged-short>
        CullBackFacingTriangleS = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES</unmanaged>
        /// <unmanaged-short>D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES</unmanaged-short>
        CullFrontFacingTriangleS = unchecked ((System.Int32)(32)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAY_FLAG_CULL_OPAQUE</unmanaged>
        /// <unmanaged-short>D3D12_RAY_FLAG_CULL_OPAQUE</unmanaged-short>
        CullOpaque = unchecked ((System.Int32)(64)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAY_FLAG_CULL_NON_OPAQUE</unmanaged>
        /// <unmanaged-short>D3D12_RAY_FLAG_CULL_NON_OPAQUE</unmanaged-short>
        CullNonOpaque = unchecked ((System.Int32)(128))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS</unmanaged-short>
    public enum RaytracingAccelerationStructureBuildFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE</unmanaged-short>
        AllowUpdate = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION</unmanaged-short>
        AllowCompaction = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE</unmanaged-short>
        PreferFastTrace = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD</unmanaged-short>
        PreferFastBuild = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY</unmanaged-short>
        MinimumImizeMemory = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE</unmanaged-short>
        PerformUpdate = unchecked ((System.Int32)(32))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE</unmanaged>
    /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE</unmanaged-short>
    public enum RaytracingAccelerationStructureCopyMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE</unmanaged-short>
        Clone = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT</unmanaged-short>
        Compact = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS</unmanaged-short>
        VisualizationDecodeForToolS = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE</unmanaged-short>
        Serialize = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE</unmanaged-short>
        Deserialize = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE</unmanaged-short>
    public enum RaytracingAccelerationStructurePostbuildInformationType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE</unmanaged-short>
        CompactedSize = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION</unmanaged-short>
        ToolSVisualization = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION</unmanaged-short>
        Serialization = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE</unmanaged-short>
        CurrentSize = unchecked ((System.Int32)(3))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE</unmanaged-short>
    public enum RaytracingAccelerationStructureType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL</unmanaged-short>
        TopLevel = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL</unmanaged-short>
        BottomLevel = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_RAYTRACING_GEOMETRY_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_RAYTRACING_GEOMETRY_FLAGS</unmanaged-short>
    public enum RaytracingGeometryFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_GEOMETRY_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_GEOMETRY_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE</unmanaged-short>
        Opaque = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION</unmanaged-short>
        NoDuplicateAnyhitInverseOcation = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_RAYTRACING_GEOMETRY_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_RAYTRACING_GEOMETRY_TYPE</unmanaged-short>
    public enum RaytracingGeometryType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES</unmanaged-short>
        TriangleS = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS</unmanaged-short>
        ProceduralPrimitiveAabbs = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_RAYTRACING_INSTANCE_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_RAYTRACING_INSTANCE_FLAGS</unmanaged-short>
    public enum RaytracingInstanceFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_INSTANCE_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_INSTANCE_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE</unmanaged-short>
        TriangleCullDisable = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE</unmanaged-short>
        TriangleFrontCounterclockwise = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE</unmanaged-short>
        ForceOpaque = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE</unmanaged-short>
        ForceNonOpaque = unchecked ((System.Int32)(8))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_RAYTRACING_TIER</unmanaged>
    /// <unmanaged-short>D3D12_RAYTRACING_TIER</unmanaged-short>
    public enum RaytracingTier : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_TIER_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_TIER_NOT_SUPPORTED</unmanaged-short>
        TierNOT_SUPPORTED = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RAYTRACING_TIER_1_0</unmanaged>
        /// <unmanaged-short>D3D12_RAYTRACING_TIER_1_0</unmanaged-short>
        Tier1_0 = unchecked ((System.Int32)(10))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE</unmanaged-short>
    public enum RenderPassBeginningAccessType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD</unmanaged>
        /// <unmanaged-short>D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD</unmanaged-short>
        Discard = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE</unmanaged>
        /// <unmanaged-short>D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE</unmanaged-short>
        Preserve = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR</unmanaged>
        /// <unmanaged-short>D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR</unmanaged-short>
        Clear = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS</unmanaged>
        /// <unmanaged-short>D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS</unmanaged-short>
        NoAccess = unchecked ((System.Int32)(3))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_RENDER_PASS_ENDING_ACCESS_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_RENDER_PASS_ENDING_ACCESS_TYPE</unmanaged-short>
    public enum RenderPassEndingAccessType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD</unmanaged>
        /// <unmanaged-short>D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD</unmanaged-short>
        Discard = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE</unmanaged>
        /// <unmanaged-short>D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE</unmanaged-short>
        Preserve = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE</unmanaged>
        /// <unmanaged-short>D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE</unmanaged-short>
        Resolve = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS</unmanaged>
        /// <unmanaged-short>D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS</unmanaged-short>
        NoAccess = unchecked ((System.Int32)(3))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_RENDER_PASS_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_RENDER_PASS_FLAGS</unmanaged-short>
    public enum RenderPassFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RENDER_PASS_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_RENDER_PASS_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES</unmanaged>
        /// <unmanaged-short>D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES</unmanaged-short>
        AllowUnorderedAccessViewWriteS = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS</unmanaged>
        /// <unmanaged-short>D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS</unmanaged-short>
        SuspendingPass = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RENDER_PASS_FLAG_RESUMING_PASS</unmanaged>
        /// <unmanaged-short>D3D12_RENDER_PASS_FLAG_RESUMING_PASS</unmanaged-short>
        ResumingPass = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_RENDER_PASS_TIER</unmanaged>
    /// <unmanaged-short>D3D12_RENDER_PASS_TIER</unmanaged-short>
    public enum RenderPassTier : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RENDER_PASS_TIER_0</unmanaged>
        /// <unmanaged-short>D3D12_RENDER_PASS_TIER_0</unmanaged-short>
        Tier0 = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RENDER_PASS_TIER_1</unmanaged>
        /// <unmanaged-short>D3D12_RENDER_PASS_TIER_1</unmanaged-short>
        Tier1 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RENDER_PASS_TIER_2</unmanaged>
        /// <unmanaged-short>D3D12_RENDER_PASS_TIER_2</unmanaged-short>
        Tier2 = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Identifies the type of resource to view as a render target.</p>
    /// </summary>
    /// <remarks>
    /// <p>Specify one of the values in this enumeration in the <strong>ViewDimension</strong> member of a <strong><see cref = "SharpDX.Direct3D12.RenderTargetViewDescription"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>dn770402</doc-id>
    /// <unmanaged>D3D12_RTV_DIMENSION</unmanaged>
    /// <unmanaged-short>D3D12_RTV_DIMENSION</unmanaged-short>
    public enum RenderTargetViewDimension : System.Int32
    {
        /// <summary>
        /// <dd> <p>Do not use this value, as it will cause <strong>ID3D12Device::CreateRenderTargetView</strong> to fail.</p> </dd>
        /// </summary>
        /// <doc-id>dn770402</doc-id>
        /// <unmanaged>D3D12_RTV_DIMENSION_UNKNOWN</unmanaged>
        /// <unmanaged-short>D3D12_RTV_DIMENSION_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The resource will be accessed as a buffer.</p> </dd>
        /// </summary>
        /// <doc-id>dn770402</doc-id>
        /// <unmanaged>D3D12_RTV_DIMENSION_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_RTV_DIMENSION_BUFFER</unmanaged-short>
        Buffer = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The resource will be accessed as a 1D texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770402</doc-id>
        /// <unmanaged>D3D12_RTV_DIMENSION_TEXTURE1D</unmanaged>
        /// <unmanaged-short>D3D12_RTV_DIMENSION_TEXTURE1D</unmanaged-short>
        Texture1D = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The resource will be accessed as an array of 1D textures.</p> </dd>
        /// </summary>
        /// <doc-id>dn770402</doc-id>
        /// <unmanaged>D3D12_RTV_DIMENSION_TEXTURE1DARRAY</unmanaged>
        /// <unmanaged-short>D3D12_RTV_DIMENSION_TEXTURE1DARRAY</unmanaged-short>
        Texture1DArray = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>The resource will be accessed as a 2D texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770402</doc-id>
        /// <unmanaged>D3D12_RTV_DIMENSION_TEXTURE2D</unmanaged>
        /// <unmanaged-short>D3D12_RTV_DIMENSION_TEXTURE2D</unmanaged-short>
        Texture2D = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The resource will be accessed as an array of 2D textures.</p> </dd>
        /// </summary>
        /// <doc-id>dn770402</doc-id>
        /// <unmanaged>D3D12_RTV_DIMENSION_TEXTURE2DARRAY</unmanaged>
        /// <unmanaged-short>D3D12_RTV_DIMENSION_TEXTURE2DARRAY</unmanaged-short>
        Texture2DArray = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>The resource will be accessed as a 2D texture with multisampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn770402</doc-id>
        /// <unmanaged>D3D12_RTV_DIMENSION_TEXTURE2DMS</unmanaged>
        /// <unmanaged-short>D3D12_RTV_DIMENSION_TEXTURE2DMS</unmanaged-short>
        Texture2DMultisampled = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>The resource will be accessed as an array of 2D textures with multisampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn770402</doc-id>
        /// <unmanaged>D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY</unmanaged>
        /// <unmanaged-short>D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY</unmanaged-short>
        Texture2DMultisampledArray = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>The resource will be accessed as a 3D texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770402</doc-id>
        /// <unmanaged>D3D12_RTV_DIMENSION_TEXTURE3D</unmanaged>
        /// <unmanaged-short>D3D12_RTV_DIMENSION_TEXTURE3D</unmanaged-short>
        Texture3D = unchecked ((System.Int32)(8))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p> Specifies options for the amount of information to report about a live device object's lifetime. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enumeration is used by <strong>ID3D12DebugDevice::ReportLiveDeviceObjects</strong>. </p>
    /// </remarks>
    /// <doc-id>dn950148</doc-id>
    /// <unmanaged>D3D12_RLDO_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_RLDO_FLAGS</unmanaged-short>
    public enum ReportingLevel : System.Int32
    {
        /// <summary>
        /// <dd></dd>
        /// </summary>
        /// <doc-id>dn950148</doc-id>
        /// <unmanaged>D3D12_RLDO_NONE</unmanaged>
        /// <unmanaged-short>D3D12_RLDO_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Obtain a summary about a live device object's lifetime.  </p> </dd>
        /// </summary>
        /// <doc-id>dn950148</doc-id>
        /// <unmanaged>D3D12_RLDO_SUMMARY</unmanaged>
        /// <unmanaged-short>D3D12_RLDO_SUMMARY</unmanaged-short>
        Summary = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Obtain detailed information about a live device object's lifetime.  </p> </dd>
        /// </summary>
        /// <doc-id>dn950148</doc-id>
        /// <unmanaged>D3D12_RLDO_DETAIL</unmanaged>
        /// <unmanaged-short>D3D12_RLDO_DETAIL</unmanaged-short>
        Detail = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> Internal use only.</p> </dd>
        /// </summary>
        /// <doc-id>dn950148</doc-id>
        /// <unmanaged>D3D12_RLDO_IGNORE_INTERNAL</unmanaged>
        /// <unmanaged-short>D3D12_RLDO_IGNORE_INTERNAL</unmanaged-short>
        IgnoreInternal = unchecked ((System.Int32)(4))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Used with the EnqueuMakeResident function to choose how residency operations proceed when the memory budget is exceeded.</p>
    /// </summary>
    /// <remarks>
    /// <p></p>
    /// </remarks>
    /// <doc-id>mt844809</doc-id>
    /// <unmanaged>D3D12_RESIDENCY_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_RESIDENCY_FLAGS</unmanaged-short>
    public enum ResidencyFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p>Specifies the default residency policy, which allows residency operations to succeed regardless of the application's current memory budget. EnqueueMakeResident returns E_OUTOFMEMORY only when there is no memory available.</p> </dd>
        /// </summary>
        /// <doc-id>mt844809</doc-id>
        /// <unmanaged>D3D12_RESIDENCY_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_RESIDENCY_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Specifies that the EnqueueMakeResident function should return E_OUTOFMEMORY when the residency operation would exceed the application's current memory budget.</p> </dd>
        /// </summary>
        /// <doc-id>mt844809</doc-id>
        /// <unmanaged>D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET</unmanaged>
        /// <unmanaged-short>D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET</unmanaged-short>
        DenyOverbudget = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies a residence priority.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong>SetResidencyPriority</strong> method.</p>
    /// </remarks>
    /// <doc-id>mt709119</doc-id>
    /// <unmanaged>D3D12_RESIDENCY_PRIORITY</unmanaged>
    /// <unmanaged-short>D3D12_RESIDENCY_PRIORITY</unmanaged-short>
    public enum ResidencyPriority : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates a minimum priority.</p> </dd>
        /// </summary>
        /// <doc-id>mt709119</doc-id>
        /// <unmanaged>D3D12_RESIDENCY_PRIORITY_MINIMUM</unmanaged>
        /// <unmanaged-short>D3D12_RESIDENCY_PRIORITY_MINIMUM</unmanaged-short>
        Minimum = unchecked ((System.Int32)(671088640)),
        /// <summary>
        /// <dd> <p>Indicates a low priority.</p> </dd>
        /// </summary>
        /// <doc-id>mt709119</doc-id>
        /// <unmanaged>D3D12_RESIDENCY_PRIORITY_LOW</unmanaged>
        /// <unmanaged-short>D3D12_RESIDENCY_PRIORITY_LOW</unmanaged-short>
        Low = unchecked ((System.Int32)(1342177280)),
        /// <summary>
        /// <dd> <p>Indicates a normal, medium, priority.</p> </dd>
        /// </summary>
        /// <doc-id>mt709119</doc-id>
        /// <unmanaged>D3D12_RESIDENCY_PRIORITY_NORMAL</unmanaged>
        /// <unmanaged-short>D3D12_RESIDENCY_PRIORITY_NORMAL</unmanaged-short>
        Normal = unchecked ((System.Int32)(2013265920)),
        /// <summary>
        /// <dd> <p>Indicates a high priority, the default.</p> </dd>
        /// </summary>
        /// <doc-id>mt709119</doc-id>
        /// <unmanaged>D3D12_RESIDENCY_PRIORITY_HIGH</unmanaged>
        /// <unmanaged-short>D3D12_RESIDENCY_PRIORITY_HIGH</unmanaged-short>
        High = unchecked ((System.Int32)(-1610547200)),
        /// <summary>
        /// <dd> <p>Indicates a maximum priority.</p> </dd>
        /// </summary>
        /// <doc-id>mt709119</doc-id>
        /// <unmanaged>D3D12_RESIDENCY_PRIORITY_MAXIMUM</unmanaged>
        /// <unmanaged-short>D3D12_RESIDENCY_PRIORITY_MAXIMUM</unmanaged-short>
        Maximum = unchecked ((System.Int32)(-939524096))}

    /// <summary>
    /// <p>Specifies a resolve operation.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong>ID3D12GraphicsCommandList1::ResolveSubresourceRegion</strong> function.</p>
    /// </remarks>
    /// <doc-id>mt492583</doc-id>
    /// <unmanaged>D3D12_RESOLVE_MODE</unmanaged>
    /// <unmanaged-short>D3D12_RESOLVE_MODE</unmanaged-short>
    public enum ResolveMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Resolves compressed source samples to their uncompressed values. When using this operation, the source and destination resources must have the same sample count, unlike the min, max, and average operations that require the destination to have a sample count of 1.</p> </dd>
        /// </summary>
        /// <doc-id>mt492583</doc-id>
        /// <unmanaged>D3D12_RESOLVE_MODE_DECOMPRESS</unmanaged>
        /// <unmanaged-short>D3D12_RESOLVE_MODE_DECOMPRESS</unmanaged-short>
        Decompress = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Resolves the source samples to their minimum value. It can be used with any render target or depth stencil format.</p> </dd>
        /// </summary>
        /// <doc-id>mt492583</doc-id>
        /// <unmanaged>D3D12_RESOLVE_MODE_MIN</unmanaged>
        /// <unmanaged-short>D3D12_RESOLVE_MODE_MIN</unmanaged-short>
        Minimum = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Resolves the source samples to their maximum value. It can be used with any render target or depth stencil format.</p> </dd>
        /// </summary>
        /// <doc-id>mt492583</doc-id>
        /// <unmanaged>D3D12_RESOLVE_MODE_MAX</unmanaged>
        /// <unmanaged-short>D3D12_RESOLVE_MODE_MAX</unmanaged-short>
        Maximum = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Resolves the source samples to their average value. It can be used with any non-integer render target format, including the depth plane. It can't be used with integer render target formats, including the stencil plane.</p> </dd>
        /// </summary>
        /// <doc-id>mt492583</doc-id>
        /// <unmanaged>D3D12_RESOLVE_MODE_AVERAGE</unmanaged>
        /// <unmanaged-short>D3D12_RESOLVE_MODE_AVERAGE</unmanaged-short>
        Average = unchecked ((System.Int32)(3))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p> Flags for setting split resource barriers. </p>
    /// </summary>
    /// <remarks>
    /// <p>Split barriers allow a single transition to be split into begin and end halves (refer to Synchronization and Multi-Engine).</p><p> This enum is used by the <em>Flags</em> member of the <strong><see cref = "SharpDX.Direct3D12.ResourceBarrier"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn986741</doc-id>
    /// <unmanaged>D3D12_RESOURCE_BARRIER_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_RESOURCE_BARRIER_FLAGS</unmanaged-short>
    public enum ResourceBarrierFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p> No flags. </p> </dd>
        /// </summary>
        /// <doc-id>dn986741</doc-id>
        /// <unmanaged>D3D12_RESOURCE_BARRIER_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_BARRIER_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> This starts a barrier transition in a new state, putting a resource in a temporary no-access condition. </p> </dd>
        /// </summary>
        /// <doc-id>dn986741</doc-id>
        /// <unmanaged>D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY</unmanaged-short>
        BeginOnly = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> This barrier completes a transition, setting a new state and restoring active access to a resource.</p> </dd>
        /// </summary>
        /// <doc-id>dn986741</doc-id>
        /// <unmanaged>D3D12_RESOURCE_BARRIER_FLAG_END_ONLY</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_BARRIER_FLAG_END_ONLY</unmanaged-short>
        EndOnly = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Specifies a type of resource barrier (transition in resource use) description.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used in the <strong><see cref = "SharpDX.Direct3D12.ResourceBarrierType"/></strong> structure. Use these values with the <strong>ID3D12GraphicsCommandList::ResourceBarrier</strong> method.</p>
    /// </remarks>
    /// <doc-id>dn770393</doc-id>
    /// <unmanaged>D3D12_RESOURCE_BARRIER_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_RESOURCE_BARRIER_TYPE</unmanaged-short>
    public enum ResourceBarrierType : System.Int32
    {
        /// <summary>
        /// <dd> <p>A transition barrier that indicates a transition of a set of subresources between different usages. The caller must specify the before and after usages of the subresources. </p> </dd>
        /// </summary>
        /// <doc-id>dn770393</doc-id>
        /// <unmanaged>D3D12_RESOURCE_BARRIER_TYPE_TRANSITION</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_BARRIER_TYPE_TRANSITION</unmanaged-short>
        Transition = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>An aliasing barrier that indicates a transition between usages of 2 different resources that have mappings into the same tile pool. The caller can specify both the before and the after resource. Note that one or both resources can be <strong><c>null</c></strong>, which indicates that any tiled resource could cause aliasing.</p> </dd>
        /// </summary>
        /// <doc-id>dn770393</doc-id>
        /// <unmanaged>D3D12_RESOURCE_BARRIER_TYPE_ALIASING</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_BARRIER_TYPE_ALIASING</unmanaged-short>
        Aliasing = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>An unordered access view (UAV) barrier that indicates all UAV accesses (reads or writes) to a particular resource must complete before any future UAV accesses (read or write) can begin. </p> </dd>
        /// </summary>
        /// <doc-id>dn770393</doc-id>
        /// <unmanaged>D3D12_RESOURCE_BARRIER_TYPE_UAV</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_BARRIER_TYPE_UAV</unmanaged-short>
        UnorderedAccessView = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_RESOURCE_BINDING_TIER</unmanaged>
    /// <unmanaged-short>D3D12_RESOURCE_BINDING_TIER</unmanaged-short>
    public enum ResourceBindingTier : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RESOURCE_BINDING_TIER_1</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_BINDING_TIER_1</unmanaged-short>
        Tier1 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RESOURCE_BINDING_TIER_2</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_BINDING_TIER_2</unmanaged-short>
        Tier2 = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_RESOURCE_BINDING_TIER_3</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_BINDING_TIER_3</unmanaged-short>
        Tier3 = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Identifies the type of resource being used.</p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.ResourceDescription"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn770396</doc-id>
    /// <unmanaged>D3D12_RESOURCE_DIMENSION</unmanaged>
    /// <unmanaged-short>D3D12_RESOURCE_DIMENSION</unmanaged-short>
    public enum ResourceDimension : System.Int32
    {
        /// <summary>
        /// <dd> <p>Resource is of unknown type.</p> </dd>
        /// </summary>
        /// <doc-id>dn770396</doc-id>
        /// <unmanaged>D3D12_RESOURCE_DIMENSION_UNKNOWN</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_DIMENSION_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Resource is a buffer.</p> </dd>
        /// </summary>
        /// <doc-id>dn770396</doc-id>
        /// <unmanaged>D3D12_RESOURCE_DIMENSION_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_DIMENSION_BUFFER</unmanaged-short>
        Buffer = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Resource is a 1D texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770396</doc-id>
        /// <unmanaged>D3D12_RESOURCE_DIMENSION_TEXTURE1D</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_DIMENSION_TEXTURE1D</unmanaged-short>
        Texture1D = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Resource is a 2D texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770396</doc-id>
        /// <unmanaged>D3D12_RESOURCE_DIMENSION_TEXTURE2D</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_DIMENSION_TEXTURE2D</unmanaged-short>
        Texture2D = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Resource is a 3D texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770396</doc-id>
        /// <unmanaged>D3D12_RESOURCE_DIMENSION_TEXTURE3D</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_DIMENSION_TEXTURE3D</unmanaged-short>
        Texture3D = unchecked ((System.Int32)(4))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p> Specifies options for working with resources. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong>Flags</strong> member of the <strong><see cref = "SharpDX.Direct3D12.ResourceDescription"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn986742</doc-id>
    /// <unmanaged>D3D12_RESOURCE_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_RESOURCE_FLAGS</unmanaged-short>
    public enum ResourceFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p> No options are specified. </p> </dd>
        /// </summary>
        /// <doc-id>dn986742</doc-id>
        /// <unmanaged>D3D12_RESOURCE_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Allows a render target view to be created for the resource, as well as enables the resource to transition into the state of D3D12_RESOURCE_STATE_RENDER_TARGET. Some adapter architectures allocate extra memory for textures with this flag to reduce the effective bandwidth during common rendering. This characteristic may not be beneficial for textures that are never rendered to, nor is it available for textures compressed with BC formats. Applications should avoid setting this flag when rendering will never occur.
        /// </p> <p>The following restrictions and interactions apply:</p> <ul> <li> Either the texture format must support render target capabilities at the current feature level. Or, when the format is a typeless format, a format within the same typeless group must support render target capabilities at the current feature level.</li> <li>Cannot be set in conjunction with textures that have D3D12_TEXTURE_LAYOUT_ROW_MAJOR when <strong><see cref = "SharpDX.Direct3D12.FeatureDataD3D12Options"/></strong>::<strong>CrossAdapterRowMajorTextureSupported</strong> is <see cref = "SharpDX.Result.False"/> nor in conjunction with textures that have D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE when     <strong><see cref = "SharpDX.Direct3D12.FeatureDataD3D12Options"/></strong>::<strong>StandardSwizzle64KBSupported</strong> is <see cref = "SharpDX.Result.False"/>.
        /// </li> <li>Cannot be used with 4KB alignment, D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL, nor usage with heaps that have D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES.</li> </ul> </dd>
        /// </summary>
        /// <doc-id>dn986742</doc-id>
        /// <unmanaged>D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET</unmanaged-short>
        AllowRenderTarget = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Allows a depth stencil view to be created for the resource, as well as enables the resource to transition into the state of D3D12_RESOURCE_STATE_DEPTH_WRITE and/or D3D12_RESOURCE_STATE_DEPTH_READ. Most adapter architectures allocate extra memory for textures with this flag to reduce the effective bandwidth and maximize optimizations for early depth-test. Applications should avoid setting this flag when depth operations will never occur.
        /// </p> <p>The following restrictions and interactions apply:</p> <ul> <li>Either the texture format must support depth stencil capabilities at the current feature level. Or, when the format is a typeless format, a format within the same typeless group must support depth stencil capabilities at the current feature level.</li> <li>Cannot be used with D3D12_RESOURCE_DIMENSION_BUFFER, 4KB alignment, D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET, D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS, D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS, D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE, D3D12_TEXTURE_LAYOUT_ROW_MAJOR, nor used with heaps that have D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES or D3D12_HEAP_FLAG_ALLOW_DISPLAY.
        /// </li> <li>Precludes usage of <strong>WriteToSubresource</strong> and <strong>ReadFromSubresource</strong>.
        /// </li> <li>Precludes GPU copying of a subregion. <strong>CopyTextureRegion</strong> must copy a whole subresource to or from resources with this flag.</li> </ul> </dd>
        /// </summary>
        /// <doc-id>dn986742</doc-id>
        /// <unmanaged>D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL</unmanaged-short>
        AllowDepthStencil = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Allows an unordered access view to be created for the resource, as well as enables the resource to transition into the state of D3D12_RESOURCE_STATE_UNORDERED_ACCESS. Some adapter architectures must resort to less efficient texture layouts in order to provide this functionality. If a texture is rarely used for unordered access, it may be worth having two textures around and copying between them. One texture would have this flag, while the other wouldn't. Applications should avoid setting this flag when unordered access operations will never occur.
        /// </p> <p>The following restrictions and interactions apply:</p> <ul> <li>Either the texture format must support unordered access capabilities at the current feature level. Or, when the format is a typeless format, a format within the same typeless group must support unordered access capabilities at the current feature level.
        /// </li> <li>Cannot be set in conjunction with textures that have D3D12_TEXTURE_LAYOUT_ROW_MAJOR when <strong><see cref = "SharpDX.Direct3D12.FeatureDataD3D12Options"/></strong>::<strong>CrossAdapterRowMajorTextureSupported</strong> is <see cref = "SharpDX.Result.False"/> nor in conjunction with textures that have D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE when <strong><see cref = "SharpDX.Direct3D12.FeatureDataD3D12Options"/></strong>::<strong>StandardSwizzle64KBSupported</strong> is <see cref = "SharpDX.Result.False"/>, nor when the feature level is less than 11.0.
        /// </li> <li>Cannot be used with MSAA textures. </li> </ul> </dd>
        /// </summary>
        /// <doc-id>dn986742</doc-id>
        /// <unmanaged>D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS</unmanaged-short>
        AllowUnorderedAccess = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Disallows a shader resource view to be created for the resource, as well as disables the resource to transition into the state of D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE or D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE. Some adapter architectures experience increased bandwidth for depth stencil textures when shader resource views are precluded. If a texture is rarely used for shader resource, it may be worth having two textures around and copying between them. One texture would have this flag and the other wouldn't. Applications should set this flag when depth stencil textures will never be used from shader resource views.
        /// </p> <p>The following restrictions and interactions apply:
        /// </p> <ul> <li>Must be used with D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL. 
        /// </li> </ul> </dd>
        /// </summary>
        /// <doc-id>dn986742</doc-id>
        /// <unmanaged>D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE</unmanaged-short>
        DenyShaderResource = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>Allows the resource to be used for cross-adapter data, as well as the same features enabled by ALLOW_SIMULTANEOUS_ACCESS. Cross adapter resources commonly preclude techniques that reduce effective texture bandwidth during usage, and some adapter architectures may require different caching behavior. Applications should avoid setting this flag when the resource data will never be used with another adapter.</p> <p>The following restrictions and interactions apply:
        /// </p> <ul> <li>Must be used with heaps that have D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER.</li> <li>Cannot be used with heaps that have D3D12_HEAP_FLAG_ALLOW_DISPLAY.</li> </ul> </dd>
        /// </summary>
        /// <doc-id>dn986742</doc-id>
        /// <unmanaged>D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER</unmanaged-short>
        AllowCrossAdapter = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p>Allows a resource to be simultaneously accessed by multiple different queues, devices or processes (for example, allows a resource to be used with <strong>ResourceBarrier</strong> transitions performed in more than one command list  executing at the same time). </p> <p>Simultaneous access allows multiple readers and one writer, as long as the writer doesn't concurrently modify the texels that other readers are accessing. Some adapter architectures cannot leverage techniques to reduce effective texture bandwidth during usage. </p> <p>However, applications should avoid setting this flag when multiple readers are not required during frequent, non-overlapping writes to textures. Use of this flag can compromise resource fences to perform waits, and prevents any compression being used with a resource.</p> <p>The following restrictions and interactions apply:
        /// </p> <ul> <li>Cannot be used with D3D12_RESOURCE_DIMENSION_BUFFER; but buffers always have the properties represented by this flag.
        /// </li> <li>Cannot be used with MSAA textures.</li> </ul> </dd>
        /// </summary>
        /// <doc-id>dn986742</doc-id>
        /// <unmanaged>D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS</unmanaged-short>
        AllowSimultaneousAccess = unchecked ((System.Int32)(32)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986742</doc-id>
        /// <unmanaged>D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY</unmanaged-short>
        VideoDecodeReferenceOnly = unchecked ((System.Int32)(64))}

    /// <summary>
    /// <p> Specifies which resource heap tier the hardware and driver support. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong>ResourceHeapTier</strong> member of the <strong><see cref = "SharpDX.Direct3D12.FeatureDataD3D12Options"/></strong> structure. </p><p> This enum specifies which resource heap tier the hardware and driver support. Lower tiers require more heap attribution than greater tiers. </p><p> Resources can be categorized into the following types: </p><ul> <li>Buffers</li> <li>Non-render target &amp; non-depth stencil textures</li> <li>Render target or depth stencil textures</li> </ul>
    /// </remarks>
    /// <doc-id>dn986743</doc-id>
    /// <unmanaged>D3D12_RESOURCE_HEAP_TIER</unmanaged>
    /// <unmanaged-short>D3D12_RESOURCE_HEAP_TIER</unmanaged-short>
    public enum ResourceHeapTier : System.Int32
    {
        /// <summary>
        /// <dd> <p> Indicates that heaps can only support resources from a single resource category. For the list of resource categories, see Remarks. In tier 1, these resource categories are mutually exclusive and cannot be used with the same heap. The resource category must be declared when creating a heap, using the correct <strong><see cref = "SharpDX.Direct3D12.HeapFlags"/></strong> enumeration constant. Applications cannot create heaps with flags that allow all three categories. </p> </dd>
        /// </summary>
        /// <doc-id>dn986743</doc-id>
        /// <unmanaged>D3D12_RESOURCE_HEAP_TIER_1</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_HEAP_TIER_1</unmanaged-short>
        Tier1 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Indicates that heaps can support resources from all three categories. For the list of resource categories, see Remarks. In tier 2, these resource categories can be mixed within the same heap. Applications may create heaps with flags that allow all three categories; but are not required to do so. Applications may be written to support tier 1 and seamlessly run on tier 2. </p> </dd>
        /// </summary>
        /// <doc-id>dn986743</doc-id>
        /// <unmanaged>D3D12_RESOURCE_HEAP_TIER_2</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_HEAP_TIER_2</unmanaged-short>
        Tier2 = unchecked ((System.Int32)(2))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p> Specifies the state of a resource regarding how the resource is being used. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the following methods: </p><ul> <li> <strong>CreateCommittedResource</strong> </li> <li> <strong>CreatePlacedResource</strong> </li> <li> <strong>CreateReservedResource</strong> </li> </ul>
    /// </remarks>
    /// <doc-id>dn986744</doc-id>
    /// <unmanaged>D3D12_RESOURCE_STATES</unmanaged>
    /// <unmanaged-short>D3D12_RESOURCE_STATES</unmanaged-short>
    public enum ResourceStates : System.Int32
    {
        /// <summary>
        /// <dd> <p>Applications should only transition to this state for accessing a resource across different graphics engine types.</p> <p>Specifically, a resource must be in the COMMON state before being used on a COPY queue (when previous used on DIRECT/COMPUTE), and before being used on DIRECT/COMPUTE (when previously used on COPY). This restriction does not exist when accessing data between DIRECT and COMPUTE queues.</p> <p>The COMMON state can be used for all usages on a Copy queue using the implicit state transitions. For more information, in Synchronization and Multi-Engine, find "common". </p> <p>Additionally, textures must be in the COMMON state for CPU access to be legal, assuming the texture was created in a CPU-visible heap in the first place.</p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_COMMON</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_COMMON</unmanaged-short>
        Common = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> A subresource must be in this state when it is accessed by the 3D pipeline as a vertex buffer or constant buffer. This is a read-only state. </p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER</unmanaged-short>
        VertexAndConstantBuffer = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> A subresource must be in this state when it is accessed by the 3D pipeline as an index buffer. This is a read-only state. </p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_INDEX_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_INDEX_BUFFER</unmanaged-short>
        IndexBuffer = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> The resource is used as a render target. A subresource must be in this state when it is rendered to or when it is cleared with <strong>ID3D12GraphicsCommandList::ClearRenderTargetView</strong>. This is a write-only state. To read from a render target as a shader resource the resource must be in either  D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE or D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE.</p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_RENDER_TARGET</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_RENDER_TARGET</unmanaged-short>
        RenderTarget = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p> The resource is used for unordered access. A subresource must be in this state when it is accessed by the 3D pipeline via an unordered access view. A subresource must also be in this state when it is cleared with <strong>ID3D12GraphicsCommandList::ClearUnorderedAccessViewInt</strong> or <strong>ID3D12GraphicsCommandList::ClearUnorderedAccessViewFloat</strong>. This is a read/write state. </p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_UNORDERED_ACCESS</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_UNORDERED_ACCESS</unmanaged-short>
        UnorderedAccess = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>DEPTH_WRITE is a state which is mutually exclusive with other states. It should be used for <strong>ID3D12GraphicsCommandList::ClearDepthStencilView</strong> when the flags (see <strong><see cref = "SharpDX.Direct3D12.ClearFlags"/></strong>) indicate a given subresource should be cleared (otherwise the subresource state doesn't matter), or when using it in a writable depth stencil view (see <strong><see cref = "SharpDX.Direct3D12.DepthStencilViewFlags"/></strong>) when the PSO has depth write enabled (see <strong><see cref = "SharpDX.Direct3D12.DepthStencilStateDescription"/></strong>).
        /// </p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_DEPTH_WRITE</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_DEPTH_WRITE</unmanaged-short>
        DepthWrite = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p>DEPTH_READ is a state which can be combined with other states. It should be used when the subresource is in a read-only depth stencil view, or when the <em>DepthEnable</em> parameter of <strong><see cref = "SharpDX.Direct3D12.DepthStencilStateDescription"/></strong> is false. It can be combined with other read states (for example, D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE), such that the resource can be used for the depth or stencil test, and accessed by a shader within the same draw call. Using it when depth will be written by a draw call or clear command is invalid.</p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_DEPTH_READ</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_DEPTH_READ</unmanaged-short>
        DepthRead = unchecked ((System.Int32)(32)),
        /// <summary>
        /// <dd> <p> The resource is used with a shader other than the pixel shader. A subresource must be in this state before being read by any stage (except for the pixel shader stage) via a shader resource view. You can still use the resource in a pixel shader with this flag as long as it also has the flag D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE set. This is a read-only state. </p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE</unmanaged-short>
        NonPixelShaderResource = unchecked ((System.Int32)(64)),
        /// <summary>
        /// <dd> <p> The resource is used with a pixel shader. A subresource must be in this state before being read by the pixel shader via a shader resource view. This is a read-only state. </p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE</unmanaged-short>
        PixelShaderResource = unchecked ((System.Int32)(128)),
        /// <summary>
        /// <dd> <p> The resource is used with stream output. A subresource must be in this state when it is accessed by the 3D pipeline as a stream-out target. This is a write-only state. </p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_STREAM_OUT</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_STREAM_OUT</unmanaged-short>
        StreamOut = unchecked ((System.Int32)(256)),
        /// <summary>
        /// <dd> <p> The resource is used as an indirect argument. Subresources must be in this state when they are used as the argument buffer passed to the indirect drawing method <strong>ID3D12GraphicsCommandList::ExecuteIndirect</strong>. This is a read-only state. </p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT</unmanaged-short>
        IndirectArgument = unchecked ((System.Int32)(512)),
        /// <summary>
        /// <dd> <p> The resource is used as the destination in a copy operation. Subresources must be in this state when they are used as the destination of copy operation, or a blt operation. This is a write-only state. </p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_COPY_DEST</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_COPY_DEST</unmanaged-short>
        CopyDestination = unchecked ((System.Int32)(1024)),
        /// <summary>
        /// <dd> <p> The resource is used as the source in a copy operation. Subresources must be in this state when they are used as the source of copy operation, or a blt operation. This is a read-only state. </p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_COPY_SOURCE</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_COPY_SOURCE</unmanaged-short>
        CopySource = unchecked ((System.Int32)(2048)),
        /// <summary>
        /// <dd> <p> The resource is used as the destination in a resolve operation. </p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_RESOLVE_DEST</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_RESOLVE_DEST</unmanaged-short>
        ResolveDestination = unchecked ((System.Int32)(4096)),
        /// <summary>
        /// <dd> <p> The resource is used as the source in a resolve operation. </p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_RESOLVE_SOURCE</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_RESOLVE_SOURCE</unmanaged-short>
        ResolveSource = unchecked ((System.Int32)(8192)),
        /// <summary>
        /// <dd> <p>This is the required starting state for upload heaps. Applications should generally avoid this state when possible, and instead transition resources to only the actually-used states.</p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE</unmanaged-short>
        RaytracingAccelerationStructure = unchecked ((System.Int32)(4194304)),
        /// <summary>
        /// <dd> <p>This is the required starting state for upload heaps. Applications should generally avoid this state when possible, and instead transition resources to only the actually-used states.</p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_GENERIC_READ</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_GENERIC_READ</unmanaged-short>
        GenericRead = unchecked ((System.Int32)(2755)),
        /// <summary>
        /// <dd> <p> Synonymous with D3D12_RESOURCE_STATE_COMMON. </p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_PRESENT</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_PRESENT</unmanaged-short>
        Present = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The resource is used for Predication. </p> </dd>
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_PREDICATION</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_PREDICATION</unmanaged-short>
        Predication = unchecked ((System.Int32)(512)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_VIDEO_DECODE_READ</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_VIDEO_DECODE_READ</unmanaged-short>
        VideoDecodeRead = unchecked ((System.Int32)(65536)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE</unmanaged-short>
        VideoDecodeWrite = unchecked ((System.Int32)(131072)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ</unmanaged-short>
        VideoProcessRead = unchecked ((System.Int32)(262144)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE</unmanaged-short>
        VideoProcessWrite = unchecked ((System.Int32)(524288)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ</unmanaged-short>
        VideoEncodeRead = unchecked ((System.Int32)(2097152)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986744</doc-id>
        /// <unmanaged>D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE</unmanaged>
        /// <unmanaged-short>D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE</unmanaged-short>
        VideoEncodeWrite = unchecked ((System.Int32)(8388608))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies the volatility of the data referenced by descriptors in a Root Signature 1.1 description, which can enable some driver optimizations.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.RootDescriptor1"/></strong> structure.</p><p>To specify the volatility of both descriptors and data, refer to <strong><see cref = "SharpDX.Direct3D12.DescriptorRangeFlags"/></strong>. </p>
    /// </remarks>
    /// <doc-id>mt709121</doc-id>
    /// <unmanaged>D3D12_ROOT_DESCRIPTOR_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_ROOT_DESCRIPTOR_FLAGS</unmanaged-short>
    public enum RootDescriptorFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p>Default assumptions are made for data (for SRV/CBV: DATA_STATIC_WHILE_SET_AT_EXECUTE, and for UAV: DATA_VOLATILE). </p> </dd>
        /// </summary>
        /// <doc-id>mt709121</doc-id>
        /// <unmanaged>D3D12_ROOT_DESCRIPTOR_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_DESCRIPTOR_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Data is volatile. Equivalent to Root Signature Version 1.0.</p> </dd>
        /// </summary>
        /// <doc-id>mt709121</doc-id>
        /// <unmanaged>D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE</unmanaged-short>
        DataVolatile = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Data is static while set at execute.</p> </dd>
        /// </summary>
        /// <doc-id>mt709121</doc-id>
        /// <unmanaged>D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE</unmanaged-short>
        DataStaticWhileSetAtExecute = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Data is static. The best potential for driver optimization.</p> </dd>
        /// </summary>
        /// <doc-id>mt709121</doc-id>
        /// <unmanaged>D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC</unmanaged-short>
        DataStatic = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p> Specifies the type of root signature slot. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.RootParameter"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn879478</doc-id>
    /// <unmanaged>D3D12_ROOT_PARAMETER_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_ROOT_PARAMETER_TYPE</unmanaged-short>
    public enum RootParameterType : System.Int32
    {
        /// <summary>
        /// <dd> <p> The slot is for a descriptor table. </p> </dd>
        /// </summary>
        /// <doc-id>dn879478</doc-id>
        /// <unmanaged>D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE</unmanaged-short>
        DescriptorTable = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The slot is for root constants. </p> </dd>
        /// </summary>
        /// <doc-id>dn879478</doc-id>
        /// <unmanaged>D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS</unmanaged-short>
        Constant32Bits = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> The slot is for a constant-buffer view (CBV). </p> </dd>
        /// </summary>
        /// <doc-id>dn879478</doc-id>
        /// <unmanaged>D3D12_ROOT_PARAMETER_TYPE_CBV</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_PARAMETER_TYPE_CBV</unmanaged-short>
        ConstantBufferView = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> The slot is for a shader-resource view (SRV). </p> </dd>
        /// </summary>
        /// <doc-id>dn879478</doc-id>
        /// <unmanaged>D3D12_ROOT_PARAMETER_TYPE_SRV</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_PARAMETER_TYPE_SRV</unmanaged-short>
        ShaderResourceView = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p> The slot is for a unordered-access view (UAV). </p> </dd>
        /// </summary>
        /// <doc-id>dn879478</doc-id>
        /// <unmanaged>D3D12_ROOT_PARAMETER_TYPE_UAV</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_PARAMETER_TYPE_UAV</unmanaged-short>
        UnorderedAccessView = unchecked ((System.Int32)(4))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p> Specifies options for root signature layout. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used in the <strong><see cref = "SharpDX.Direct3D12.RootSignatureDescription"/></strong> structure. </p><p>The value in denying access to shader stages is a minor optimization on some hardware. If, for example, the <strong>D3D12_SHADER_VISIBILITY_ALL</strong> flag has been set to broadcast the root signature to all shader stages, then denying access can overrule this and save the hardware some work. Alternatively if the shader is so simple that no root signature resources are needed, then denying access could be used here too.</p>
    /// </remarks>
    /// <doc-id>dn879480</doc-id>
    /// <unmanaged>D3D12_ROOT_SIGNATURE_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_ROOT_SIGNATURE_FLAGS</unmanaged-short>
    public enum RootSignatureFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p> Indicates default behavior. </p> </dd>
        /// </summary>
        /// <doc-id>dn879480</doc-id>
        /// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_SIGNATURE_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The app is opting in to using the Input Assembler (requiring an input layout that defines a set of vertex buffer bindings). Omitting this flag can result in one root argument space being saved on some hardware. Omit this flag if the Input Assembler is not required, though the optimization is minor.  </p> </dd>
        /// </summary>
        /// <doc-id>dn879480</doc-id>
        /// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT</unmanaged-short>
        AllowInputAssemblerInputLayout = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Denies the vertex shader access to the root signature. </p> </dd>
        /// </summary>
        /// <doc-id>dn879480</doc-id>
        /// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS</unmanaged-short>
        DenyVertexShaderRootAccess = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> Denies the hull shader access to the root signature. </p> </dd>
        /// </summary>
        /// <doc-id>dn879480</doc-id>
        /// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS</unmanaged-short>
        DenyHullShaderRootAccess = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p> Denies the domain shader access to the root signature. </p> </dd>
        /// </summary>
        /// <doc-id>dn879480</doc-id>
        /// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS</unmanaged-short>
        DenyDomainShaderRootAccess = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p> Denies the geometry shader access to the root signature. </p> </dd>
        /// </summary>
        /// <doc-id>dn879480</doc-id>
        /// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS</unmanaged-short>
        DenyGeometryShaderRootAccess = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p> Denies the pixel shader access to the root signature. </p> </dd>
        /// </summary>
        /// <doc-id>dn879480</doc-id>
        /// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS</unmanaged-short>
        DenyPixelShaderRootAccess = unchecked ((System.Int32)(32)),
        /// <summary>
        /// <dd> <p> The root signature allows stream output. This flag can be specified for root signatures authored in HLSL, similar to how the other flags are specified. <strong>ID3D12Device::CreateGraphicsPipelineState</strong> will fail if the geometry shader contains stream output but the root signature does not have this flag set. Omit this flag if stream output is not required.</p> </dd>
        /// </summary>
        /// <doc-id>dn879480</doc-id>
        /// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT</unmanaged-short>
        AllowStreamOutput = unchecked ((System.Int32)(64)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn879480</doc-id>
        /// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE</unmanaged-short>
        LocalRootSignature = unchecked ((System.Int32)(128))}

    /// <summary>
    /// <p>Specifies the version of root signature layout.</p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the following structures and methods.</p><ul> <li> <strong><see cref = "SharpDX.Direct3D12.VersionedRootSignatureDescription"/></strong> </li> <li> <strong><see cref = "SharpDX.Direct3D12.FeatureDataRootSignature"/></strong> </li> <li> <strong>GetRootSignatureDescAtVersion</strong> </li> <li> <strong>D3D12SerializeRootSignature</strong> </li> </ul>
    /// </remarks>
    /// <doc-id>dn899107</doc-id>
    /// <unmanaged>D3D_ROOT_SIGNATURE_VERSION</unmanaged>
    /// <unmanaged-short>D3D_ROOT_SIGNATURE_VERSION</unmanaged-short>
    public enum RootSignatureVersion : System.Int32
    {
        /// <summary>
        /// <dd> <p>Version one of root signature layout.</p> </dd>
        /// </summary>
        /// <doc-id>dn899107</doc-id>
        /// <unmanaged>D3D_ROOT_SIGNATURE_VERSION_1</unmanaged>
        /// <unmanaged-short>D3D_ROOT_SIGNATURE_VERSION_1</unmanaged-short>
        Version1 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Version one of root signature layout.</p> </dd>
        /// </summary>
        /// <doc-id>dn899107</doc-id>
        /// <unmanaged>D3D_ROOT_SIGNATURE_VERSION_1_0</unmanaged>
        /// <unmanaged-short>D3D_ROOT_SIGNATURE_VERSION_1_0</unmanaged-short>
        Version10 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Version 1.1  of root signature layout. Refer to Root Signature Version 1.1.</p> </dd>
        /// </summary>
        /// <doc-id>dn899107</doc-id>
        /// <unmanaged>D3D_ROOT_SIGNATURE_VERSION_1_1</unmanaged>
        /// <unmanaged-short>D3D_ROOT_SIGNATURE_VERSION_1_1</unmanaged-short>
        Version11 = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_SERIALIZED_DATA_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_SERIALIZED_DATA_TYPE</unmanaged-short>
    public enum SerializedDataType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE</unmanaged>
        /// <unmanaged-short>D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE</unmanaged-short>
        RaytracingAccelerationStructure = unchecked ((System.Int32)(0))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies what to clear from the depth stencil view.</p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by <strong>ID3D12GraphicsCommandList::ClearDepthStencilView</strong>. The flags can be combined to clear all. </p>
    /// </remarks>
    /// <doc-id>dn986721</doc-id>
    /// <unmanaged>D3D12_SHADER_CACHE_SUPPORT_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_SHADER_CACHE_SUPPORT_FLAGS</unmanaged-short>
    public enum ShaderCacheSupportFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates the depth buffer should be cleared.</p> </dd>
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_SHADER_CACHE_SUPPORT_NONE</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_CACHE_SUPPORT_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Indicates the stencil buffer should be cleared.</p> </dd>
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO</unmanaged-short>
        SinglePixelShaderO = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_SHADER_CACHE_SUPPORT_LIBRARY</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_CACHE_SUPPORT_LIBRARY</unmanaged-short>
        Library = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE</unmanaged-short>
        AutomaticInprocCache = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn986721</doc-id>
        /// <unmanaged>D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE</unmanaged-short>
        AutomaticDiskCache = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p> Specifies how memory gets routed by a shader resource view (SRV). </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum allows the SRV to select how memory gets routed to the four return components in a shader after a memory fetch.   The options for each shader component [0..3] (corresponding to RGBA) are: component 0..3 from the SRV fetch result or force 0 or force 1. </p><p> The default 1:1 mapping can be indicated by specifying D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING,  otherwise an arbitrary mapping can be specified using the macro D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING.   See below. </p><p>Note the following defines:</p><code>#define D3D12_SHADER_COMPONENT_MAPPING_MASK 0x7
    /// #define D3D12_SHADER_COMPONENT_MAPPING_SHIFT 3
    /// #define D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES (1&lt; &lt;(D3D12_SHADER_COMPONENT_MAPPING_SHIFT*4))
    /// #define D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(Src0,Src1,Src2,Src3) ((((Src0)&amp;D3D12_SHADER_COMPONENT_MAPPING_MASK)| \                                                                (((Src1)&amp;D3D12_SHADER_COMPONENT_MAPPING_MASK)&lt; &lt;D3D12_SHADER_COMPONENT_MAPPING_SHIFT)| \                                                               (((Src2)&amp;D3D12_SHADER_COMPONENT_MAPPING_MASK)&lt; &lt;(D3D12_SHADER_COMPONENT_MAPPING_SHIFT*2))| \                                                                (((Src3)&amp;D3D12_SHADER_COMPONENT_MAPPING_MASK)&lt; &lt;(D3D12_SHADER_COMPONENT_MAPPING_SHIFT*3))| \                                                                D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES))
    /// #define D3D12_DECODE_SHADER_4_COMPONENT_MAPPING(ComponentToExtract,Mapping) ((<see cref = "SharpDX.Direct3D12.ShaderComponentMapping"/>)(Mapping &gt; &gt; (D3D12_SHADER_COMPONENT_MAPPING_SHIFT*ComponentToExtract) &amp; D3D12_SHADER_COMPONENT_MAPPING_MASK))
    /// #define D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(0,1,2,3)
    /// </code>
    /// </remarks>
    /// <doc-id>dn903814</doc-id>
    /// <unmanaged>D3D12_SHADER_COMPONENT_MAPPING</unmanaged>
    /// <unmanaged-short>D3D12_SHADER_COMPONENT_MAPPING</unmanaged-short>
    public enum ShaderComponentMapping : System.Int32
    {
        /// <summary>
        /// <dd> <p> Indicates return component 0 (red). </p> </dd>
        /// </summary>
        /// <doc-id>dn903814</doc-id>
        /// <unmanaged>D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0</unmanaged-short>
        FromMemoryComponent0 = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Indicates return component 1 (green). </p> </dd>
        /// </summary>
        /// <doc-id>dn903814</doc-id>
        /// <unmanaged>D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1</unmanaged-short>
        FromMemoryComponent1 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Indicates return component 2 (blue). </p> </dd>
        /// </summary>
        /// <doc-id>dn903814</doc-id>
        /// <unmanaged>D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2</unmanaged-short>
        FromMemoryComponent2 = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> Indicates return component 3 (alpha). </p> </dd>
        /// </summary>
        /// <doc-id>dn903814</doc-id>
        /// <unmanaged>D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3</unmanaged-short>
        FromMemoryComponent3 = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p> Indicates forcing the resulting value to 0. </p> </dd>
        /// </summary>
        /// <doc-id>dn903814</doc-id>
        /// <unmanaged>D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0</unmanaged-short>
        ForceValue0 = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p> Indicates forcing the resulting value 1. The value of forcing 1 is either 0x1 or 1.0f depending on the format type for that component in the source format. </p> </dd>
        /// </summary>
        /// <doc-id>dn903814</doc-id>
        /// <unmanaged>D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1</unmanaged-short>
        ForceValue1 = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p> Describes minimum precision support options for shaders in the current graphics driver. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.FeatureDataD3D12Options"/></strong> structure. </p><p> The returned info just indicates that the graphics hardware can perform HLSL operations at a lower precision than the standard 32-bit float precision, but doesn?t guarantee that the graphics hardware will actually run at a lower precision. </p>
    /// </remarks>
    /// <doc-id>dn879481</doc-id>
    /// <unmanaged>D3D12_SHADER_MIN_PRECISION_SUPPORT</unmanaged>
    /// <unmanaged-short>D3D12_SHADER_MIN_PRECISION_SUPPORT</unmanaged-short>
    public enum ShaderMinimumPrecisionSupport : System.Int32
    {
        /// <summary>
        /// <dd> <p>The driver supports only full 32-bit precision for all shader stages.</p> </dd>
        /// </summary>
        /// <doc-id>dn879481</doc-id>
        /// <unmanaged>D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The driver supports 10-bit precision.</p> </dd>
        /// </summary>
        /// <doc-id>dn879481</doc-id>
        /// <unmanaged>D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT</unmanaged-short>
        Bit10 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The driver supports 16-bit precision.</p> </dd>
        /// </summary>
        /// <doc-id>dn879481</doc-id>
        /// <unmanaged>D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT</unmanaged-short>
        Bit16 = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Specifies a shader model.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.FeatureDataShaderModel"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>mt709126</doc-id>
    /// <unmanaged>D3D_SHADER_MODEL</unmanaged>
    /// <unmanaged-short>D3D_SHADER_MODEL</unmanaged-short>
    public enum ShaderModel : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates shader model 5.1.</p> </dd>
        /// </summary>
        /// <doc-id>mt709126</doc-id>
        /// <unmanaged>D3D_SHADER_MODEL_5_1</unmanaged>
        /// <unmanaged-short>D3D_SHADER_MODEL_5_1</unmanaged-short>
        Model51 = unchecked ((System.Int32)(81)),
        /// <summary>
        /// <dd> <p>Indicates shader model 6.0.</p> </dd>
        /// </summary>
        /// <doc-id>mt709126</doc-id>
        /// <unmanaged>D3D_SHADER_MODEL_6_0</unmanaged>
        /// <unmanaged-short>D3D_SHADER_MODEL_6_0</unmanaged-short>
        Model60 = unchecked ((System.Int32)(96)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt709126</doc-id>
        /// <unmanaged>D3D_SHADER_MODEL_6_1</unmanaged>
        /// <unmanaged-short>D3D_SHADER_MODEL_6_1</unmanaged-short>
        Model61 = unchecked ((System.Int32)(97)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt709126</doc-id>
        /// <unmanaged>D3D_SHADER_MODEL_6_2</unmanaged>
        /// <unmanaged-short>D3D_SHADER_MODEL_6_2</unmanaged-short>
        Model62 = unchecked ((System.Int32)(98)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt709126</doc-id>
        /// <unmanaged>D3D_SHADER_MODEL_6_3</unmanaged>
        /// <unmanaged-short>D3D_SHADER_MODEL_6_3</unmanaged-short>
        Model63 = unchecked ((System.Int32)(99)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt709126</doc-id>
        /// <unmanaged>D3D_SHADER_MODEL_6_4</unmanaged>
        /// <unmanaged-short>D3D_SHADER_MODEL_6_4</unmanaged-short>
        Model64 = unchecked ((System.Int32)(100))}

    /// <summary>
    /// <p>Identifies the type of resource that will be viewed as a shader resource.</p>
    /// </summary>
    /// <remarks>
    /// <p>These values are used by a shader-resource-view description, <strong><see cref = "SharpDX.Direct3D12.ShaderResourceViewDescription"/></strong>.</p>
    /// </remarks>
    /// <doc-id>dn770408</doc-id>
    /// <unmanaged>D3D12_SRV_DIMENSION</unmanaged>
    /// <unmanaged-short>D3D12_SRV_DIMENSION</unmanaged-short>
    public enum ShaderResourceViewDimension : System.Int32
    {
        /// <summary>
        /// <dd> <p>The type is unknown.</p> </dd>
        /// </summary>
        /// <doc-id>dn770408</doc-id>
        /// <unmanaged>D3D12_SRV_DIMENSION_UNKNOWN</unmanaged>
        /// <unmanaged-short>D3D12_SRV_DIMENSION_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The resource is a buffer.</p> </dd>
        /// </summary>
        /// <doc-id>dn770408</doc-id>
        /// <unmanaged>D3D12_SRV_DIMENSION_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_SRV_DIMENSION_BUFFER</unmanaged-short>
        Buffer = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The resource is a 1D texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770408</doc-id>
        /// <unmanaged>D3D12_SRV_DIMENSION_TEXTURE1D</unmanaged>
        /// <unmanaged-short>D3D12_SRV_DIMENSION_TEXTURE1D</unmanaged-short>
        Texture1D = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The resource is an array of 1D textures.</p> </dd>
        /// </summary>
        /// <doc-id>dn770408</doc-id>
        /// <unmanaged>D3D12_SRV_DIMENSION_TEXTURE1DARRAY</unmanaged>
        /// <unmanaged-short>D3D12_SRV_DIMENSION_TEXTURE1DARRAY</unmanaged-short>
        Texture1DArray = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>The resource is a 2D texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770408</doc-id>
        /// <unmanaged>D3D12_SRV_DIMENSION_TEXTURE2D</unmanaged>
        /// <unmanaged-short>D3D12_SRV_DIMENSION_TEXTURE2D</unmanaged-short>
        Texture2D = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The resource is an array of 2D textures.</p> </dd>
        /// </summary>
        /// <doc-id>dn770408</doc-id>
        /// <unmanaged>D3D12_SRV_DIMENSION_TEXTURE2DARRAY</unmanaged>
        /// <unmanaged-short>D3D12_SRV_DIMENSION_TEXTURE2DARRAY</unmanaged-short>
        Texture2DArray = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>The resource is a multisampling 2D texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770408</doc-id>
        /// <unmanaged>D3D12_SRV_DIMENSION_TEXTURE2DMS</unmanaged>
        /// <unmanaged-short>D3D12_SRV_DIMENSION_TEXTURE2DMS</unmanaged-short>
        Texture2DMultisampled = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>The resource is an array of multisampling 2D textures.</p> </dd>
        /// </summary>
        /// <doc-id>dn770408</doc-id>
        /// <unmanaged>D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY</unmanaged>
        /// <unmanaged-short>D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY</unmanaged-short>
        Texture2DMultisampledArray = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>The resource is a 3D texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770408</doc-id>
        /// <unmanaged>D3D12_SRV_DIMENSION_TEXTURE3D</unmanaged>
        /// <unmanaged-short>D3D12_SRV_DIMENSION_TEXTURE3D</unmanaged-short>
        Texture3D = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>The resource is a cube texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770408</doc-id>
        /// <unmanaged>D3D12_SRV_DIMENSION_TEXTURECUBE</unmanaged>
        /// <unmanaged-short>D3D12_SRV_DIMENSION_TEXTURECUBE</unmanaged-short>
        TextureCube = unchecked ((System.Int32)(9)),
        /// <summary>
        /// <dd> <p>The resource is an array of cube textures.</p> </dd>
        /// </summary>
        /// <doc-id>dn770408</doc-id>
        /// <unmanaged>D3D12_SRV_DIMENSION_TEXTURECUBEARRAY</unmanaged>
        /// <unmanaged-short>D3D12_SRV_DIMENSION_TEXTURECUBEARRAY</unmanaged-short>
        TextureCubeArray = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn770408</doc-id>
        /// <unmanaged>D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE</unmanaged>
        /// <unmanaged-short>D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE</unmanaged-short>
        RaytracingAccelerationStructure = unchecked ((System.Int32)(11))}

    /// <summary>
    /// <p>Specifies the shaders that can access the contents of a given root signature slot.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.RootParameter"/></strong> structure.</p><p>The compute queue always uses <strong>D3D12_SHADER_VISIBILITY_ALL</strong> because it has only one active stage. The 3D queue can choose values, but if it uses <strong>D3D12_SHADER_VISIBILITY_ALL</strong>, all shader stages can access whatever is bound at the root signature slot.</p>
    /// </remarks>
    /// <doc-id>dn879482</doc-id>
    /// <unmanaged>D3D12_SHADER_VISIBILITY</unmanaged>
    /// <unmanaged-short>D3D12_SHADER_VISIBILITY</unmanaged-short>
    public enum ShaderVisibility : System.Int32
    {
        /// <summary>
        /// <dd> <p>Specifies that all shader stages can access whatever is bound at the root signature slot.</p> </dd>
        /// </summary>
        /// <doc-id>dn879482</doc-id>
        /// <unmanaged>D3D12_SHADER_VISIBILITY_ALL</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_VISIBILITY_ALL</unmanaged-short>
        All = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Specifies that the vertex shader stage can access whatever is bound at the root signature slot.</p> </dd>
        /// </summary>
        /// <doc-id>dn879482</doc-id>
        /// <unmanaged>D3D12_SHADER_VISIBILITY_VERTEX</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_VISIBILITY_VERTEX</unmanaged-short>
        Vertex = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Specifies that the hull shader stage can access whatever is bound at the root signature slot.</p> </dd>
        /// </summary>
        /// <doc-id>dn879482</doc-id>
        /// <unmanaged>D3D12_SHADER_VISIBILITY_HULL</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_VISIBILITY_HULL</unmanaged-short>
        Hull = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Specifies that the domain shader stage can access whatever is bound at the root signature slot.</p> </dd>
        /// </summary>
        /// <doc-id>dn879482</doc-id>
        /// <unmanaged>D3D12_SHADER_VISIBILITY_DOMAIN</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_VISIBILITY_DOMAIN</unmanaged-short>
        Domain = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Specifies that the geometry shader stage can access whatever is bound at the root signature slot.</p> </dd>
        /// </summary>
        /// <doc-id>dn879482</doc-id>
        /// <unmanaged>D3D12_SHADER_VISIBILITY_GEOMETRY</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_VISIBILITY_GEOMETRY</unmanaged-short>
        Geometry = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Specifies that the pixel shader stage can access whatever is bound at the root signature slot.</p> </dd>
        /// </summary>
        /// <doc-id>dn879482</doc-id>
        /// <unmanaged>D3D12_SHADER_VISIBILITY_PIXEL</unmanaged>
        /// <unmanaged-short>D3D12_SHADER_VISIBILITY_PIXEL</unmanaged-short>
        Pixel = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER</unmanaged>
    /// <unmanaged-short>D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER</unmanaged-short>
    public enum SharedResourceCompatibilityTier : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0</unmanaged>
        /// <unmanaged-short>D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0</unmanaged-short>
        Tier0 = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1</unmanaged>
        /// <unmanaged-short>D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1</unmanaged-short>
        Tier1 = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_STATE_OBJECT_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_STATE_OBJECT_FLAGS</unmanaged-short>
    public enum StateObjectFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_OBJECT_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_STATE_OBJECT_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS</unmanaged>
        /// <unmanaged-short>D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS</unmanaged-short>
        AllowLocalDependenciesOnExternalDefinitions = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS</unmanaged>
        /// <unmanaged-short>D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS</unmanaged-short>
        AllowExternalDependenciesOnLocalDefinitions = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_STATE_OBJECT_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_STATE_OBJECT_TYPE</unmanaged-short>
    public enum StateObjectType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_OBJECT_TYPE_COLLECTION</unmanaged>
        /// <unmanaged-short>D3D12_STATE_OBJECT_TYPE_COLLECTION</unmanaged-short>
        Collection = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE</unmanaged>
        /// <unmanaged-short>D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE</unmanaged-short>
        RaytracingPipeline = unchecked ((System.Int32)(3))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_STATE_SUBOBJECT_TYPE</unmanaged-short>
    public enum StateSubObjectType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG</unmanaged>
        /// <unmanaged-short>D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG</unmanaged-short>
        StateObjectConfig = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE</unmanaged-short>
        GlobalRootSignature = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE</unmanaged>
        /// <unmanaged-short>D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE</unmanaged-short>
        LocalRootSignature = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK</unmanaged>
        /// <unmanaged-short>D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK</unmanaged-short>
        NodeMask = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY</unmanaged>
        /// <unmanaged-short>D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY</unmanaged-short>
        DxilLibrary = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION</unmanaged>
        /// <unmanaged-short>D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION</unmanaged-short>
        ExistingCollection = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION</unmanaged>
        /// <unmanaged-short>D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION</unmanaged-short>
        SubObjectToExportsAssociation = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION</unmanaged>
        /// <unmanaged-short>D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION</unmanaged-short>
        DxilSubObjectToExportsAssociation = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG</unmanaged>
        /// <unmanaged-short>D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG</unmanaged-short>
        RaytracingShaderConfig = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG</unmanaged>
        /// <unmanaged-short>D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG</unmanaged-short>
        RaytracingPipelineConfig = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP</unmanaged>
        /// <unmanaged-short>D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP</unmanaged-short>
        HitGroup = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID</unmanaged>
        /// <unmanaged-short>D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID</unmanaged-short>
        MaximumValid = unchecked ((System.Int32)(12))}

    /// <summary>
    /// <p> Specifies the border color for a static sampler. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.StaticSamplerDescription"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn903815</doc-id>
    /// <unmanaged>D3D12_STATIC_BORDER_COLOR</unmanaged>
    /// <unmanaged-short>D3D12_STATIC_BORDER_COLOR</unmanaged-short>
    public enum StaticBorderColor : System.Int32
    {
        /// <summary>
        /// <dd> <p> Indicates black, with the alpha component as fully transparent. </p> </dd>
        /// </summary>
        /// <doc-id>dn903815</doc-id>
        /// <unmanaged>D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK</unmanaged>
        /// <unmanaged-short>D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK</unmanaged-short>
        TransparentBlack = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Indicates black, with the alpha component as fully opaque. </p> </dd>
        /// </summary>
        /// <doc-id>dn903815</doc-id>
        /// <unmanaged>D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK</unmanaged>
        /// <unmanaged-short>D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK</unmanaged-short>
        OpaqueBlack = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Indicates white, with the alpha component as fully opaque. </p> </dd>
        /// </summary>
        /// <doc-id>dn903815</doc-id>
        /// <unmanaged>D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE</unmanaged>
        /// <unmanaged-short>D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE</unmanaged-short>
        OpaqueWhite = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Identifies the stencil operations that can be performed during depth-stencil testing.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.DepthStencilOperationDescription"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>dn770409</doc-id>
    /// <unmanaged>D3D12_STENCIL_OP</unmanaged>
    /// <unmanaged-short>D3D12_STENCIL_OP</unmanaged-short>
    public enum StencilOperation : System.Int32
    {
        /// <summary>
        /// <dd> <p>Keep the existing stencil data.</p> </dd>
        /// </summary>
        /// <doc-id>dn770409</doc-id>
        /// <unmanaged>D3D12_STENCIL_OP_KEEP</unmanaged>
        /// <unmanaged-short>D3D12_STENCIL_OP_KEEP</unmanaged-short>
        Keep = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Set the stencil data to 0.</p> </dd>
        /// </summary>
        /// <doc-id>dn770409</doc-id>
        /// <unmanaged>D3D12_STENCIL_OP_ZERO</unmanaged>
        /// <unmanaged-short>D3D12_STENCIL_OP_ZERO</unmanaged-short>
        Zero = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Set the stencil data to the reference value set by calling <strong>ID3D11DeviceContext::OMSetDepthStencilState</strong>.</p> </dd>
        /// </summary>
        /// <doc-id>dn770409</doc-id>
        /// <unmanaged>D3D12_STENCIL_OP_REPLACE</unmanaged>
        /// <unmanaged-short>D3D12_STENCIL_OP_REPLACE</unmanaged-short>
        Replace = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Increment the stencil value by 1, and clamp the result.</p> </dd>
        /// </summary>
        /// <doc-id>dn770409</doc-id>
        /// <unmanaged>D3D12_STENCIL_OP_INCR_SAT</unmanaged>
        /// <unmanaged-short>D3D12_STENCIL_OP_INCR_SAT</unmanaged-short>
        IncrementAndClamp = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Decrement the stencil value by 1, and clamp the result.</p> </dd>
        /// </summary>
        /// <doc-id>dn770409</doc-id>
        /// <unmanaged>D3D12_STENCIL_OP_DECR_SAT</unmanaged>
        /// <unmanaged-short>D3D12_STENCIL_OP_DECR_SAT</unmanaged-short>
        DecrementAndClamp = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>Invert the stencil data.</p> </dd>
        /// </summary>
        /// <doc-id>dn770409</doc-id>
        /// <unmanaged>D3D12_STENCIL_OP_INVERT</unmanaged>
        /// <unmanaged-short>D3D12_STENCIL_OP_INVERT</unmanaged-short>
        Invert = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>Increment the stencil value by 1, and wrap the result if necessary.</p> </dd>
        /// </summary>
        /// <doc-id>dn770409</doc-id>
        /// <unmanaged>D3D12_STENCIL_OP_INCR</unmanaged>
        /// <unmanaged-short>D3D12_STENCIL_OP_INCR</unmanaged-short>
        Increment = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>Decrement the stencil value by 1, and wrap the result if necessary.</p> </dd>
        /// </summary>
        /// <doc-id>dn770409</doc-id>
        /// <unmanaged>D3D12_STENCIL_OP_DECR</unmanaged>
        /// <unmanaged-short>D3D12_STENCIL_OP_DECR</unmanaged-short>
        Decrement = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p> Identifies a technique for resolving texture coordinates that are outside of the boundaries of a texture. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.SamplerStateDescription"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn770441</doc-id>
    /// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE</unmanaged>
    /// <unmanaged-short>D3D12_TEXTURE_ADDRESS_MODE</unmanaged-short>
    public enum TextureAddressMode : System.Int32
    {
        /// <summary>
        /// <dd> <p> Tile the texture at every (u,v) integer junction. For example, for u values between 0 and 3, the texture is repeated three times. </p> </dd>
        /// </summary>
        /// <doc-id>dn770441</doc-id>
        /// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE_WRAP</unmanaged>
        /// <unmanaged-short>D3D12_TEXTURE_ADDRESS_MODE_WRAP</unmanaged-short>
        Wrap = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Flip the texture at every (u,v) integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again; and so on. </p> </dd>
        /// </summary>
        /// <doc-id>dn770441</doc-id>
        /// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE_MIRROR</unmanaged>
        /// <unmanaged-short>D3D12_TEXTURE_ADDRESS_MODE_MIRROR</unmanaged-short>
        Mirror = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively. </p> </dd>
        /// </summary>
        /// <doc-id>dn770441</doc-id>
        /// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE_CLAMP</unmanaged>
        /// <unmanaged-short>D3D12_TEXTURE_ADDRESS_MODE_CLAMP</unmanaged-short>
        Clamp = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p> Texture coordinates outside the range [0.0, 1.0] are set to the border color specified in <strong><see cref = "SharpDX.Direct3D12.SamplerStateDescription"/></strong> or HLSL code. </p> </dd>
        /// </summary>
        /// <doc-id>dn770441</doc-id>
        /// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE_BORDER</unmanaged>
        /// <unmanaged-short>D3D12_TEXTURE_ADDRESS_MODE_BORDER</unmanaged-short>
        Border = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p> Similar to  <strong>D3D12_TEXTURE_ADDRESS_MODE_MIRROR</strong> and  <strong>D3D12_TEXTURE_ADDRESS_MODE_CLAMP</strong>. Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value. </p> </dd>
        /// </summary>
        /// <doc-id>dn770441</doc-id>
        /// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE</unmanaged>
        /// <unmanaged-short>D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE</unmanaged-short>
        MirrorOnce = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p>Specifies what type of texture copy is to take place.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enum is used by the <strong><see cref = "SharpDX.Direct3D12.TextureCopyLocation"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>dn986750</doc-id>
    /// <unmanaged>D3D12_TEXTURE_COPY_TYPE</unmanaged>
    /// <unmanaged-short>D3D12_TEXTURE_COPY_TYPE</unmanaged-short>
    public enum TextureCopyType : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates a subresource, identified by an index, is to be copied.</p> </dd>
        /// </summary>
        /// <doc-id>dn986750</doc-id>
        /// <unmanaged>D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX</unmanaged>
        /// <unmanaged-short>D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX</unmanaged-short>
        SubResourceIndex = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Indicates a place footprint, identified by a <strong><see cref = "SharpDX.Direct3D12.PlacedSubResourceFootprint"/></strong> structure, is to be copied.</p> </dd>
        /// </summary>
        /// <doc-id>dn986750</doc-id>
        /// <unmanaged>D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT</unmanaged>
        /// <unmanaged-short>D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT</unmanaged-short>
        PlacedFootprint = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Specifies texture layout options. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.ResourceDescription"/></strong> structure. </p><p> This enumeration controls the swizzle pattern of default textures and enable map support on default textures. Callers must query <strong><see cref = "SharpDX.Direct3D12.FeatureDataD3D12Options"/></strong> to ensure that each option is supported. </p><p> The standard swizzle formats applies within each page-sized chunk, and pages are laid out in linear order with respect to one another. A 16-bit interleave pattern defines the conversion from pre-swizzled intra-page location to the post-swizzled location. </p><p> To demonstrate, consider the 2D 32bpp swizzle format above. This is represented by the following interleave masks, where bits on the left are most-significant: </p><code>UINT xBytesMask = 1010 1010 1000 1111
    /// UINT yMask =      0101 0101 0111 0000</code><p> To compute the swizzled address, the following code could be used (where the <strong>_pdep_u32</strong> intrinsic instruction is supported): </p><code>UINT swizzledOffset = resourceBaseOffset + _pdep_u32(xOffset, xBytesMask) + _pdep_u32(yOffset, yBytesMask);</code>
    /// </remarks>
    /// <doc-id>dn770442</doc-id>
    /// <unmanaged>D3D12_TEXTURE_LAYOUT</unmanaged>
    /// <unmanaged-short>D3D12_TEXTURE_LAYOUT</unmanaged-short>
    public enum TextureLayout : System.Int32
    {
        /// <summary>
        /// <dd> <p> Indicates that the layout is unknown, and is likely adapter-dependent. During creation, the driver chooses the most efficient layout based on other resource properties, especially resource size and flags. Prefer this choice unless certain functionality is required from another texture layout. </p> <p> Zero-copy texture upload optimizations exist for UMA architectures; see <strong>ID3D12Resource::WriteToSubresource</strong>. </p> </dd>
        /// </summary>
        /// <doc-id>dn770442</doc-id>
        /// <unmanaged>D3D12_TEXTURE_LAYOUT_UNKNOWN</unmanaged>
        /// <unmanaged-short>D3D12_TEXTURE_LAYOUT_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Indicates that data for the texture is stored in row-major order (sometimes called "pitch-linear order"). </p> <p> This texture layout locates consecutive texels of a row contiguously in memory, before the texels of the next row. Similarly, consecutive texels of a particular depth or array slice are contiguous in memory before the texels of the next depth or array slice. Padding may exist between rows and between depth or array slices to align collections of data. A stride is the distance in memory between rows, depth, or array slices; and it includes any padding. </p> <p> This texture layout enables sharing of the texture data between multiple adapters, when other layouts aren't available. </p> <p> Many restrictions apply, because this layout is generally not efficient for extensive usage: </p> <ul> <li> The locality of nearby texels is not rotationally invariant. </li> <li> Only the following texture properties are supported: <ul> <li> <strong><see cref = "SharpDX.Direct3D12.ResourceDimension"/></strong>_TEXTURE_2D. </li> <li> A single mip level. </li> <li> A single array slice. </li> <li> 64KB alignment. </li> <li> Non-MSAA. </li> <li> No <strong>D3D12_RESOURCE_FLAG</strong>_ALLOW_DEPTH_STENCIL. </li> <li> The format cannot be a YUV format. </li> </ul> </li> <li> The texture must be created on a heap with <strong>D3D12_HEAP_FLAG</strong>_SHARED_CROSS_ADAPTER. </li> </ul> <p> Buffers are created with <strong><see cref = "SharpDX.Direct3D12.TextureLayout"/></strong>_ROW_MAJOR, because row-major texture data can be located in them without creating a texture object. This is commonly used for uploading or reading back texture data, especially for discrete/NUMA adapters. However, <strong><see cref = "SharpDX.Direct3D12.TextureLayout"/></strong>_ROW_MAJOR can also be used when marshaling texture data between GPUs or adapters. For examples of usage with <strong>ID3D12GraphicsCommandList::CopyTextureRegion</strong>, see some of the following topics: </p> <ul> <li> Default Texture Mapping and Standard Swizzle </li> <li> Predication </li> <li> Synchronization and Multi-Engine </li> <li> Uploading Texture Data </li> </ul> </dd>
        /// </summary>
        /// <doc-id>dn770442</doc-id>
        /// <unmanaged>D3D12_TEXTURE_LAYOUT_ROW_MAJOR</unmanaged>
        /// <unmanaged-short>D3D12_TEXTURE_LAYOUT_ROW_MAJOR</unmanaged-short>
        RowMajor = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Indicates that the layout within 64KB tiles and tail mip packing is up to the driver. No standard swizzle pattern. </p> <p> This texture layout is arranged into contiguous 64KB regions, also known as tiles, containing near equilateral amount of consecutive number of texels along each dimension. Tiles are arranged in row-major order. While there is no padding between tiles, there are typically unused texels within the last tile in each dimension. The layout of texels within the tile is undefined. Each subresource immediately follows where the previous subresource end, and the subresource order follows the same sequence as subresource ordinals. However, tail mip packing is adapter-specific. For more details, see tiled resource tier and <strong>ID3D12Device::GetResourceTiling</strong>. </p> <p> This texture layout enables partially resident or sparse texture scenarios when used together with virtual memory page mapping functionality. This texture layout must be used together with <strong>ID3D12Device::CreateReservedResource</strong> to enable the usage of <strong>ID3D12CommandQueue::UpdateTileMappings</strong>. </p> <p> Some restrictions apply to textures with this layout: </p> <ul> <li> The adapter must support <strong><see cref = "SharpDX.Direct3D12.TiledResourcesTier"/></strong> 1 or greater. </li> <li> 64KB alignment must be used. </li> <li> <strong><see cref = "SharpDX.Direct3D12.ResourceDimension"/></strong>_TEXTURE1D is not supported, nor are all formats. </li> <li> The tiled resource tier indicates whether textures with <strong><see cref = "SharpDX.Direct3D12.ResourceDimension"/></strong>_TEXTURE3D is supported. </li> </ul> </dd>
        /// </summary>
        /// <doc-id>dn770442</doc-id>
        /// <unmanaged>D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE</unmanaged>
        /// <unmanaged-short>D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE</unmanaged-short>
        UndefinedSwizzle64kb = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> Indicates that a default texture uses the standardized swizzle pattern. </p> <p> This texture layout is arranged the same way that D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE is, except that the layout of texels within the tile is defined. Tail mip packing is adapter-specific. </p> <p> This texture layout enables optimizations when marshaling data between multiple adapters or between the CPU and GPU. The amount of copying can be reduced when multiple components understand the texture memory layout. This layout is generally more efficient for extensive usage than row-major layout, due to the rotationally invariant locality of neighboring texels. This layout can typically only be used with adapters that support standard swizzle, but exceptions exist for cross-adapter shared heaps. </p> <p> The restrictions for this layout are that the following aren't supported: </p> <ul> <li> <strong><see cref = "SharpDX.Direct3D12.ResourceDimension"/></strong>_TEXTURE1D </li> <li> Multi-sample anti-aliasing (MSAA) </li> <li> <strong>D3D12_RESOURCE_FLAG</strong>_ALLOW_DEPTH_STENCIL </li> <li> Formats within the <strong><see cref = "SharpDX.DXGI.Format"/></strong>_R32G32B32_TYPELESS group </li> </ul> </dd>
        /// </summary>
        /// <doc-id>dn770442</doc-id>
        /// <unmanaged>D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE</unmanaged>
        /// <unmanaged-short>D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE</unmanaged-short>
        StandardSwizzle64kb = unchecked ((System.Int32)(3))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p> Specifies how to copy a tile. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong>CopyTiles</strong> method. </p>
    /// </remarks>
    /// <doc-id>dn986751</doc-id>
    /// <unmanaged>D3D12_TILE_COPY_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_TILE_COPY_FLAGS</unmanaged-short>
    public enum TileCopyFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p> No tile-copy flags are specified. </p> </dd>
        /// </summary>
        /// <doc-id>dn986751</doc-id>
        /// <unmanaged>D3D12_TILE_COPY_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_TILE_COPY_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Indicates that the GPU isn't currently referencing any of the portions of destination memory being written. </p> </dd>
        /// </summary>
        /// <doc-id>dn986751</doc-id>
        /// <unmanaged>D3D12_TILE_COPY_FLAG_NO_HAZARD</unmanaged>
        /// <unmanaged-short>D3D12_TILE_COPY_FLAG_NO_HAZARD</unmanaged-short>
        NoHazard = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Indicates that the <strong>ID3D12GraphicsCommandList::CopyTiles</strong> operation involves copying a linear buffer to a swizzled tiled resource. This means to copy tile data from the specified buffer location, reading tiles sequentially, to the specified tile region (in x,y,z order if the region is a box), swizzling to optimal hardware memory layout as needed. In this <strong>ID3D12GraphicsCommandList::CopyTiles</strong> call, you specify the source data with the  <em>pBuffer</em> parameter and the destination with the <em>pTiledResource</em> parameter. </p> </dd>
        /// </summary>
        /// <doc-id>dn986751</doc-id>
        /// <unmanaged>D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE</unmanaged>
        /// <unmanaged-short>D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE</unmanaged-short>
        LinearBufferToSwizzledTiledResource = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> Indicates that the <strong>ID3D12GraphicsCommandList::CopyTiles</strong> operation involves copying a swizzled tiled resource to a linear buffer. This means to copy tile data from the tile region, reading tiles sequentially (in x,y,z order if the region is a box), to the specified buffer location, deswizzling to linear memory layout as needed. In this <strong>ID3D12GraphicsCommandList::CopyTiles</strong> call, you specify the source data with the <em>pTiledResource</em> parameter and the destination with the  <em>pBuffer</em> parameter. </p> </dd>
        /// </summary>
        /// <doc-id>dn986751</doc-id>
        /// <unmanaged>D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER</unmanaged-short>
        SwizzledTiledResourceToLinearBuffer = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p> Identifies the tier level at which tiled resources are supported. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the <strong><see cref = "SharpDX.Direct3D12.FeatureDataD3D12Options"/></strong> structure. </p><p> There are three discrete pieces of functionality bundled together for tiled resource functionality: </p><ul> <li> A tile-based texture layout option where nearby texel addresses contain nearby data coordinates. A tile of texels contains nearly the same amount of texels in each cardinal dimension of the resource. This layout is represented in D3D12 by <strong>D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE</strong>. </li> <li> Reserve a region of virtual address space for a resource, where each page is initially <c>null</c>-mapped. In D3D12, this is operation is encapsulated within <strong>ID3D12Device::CreateReservedResource</strong>, which only works with textures that have the D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE layout. </li> <li> The ability to change page mappings and manipulate texture data on tile granularities. In D3D12, these operations are <strong>ID3D12CommandQueue::UpdateTileMappings</strong>, <strong>ID3D12CommandQueue::CopyTileMappings</strong>, and <strong>ID3D12GraphicsCommandList::CopyTiles</strong>. </li> </ul><p> Three significant changes over D3D11 are: </p><ul> <li> Tile pools are replaced by heaps. Heaps provide a superset of capabilities than D3D11 tile pools do. </li> <li> Reserved resources may be mapped to pages from multiple heaps at the same time. The D3D11 restriction that all non-<c>null</c> mapped pages must come from the same heap does not exist. </li> <li> Applications should be aware of GPU virtual address capabilities, which enable litmus tests for particular usage scenarios. See <strong>D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT</strong>. </li> </ul>
    /// </remarks>
    /// <doc-id>dn879489</doc-id>
    /// <unmanaged>D3D12_TILED_RESOURCES_TIER</unmanaged>
    /// <unmanaged-short>D3D12_TILED_RESOURCES_TIER</unmanaged-short>
    public enum TiledResourcesTier : System.Int32
    {
        /// <summary>
        /// <dd> <p> Indicates that textures cannot be created with the <strong>D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE</strong> layout. </p> <p> <strong>ID3D12Device::CreateReservedResource</strong> cannot be used, not even for buffers. </p> </dd>
        /// </summary>
        /// <doc-id>dn879489</doc-id>
        /// <unmanaged>D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED</unmanaged-short>
        TierNotSupported = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Indicates that 2D textures can be created with the D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE layout. Limitations exist for certain resource formats and properties. For more details, see <strong>D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE</strong>. </p> <p> <strong>ID3D12Device::CreateReservedResource</strong> can be used. </p> <p> GPU reads or writes to <c>null</c> mappings are undefined. Applications are encouraged to workaround this limitation by repeatedly mapping the same page to everywhere a <c>null</c> mapping would've been used. </p> <p> When the size of a texture mipmap level is an integer multiple of the standard tile shape for its format, it is guaranteed to be nonpacked. </p> </dd>
        /// </summary>
        /// <doc-id>dn879489</doc-id>
        /// <unmanaged>D3D12_TILED_RESOURCES_TIER_1</unmanaged>
        /// <unmanaged-short>D3D12_TILED_RESOURCES_TIER_1</unmanaged-short>
        Tier1 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Indicates that a superset of Tier_1 functionality is supported, including this additional support: </p> <ul> <li> When the size of a texture mipmap level is at least one standard tile shape for its format, the mipmap level is guaranteed to be nonpacked. For more info, see <strong><see cref = "SharpDX.Direct3D12.PackedMipInformation"/></strong>. </li> <li> Shader instructions are available for clamping level-of-detail (LOD) and for obtaining status about the shader operation. For info about one of these shader instructions, see Sample(S,float,int,float,uint). <strong>Sample(S,float,int,float,uint)</strong>. </li> <li> Reading from <strong><c>null</c></strong>-mapped tiles treat that sampled value as zero. Writes to <strong><c>null</c></strong>-mapped tiles are discarded. </li> </ul> <p> Adapters that support feature level 12_0 all support TIER_2 or greater. </p> </dd>
        /// </summary>
        /// <doc-id>dn879489</doc-id>
        /// <unmanaged>D3D12_TILED_RESOURCES_TIER_2</unmanaged>
        /// <unmanaged-short>D3D12_TILED_RESOURCES_TIER_2</unmanaged-short>
        Tier2 = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> Indicates that a superset of Tier 2 is supported, with the addition that 3D textures (Volume Tiled Resources) are supported. </p> </dd>
        /// </summary>
        /// <doc-id>dn879489</doc-id>
        /// <unmanaged>D3D12_TILED_RESOURCES_TIER_3</unmanaged>
        /// <unmanaged-short>D3D12_TILED_RESOURCES_TIER_3</unmanaged-short>
        Tier3 = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn879489</doc-id>
        /// <unmanaged>D3D12_TILED_RESOURCES_TIER_4</unmanaged>
        /// <unmanaged-short>D3D12_TILED_RESOURCES_TIER_4</unmanaged-short>
        Tier4 = unchecked ((System.Int32)(4))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p> Specifies how to perform a tile-mapping operation. </p>
    /// </summary>
    /// <remarks>
    /// <p> This enum is used by the following methods:</p><ul> <li> <strong>CopyTileMappings</strong> </li> <li> <strong>UpdateTileMappings</strong> </li> </ul>
    /// </remarks>
    /// <doc-id>dn986752</doc-id>
    /// <unmanaged>D3D12_TILE_MAPPING_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_TILE_MAPPING_FLAGS</unmanaged-short>
    public enum TileMappingFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p> No tile-mapping flags are specified. </p> </dd>
        /// </summary>
        /// <doc-id>dn986752</doc-id>
        /// <unmanaged>D3D12_TILE_MAPPING_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_TILE_MAPPING_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Unsupported, do not use. </p> </dd>
        /// </summary>
        /// <doc-id>dn986752</doc-id>
        /// <unmanaged>D3D12_TILE_MAPPING_FLAG_NO_HAZARD</unmanaged>
        /// <unmanaged-short>D3D12_TILE_MAPPING_FLAG_NO_HAZARD</unmanaged-short>
        NoHazard = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p> Specifies a range of tile mappings. </p>
    /// </summary>
    /// <remarks>
    /// <p> Use these flags with <strong>ID3D12CommandQueue::UpdateTileMappings</strong>. </p>
    /// </remarks>
    /// <doc-id>dn986753</doc-id>
    /// <unmanaged>D3D12_TILE_RANGE_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_TILE_RANGE_FLAGS</unmanaged-short>
    public enum TileRangeFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p> No tile-mapping flags are specified. </p> </dd>
        /// </summary>
        /// <doc-id>dn986753</doc-id>
        /// <unmanaged>D3D12_TILE_RANGE_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_TILE_RANGE_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The tile range is <strong><c>null</c></strong>. </p> </dd>
        /// </summary>
        /// <doc-id>dn986753</doc-id>
        /// <unmanaged>D3D12_TILE_RANGE_FLAG_NULL</unmanaged>
        /// <unmanaged-short>D3D12_TILE_RANGE_FLAG_NULL</unmanaged-short>
        Null = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Skip the tile range. </p> </dd>
        /// </summary>
        /// <doc-id>dn986753</doc-id>
        /// <unmanaged>D3D12_TILE_RANGE_FLAG_SKIP</unmanaged>
        /// <unmanaged-short>D3D12_TILE_RANGE_FLAG_SKIP</unmanaged-short>
        Skip = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> Reuse a single tile in the tile range. </p> </dd>
        /// </summary>
        /// <doc-id>dn986753</doc-id>
        /// <unmanaged>D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE</unmanaged>
        /// <unmanaged-short>D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE</unmanaged-short>
        ReuseSingleTile = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p>Identifies unordered-access view options.</p>
    /// </summary>
    /// <remarks>
    /// <p> Specify one of the values in this enumeration in the <strong>ViewDimension</strong> member of a <strong><see cref = "SharpDX.Direct3D12.UnorderedAccessViewDescription"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>dn770450</doc-id>
    /// <unmanaged>D3D12_UAV_DIMENSION</unmanaged>
    /// <unmanaged-short>D3D12_UAV_DIMENSION</unmanaged-short>
    public enum UnorderedAccessViewDimension : System.Int32
    {
        /// <summary>
        /// <dd> <p>The view type is unknown.</p> </dd>
        /// </summary>
        /// <doc-id>dn770450</doc-id>
        /// <unmanaged>D3D12_UAV_DIMENSION_UNKNOWN</unmanaged>
        /// <unmanaged-short>D3D12_UAV_DIMENSION_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>View the resource as a buffer.</p> </dd>
        /// </summary>
        /// <doc-id>dn770450</doc-id>
        /// <unmanaged>D3D12_UAV_DIMENSION_BUFFER</unmanaged>
        /// <unmanaged-short>D3D12_UAV_DIMENSION_BUFFER</unmanaged-short>
        Buffer = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>View the resource as a 1D texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770450</doc-id>
        /// <unmanaged>D3D12_UAV_DIMENSION_TEXTURE1D</unmanaged>
        /// <unmanaged-short>D3D12_UAV_DIMENSION_TEXTURE1D</unmanaged-short>
        Texture1D = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>View the resource as a 1D texture array.</p> </dd>
        /// </summary>
        /// <doc-id>dn770450</doc-id>
        /// <unmanaged>D3D12_UAV_DIMENSION_TEXTURE1DARRAY</unmanaged>
        /// <unmanaged-short>D3D12_UAV_DIMENSION_TEXTURE1DARRAY</unmanaged-short>
        Texture1DArray = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>View the resource as a 2D texture.</p> </dd>
        /// </summary>
        /// <doc-id>dn770450</doc-id>
        /// <unmanaged>D3D12_UAV_DIMENSION_TEXTURE2D</unmanaged>
        /// <unmanaged-short>D3D12_UAV_DIMENSION_TEXTURE2D</unmanaged-short>
        Texture2D = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>View the resource as a 2D texture array.</p> </dd>
        /// </summary>
        /// <doc-id>dn770450</doc-id>
        /// <unmanaged>D3D12_UAV_DIMENSION_TEXTURE2DARRAY</unmanaged>
        /// <unmanaged-short>D3D12_UAV_DIMENSION_TEXTURE2DARRAY</unmanaged-short>
        Texture2DArray = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>View the resource as a 3D texture array.</p> </dd>
        /// </summary>
        /// <doc-id>dn770450</doc-id>
        /// <unmanaged>D3D12_UAV_DIMENSION_TEXTURE3D</unmanaged>
        /// <unmanaged-short>D3D12_UAV_DIMENSION_TEXTURE3D</unmanaged-short>
        Texture3D = unchecked ((System.Int32)(8))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3D12_VIEW_INSTANCING_FLAGS</unmanaged>
    /// <unmanaged-short>D3D12_VIEW_INSTANCING_FLAGS</unmanaged-short>
    public enum ViewInstancingFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_VIEW_INSTANCING_FLAG_NONE</unmanaged>
        /// <unmanaged-short>D3D12_VIEW_INSTANCING_FLAG_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING</unmanaged>
        /// <unmanaged-short>D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING</unmanaged-short>
        EnableViewInstanceMasking = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Indicates the tier level at which view instancing is supported.</p>
    /// </summary>
    /// <doc-id>mt844813</doc-id>
    /// <unmanaged>D3D12_VIEW_INSTANCING_TIER</unmanaged>
    /// <unmanaged-short>D3D12_VIEW_INSTANCING_TIER</unmanaged-short>
    public enum ViewInstancingTier : System.Int32
    {
        /// <summary>
        /// <dd> <p>View instancing is not supported.</p> </dd>
        /// </summary>
        /// <doc-id>mt844813</doc-id>
        /// <unmanaged>D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED</unmanaged>
        /// <unmanaged-short>D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED</unmanaged-short>
        TierNotSupported = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>View instancing is supported by draw-call level looping only.</p> </dd>
        /// </summary>
        /// <doc-id>mt844813</doc-id>
        /// <unmanaged>D3D12_VIEW_INSTANCING_TIER_1</unmanaged>
        /// <unmanaged-short>D3D12_VIEW_INSTANCING_TIER_1</unmanaged-short>
        Tier1 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>View instancing is supported by draw-call level looping at worst, but the GPU can perform view instancing more efficiently in certain circumstances which are architecture-dependent.</p> </dd>
        /// </summary>
        /// <doc-id>mt844813</doc-id>
        /// <unmanaged>D3D12_VIEW_INSTANCING_TIER_2</unmanaged>
        /// <unmanaged-short>D3D12_VIEW_INSTANCING_TIER_2</unmanaged-short>
        Tier2 = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>View instancing is supported and instancing begins with the first shader stage that references SV_ViewID or with rasterization if no shader stage references SV_ViewID. This means that redundant work is eliminated across view instances when it's not dependent on SV_ViewID. Before rasterization, work that doesn't directly depend on SV_ViewID is shared across all views; only work that depends on SV_ViewID is repeated for each view.</p> <strong>Note</strong> If a hull shader produces tessellation factors that are dependent on SV_ViewID, then tessellation and all subsequent work must be repeated per-view. Similarly, if the amount of geometry produced by the geometry shader depends on SV_ViewID, then the geometry shader must be repeated per-view before proceeding to rasterization.   <p>View instance masking only effects whether work that directly depends on SV_ViewID is performed, not the entire loop iteration (per-view). If the view instance mask is non-0, some work that depends on SV_ViewID might still be performed on masked-off pixels but will have no externally-visible effect; for example, no UAV writes are performed and clipping/rasterzation is not invoked. If the view instance mask is 0 no work is performed, including work that's not dependent on SV_ViewID.</p> </dd>
        /// </summary>
        /// <doc-id>mt844813</doc-id>
        /// <unmanaged>D3D12_VIEW_INSTANCING_TIER_3</unmanaged>
        /// <unmanaged-short>D3D12_VIEW_INSTANCING_TIER_3</unmanaged-short>
        Tier3 = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Specifies the mode used by a <strong>WriteBufferImmediate</strong> operation.</p>
    /// </summary>
    /// <doc-id>mt844814</doc-id>
    /// <unmanaged>D3D12_WRITEBUFFERIMMEDIATE_MODE</unmanaged>
    /// <unmanaged-short>D3D12_WRITEBUFFERIMMEDIATE_MODE</unmanaged-short>
    public enum WriteBufferImmediateMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>The write operation behaves the same as normal copy-write operations.</p> </dd>
        /// </summary>
        /// <doc-id>mt844814</doc-id>
        /// <unmanaged>D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT</unmanaged>
        /// <unmanaged-short>D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The write operation is guaranteed to occur after all preceding commands in the command stream have started, including previous <strong>WriteBufferImmediate</strong> operations.</p> </dd>
        /// </summary>
        /// <doc-id>mt844814</doc-id>
        /// <unmanaged>D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN</unmanaged>
        /// <unmanaged-short>D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN</unmanaged-short>
        MarkerIn = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The write operation is deferred until all previous commands in the command stream have completed through the GPU pipeline, including previous <strong>WriteBufferImmediate</strong> operations. Write operations that specify <strong>D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT</strong> don't block subsequent operations from starting. If there are no previous operations in the command stream, then the write operation behaves as if <strong>D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN</strong> was specified.</p> </dd>
        /// </summary>
        /// <doc-id>mt844814</doc-id>
        /// <unmanaged>D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT</unmanaged>
        /// <unmanaged-short>D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT</unmanaged-short>
        MarkerOut = unchecked ((System.Int32)(2))}
}