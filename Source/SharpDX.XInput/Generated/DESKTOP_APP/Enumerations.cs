// <auto-generated/>

namespace SharpDX.XInput
{
    /// <summary>
    /// <p>Retrieves the battery type and charge status of a wireless controller.</p>
    /// </summary>
    /// <doc-id>microsoft.directx_sdk.reference.xinputgetbatteryinformation</doc-id>
    /// <unmanaged>BATTERY_DEVTYPE</unmanaged>
    /// <unmanaged-short>BATTERY_DEVTYPE</unmanaged-short>
    public enum BatteryDeviceType : System.Int32
    {
        /// <summary>
        /// <dd> <p>Index of the signed-in gamer associated with the device. Can be a value in the range 0?XUSER_MAX_COUNT ? 1.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinputgetbatteryinformation</doc-id>
        /// <unmanaged>BATTERY_DEVTYPE_GAMEPAD</unmanaged>
        /// <unmanaged-short>BATTERY_DEVTYPE_GAMEPAD</unmanaged-short>
        Gamepad = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Specifies which device associated with this user index should be queried. Must be <strong>BATTERY_DEVTYPE_GAMEPAD</strong> or <strong>BATTERY_DEVTYPE_HEADSET</strong>.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinputgetbatteryinformation</doc-id>
        /// <unmanaged>BATTERY_DEVTYPE_HEADSET</unmanaged>
        /// <unmanaged-short>BATTERY_DEVTYPE_HEADSET</unmanaged-short>
        Headset = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>BATTERY_LEVEL</unmanaged>
    /// <unmanaged-short>BATTERY_LEVEL</unmanaged-short>
    public enum BatteryLevel : System.Byte
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>BATTERY_LEVEL_EMPTY</unmanaged>
        /// <unmanaged-short>BATTERY_LEVEL_EMPTY</unmanaged-short>
        Empty = unchecked ((System.Byte)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>BATTERY_LEVEL_LOW</unmanaged>
        /// <unmanaged-short>BATTERY_LEVEL_LOW</unmanaged-short>
        Low = unchecked ((System.Byte)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>BATTERY_LEVEL_MEDIUM</unmanaged>
        /// <unmanaged-short>BATTERY_LEVEL_MEDIUM</unmanaged-short>
        Medium = unchecked ((System.Byte)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>BATTERY_LEVEL_FULL</unmanaged>
        /// <unmanaged-short>BATTERY_LEVEL_FULL</unmanaged-short>
        Full = unchecked ((System.Byte)(3))}

    /// <summary>
    /// <p>Contains information on battery type and charge state.</p>
    /// </summary>
    /// <doc-id>microsoft.directx_sdk.reference.xinput_battery_information</doc-id>
    /// <unmanaged>BATTERY_TYPE</unmanaged>
    /// <unmanaged-short>BATTERY_TYPE</unmanaged-short>
    public enum BatteryType : System.Byte
    {
        /// <summary>
        /// <dd> <p>The type of battery. <em>BatteryType</em> will be one of the following values. </p> <table> <tr><th>Value</th><th>Description</th></tr> <tr><td>BATTERY_TYPE_DISCONNECTED</td><td>The device is not connected.?</td></tr> <tr><td>BATTERY_TYPE_WIRED</td><td>The device is a wired device and does not have a battery.?</td></tr> <tr><td>BATTERY_TYPE_ALKALINE</td><td>The device has an alkaline battery.?</td></tr> <tr><td>BATTERY_TYPE_NIMH</td><td>The device has a nickel metal hydride battery.?</td></tr> <tr><td>BATTERY_TYPE_UNKNOWN</td><td>The device has an unknown  battery type.?</td></tr> </table> <p>?</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_battery_information</doc-id>
        /// <unmanaged>BATTERY_TYPE_DISCONNECTED</unmanaged>
        /// <unmanaged-short>BATTERY_TYPE_DISCONNECTED</unmanaged-short>
        Disconnected = unchecked ((System.Byte)(0)),
        /// <summary>
        /// <dd> <p>The charge state of the battery. This value is only valid for wireless devices with a known battery type. <em>BatteryLevel</em> will be one of the following values. </p> <table> <tr><th>Value</th></tr> <tr><td>BATTERY_LEVEL_EMPTY</td></tr> <tr><td>BATTERY_LEVEL_LOW</td></tr> <tr><td>BATTERY_LEVEL_MEDIUM</td></tr> <tr><td>BATTERY_LEVEL_FULL</td></tr> </table> <p>?</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_battery_information</doc-id>
        /// <unmanaged>BATTERY_TYPE_WIRED</unmanaged>
        /// <unmanaged-short>BATTERY_TYPE_WIRED</unmanaged-short>
        Wired = unchecked ((System.Byte)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_battery_information</doc-id>
        /// <unmanaged>BATTERY_TYPE_ALKALINE</unmanaged>
        /// <unmanaged-short>BATTERY_TYPE_ALKALINE</unmanaged-short>
        Alkaline = unchecked ((System.Byte)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_battery_information</doc-id>
        /// <unmanaged>BATTERY_TYPE_NIMH</unmanaged>
        /// <unmanaged-short>BATTERY_TYPE_NIMH</unmanaged-short>
        Nimh = unchecked ((System.Byte)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_battery_information</doc-id>
        /// <unmanaged>BATTERY_TYPE_UNKNOWN</unmanaged>
        /// <unmanaged-short>BATTERY_TYPE_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Byte)(255))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>XINPUT_CAPS_FLAGS</unmanaged>
    /// <unmanaged-short>XINPUT_CAPS_FLAGS</unmanaged-short>
    public enum CapabilityFlags : System.Int16
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XINPUT_CAPS_VOICE_SUPPORTED</unmanaged>
        /// <unmanaged-short>XINPUT_CAPS_VOICE_SUPPORTED</unmanaged-short>
        VoiceSupported = unchecked ((System.Int16)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XINPUT_CAPS_FFB_SUPPORTED</unmanaged>
        /// <unmanaged-short>XINPUT_CAPS_FFB_SUPPORTED</unmanaged-short>
        FfbSupported = unchecked ((System.Int16)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XINPUT_CAPS_WIRELESS</unmanaged>
        /// <unmanaged-short>XINPUT_CAPS_WIRELESS</unmanaged-short>
        Wireless = unchecked ((System.Int16)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XINPUT_CAPS_PMD_SUPPORTED</unmanaged>
        /// <unmanaged-short>XINPUT_CAPS_PMD_SUPPORTED</unmanaged-short>
        PmdSupported = unchecked ((System.Int16)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XINPUT_CAPS_NO_NAVIGATION</unmanaged>
        /// <unmanaged-short>XINPUT_CAPS_NO_NAVIGATION</unmanaged-short>
        NoNavigation = unchecked ((System.Int16)(16)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int16)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>XINPUT_DEVQUERYTYPE</unmanaged>
    /// <unmanaged-short>XINPUT_DEVQUERYTYPE</unmanaged-short>
    public enum DeviceQueryType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XINPUT_FLAG_GAMEPAD</unmanaged>
        /// <unmanaged-short>XINPUT_FLAG_GAMEPAD</unmanaged-short>
        Gamepad = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XINPUT_FLAG_ANY</unmanaged>
        /// <unmanaged-short>XINPUT_FLAG_ANY</unmanaged-short>
        Any = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>A table of controller subtypes available in XInput.</p>
    /// </summary>
    /// <doc-id>hh405050</doc-id>
    /// <unmanaged>XINPUT_DEVSUBTYPE</unmanaged>
    /// <unmanaged-short>XINPUT_DEVSUBTYPE</unmanaged-short>
    public enum DeviceSubType : System.Byte
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh405050</doc-id>
        /// <unmanaged>XINPUT_DEVSUBTYPE_GAMEPAD</unmanaged>
        /// <unmanaged-short>XINPUT_DEVSUBTYPE_GAMEPAD</unmanaged-short>
        Gamepad = unchecked ((System.Byte)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh405050</doc-id>
        /// <unmanaged>XINPUT_DEVSUBTYPE_UNKNOWN</unmanaged>
        /// <unmanaged-short>XINPUT_DEVSUBTYPE_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Byte)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh405050</doc-id>
        /// <unmanaged>XINPUT_DEVSUBTYPE_WHEEL</unmanaged>
        /// <unmanaged-short>XINPUT_DEVSUBTYPE_WHEEL</unmanaged-short>
        Wheel = unchecked ((System.Byte)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh405050</doc-id>
        /// <unmanaged>XINPUT_DEVSUBTYPE_ARCADE_STICK</unmanaged>
        /// <unmanaged-short>XINPUT_DEVSUBTYPE_ARCADE_STICK</unmanaged-short>
        ArcadeStick = unchecked ((System.Byte)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh405050</doc-id>
        /// <unmanaged>XINPUT_DEVSUBTYPE_FLIGHT_STICK</unmanaged>
        /// <unmanaged-short>XINPUT_DEVSUBTYPE_FLIGHT_STICK</unmanaged-short>
        FlightStick = unchecked ((System.Byte)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh405050</doc-id>
        /// <unmanaged>XINPUT_DEVSUBTYPE_DANCE_PAD</unmanaged>
        /// <unmanaged-short>XINPUT_DEVSUBTYPE_DANCE_PAD</unmanaged-short>
        DancePad = unchecked ((System.Byte)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh405050</doc-id>
        /// <unmanaged>XINPUT_DEVSUBTYPE_GUITAR</unmanaged>
        /// <unmanaged-short>XINPUT_DEVSUBTYPE_GUITAR</unmanaged-short>
        Guitar = unchecked ((System.Byte)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh405050</doc-id>
        /// <unmanaged>XINPUT_DEVSUBTYPE_GUITAR_ALTERNATE</unmanaged>
        /// <unmanaged-short>XINPUT_DEVSUBTYPE_GUITAR_ALTERNATE</unmanaged-short>
        GuitarAlternate = unchecked ((System.Byte)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh405050</doc-id>
        /// <unmanaged>XINPUT_DEVSUBTYPE_DRUM_KIT</unmanaged>
        /// <unmanaged-short>XINPUT_DEVSUBTYPE_DRUM_KIT</unmanaged-short>
        DrumKit = unchecked ((System.Byte)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh405050</doc-id>
        /// <unmanaged>XINPUT_DEVSUBTYPE_GUITAR_BASS</unmanaged>
        /// <unmanaged-short>XINPUT_DEVSUBTYPE_GUITAR_BASS</unmanaged-short>
        GuitarBass = unchecked ((System.Byte)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh405050</doc-id>
        /// <unmanaged>XINPUT_DEVSUBTYPE_ARCADE_PAD</unmanaged>
        /// <unmanaged-short>XINPUT_DEVSUBTYPE_ARCADE_PAD</unmanaged-short>
        ArcadePad = unchecked ((System.Byte)(19))}

    /// <summary>
    /// <p>Describes the capabilities of a connected controller. The <strong>XInputGetCapabilities</strong> function returns <strong><see cref = "SharpDX.XInput.Capabilities"/></strong>. </p>
    /// </summary>
    /// <remarks>
    /// <p> <strong>XInputGetCapabilities</strong> returns <strong><see cref = "SharpDX.XInput.Capabilities"/></strong> to indicate the characteristics and available functionality of a specified controller. </p><p> <strong>XInputGetCapabilities</strong> sets the structure members to indicate which inputs the device supports. For binary state controls, such as digital buttons, the corresponding bit reflects whether or not the control is supported by the device. For proportional controls, such as thumbsticks, the value indicates the resolution for that control. Some number of the least significant bits may not be set, indicating that the control does not provide resolution to that level. </p><p>The <em>SubType</em> member indicates the specific subtype of controller present. Games may detect the controller subtype and tune their handling of controller input or output based on subtypes that are well suited to their game genre. For example, a car racing game might check for the presence of a wheel controller to provide finer control of the car being driven. However, titles must not disable or ignore a device based on its subtype. Subtypes not recognized by the game or for which the game is not specifically tuned should be treated as a standard Xbox 360 Controller (XINPUT_DEVSUBTYPE_GAMEPAD). </p><p>Older XUSB Windows drivers report incomplete capabilities information, particularly for wireless devices. The latest XUSB Windows driver provides full support for wired and wireless devices, and more complete and accurate capabilties flags. </p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.reference.xinput_capabilities</doc-id>
    /// <unmanaged>XINPUT_DEVTYPE</unmanaged>
    /// <unmanaged-short>XINPUT_DEVTYPE</unmanaged-short>
    public enum DeviceType : System.Byte
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_capabilities</doc-id>
        /// <unmanaged>XINPUT_DEVTYPE_GAMEPAD</unmanaged>
        /// <unmanaged-short>XINPUT_DEVTYPE_GAMEPAD</unmanaged-short>
        Gamepad = unchecked ((System.Byte)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>XINPUT_GAMEPAD_KEY_CODE</unmanaged>
    /// <unmanaged-short>XINPUT_GAMEPAD_KEY_CODE</unmanaged-short>
    public enum GamepadKeyCode : System.Int16
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_A</unmanaged>
        /// <unmanaged-short>VK_PAD_A</unmanaged-short>
        A = unchecked ((System.Int16)(22528)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_B</unmanaged>
        /// <unmanaged-short>VK_PAD_B</unmanaged-short>
        B = unchecked ((System.Int16)(22529)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_X</unmanaged>
        /// <unmanaged-short>VK_PAD_X</unmanaged-short>
        X = unchecked ((System.Int16)(22530)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_Y</unmanaged>
        /// <unmanaged-short>VK_PAD_Y</unmanaged-short>
        Y = unchecked ((System.Int16)(22531)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_RSHOULDER</unmanaged>
        /// <unmanaged-short>VK_PAD_RSHOULDER</unmanaged-short>
        RightShoulder = unchecked ((System.Int16)(22532)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_LSHOULDER</unmanaged>
        /// <unmanaged-short>VK_PAD_LSHOULDER</unmanaged-short>
        LeftShoulder = unchecked ((System.Int16)(22533)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_LTRIGGER</unmanaged>
        /// <unmanaged-short>VK_PAD_LTRIGGER</unmanaged-short>
        LeftTrigger = unchecked ((System.Int16)(22534)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_RTRIGGER</unmanaged>
        /// <unmanaged-short>VK_PAD_RTRIGGER</unmanaged-short>
        RightTrigger = unchecked ((System.Int16)(22535)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_DPAD_UP</unmanaged>
        /// <unmanaged-short>VK_PAD_DPAD_UP</unmanaged-short>
        DPadUp = unchecked ((System.Int16)(22544)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_DPAD_DOWN</unmanaged>
        /// <unmanaged-short>VK_PAD_DPAD_DOWN</unmanaged-short>
        DPadDown = unchecked ((System.Int16)(22545)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_DPAD_LEFT</unmanaged>
        /// <unmanaged-short>VK_PAD_DPAD_LEFT</unmanaged-short>
        DPadLeft = unchecked ((System.Int16)(22546)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_DPAD_RIGHT</unmanaged>
        /// <unmanaged-short>VK_PAD_DPAD_RIGHT</unmanaged-short>
        DPadRight = unchecked ((System.Int16)(22547)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_START</unmanaged>
        /// <unmanaged-short>VK_PAD_START</unmanaged-short>
        Start = unchecked ((System.Int16)(22548)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_BACK</unmanaged>
        /// <unmanaged-short>VK_PAD_BACK</unmanaged-short>
        Back = unchecked ((System.Int16)(22549)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_LTHUMB_PRESS</unmanaged>
        /// <unmanaged-short>VK_PAD_LTHUMB_PRESS</unmanaged-short>
        LeftThumbPress = unchecked ((System.Int16)(22550)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_RTHUMB_PRESS</unmanaged>
        /// <unmanaged-short>VK_PAD_RTHUMB_PRESS</unmanaged-short>
        RightThumbPress = unchecked ((System.Int16)(22551)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_LTHUMB_UP</unmanaged>
        /// <unmanaged-short>VK_PAD_LTHUMB_UP</unmanaged-short>
        LeftThumbUp = unchecked ((System.Int16)(22560)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_LTHUMB_DOWN</unmanaged>
        /// <unmanaged-short>VK_PAD_LTHUMB_DOWN</unmanaged-short>
        LeftThumbDown = unchecked ((System.Int16)(22561)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_LTHUMB_RIGHT</unmanaged>
        /// <unmanaged-short>VK_PAD_LTHUMB_RIGHT</unmanaged-short>
        LeftThumbRight = unchecked ((System.Int16)(22562)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_LTHUMB_LEFT</unmanaged>
        /// <unmanaged-short>VK_PAD_LTHUMB_LEFT</unmanaged-short>
        LeftThumbLeft = unchecked ((System.Int16)(22563)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_LTHUMB_UPLEFT</unmanaged>
        /// <unmanaged-short>VK_PAD_LTHUMB_UPLEFT</unmanaged-short>
        RightThumbUpLeft = unchecked ((System.Int16)(22564)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_LTHUMB_UPRIGHT</unmanaged>
        /// <unmanaged-short>VK_PAD_LTHUMB_UPRIGHT</unmanaged-short>
        LeftThumbUpright = unchecked ((System.Int16)(22565)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_LTHUMB_DOWNRIGHT</unmanaged>
        /// <unmanaged-short>VK_PAD_LTHUMB_DOWNRIGHT</unmanaged-short>
        LeftThumbDownright = unchecked ((System.Int16)(22566)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_LTHUMB_DOWNLEFT</unmanaged>
        /// <unmanaged-short>VK_PAD_LTHUMB_DOWNLEFT</unmanaged-short>
        RightThumbDownLeft = unchecked ((System.Int16)(22567)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_RTHUMB_UP</unmanaged>
        /// <unmanaged-short>VK_PAD_RTHUMB_UP</unmanaged-short>
        RightThumbUp = unchecked ((System.Int16)(22576)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_RTHUMB_DOWN</unmanaged>
        /// <unmanaged-short>VK_PAD_RTHUMB_DOWN</unmanaged-short>
        RightThumbDown = unchecked ((System.Int16)(22577)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_RTHUMB_RIGHT</unmanaged>
        /// <unmanaged-short>VK_PAD_RTHUMB_RIGHT</unmanaged-short>
        RightThumbRight = unchecked ((System.Int16)(22578)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_RTHUMB_LEFT</unmanaged>
        /// <unmanaged-short>VK_PAD_RTHUMB_LEFT</unmanaged-short>
        RightThumbLeft = unchecked ((System.Int16)(22579)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_RTHUMB_UPLEFT</unmanaged>
        /// <unmanaged-short>VK_PAD_RTHUMB_UPLEFT</unmanaged-short>
        RightThumbUpleft = unchecked ((System.Int16)(22580)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_RTHUMB_UPRIGHT</unmanaged>
        /// <unmanaged-short>VK_PAD_RTHUMB_UPRIGHT</unmanaged-short>
        RightThumbUpRight = unchecked ((System.Int16)(22581)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_RTHUMB_DOWNRIGHT</unmanaged>
        /// <unmanaged-short>VK_PAD_RTHUMB_DOWNRIGHT</unmanaged-short>
        RightThumbDownRight = unchecked ((System.Int16)(22582)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>VK_PAD_RTHUMB_DOWNLEFT</unmanaged>
        /// <unmanaged-short>VK_PAD_RTHUMB_DOWNLEFT</unmanaged-short>
        RightThumbDownleft = unchecked ((System.Int16)(22583)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int16)(0))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>XINPUT_KEYSTROKE_FLAGS</unmanaged>
    /// <unmanaged-short>XINPUT_KEYSTROKE_FLAGS</unmanaged-short>
    public enum KeyStrokeFlags : System.Int16
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XINPUT_KEYSTROKE_KEYDOWN</unmanaged>
        /// <unmanaged-short>XINPUT_KEYSTROKE_KEYDOWN</unmanaged-short>
        KeyDown = unchecked ((System.Int16)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XINPUT_KEYSTROKE_KEYUP</unmanaged>
        /// <unmanaged-short>XINPUT_KEYSTROKE_KEYUP</unmanaged-short>
        KeyUp = unchecked ((System.Int16)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>XINPUT_KEYSTROKE_REPEAT</unmanaged>
        /// <unmanaged-short>XINPUT_KEYSTROKE_REPEAT</unmanaged-short>
        Repeat = unchecked ((System.Int16)(4)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int16)(0))}

    /// <summary>
    /// <p>Retrieves a gamepad input event.</p>
    /// </summary>
    /// <remarks>
    /// <p>Wireless controllers are not considered active upon system startup, and calls to any of the <em>XInput</em> functions before a wireless controller is made active return <strong>ERROR_DEVICE_NOT_CONNECTED</strong>. Game titles must examine the return code and be prepared to handle this condition. Wired controllers are automatically activated when they are inserted. Wireless controllers are activated when the user presses the START or Xbox Guide button to power on the controller.</p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.reference.xinputgetkeystroke</doc-id>
    /// <unmanaged>XUSER_INDEX</unmanaged>
    /// <unmanaged-short>XUSER_INDEX</unmanaged-short>
    public enum UserIndex : System.Byte
    {
        /// <summary>
        /// <dd> <p>[in] Index of the signed-in gamer associated with the device. Can be a value in the range 0?XUSER_MAX_COUNT ? 1, or XUSER_INDEX_ANY to fetch the next available input event from any user.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinputgetkeystroke</doc-id>
        /// <unmanaged>XUSER_INDEX_ANY</unmanaged>
        /// <unmanaged-short>XUSER_INDEX_ANY</unmanaged-short>
        Any = unchecked ((System.Byte)(255)),
        /// <summary>
        /// <dd> <p>[in] Reserved</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinputgetkeystroke</doc-id>
        /// <unmanaged>XUSER_INDEX_ONE</unmanaged>
        /// <unmanaged-short>XUSER_INDEX_ONE</unmanaged-short>
        One = unchecked ((System.Byte)(0)),
        /// <summary>
        /// <dd> <p>[out] Pointer to an <strong><see cref = "SharpDX.XInput.Keystroke"/></strong> structure that receives an input event.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinputgetkeystroke</doc-id>
        /// <unmanaged>XUSER_INDEX_TWO</unmanaged>
        /// <unmanaged-short>XUSER_INDEX_TWO</unmanaged-short>
        Two = unchecked ((System.Byte)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinputgetkeystroke</doc-id>
        /// <unmanaged>XUSER_INDEX_THREE</unmanaged>
        /// <unmanaged-short>XUSER_INDEX_THREE</unmanaged-short>
        Three = unchecked ((System.Byte)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinputgetkeystroke</doc-id>
        /// <unmanaged>XUSER_INDEX_FOUR</unmanaged>
        /// <unmanaged-short>XUSER_INDEX_FOUR</unmanaged-short>
        Four = unchecked ((System.Byte)(3))}
}