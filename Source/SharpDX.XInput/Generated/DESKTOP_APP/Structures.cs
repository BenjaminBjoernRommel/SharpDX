// <auto-generated/>

namespace SharpDX.XInput
{
    /// <summary>
    /// <p>Contains information on battery type and charge state.</p>
    /// </summary>
    /// <doc-id>microsoft.directx_sdk.reference.xinput_battery_information</doc-id>
    /// <unmanaged>XINPUT_BATTERY_INFORMATION</unmanaged>
    /// <unmanaged-short>XINPUT_BATTERY_INFORMATION</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct BatteryInformation
    {
        /// <summary>
        /// <dd> <p>The type of battery. <em>BatteryType</em> will be one of the following values. </p> <table> <tr><th>Value</th><th>Description</th></tr> <tr><td>BATTERY_TYPE_DISCONNECTED</td><td>The device is not connected.?</td></tr> <tr><td>BATTERY_TYPE_WIRED</td><td>The device is a wired device and does not have a battery.?</td></tr> <tr><td>BATTERY_TYPE_ALKALINE</td><td>The device has an alkaline battery.?</td></tr> <tr><td>BATTERY_TYPE_NIMH</td><td>The device has a nickel metal hydride battery.?</td></tr> <tr><td>BATTERY_TYPE_UNKNOWN</td><td>The device has an unknown  battery type.?</td></tr> </table> <p>?</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_battery_information</doc-id>
        /// <unmanaged>BatteryType</unmanaged>
        /// <unmanaged-short>BatteryType</unmanaged-short>
        public SharpDX.XInput.BatteryType BatteryType;
        /// <summary>
        /// <dd> <p>The charge state of the battery. This value is only valid for wireless devices with a known battery type. <em>BatteryLevel</em> will be one of the following values. </p> <table> <tr><th>Value</th></tr> <tr><td>BATTERY_LEVEL_EMPTY</td></tr> <tr><td>BATTERY_LEVEL_LOW</td></tr> <tr><td>BATTERY_LEVEL_MEDIUM</td></tr> <tr><td>BATTERY_LEVEL_FULL</td></tr> </table> <p>?</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_battery_information</doc-id>
        /// <unmanaged>BatteryLevel</unmanaged>
        /// <unmanaged-short>BatteryLevel</unmanaged-short>
        public SharpDX.XInput.BatteryLevel BatteryLevel;
    }

    /// <summary>
    /// <p>Describes the capabilities of a connected controller. The <strong>XInputGetCapabilities</strong> function returns <strong><see cref = "SharpDX.XInput.Capabilities"/></strong>. </p>
    /// </summary>
    /// <remarks>
    /// <p> <strong>XInputGetCapabilities</strong> returns <strong><see cref = "SharpDX.XInput.Capabilities"/></strong> to indicate the characteristics and available functionality of a specified controller. </p><p> <strong>XInputGetCapabilities</strong> sets the structure members to indicate which inputs the device supports. For binary state controls, such as digital buttons, the corresponding bit reflects whether or not the control is supported by the device. For proportional controls, such as thumbsticks, the value indicates the resolution for that control. Some number of the least significant bits may not be set, indicating that the control does not provide resolution to that level. </p><p>The <em>SubType</em> member indicates the specific subtype of controller present. Games may detect the controller subtype and tune their handling of controller input or output based on subtypes that are well suited to their game genre. For example, a car racing game might check for the presence of a wheel controller to provide finer control of the car being driven. However, titles must not disable or ignore a device based on its subtype. Subtypes not recognized by the game or for which the game is not specifically tuned should be treated as a standard Xbox 360 Controller (XINPUT_DEVSUBTYPE_GAMEPAD). </p><p>Older XUSB Windows drivers report incomplete capabilities information, particularly for wireless devices. The latest XUSB Windows driver provides full support for wired and wireless devices, and more complete and accurate capabilties flags. </p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.reference.xinput_capabilities</doc-id>
    /// <unmanaged>XINPUT_CAPABILITIES</unmanaged>
    /// <unmanaged-short>XINPUT_CAPABILITIES</unmanaged-short>
    public partial struct Capabilities
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_capabilities</doc-id>
        /// <unmanaged>Type</unmanaged>
        /// <unmanaged-short>Type</unmanaged-short>
        public SharpDX.XInput.DeviceType Type;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_capabilities</doc-id>
        /// <unmanaged>SubType</unmanaged>
        /// <unmanaged-short>SubType</unmanaged-short>
        public SharpDX.XInput.DeviceSubType SubType;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_capabilities</doc-id>
        /// <unmanaged>Flags</unmanaged>
        /// <unmanaged-short>Flags</unmanaged-short>
        public SharpDX.XInput.CapabilityFlags Flags;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_capabilities</doc-id>
        /// <unmanaged>Gamepad</unmanaged>
        /// <unmanaged-short>Gamepad</unmanaged-short>
        public SharpDX.XInput.Gamepad Gamepad;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_capabilities</doc-id>
        /// <unmanaged>Vibration</unmanaged>
        /// <unmanaged-short>Vibration</unmanaged-short>
        public SharpDX.XInput.Vibration Vibration;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public SharpDX.XInput.DeviceType Type;
            public SharpDX.XInput.DeviceSubType SubType;
            public SharpDX.XInput.CapabilityFlags Flags;
            public SharpDX.XInput.Gamepad Gamepad;
            public SharpDX.XInput.Vibration.__Native Vibration;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            Vibration.__MarshalFree(ref @ref.Vibration);
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            Type = @ref.Type;
            SubType = @ref.SubType;
            Flags = @ref.Flags;
            Gamepad = @ref.Gamepad;
            Vibration.__MarshalFrom(ref @ref.Vibration);
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Type = Type;
            @ref.SubType = SubType;
            @ref.Flags = Flags;
            @ref.Gamepad = Gamepad;
            Vibration.__MarshalTo(ref @ref.Vibration);
        }
    }

    /// <summary>
    /// <p>Describes the current state of the Xbox 360 Controller.</p>
    /// </summary>
    /// <remarks>
    /// <p>This structure is used by the <strong><see cref = "SharpDX.XInput.State"/></strong> structure when polling for changes in the state of the controller. </p><p>The specific mapping of button to game function varies depending on the game type. </p><p>The constant XINPUT_GAMEPAD_TRIGGER_THRESHOLD may be used as the value which <em>bLeftTrigger</em> and <em>bRightTrigger</em> must be greater than to register as pressed. This is optional, but often desirable. Xbox 360 Controller buttons do not manifest crosstalk.
    /// </p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.reference.xinput_gamepad</doc-id>
    /// <unmanaged>XINPUT_GAMEPAD</unmanaged>
    /// <unmanaged-short>XINPUT_GAMEPAD</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Gamepad
    {
                ///<summary>Constant LeftThumbDeadZone</summary>
        ///<unmanaged>XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE</unmanaged>
        public const short LeftThumbDeadZone = 7849;
                ///<summary>Constant RightThumbDeadZone</summary>
        ///<unmanaged>XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE</unmanaged>
        public const short RightThumbDeadZone = 8689;
        /// <summary>
        /// <dd> <p>Bitmask of the device digital buttons, as follows. A set bit indicates that the corresponding button is pressed.  </p> <table> <tr><th>Device button</th><th>Bitmask</th></tr> <tr><td>XINPUT_GAMEPAD_DPAD_UP</td><td> 0x0001</td></tr> <tr><td>XINPUT_GAMEPAD_DPAD_DOWN</td><td> 0x0002</td></tr> <tr><td>XINPUT_GAMEPAD_DPAD_LEFT</td><td> 0x0004</td></tr> <tr><td>XINPUT_GAMEPAD_DPAD_RIGHT</td><td> 0x0008</td></tr> <tr><td>XINPUT_GAMEPAD_START</td><td> 0x0010</td></tr> <tr><td>XINPUT_GAMEPAD_BACK</td><td> 0x0020</td></tr> <tr><td>XINPUT_GAMEPAD_LEFT_THUMB</td><td> 0x0040</td></tr> <tr><td>XINPUT_GAMEPAD_RIGHT_THUMB</td><td> 0x0080</td></tr> <tr><td>XINPUT_GAMEPAD_LEFT_SHOULDER</td><td> 0x0100</td></tr> <tr><td>XINPUT_GAMEPAD_RIGHT_SHOULDER</td><td> 0x0200</td></tr> <tr><td>XINPUT_GAMEPAD_A</td><td> 0x1000</td></tr> <tr><td>XINPUT_GAMEPAD_B</td><td> 0x2000</td></tr> <tr><td>XINPUT_GAMEPAD_X</td><td> 0x4000</td></tr> <tr><td>XINPUT_GAMEPAD_Y</td><td> 0x8000</td></tr> </table> <p>?</p> <p>Bits that are set but not defined above are reserved, and their state is undefined. </p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_gamepad</doc-id>
        /// <unmanaged>wButtons</unmanaged>
        /// <unmanaged-short>wButtons</unmanaged-short>
        public SharpDX.XInput.GamepadButtonFlags Buttons;
        /// <summary>
        /// <dd> <p>The current value of the left trigger analog control. The value is between 0 and 255.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_gamepad</doc-id>
        /// <unmanaged>bLeftTrigger</unmanaged>
        /// <unmanaged-short>bLeftTrigger</unmanaged-short>
        public System.Byte LeftTrigger;
        /// <summary>
        /// <dd> <p>The current value of the right trigger analog control. The value is between 0 and 255.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_gamepad</doc-id>
        /// <unmanaged>bRightTrigger</unmanaged>
        /// <unmanaged-short>bRightTrigger</unmanaged-short>
        public System.Byte RightTrigger;
        /// <summary>
        /// <dd> <p>Left thumbstick x-axis value. Each of the thumbstick axis members is a signed value between -32768 and 32767 describing the position of the thumbstick. A value of 0 is centered. Negative values signify down or to the left. Positive values signify up or to the right. The constants <see cref = "LeftThumbDeadZone"/> or <see cref = "RightThumbDeadZone"/> can be used as a positive and negative value to filter a thumbstick input. 
        /// </p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_gamepad</doc-id>
        /// <unmanaged>sThumbLX</unmanaged>
        /// <unmanaged-short>sThumbLX</unmanaged-short>
        public System.Int16 LeftThumbX;
        /// <summary>
        /// <dd> <p>Left thumbstick y-axis value. The value is between -32768 and 32767.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_gamepad</doc-id>
        /// <unmanaged>sThumbLY</unmanaged>
        /// <unmanaged-short>sThumbLY</unmanaged-short>
        public System.Int16 LeftThumbY;
        /// <summary>
        /// <dd> <p>Right thumbstick x-axis value. The value is between -32768 and 32767.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_gamepad</doc-id>
        /// <unmanaged>sThumbRX</unmanaged>
        /// <unmanaged-short>sThumbRX</unmanaged-short>
        public System.Int16 RightThumbX;
        /// <summary>
        /// <dd> <p>Right thumbstick y-axis value. The value is between -32768 and 32767.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_gamepad</doc-id>
        /// <unmanaged>sThumbRY</unmanaged>
        /// <unmanaged-short>sThumbRY</unmanaged-short>
        public System.Int16 RightThumbY;
    }

    /// <summary>
    /// <p>Specifies keystroke data returned by <strong>XInputGetKeystroke</strong>.</p>
    /// </summary>
    /// <remarks>
    /// <p>Future devices may return HID codes and virtual key values that are not supported on current devices, and are currently undefined. Applications should ignore these unexpected values. </p><p>A <em>virtual-key</em> code is a byte value that represents a particular physical key on the keyboard, not the character or characters (possibly none) that the key can be mapped to based on keyboard state. The keyboard state at the time a virtual key is pressed modifies the character reported. For example, VK_4 might represent a "4" or a "$", depending on the state of the SHIFT key. </p><p>A reported keyboard event includes the virtual key that caused the event, whether the key was pressed or released (or is repeating), and the state of the keyboard at the time of the event. The keyboard state includes information about whether any CTRL, ALT, or SHIFT keys are down. </p><p>If the keyboard event represents an Unicode character (for example, pressing the "A" key), the <em>Unicode</em> member will contain that character. Otherwise, <em>Unicode</em> will contain the value zero. </p><p>The valid virtual-key (VK_xxx) codes are defined in XInput.h. In addition to codes that indicate key presses, the following codes indicate controller input. </p><table> <tr><th>Value</th><th>Description</th></tr> <tr><td>VK_PAD_A</td><td><strong>A</strong> button?</td></tr> <tr><td>VK_PAD_B</td><td><strong>B</strong> button?</td></tr> <tr><td>VK_PAD_X</td><td><strong>X</strong> button?</td></tr> <tr><td>VK_PAD_Y</td><td><strong>Y</strong> button?</td></tr> <tr><td>VK_PAD_RSHOULDER</td><td>Right shoulder button?</td></tr> <tr><td>VK_PAD_LSHOULDER</td><td>Left shoulder button?</td></tr> <tr><td>VK_PAD_LTRIGGER</td><td>Left trigger?</td></tr> <tr><td>VK_PAD_RTRIGGER</td><td>Right trigger?</td></tr> <tr><td>VK_PAD_DPAD_UP</td><td>Directional pad up?</td></tr> <tr><td>VK_PAD_DPAD_DOWN</td><td>Directional pad down?</td></tr> <tr><td>VK_PAD_DPAD_LEFT</td><td>Directional pad left?</td></tr> <tr><td>VK_PAD_DPAD_RIGHT</td><td>Directional pad right?</td></tr> <tr><td>VK_PAD_START</td><td><strong>START</strong> button?</td></tr> <tr><td>VK_PAD_BACK</td><td><strong>BACK</strong> button?</td></tr> <tr><td>VK_PAD_LTHUMB_PRESS</td><td>Left thumbstick click?</td></tr> <tr><td>VK_PAD_RTHUMB_PRESS</td><td>Right thumbstick click?</td></tr> <tr><td>VK_PAD_LTHUMB_UP</td><td>Left thumbstick up?</td></tr> <tr><td>VK_PAD_LTHUMB_DOWN</td><td>Left thumbstick down?</td></tr> <tr><td>VK_PAD_LTHUMB_RIGHT</td><td>Left thumbstick right?</td></tr> <tr><td>VK_PAD_LTHUMB_LEFT</td><td>Left thumbstick left?</td></tr> <tr><td>VK_PAD_LTHUMB_UPLEFT</td><td>Left thumbstick up and left?</td></tr> <tr><td>VK_PAD_LTHUMB_UPRIGHT</td><td>Left thumbstick up and right?</td></tr> <tr><td>VK_PAD_LTHUMB_DOWNRIGHT</td><td>Left thumbstick down and right?</td></tr> <tr><td>VK_PAD_LTHUMB_DOWNLEFT</td><td>Left thumbstick down and left?</td></tr> <tr><td>VK_PAD_RTHUMB_UP</td><td>Right thumbstick up?</td></tr> <tr><td>VK_PAD_RTHUMB_DOWN</td><td>Right thumbstick down?</td></tr> <tr><td>VK_PAD_RTHUMB_RIGHT</td><td>Right thumbstick right?</td></tr> <tr><td>VK_PAD_RTHUMB_LEFT</td><td>Right thumbstick left?</td></tr> <tr><td>VK_PAD_RTHUMB_UPLEFT</td><td>Right thumbstick up and left?</td></tr> <tr><td>VK_PAD_RTHUMB_UPRIGHT</td><td>Right thumbstick up and right?</td></tr> <tr><td>VK_PAD_RTHUMB_DOWNRIGHT</td><td>Right thumbstick down and right?</td></tr> <tr><td>VK_PAD_RTHUMB_DOWNLEFT</td><td>Right thumbstick down and left?</td></tr> </table><p>?</p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.reference.xinput_keystroke</doc-id>
    /// <unmanaged>XINPUT_KEYSTROKE</unmanaged>
    /// <unmanaged-short>XINPUT_KEYSTROKE</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Keystroke
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_keystroke</doc-id>
        /// <unmanaged>VirtualKey</unmanaged>
        /// <unmanaged-short>VirtualKey</unmanaged-short>
        public SharpDX.XInput.GamepadKeyCode VirtualKey;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_keystroke</doc-id>
        /// <unmanaged>Unicode</unmanaged>
        /// <unmanaged-short>Unicode</unmanaged-short>
        public System.Char Unicode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_keystroke</doc-id>
        /// <unmanaged>Flags</unmanaged>
        /// <unmanaged-short>Flags</unmanaged-short>
        public SharpDX.XInput.KeyStrokeFlags Flags;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_keystroke</doc-id>
        /// <unmanaged>UserIndex</unmanaged>
        /// <unmanaged-short>UserIndex</unmanaged-short>
        public SharpDX.XInput.UserIndex UserIndex;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_keystroke</doc-id>
        /// <unmanaged>HidCode</unmanaged>
        /// <unmanaged-short>HidCode</unmanaged-short>
        public System.Byte HidCode;
    }

    /// <summary>
    /// <p>Represents the state of a controller.</p>
    /// </summary>
    /// <remarks>
    /// <p>The <em>dwPacketNumber</em> member is incremented only if the status of the controller has changed since the controller was last polled. </p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.reference.xinput_state</doc-id>
    /// <unmanaged>XINPUT_STATE</unmanaged>
    /// <unmanaged-short>XINPUT_STATE</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct State
    {
        /// <summary>
        /// <dd> <p>State packet number. The packet number indicates whether there have been any changes in the state of the controller. If the <em>dwPacketNumber</em> member is the same in sequentially returned <strong><see cref = "SharpDX.XInput.State"/></strong> structures, the controller state has not changed.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_state</doc-id>
        /// <unmanaged>dwPacketNumber</unmanaged>
        /// <unmanaged-short>dwPacketNumber</unmanaged-short>
        public System.Int32 PacketNumber;
        /// <summary>
        /// <dd> <p> <strong><see cref = "SharpDX.XInput.Gamepad"/></strong> structure containing the current state of an Xbox 360 Controller.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_state</doc-id>
        /// <unmanaged>Gamepad</unmanaged>
        /// <unmanaged-short>Gamepad</unmanaged-short>
        public SharpDX.XInput.Gamepad Gamepad;
    }

    /// <summary>
    /// <p>Specifies motor speed levels for the vibration function of a controller.</p>
    /// </summary>
    /// <remarks>
    /// <p>The left motor is the low-frequency rumble motor. The right motor is the high-frequency rumble motor. The two motors are not the same, and they create different vibration effects.</p>
    /// </remarks>
    /// <doc-id>microsoft.directx_sdk.reference.xinput_vibration</doc-id>
    /// <unmanaged>XINPUT_VIBRATION</unmanaged>
    /// <unmanaged-short>XINPUT_VIBRATION</unmanaged-short>
    public partial struct Vibration
    {
        /// <summary>
        /// <dd> <p>Speed of the left motor. Valid values are in the range 0 to 65,535. Zero signifies no motor use; 65,535 signifies 100 percent motor use.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_vibration</doc-id>
        /// <unmanaged>wLeftMotorSpeed</unmanaged>
        /// <unmanaged-short>wLeftMotorSpeed</unmanaged-short>
        public System.UInt16 LeftMotorSpeed;
        /// <summary>
        /// <dd> <p>Speed of the right motor. Valid values are in the range 0 to 65,535. Zero signifies no motor use; 65,535 signifies 100 percent motor use.</p> </dd>
        /// </summary>
        /// <doc-id>microsoft.directx_sdk.reference.xinput_vibration</doc-id>
        /// <unmanaged>wRightMotorSpeed</unmanaged>
        /// <unmanaged-short>wRightMotorSpeed</unmanaged-short>
        public System.UInt16 RightMotorSpeed;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.Int16 LeftMotorSpeed;
            public System.Int16 RightMotorSpeed;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            LeftMotorSpeed = (System.UInt16)@ref.LeftMotorSpeed;
            RightMotorSpeed = (System.UInt16)@ref.RightMotorSpeed;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.LeftMotorSpeed = (System.Int16)LeftMotorSpeed;
            @ref.RightMotorSpeed = (System.Int16)RightMotorSpeed;
        }
    }
}