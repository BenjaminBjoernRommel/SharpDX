// <auto-generated/>

namespace SharpDX.MediaFoundation
{
    [System.Runtime.InteropServices.GuidAttribute("7FEE9E9A-4A89-47a6-899C-B6A53A70FB67")]
    public partial class Activate : SharpDX.MediaFoundation.MediaAttributes
    {
        public Activate(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Activate(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Activate(nativePtr);
        /// <summary>
        /// <p> Creates the object associated with this activation object. </p>
        /// </summary>
        /// <param name = "riid"><dd> <p> Interface identifier (IID) of the requested interface. </p> </dd></param>
        /// <param name = "vOut"><dd> <p> Receives a reference to the requested interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Some Microsoft Media Foundation objects must be shut down before being released. If so, the caller is responsible for shutting down the object that is returned in <em>ppv</em>. To shut down the object, do one of the following:</p><ul> <li>Call <strong>IMFActivate::ShutdownObject</strong> on the activation object, or</li> <li>Call the object-specific shutdown method. This method will depend on the type of object. Possibilities include:<ul> <li>Media sources: Call <strong>IMFMediaSource::Shutdown</strong>.</li> <li>Media sinks: Call <strong>IMFMediaSink::Shutdown</strong>.</li> <li>Any object that supports the <strong><see cref = "SharpDX.MediaFoundation.Shutdownable"/></strong> interface: Call <strong>IMFShutdown::Shutdown</strong>.</li> </ul> </li> </ul><p>The <strong>IMFActivate::ShutdownObject</strong> method is generic to all object types. If the object does not require a shutdown method, <strong>ShutdownObject</strong> succeeds and has no effect. If you do not know the specific shutdown method for the object (or do not know the object type), call <strong>IMFActivate::ShutdownObject</strong>.</p><p> After the first call to <strong>ActivateObject</strong>, subsequent calls return a reference to the same instance, until the client calls either <strong>ShutdownObject</strong> or <strong>IMFActivate::DetachObject</strong>. </p>
        /// </remarks>
        /// <doc-id>ms694292</doc-id>
        /// <unmanaged>HRESULT IMFActivate::ActivateObject([In] const GUID&amp; riid,[Out] void** ppv)</unmanaged>
        /// <unmanaged-short>IMFActivate::ActivateObject</unmanaged-short>
        public unsafe void ActivateObject(System.Guid riid, out System.IntPtr vOut)
        {
            SharpDX.Result __result__;
            fixed (void *vOut_ = &vOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &riid, vOut_, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Shuts down the created object.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If you create an object by calling <strong>IMFActivate::ActivateObject</strong>, call <strong>ShutdownObject</strong> when you are done using the object.</p><p>The component that calls <strong>ActivateObject</strong>?not the component that creates the activation object?is responsible for calling <strong>ShutdownObject</strong>. For example, in a typical playback application, the application creates activation objects for the media sinks, but the Media Session calls <strong>ActivateObject</strong>. Therefore the Media Session, not the application, calls <strong>ShutdownObject</strong>.</p><p>After <strong>ShutdownObject</strong> is called, the activation object releases all of its internal references to the created object. If you call <strong>ActivateObject</strong> again, the activation object will create a new instance of the other object.</p>
        /// </remarks>
        /// <doc-id>ms695228</doc-id>
        /// <unmanaged>HRESULT IMFActivate::ShutdownObject()</unmanaged>
        /// <unmanaged-short>IMFActivate::ShutdownObject</unmanaged-short>
        public unsafe void ShutdownObject()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Detaches the created object from the activation object.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p>Not implemented.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The activation object releases all of its internal references to the created object. If you call <strong>ActivateObject</strong> again, the activation object will create a new instance of the other object.</p><p>The <strong>DetachObject</strong> method does not shut down the created object. If the <strong>DetachObject</strong> method succeeds, the client must shut down the created object. This rule applies only to objects that have a shutdown method or that support the <strong><see cref = "SharpDX.MediaFoundation.Shutdownable"/></strong> interface. See the remarks for <strong>IMFActivate::ActivateObject</strong>.</p><p>Implementation of this method is optional. If the activation object does not support this method, the method returns E_NOTIMPL.</p>
        /// </remarks>
        /// <doc-id>aa367342</doc-id>
        /// <unmanaged>HRESULT IMFActivate::DetachObject()</unmanaged>
        /// <unmanaged-short>IMFActivate::DetachObject</unmanaged-short>
        public unsafe void DetachObject()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("B1DCA5CD-D5DA-4451-8E9E-DB5C59914EAD")]
    public partial class ASFContentInfo : SharpDX.ComObject
    {
        public ASFContentInfo(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ASFContentInfo(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ASFContentInfo(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves an Advanced Systems Format (ASF) profile that describes the ASF content.</p>
        /// </summary>
        /// <remarks>
        /// <p>The profile is set by calling either <strong>IMFASFContentInfo::SetProfile</strong> or <strong>IMFASFContentInfo::ParseHeader</strong>.</p><p>The ASF profile object returned by this method does not include any of the <strong>MF_PD_ASF_xxx</strong> attributes (see Presentation Descriptor Attributes). To get these attributes, do the following:</p><ol> <li> <p>Call <strong>IMFASFContentInfo::GeneratePresentationDescriptor</strong> to get the ASF presentation descriptor. You can query the presentation descriptor for the <strong>MF_PD_ASF_xxx</strong> attributes.</p> </li> <li> <p>(Optional.) Call <strong>MFCreateASFProfileFromPresentationDescriptor</strong> to convert the presentation descriptor into an ASF profile. The profile object created by this function contains the <strong>MF_PD_ASF_xxx</strong> attributes.</p> </li> </ol><p>An ASF profile is a template for file encoding, and is intended mainly for creating ASF content. If you are reading an existing ASF file, it is recommended that you use the presentation descriptor to get information about the file. One exception is that the profile contains the mutual exclusion and stream prioritization objects, which are not exposed directly from the presentation descriptor.</p>
        /// </remarks>
        /// <doc-id>ms698931</doc-id>
        /// <unmanaged>GetProfile / SetProfile</unmanaged>
        /// <unmanaged-short>GetProfile</unmanaged-short>
        public SharpDX.MediaFoundation.ASFProfile Profile
        {
            get
            {
                GetProfile(out var __output__);
                return __output__;
            }

            set => SetProfile(value);
        }

        /// <summary>
        /// <p> Retrieves the size of the header section of an Advanced Systems Format (ASF) file. </p>
        /// </summary>
        /// <param name = "iStartOfContentRef"><dd> <p>The <strong><see cref = "SharpDX.MediaFoundation.MediaBuffer"/></strong> interface of a buffer object containing the beginning of ASF content. The size of the valid data in the buffer must be at least MFASF_MIN_HEADER_BYTES in bytes.</p> </dd></param>
        /// <param name = "cbHeaderSize"><dd> <p>Receives the size, in bytes, of the header section of the content. The value includes the size of the ASF Header Object plus the size of the header section of the Data Object. Therefore, the resulting value is the offset to the start of the data packets in the ASF Data Object.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "AsfInvalidData"/></strong></dt> </dl> </td><td> <p> The buffer does not contain valid ASF data. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "BufferTooSmall"/></strong></dt> </dl> </td><td> <p> The buffer does not contain enough valid data. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The header of an ASF file or stream can be passed to the <strong>IMFASFContentInfo::ParseHeader</strong> method to populate the ContentInfo object with the header information.</p>
        /// </remarks>
        /// <doc-id>ms703043</doc-id>
        /// <unmanaged>HRESULT IMFASFContentInfo::GetHeaderSize([In] IMFMediaBuffer* pIStartOfContent,[In] unsigned longlong* cbHeaderSize)</unmanaged>
        /// <unmanaged-short>IMFASFContentInfo::GetHeaderSize</unmanaged-short>
        public unsafe void GetHeaderSize(SharpDX.MediaFoundation.MediaBuffer iStartOfContentRef, System.Int64 cbHeaderSize)
        {
            System.IntPtr iStartOfContentRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iStartOfContentRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaBuffer>(iStartOfContentRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iStartOfContentRef_, &cbHeaderSize, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Parses the information in an ASF header and uses that information to set values in the ContentInfo object. You can pass the entire header in a single buffer or send it in several pieces.</p>
        /// </summary>
        /// <param name = "iHeaderBufferRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaBuffer"/></strong> interface of a buffer object containing some or all of the header. The buffer must contain at least 30 bytes, which is the size of the Header Object, not including the objects contained in the Header Object (that is, everything up to and including the Reserved2 field in the Header Object).</p> </dd></param>
        /// <param name = "cbOffsetWithinHeader"><dd> <p>Offset, in bytes, of the first byte in the buffer relative to the beginning of the header.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The header is completely parsed and validated.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "AsfInvalidData"/></strong></dt> </dl> </td><td> <p>The input buffer does not contain valid ASF data.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "BufferTooSmall"/></strong></dt> </dl> </td><td> <p>The input buffer is to small.</p> </td></tr> <tr><td> <dl> <dt><strong>MF_S_ASF_PARSEINPROGRESS</strong></dt> </dl> </td><td> <p>The method succeeded, but the header passed was incomplete. This is the successful return code for all calls but the last one when passing the header in pieces.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If you pass the header in pieces, the ContentInfo object will keep references to the buffer objects until the entire header is parsed. Therefore, do not write over the buffers passed into this method.</p><p>The start of the Header object has the following layout in memory:</p><table> <tr><th>Field Name</th><th>Size in bytes</th></tr> <tr><td>Object ID</td><td>16</td></tr> <tr><td>Object Size</td><td>8</td></tr> <tr><td>Number of Header Objects</td><td>4</td></tr> <tr><td>Reserved1</td><td>1</td></tr> <tr><td>Reserved2</td><td>1</td></tr> </table><p>?</p><p>The first call to <strong>ParseHeader</strong> reads everything up to and including Rerserved2, so it requires a minimum of 30 bytes. (Note that the <strong>IMFASFContentInfo::GetHeaderSize</strong> method reads only the Object ID and Object Size fields, so that method requires a minimum of 24 bytes.)</p>
        /// </remarks>
        /// <doc-id>ms694306</doc-id>
        /// <unmanaged>HRESULT IMFASFContentInfo::ParseHeader([In] IMFMediaBuffer* pIHeaderBuffer,[In] unsigned longlong cbOffsetWithinHeader)</unmanaged>
        /// <unmanaged-short>IMFASFContentInfo::ParseHeader</unmanaged-short>
        public unsafe void ParseHeader(SharpDX.MediaFoundation.MediaBuffer iHeaderBufferRef, System.Int64 cbOffsetWithinHeader)
        {
            System.IntPtr iHeaderBufferRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iHeaderBufferRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaBuffer>(iHeaderBufferRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iHeaderBufferRef_, cbOffsetWithinHeader, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Encodes the data in the <strong>MFASFContentInfo</strong> object into a binary Advanced Systems Format (ASF) header.</p>
        /// </summary>
        /// <param name = "iHeaderRef"><dd> <p> A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaBuffer"/></strong> interface of the buffer object that will receive the encoded header. Set to <strong><c>null</c></strong> to retrieve the size of the header. </p> </dd></param>
        /// <param name = "cbHeaderRef"><dd> <p> Size of the encoded ASF header in bytes. If <em>pIHeader</em> is <strong><c>null</c></strong>, this value is set to the buffer size required to hold the encoded header. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p> The ASF Header Objects do not exist for the media that the ContentInfo object holds reference to. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "AsfInvalidData"/></strong></dt> </dl> </td><td> <p> The ASF Header Object size exceeds 10 MB. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "BufferTooSmall"/></strong></dt> </dl> </td><td> <p> The buffer passed in <em>pIHeader</em> is not large enough to hold the ASF Header Object information. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The size received in the <em>pcbHeader</em> parameter includes the padding size. The content information shrinks or expands the padding data depending on the size of the ASF Header Objects.</p><p>During this call, the stream properties are set based on the encoding properties of the profile. These properties are available through the <strong><see cref = "SharpDX.MediaFoundation.Metadata"/></strong> interface.</p>
        /// </remarks>
        /// <doc-id>ms701575</doc-id>
        /// <unmanaged>HRESULT IMFASFContentInfo::GenerateHeader([In] IMFMediaBuffer* pIHeader,[In] DWORD* pcbHeader)</unmanaged>
        /// <unmanaged-short>IMFASFContentInfo::GenerateHeader</unmanaged-short>
        public unsafe void GenerateHeader(SharpDX.MediaFoundation.MediaBuffer iHeaderRef, System.Int32 cbHeaderRef)
        {
            System.IntPtr iHeaderRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iHeaderRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaBuffer>(iHeaderRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iHeaderRef_, &cbHeaderRef, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves an Advanced Systems Format (ASF) profile that describes the ASF content.</p>
        /// </summary>
        /// <param name = "iProfileOut"><dd> <p>Receives an <strong><see cref = "SharpDX.MediaFoundation.ASFProfile"/></strong> interface reference. The caller must release the interface. If the object does not have an ASF profile, this parameter receives the value <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The profile is set by calling either <strong>IMFASFContentInfo::SetProfile</strong> or <strong>IMFASFContentInfo::ParseHeader</strong>.</p><p>The ASF profile object returned by this method does not include any of the <strong>MF_PD_ASF_xxx</strong> attributes (see Presentation Descriptor Attributes). To get these attributes, do the following:</p><ol> <li> <p>Call <strong>IMFASFContentInfo::GeneratePresentationDescriptor</strong> to get the ASF presentation descriptor. You can query the presentation descriptor for the <strong>MF_PD_ASF_xxx</strong> attributes.</p> </li> <li> <p>(Optional.) Call <strong>MFCreateASFProfileFromPresentationDescriptor</strong> to convert the presentation descriptor into an ASF profile. The profile object created by this function contains the <strong>MF_PD_ASF_xxx</strong> attributes.</p> </li> </ol><p>An ASF profile is a template for file encoding, and is intended mainly for creating ASF content. If you are reading an existing ASF file, it is recommended that you use the presentation descriptor to get information about the file. One exception is that the profile contains the mutual exclusion and stream prioritization objects, which are not exposed directly from the presentation descriptor.</p>
        /// </remarks>
        /// <doc-id>ms698931</doc-id>
        /// <unmanaged>HRESULT IMFASFContentInfo::GetProfile([In] IMFASFProfile** ppIProfile)</unmanaged>
        /// <unmanaged-short>IMFASFContentInfo::GetProfile</unmanaged-short>
        internal unsafe void GetProfile(out SharpDX.MediaFoundation.ASFProfile iProfileOut)
        {
            System.IntPtr iProfileOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &iProfileOut_, (*(void ***)this._nativePointer)[6]);
            if (iProfileOut_ != System.IntPtr.Zero)
                iProfileOut = new SharpDX.MediaFoundation.ASFProfile(iProfileOut_);
            else
                iProfileOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Uses profile data from a profile object to configure settings in the ContentInfo object.</p>
        /// </summary>
        /// <param name = "iProfileRef"><dd> <p>The <strong><see cref = "SharpDX.MediaFoundation.ASFProfile"/></strong> interface of the profile object.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If there is already information in the ContentInfo object when this method is called, it is replaced by the information from the profile object.</p>
        /// </remarks>
        /// <doc-id>ms699846</doc-id>
        /// <unmanaged>HRESULT IMFASFContentInfo::SetProfile([In] IMFASFProfile* pIProfile)</unmanaged>
        /// <unmanaged-short>IMFASFContentInfo::SetProfile</unmanaged-short>
        internal unsafe void SetProfile(SharpDX.MediaFoundation.ASFProfile iProfileRef)
        {
            System.IntPtr iProfileRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iProfileRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.ASFProfile>(iProfileRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iProfileRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Creates a presentation descriptor for ASF content.</p>
        /// </summary>
        /// <param name = "iPresentationDescriptorOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.PresentationDescriptor"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms704860</doc-id>
        /// <unmanaged>HRESULT IMFASFContentInfo::GeneratePresentationDescriptor([In] IMFPresentationDescriptor** ppIPresentationDescriptor)</unmanaged>
        /// <unmanaged-short>IMFASFContentInfo::GeneratePresentationDescriptor</unmanaged-short>
        public unsafe void GeneratePresentationDescriptor(out SharpDX.MediaFoundation.PresentationDescriptor iPresentationDescriptorOut)
        {
            System.IntPtr iPresentationDescriptorOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &iPresentationDescriptorOut_, (*(void ***)this._nativePointer)[8]);
            if (iPresentationDescriptorOut_ != System.IntPtr.Zero)
                iPresentationDescriptorOut = new SharpDX.MediaFoundation.PresentationDescriptor(iPresentationDescriptorOut_);
            else
                iPresentationDescriptorOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves a property store that can be used to set encoding properties.</p>
        /// </summary>
        /// <param name = "wStreamNumber"><dd> <p>Stream number to configure. Set to zero to configure file-level encoding properties.</p> </dd></param>
        /// <param name = "iStoreOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.ComObject"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms704750</doc-id>
        /// <unmanaged>HRESULT IMFASFContentInfo::GetEncodingConfigurationPropertyStore([In] unsigned short wStreamNumber,[In] IPropertyStore** ppIStore)</unmanaged>
        /// <unmanaged-short>IMFASFContentInfo::GetEncodingConfigurationPropertyStore</unmanaged-short>
        public unsafe void GetEncodingConfigurationPropertyStore(System.Int16 wStreamNumber, out SharpDX.ComObject iStoreOut)
        {
            System.IntPtr iStoreOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, wStreamNumber, &iStoreOut_, (*(void ***)this._nativePointer)[9]);
            if (iStoreOut_ != System.IntPtr.Zero)
                iStoreOut = new SharpDX.ComObject(iStoreOut_);
            else
                iStoreOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("53590F48-DC3B-4297-813F-787761AD7B3E")]
    public partial class ASFIndexer : SharpDX.ComObject
    {
        public ASFIndexer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ASFIndexer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ASFIndexer(nativePtr);
        /// <summary>
        /// <p> </p><p>Sets indexer options.</p>
        /// </summary>
        /// <param name = "dwFlags"><dd> <p>Bitwise OR of zero or more flags from the <strong>MFASF_INDEXER_FLAGS</strong> enumeration specifying the indexer options to use.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The indexer object was  initialized before setting flags for it.  For more information, see Remarks.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p><strong>IMFASFIndexer::SetFlags</strong> must be called before <strong>IMFASFIndexer::Initialize</strong>. Attempting to call <strong>SetFlags</strong> after <strong>Initialize</strong> will return <see cref = "InvalidRequest"/> as a result.</p>
        /// </remarks>
        /// <doc-id>ms699840</doc-id>
        /// <unmanaged>HRESULT IMFASFIndexer::SetFlags([In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IMFASFIndexer::SetFlags</unmanaged-short>
        public unsafe void SetFlags(System.Int32 dwFlags)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwFlags, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the flags that indicate the selected indexer options.</p>
        /// </summary>
        /// <param name = "dwFlagsRef"><dd> <p>Receives a bitwise OR of zero or more flags from the <strong>MFASF_INDEXER_FLAGS</strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><em>pdwFlags</em> is <strong><c>null</c></strong>.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You must call this method before initializing the indexer object with <strong>IMFASFIndexer::Initialize</strong>.</p>
        /// </remarks>
        /// <doc-id>ms701578</doc-id>
        /// <unmanaged>HRESULT IMFASFIndexer::GetFlags([In] DWORD* pdwFlags)</unmanaged>
        /// <unmanaged-short>IMFASFIndexer::GetFlags</unmanaged-short>
        public unsafe void GetFlags(System.Int32 dwFlagsRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &dwFlagsRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Initializes the indexer object. This method reads information in a ContentInfo object about the configuration of the content and the properties of the existing index, if present. Use this method before using the indexer for either writing or reading an index. You must make this call before using any of the other methods of the <strong><see cref = "SharpDX.MediaFoundation.ASFIndexer"/></strong> interface.</p>
        /// </summary>
        /// <param name = "iContentInfoRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "AsfInvalidData"/></strong></dt> </dl> </td><td> <p>Invalid ASF data.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Unexpected"/></strong></dt> </dl> </td><td> <p>Unexpected error.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The indexer needs to examine the data in the ContentInfo object to properly write or read the index for the content. The indexer will not make changes to the content information and will not hold any references to the <strong><see cref = "SharpDX.MediaFoundation.ASFContentInfo"/></strong> interface.</p><p>In the ASF header, the maximum data-packet size must equal the minimum data-packet size. Otherwise, the method returns <strong><see cref = "Unexpected"/></strong>.</p>
        /// </remarks>
        /// <doc-id>ms703030</doc-id>
        /// <unmanaged>HRESULT IMFASFIndexer::Initialize([In] IMFASFContentInfo* pIContentInfo)</unmanaged>
        /// <unmanaged-short>IMFASFIndexer::Initialize</unmanaged-short>
        public unsafe void Initialize(SharpDX.MediaFoundation.ASFContentInfo iContentInfoRef)
        {
            System.IntPtr iContentInfoRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iContentInfoRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.ASFContentInfo>(iContentInfoRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iContentInfoRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the offset of the index object from the start of the content.</p>
        /// </summary>
        /// <param name = "iContentInfoRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.ASFContentInfo"/></strong> interface of the ContentInfo object that describes the content.</p> </dd></param>
        /// <param name = "cbIndexOffsetRef"><dd> <p>Receives the offset of the index relative to the beginning of the content described by the ContentInfo object. This is the position relative to the beginning of the ASF file.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><em>pIContentInfo</em> is <strong><c>null</c></strong> or <em>pcbIndexOffset</em> is <strong><c>null</c></strong></p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The index continues from the offset retrieved by this method to the end of the file.</p><p>You must call <strong>IMFASFIndexer::Initialize</strong> to set up the indexer before calling this method.</p><p>If the index is retrieved by using more than one call to <strong>IMFASFIndexer::GetCompletedIndex</strong>, the position of individual index portions is equal to the index offset plus the offset of the portion within the index.</p>
        /// </remarks>
        /// <doc-id>ms699858</doc-id>
        /// <unmanaged>HRESULT IMFASFIndexer::GetIndexPosition([In] IMFASFContentInfo* pIContentInfo,[In] unsigned longlong* pcbIndexOffset)</unmanaged>
        /// <unmanaged-short>IMFASFIndexer::GetIndexPosition</unmanaged-short>
        public unsafe void GetIndexPosition(SharpDX.MediaFoundation.ASFContentInfo iContentInfoRef, System.Int64 cbIndexOffsetRef)
        {
            System.IntPtr iContentInfoRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iContentInfoRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.ASFContentInfo>(iContentInfoRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iContentInfoRef_, &cbIndexOffsetRef, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Adds byte streams to be indexed.</p>
        /// </summary>
        /// <param name = "iByteStreamsOut"><dd> <p>An array of <strong><see cref = "SharpDX.MediaFoundation.IByteStream"/></strong> interface references. To get the byte stream, call <strong>MFCreateASFIndexerByteStream</strong>.</p> </dd></param>
        /// <param name = "cByteStreams"><dd> <p>The number of references in the <em>ppIByteStreams</em> array.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "AlreadyInitializeD"/></strong></dt> </dl> </td><td> <p>The indexer object has already been initialized and it  has packets which have been indexed.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>For a reading scenario, only one byte stream should be used by the indexer object. For an index generating scenario, it depends how many index objects are needed to be generated. </p>
        /// </remarks>
        /// <doc-id>ms704843</doc-id>
        /// <unmanaged>HRESULT IMFASFIndexer::SetIndexByteStreams([In] IMFByteStream** ppIByteStreams,[In] DWORD cByteStreams)</unmanaged>
        /// <unmanaged-short>IMFASFIndexer::SetIndexByteStreams</unmanaged-short>
        public unsafe void SetIndexByteStreams(out SharpDX.MediaFoundation.IByteStream iByteStreamsOut, System.Int32 cByteStreams)
        {
            System.IntPtr iByteStreamsOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &iByteStreamsOut_, cByteStreams, (*(void ***)this._nativePointer)[7]);
            if (iByteStreamsOut_ != System.IntPtr.Zero)
                iByteStreamsOut = new SharpDX.MediaFoundation.ByteStream(iByteStreamsOut_);
            else
                iByteStreamsOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of byte streams that are  in use by the  indexer object.</p>
        /// </summary>
        /// <param name = "cByteStreamsRef"><dd> <p>Receives the number of byte streams that are  in use by the indexer object.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><em>pcByteStreams</em> is <strong><c>null</c></strong>.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms701789</doc-id>
        /// <unmanaged>HRESULT IMFASFIndexer::GetIndexByteStreamCount([In] DWORD* pcByteStreams)</unmanaged>
        /// <unmanaged-short>IMFASFIndexer::GetIndexByteStreamCount</unmanaged-short>
        public unsafe void GetIndexByteStreamCount(System.Int32 cByteStreamsRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &cByteStreamsRef, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the index settings for a specified stream and index type.</p>
        /// </summary>
        /// <param name = "indexIdentifierRef"><dd> <p>Pointer to an <strong><see cref = "SharpDX.MediaFoundation.AsfIndexIdentifier"/></strong> structure that contains the stream number and index type for which to get the status.</p> </dd></param>
        /// <param name = "fIsIndexedRef"><dd> <p>A variable that retrieves a Boolean value specifying whether the index described by <em>pIndexIdentifier</em> has been created.</p> </dd></param>
        /// <param name = "bIndexDescriptorRef"><dd> <p>A buffer that receives the index descriptor. The index descriptor consists of an <strong><see cref = "SharpDX.MediaFoundation.AsfIndexDescriptor"/></strong> structure, optionally followed by index-specific data.</p> </dd></param>
        /// <param name = "cbIndexDescriptorRef"><dd> <p>On input, specifies the size, in bytes, of the buffer that <em>pbIndexDescriptor</em> points to. The value can be zero if <em>pbIndexDescriptor</em> is <strong><c>null</c></strong>. On output, receives the size of the index descriptor, in bytes.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "BufferTooSmall"/></strong></dt> </dl> </td><td> <p>The buffer size specified in <em>pcbIndexDescriptor</em> is too small.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To read an existing ASF index, call <strong>IMFASFIndexer::SetIndexByteStreams</strong> before calling this method.</p><p>If an index exists for the stream and the value passed into <em>pcbIndexDescriptor</em> is smaller than the required size of the <em>pbIndexDescriptor</em> buffer, the method returns <see cref = "BufferTooSmall"/>. The required buffer size is returned in the <em>pcbIndexDescriptor</em> parameter.</p><p>If there is no index for the specified stream, the method returns <strong><see cref = "SharpDX.Result.False"/></strong> in the <em>pfIsIndexed</em> parameter.</p>
        /// </remarks>
        /// <doc-id>ms704012</doc-id>
        /// <unmanaged>HRESULT IMFASFIndexer::GetIndexStatus([In] ASF_INDEX_IDENTIFIER* pIndexIdentifier,[In] BOOL* pfIsIndexed,[In] unsigned char* pbIndexDescriptor,[In] DWORD* pcbIndexDescriptor)</unmanaged>
        /// <unmanaged-short>IMFASFIndexer::GetIndexStatus</unmanaged-short>
        public unsafe void GetIndexStatus(ref SharpDX.MediaFoundation.AsfIndexIdentifier indexIdentifierRef, SharpDX.Mathematics.Interop.RawBool fIsIndexedRef, System.Byte bIndexDescriptorRef, System.Int32 cbIndexDescriptorRef)
        {
            SharpDX.Result __result__;
            fixed (void *indexIdentifierRef_ = &indexIdentifierRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, indexIdentifierRef_, &fIsIndexedRef, &bIndexDescriptorRef, &cbIndexDescriptorRef, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Configures the index for a stream.</p>
        /// </summary>
        /// <param name = "bIndexDescriptorRef"><dd> <p>The index descriptor to set. The index descriptor is an <strong><see cref = "SharpDX.MediaFoundation.AsfIndexDescriptor"/></strong> structure, optionally followed by index-specific data.</p> </dd></param>
        /// <param name = "cbIndexDescriptor"><dd> <p>The size, in bytes, of the index descriptor.</p> </dd></param>
        /// <param name = "fGenerateIndex"><dd> <p>A Boolean value. Set to <strong>TRUE</strong> to have the indexer create an index of the type specified for the stream specified in the index descriptor.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>At attempt was made to change the index status in a seek-only scenario. For more information, see Remarks.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You must make all calls to <strong>SetIndexStatus</strong> before making any calls to <strong>IMFASFIndexer::GenerateIndexEntries</strong>.</p><p>The indexer object is configured to create temporal indexes for each stream by default. Call this method only if you want to override the default settings.</p><p>You cannot use this method in an index reading scenario.  You can only use this method when writing indexes.</p>
        /// </remarks>
        /// <doc-id>ms702981</doc-id>
        /// <unmanaged>HRESULT IMFASFIndexer::SetIndexStatus([In] unsigned char* pbIndexDescriptor,[In] DWORD cbIndexDescriptor,[In] BOOL fGenerateIndex)</unmanaged>
        /// <unmanaged-short>IMFASFIndexer::SetIndexStatus</unmanaged-short>
        public unsafe void SetIndexStatus(System.Byte bIndexDescriptorRef, System.Int32 cbIndexDescriptor, SharpDX.Mathematics.Interop.RawBool fGenerateIndex)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, &bIndexDescriptorRef, cbIndexDescriptor, fGenerateIndex, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Given a desired seek time, gets the offset from which the client should start reading data. </p>
        /// </summary>
        /// <param name = "varValueRef"><dd> <p> The value of the index entry for which to get the position. The format of this value varies depending on the type of index, which is specified in the index identifier. For time-based indexing, the variant type is <strong>VT_I8</strong> and the value is the desired seek time, in 100-nanosecond units. </p> </dd></param>
        /// <param name = "indexIdentifierRef"><dd> <p> Pointer to an <strong><see cref = "SharpDX.MediaFoundation.AsfIndexIdentifier"/></strong> structure that identifies the stream number and index type. </p> </dd></param>
        /// <param name = "cbOffsetWithinDataRef"><dd> <p> Receives the offset within the data segment of the ASF Data Object. The offset is in bytes, and is relative to the start of packet 0. The offset gives the starting location from which the client should begin reading from the stream. This location might not correspond exactly to the requested seek time. </p> <p> For reverse playback, if no key frame exists after the desired seek position, this parameter receives the value <strong>MFASFINDEXER_READ_FOR_REVERSEPLAYBACK_OUTOFDATASEGMENT</strong>. In that case, the seek position should be 1 byte pass the end of the data segment. </p> </dd></param>
        /// <param name = "hnsApproxTimeRef"><dd> <p> Receives the approximate time stamp of the data that is located at the offset returned in the <em>pcbOffsetWithinData</em> parameter. The accuracy of this value is equal to the indexing interval of the ASF index, typically about 1 second. </p> <ul> <li> If the index type specified in <em>pIndexIdentifier</em> is <strong>GUID_NULL</strong> (time indexing), this parameter can be <strong><c>null</c></strong>. </li> <li> For all other index types, this parameter must be <strong><c>null</c></strong>. </li> </ul> <p> If the approximate time stamp cannot be determined, this parameter receives the value <strong>MFASFINDEXER_APPROX_SEEK_TIME_UNKNOWN</strong>. </p> </dd></param>
        /// <param name = "dwPayloadNumberOfStreamWithinPacketRef"><dd> <p> Receives the payload number of the payload that contains the information for the specified stream. Packets can contain multiple payloads, each containing data for a different stream. This parameter can be <strong><c>null</c></strong>. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "AsfOufOfRange"/></strong></dt> </dl> </td><td> <p> The requested seek time is out of range. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoIndex"/></strong></dt> </dl> </td><td> <p> No index exists of the specified type for the specified stream. </p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms703125</doc-id>
        /// <unmanaged>HRESULT IMFASFIndexer::GetSeekPositionForValue([In] const PROPVARIANT* pvarValue,[In] ASF_INDEX_IDENTIFIER* pIndexIdentifier,[In] unsigned longlong* pcbOffsetWithinData,[In] longlong* phnsApproxTime,[In] DWORD* pdwPayloadNumberOfStreamWithinPacket)</unmanaged>
        /// <unmanaged-short>IMFASFIndexer::GetSeekPositionForValue</unmanaged-short>
        public unsafe void GetSeekPositionForValue(System.IntPtr varValueRef, ref SharpDX.MediaFoundation.AsfIndexIdentifier indexIdentifierRef, System.Int64 cbOffsetWithinDataRef, System.Int64 hnsApproxTimeRef, System.Int32 dwPayloadNumberOfStreamWithinPacketRef)
        {
            SharpDX.Result __result__;
            fixed (void *indexIdentifierRef_ = &indexIdentifierRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)varValueRef, indexIdentifierRef_, &cbOffsetWithinDataRef, &hnsApproxTimeRef, &dwPayloadNumberOfStreamWithinPacketRef, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Accepts an ASF packet for the file and creates index entries for them.</p>
        /// </summary>
        /// <param name = "iASFPacketSampleRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> interface of a media sample that contains the ASF packet. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>The argument passed in is <strong><c>null</c></strong>.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotInitializeD"/></strong></dt> </dl> </td><td> <p>The indexer is not initialized.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The ASF indexer creates indexes for a file internally. You can get the completed index for all data packets sent to the indexer by committing the index with <strong>IMFASFIndexer::CommitIndex</strong> and then calling <strong>IMFASFIndexer::GetCompletedIndex</strong> to write the index entries into a media buffer. To determine the size of the index so you can allocate a buffer large enough to hold the index, call <strong>IMFASFIndexer::GetIndexWriteSpace</strong>.</p><p> When this method creates index entries, they are immediately available for use by <strong>IMFASFIndexer::GetSeekPositionForValue</strong>. </p><p> The media sample specified in   <em>pIASFPacketSample</em> must hold a buffer that contains a single ASF packet. Get the sample from the  ASF multiplexer by calling the <strong>IMFASFMultiplexer::GetNextPacket</strong> method. </p><p>You cannot use this method while reading an index, only when writing an index.</p>
        /// </remarks>
        /// <doc-id>ms705660</doc-id>
        /// <unmanaged>HRESULT IMFASFIndexer::GenerateIndexEntries([In] IMFSample* pIASFPacketSample)</unmanaged>
        /// <unmanaged-short>IMFASFIndexer::GenerateIndexEntries</unmanaged-short>
        public unsafe void GenerateIndexEntries(SharpDX.MediaFoundation.Sample iASFPacketSampleRef)
        {
            System.IntPtr iASFPacketSampleRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iASFPacketSampleRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Sample>(iASFPacketSampleRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iASFPacketSampleRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Adds information about a new index to the ContentInfo object associated with ASF content. You must call this method before copying the index to the content so that the index will be readable by the indexer later.</p>
        /// </summary>
        /// <param name = "iContentInfoRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.ASFContentInfo"/></strong> interface of the ContentInfo object that describes the content.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The caller made an invalid request. For more information, see Remarks.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>For the index to function properly, you must call this method after all ASF packets in the file have been passed to the indexer by using the <strong>IMFASFIndexer::GenerateIndexEntries</strong> method. After you call this method, you must retrieve the indexes by calling <strong>GetCompletedIndex</strong> and write them to the appropriate location in the file. Finally, you must generate a new ASF header by calling the <strong>IMFASFContentInfo::GenerateHeader</strong> method of the ASF ContentInfo object.</p><p> An application must use the <strong>CommitIndex</strong> method only when writing a new index otherwise <strong>CommitIndex</strong> may return <see cref = "InvalidRequest"/> as a result. For example, <see cref = "InvalidRequest"/> is returned if the application has flags other than MFASF_INDEXER_WRITE_NEW_INDEX  set on the indexer object. <strong>CommitIndex</strong> can also return MFASF_INDEXER_WRITE_NEW_INDEX if the index entries have already been committed through an earlier <strong>CommitIndex</strong> call.</p><p>You cannot use this method in an index reading scenario.  You can only use this method when writing indexes.</p>
        /// </remarks>
        /// <doc-id>ms696994</doc-id>
        /// <unmanaged>HRESULT IMFASFIndexer::CommitIndex([In] IMFASFContentInfo* pIContentInfo)</unmanaged>
        /// <unmanaged-short>IMFASFIndexer::CommitIndex</unmanaged-short>
        public unsafe void CommitIndex(SharpDX.MediaFoundation.ASFContentInfo iContentInfoRef)
        {
            System.IntPtr iContentInfoRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iContentInfoRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.ASFContentInfo>(iContentInfoRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iContentInfoRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the size, in bytes, of the buffer required to store the completed index.</p>
        /// </summary>
        /// <param name = "cbIndexWriteSpaceRef"><dd> <p>Receives the size of the index, in bytes</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "IndexNotCommitted"/></strong></dt> </dl> </td><td> <p>The index has not been committed. For more information; see Remarks.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Use this method to get the size of the index and then allocate a buffer big enough to hold it. </p><p>The index must be committed with a call to<strong>IMFASFIndexer::CommitIndex</strong> before calling <strong>IMFASFIndexer::GetIndexWriteSpace</strong>.  If the index is not committed before <strong>GetIndexWriteSpace</strong> is called, then <see cref = "IndexNotCommitted"/> will be returned as a result. </p><p>Call <strong>IMFASFIndexer::GetCompletedIndex</strong> to write the completed index into a media buffer.</p><p>You cannot use this method in a reading scenario.  You can only use this method when writing indexes.</p>
        /// </remarks>
        /// <doc-id>ms700198</doc-id>
        /// <unmanaged>HRESULT IMFASFIndexer::GetIndexWriteSpace([In] unsigned longlong* pcbIndexWriteSpace)</unmanaged>
        /// <unmanaged-short>IMFASFIndexer::GetIndexWriteSpace</unmanaged-short>
        public unsafe void GetIndexWriteSpace(System.Int64 cbIndexWriteSpaceRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &cbIndexWriteSpaceRef, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the completed index from the ASF indexer object.</p>
        /// </summary>
        /// <param name = "iIndexBufferRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaBuffer"/></strong> interface of a media buffer that receives the index data.</p> </dd></param>
        /// <param name = "cbOffsetWithinIndex"><dd> <p>The offset of the data to be retrieved, in bytes from the start of the index data. Set to 0 for the first call. If subsequent calls are needed (the buffer is not large enough to hold the entire index), set to the byte following the last one retrieved.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "IndexNotCommitted"/></strong></dt> </dl> </td><td> <p>The index was not committed before attempting to get the completed index. For more information, see Remarks.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method uses as much of the buffer as possible, and updates the length of the buffer appropriately.</p><p>If <em>pIIndexBuffer</em> is large enough to contain the entire buffer, <em>cbOffsetWithinIndex</em> should be 0, and the call needs to be made only once. Otherwise, there should be no gaps between successive buffers.</p><p>The user must write this data to the content at <em>cbOffsetFromIndexStart</em> bytes after the end of the ASF data object. You can call <strong>IMFASFIndexer::GetIndexPosition</strong> to determine the start position of the ASF index.</p><p>This call will not succeed unless <strong>IMFASFIndexer::CommitIndex</strong> has been called. After calling <strong>GetCompletedIndex</strong>, the caller must call <strong>IMFASFContentInfo::GenerateHeader</strong> and overwrite the existing ASF header with the new header; otherwise, the ASF header will not match the content, and the file is not guaranteed to play correctly.</p><p>You cannot use this method in an index reading scenario.  You can only use this method when writing indexes.</p>
        /// </remarks>
        /// <doc-id>ms702077</doc-id>
        /// <unmanaged>HRESULT IMFASFIndexer::GetCompletedIndex([In] IMFMediaBuffer* pIIndexBuffer,[In] unsigned longlong cbOffsetWithinIndex)</unmanaged>
        /// <unmanaged-short>IMFASFIndexer::GetCompletedIndex</unmanaged-short>
        public unsafe void GetCompletedIndex(SharpDX.MediaFoundation.MediaBuffer iIndexBufferRef, System.Int64 cbOffsetWithinIndex)
        {
            System.IntPtr iIndexBufferRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iIndexBufferRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaBuffer>(iIndexBufferRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iIndexBufferRef_, cbOffsetWithinIndex, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("57BDD80A-9B38-4838-B737-C58F670D7D4F")]
    public partial class ASFMultiplexer : SharpDX.ComObject
    {
        public ASFMultiplexer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ASFMultiplexer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ASFMultiplexer(nativePtr);
        /// <summary>
        /// <p> </p><p>Sets the maximum time by which samples from various streams can be out of synchronization. The multiplexer will not accept a sample with a time stamp that is out of synchronization with the latest samples from any other stream by an amount that exceeds the synchronization tolerance.</p>
        /// </summary>
        /// <remarks>
        /// <p>The synchronization tolerance is the maximum difference in presentation times at any given point between samples of different streams that the ASF multiplexer can accommodate. That is, if the synchronization tolerance is 3 seconds, no stream can be more than 3 seconds behind any other stream in the time stamps passed to the multiplexer. The multiplexer determines a default synchronization tolerance to use, but this method overrides it (usually to increase it). More tolerance means the potential for greater latency in the multiplexer. If the time stamps are synchronized among the streams, actual latency will be much lower than <em>msSyncTolerance</em>.</p>
        /// </remarks>
        /// <doc-id>ms697206</doc-id>
        /// <unmanaged>SetSyncTolerance</unmanaged>
        /// <unmanaged-short>SetSyncTolerance</unmanaged-short>
        public System.Int32 SyncTolerance
        {
            set => SetSyncTolerance(value);
        }

        /// <summary>
        /// <p> </p><p>Initializes the multiplexer with the data from an ASF ContentInfo object.</p>
        /// </summary>
        /// <param name = "iContentInfoRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.ASFContentInfo"/></strong> interface of the <strong>MFASFContentInfo</strong> object that contains the header information of the new ASF file. The multiplexer will generate data packets for this file.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This call must be made once at the beginning of encoding, with <em>pIContentInfo</em> pointing to the ASF ContentInfo object that describes the content to be encoded. This enables the ASF multiplexer to see, among other things, which streams will be present in the encoding session. This call typically does not affect the data in the ASF ContentInfo object.</p>
        /// </remarks>
        /// <doc-id>ms697469</doc-id>
        /// <unmanaged>HRESULT IMFASFMultiplexer::Initialize([In] IMFASFContentInfo* pIContentInfo)</unmanaged>
        /// <unmanaged-short>IMFASFMultiplexer::Initialize</unmanaged-short>
        public unsafe void Initialize(SharpDX.MediaFoundation.ASFContentInfo iContentInfoRef)
        {
            System.IntPtr iContentInfoRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iContentInfoRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.ASFContentInfo>(iContentInfoRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iContentInfoRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets multiplexer options.</p>
        /// </summary>
        /// <param name = "dwFlags"><dd> <p>Bitwise <strong>OR</strong> of zero or more members of the <strong><see cref = "SharpDX.MediaFoundation.AsfMultiplexerflags"/></strong> enumeration. These flags specify which multiplexer options to use. For more information, see "Multiplexer Initialization and Leaky Bucket Settings" in Creating the Multiplexer Object.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms703986</doc-id>
        /// <unmanaged>HRESULT IMFASFMultiplexer::SetFlags([In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IMFASFMultiplexer::SetFlags</unmanaged-short>
        public unsafe void SetFlags(System.Int32 dwFlags)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwFlags, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves flags indicating the configured multiplexer options.</p>
        /// </summary>
        /// <param name = "dwFlagsRef"><dd> <p>Receives a bitwise <strong>OR</strong> of zero or more values from the <strong><see cref = "SharpDX.MediaFoundation.AsfMultiplexerflags"/></strong> enumeration. To set these flags, call <strong>IMFASFMultiplexer::SetFlags</strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms702166</doc-id>
        /// <unmanaged>HRESULT IMFASFMultiplexer::GetFlags([In] DWORD* pdwFlags)</unmanaged>
        /// <unmanaged-short>IMFASFMultiplexer::GetFlags</unmanaged-short>
        public unsafe void GetFlags(System.Int32 dwFlagsRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &dwFlagsRef, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Delivers input samples to the multiplexer. </p>
        /// </summary>
        /// <param name = "wStreamNumber"><dd> <p> The stream number of the stream to which the sample belongs. </p> </dd></param>
        /// <param name = "iSampleRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> interface of the input sample. The input sample contains the media data to be converted to ASF data packets. When possible, the time stamp of this sample should be accurate. </p> </dd></param>
        /// <param name = "hnsTimestampAdjust"><dd> <p> The adjustment to apply to the time stamp of the sample. This parameter is used if the caller wants to shift the sample time on <em>pISample</em>. This value should be positive if the time stamp should be pushed ahead and negative if the time stamp should be pushed back. This time stamp is added to sample time on <em>pISample</em>, and the resulting time is used by the multiplexer instead of the original sample time. If no adjustment is needed, set this value to 0. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotAccepting"/></strong></dt> </dl> </td><td> <p> There are too many packets waiting to be retrieved from the multiplexer. Call <strong>IMFASFMultiplexer::GetNextPacket</strong> to get the packets.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "BandwidthOverrun"/></strong></dt> </dl> </td><td> <p> The sample that was processed violates the bandwidth limitations specified for the stream in the ASF ContentInfo object. When this error is generated, the sample is dropped. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> The value passed in <em>wStreamNumber</em> is invalid. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "LateSample"/></strong></dt> </dl> </td><td> <p> The presentation time of the input media sample is earlier than the send time. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> The application passes samples to <strong>ProcessSample</strong>, and the ASF multiplexer queues them internally until they are ready to be placed into ASF packets. Call <strong>IMFASFMultiplexer::GetNextPacket</strong> to get the ASF data packet. </p><p>After each call to <strong>ProcessSample</strong>, call <strong>GetNextPacket</strong> in a loop to get all of the available data packets. For a code example, see Generating New ASF Data Packets.</p>
        /// </remarks>
        /// <doc-id>ms696206</doc-id>
        /// <unmanaged>HRESULT IMFASFMultiplexer::ProcessSample([In] unsigned short wStreamNumber,[In] IMFSample* pISample,[In] longlong hnsTimestampAdjust)</unmanaged>
        /// <unmanaged-short>IMFASFMultiplexer::ProcessSample</unmanaged-short>
        public unsafe void ProcessSample(System.Int16 wStreamNumber, SharpDX.MediaFoundation.Sample iSampleRef, System.Int64 hnsTimestampAdjust)
        {
            System.IntPtr iSampleRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iSampleRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Sample>(iSampleRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, wStreamNumber, (void *)iSampleRef_, hnsTimestampAdjust, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the next output ASF packet from the multiplexer.</p>
        /// </summary>
        /// <param name = "dwStatusFlagsRef"><dd> <p> Receives zero or more status flags. If more than one packet is waiting, the method sets the <strong>ASF_STATUSFLAGS_INCOMPLETE</strong> flag. </p> </dd></param>
        /// <param name = "iPacketOut"><dd> <p> Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> interface of the first output sample of the data packet. The caller must release the interface. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> The client needs to call this method, ideally after every call to <strong>IMFASFMultiplexer::ProcessSample</strong>, to get the output ASF packets. Call this method in a loop as long as the <strong>ASF_STATUSFLAGS_INCOMPLETE</strong> flag is received. </p><p>If no packets are ready, the method returns <strong><see cref = "SharpDX.Result.Ok"/></strong> but does not return a sample in <em>ppIPacket</em>.</p>
        /// </remarks>
        /// <doc-id>ms696243</doc-id>
        /// <unmanaged>HRESULT IMFASFMultiplexer::GetNextPacket([Out] DWORD* pdwStatusFlags,[In] IMFSample** ppIPacket)</unmanaged>
        /// <unmanaged-short>IMFASFMultiplexer::GetNextPacket</unmanaged-short>
        public unsafe void GetNextPacket(out SharpDX.MediaFoundation.AsfStatusflags dwStatusFlagsRef, out SharpDX.MediaFoundation.Sample iPacketOut)
        {
            System.IntPtr iPacketOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (void *dwStatusFlagsRef_ = &dwStatusFlagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStatusFlagsRef_, &iPacketOut_, (*(void ***)this._nativePointer)[7]);
            if (iPacketOut_ != System.IntPtr.Zero)
                iPacketOut = new SharpDX.MediaFoundation.Sample(iPacketOut_);
            else
                iPacketOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Signals the multiplexer to process all queued output media samples. Call this method after passing the last sample to the multiplexer.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You must call <strong>Flush</strong> after the last sample has been passed into the ASF multiplexer and before you call <strong>IMFASFMultiplexer::End</strong>. This causes all output media samples in progress to be completed. After calling <strong>Flush</strong>, call <strong>IMFASFMultiplexer::GetNextPacket</strong> in a loop until all the pending media samples have been packetized.</p>
        /// </remarks>
        /// <doc-id>ms696991</doc-id>
        /// <unmanaged>HRESULT IMFASFMultiplexer::Flush()</unmanaged>
        /// <unmanaged-short>IMFASFMultiplexer::Flush</unmanaged-short>
        public unsafe void Flush()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Collects data from the multiplexer and updates the ASF ContentInfo object to include that information in the ASF Header Object.</p>
        /// </summary>
        /// <param name = "iContentInfoRef"><dd> <p>Pointer to the  <strong><see cref = "SharpDX.MediaFoundation.ASFContentInfo"/></strong> interface of the ContentInfo object. This must be the same object that was used to initialize the multiplexer. The ContentInfo object represents the ASF Header Object of the file for which the multiplexer generated data packets.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "FlushNeeded"/></strong></dt> </dl> </td><td> <p>There are pending output media samples waiting in the multiplexer. Call <strong>IMFASFMultiplexer::Flush</strong> to force the media samples to be packetized.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>For non-live encoding scenarios (such as encoding to a file), the user should call <strong>End</strong> to update the specified ContentInfo object, adding data that the multiplexer has collected during the packet generation process. The user should then call <strong>IMFASFContentInfo::GenerateHeader</strong> and write the output header at the beginning of the ASF file (overwriting the header obtained at the beginning of the encoding session). For more information, see Writing an ASF Header Object for a New File.</p><p>During live encoding, it is usually not possible to rewrite the header, so this call is not required for live encoding. (The header in those cases will simply lack some of the information that was not available until the end of the encoding session.)</p>
        /// </remarks>
        /// <doc-id>ms696172</doc-id>
        /// <unmanaged>HRESULT IMFASFMultiplexer::End([In] IMFASFContentInfo* pIContentInfo)</unmanaged>
        /// <unmanaged-short>IMFASFMultiplexer::End</unmanaged-short>
        public unsafe void End(SharpDX.MediaFoundation.ASFContentInfo iContentInfoRef)
        {
            System.IntPtr iContentInfoRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iContentInfoRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.ASFContentInfo>(iContentInfoRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iContentInfoRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves multiplexer statistics.</p>
        /// </summary>
        /// <param name = "wStreamNumber"><dd> <p>The stream number for which to obtain statistics.</p> </dd></param>
        /// <param name = "muxStatsRef"><dd> <p>Pointer to an <strong><see cref = "SharpDX.MediaFoundation.AsfMuxStatistics"/></strong> structure that receives the statistics.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697232</doc-id>
        /// <unmanaged>HRESULT IMFASFMultiplexer::GetStatistics([In] unsigned short wStreamNumber,[In] ASF_MUX_STATISTICS* pMuxStats)</unmanaged>
        /// <unmanaged-short>IMFASFMultiplexer::GetStatistics</unmanaged-short>
        public unsafe void GetStatistics(System.Int16 wStreamNumber, SharpDX.MediaFoundation.AsfMuxStatistics muxStatsRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, wStreamNumber, &muxStatsRef, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the maximum time by which samples from various streams can be out of synchronization. The multiplexer will not accept a sample with a time stamp that is out of synchronization with the latest samples from any other stream by an amount that exceeds the synchronization tolerance.</p>
        /// </summary>
        /// <param name = "msSyncTolerance"><dd> <p>Synchronization tolerance in milliseconds.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The synchronization tolerance is the maximum difference in presentation times at any given point between samples of different streams that the ASF multiplexer can accommodate. That is, if the synchronization tolerance is 3 seconds, no stream can be more than 3 seconds behind any other stream in the time stamps passed to the multiplexer. The multiplexer determines a default synchronization tolerance to use, but this method overrides it (usually to increase it). More tolerance means the potential for greater latency in the multiplexer. If the time stamps are synchronized among the streams, actual latency will be much lower than <em>msSyncTolerance</em>.</p>
        /// </remarks>
        /// <doc-id>ms697206</doc-id>
        /// <unmanaged>HRESULT IMFASFMultiplexer::SetSyncTolerance([In] DWORD msSyncTolerance)</unmanaged>
        /// <unmanaged-short>IMFASFMultiplexer::SetSyncTolerance</unmanaged-short>
        internal unsafe void SetSyncTolerance(System.Int32 msSyncTolerance)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, msSyncTolerance, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("12558291-E399-11D5-BC2A-00B0D0F3F4AB")]
    public partial class ASFMutualExclusion : SharpDX.ComObject
    {
        public ASFMutualExclusion(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ASFMutualExclusion(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ASFMutualExclusion(nativePtr);
        /// <summary>
        /// <p> </p><p>Sets the type of mutual exclusion that is represented by the Advanced Systems Format (ASF) mutual exclusion object.</p>
        /// </summary>
        /// <remarks>
        /// <p>Sometimes, content must be made mutually exclusive in more than one way. For example, a video file might contain audio streams in several bit rates for each of several languages. To handle this type of complex mutual exclusion, you must configure more than one ASF mutual exclusion object. For more information, see <strong>IMFASFMutualExclusion::AddRecord</strong>.</p>
        /// </remarks>
        /// <doc-id>ms697261</doc-id>
        /// <unmanaged>SetType</unmanaged>
        /// <unmanaged-short>SetType</unmanaged-short>
        public System.Guid Type
        {
            set => SetType(value);
        }

        /// <summary>
        /// <p> </p><p>Retrieves the type of mutual exclusion represented by the Advanced Systems Format (ASF) mutual exclusion object.</p>
        /// </summary>
        /// <param name = "guidTypeRef"><dd> <p>A variable that receives the type identifier. For a list of predefined mutual exclusion type constants, see ASF Mutual Exclusion Type GUIDs.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Sometimes, content must be made mutually exclusive in more than one way. For example, a video file might contain audio streams of several bit rates for each of several languages. To handle this type of complex mutual exclusion, you must configure more than one ASF mutual exclusion object. For more information, see <strong>IMFASFMutualExclusion::AddRecord</strong>.</p>
        /// </remarks>
        /// <doc-id>ms703095</doc-id>
        /// <unmanaged>HRESULT IMFASFMutualExclusion::GetType([In] GUID* pguidType)</unmanaged>
        /// <unmanaged-short>IMFASFMutualExclusion::GetType</unmanaged-short>
        public unsafe void GetTypeInfo(System.Guid guidTypeRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidTypeRef, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the type of mutual exclusion that is represented by the Advanced Systems Format (ASF) mutual exclusion object.</p>
        /// </summary>
        /// <param name = "guidType"><dd> <p>The type of mutual exclusion that is represented by the ASF mutual exclusion object. For a list of predefined mutual exclusion type constants, see ASF Mutual Exclusion Type GUIDs.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Sometimes, content must be made mutually exclusive in more than one way. For example, a video file might contain audio streams in several bit rates for each of several languages. To handle this type of complex mutual exclusion, you must configure more than one ASF mutual exclusion object. For more information, see <strong>IMFASFMutualExclusion::AddRecord</strong>.</p>
        /// </remarks>
        /// <doc-id>ms697261</doc-id>
        /// <unmanaged>HRESULT IMFASFMutualExclusion::SetType([In] const GUID&amp; guidType)</unmanaged>
        /// <unmanaged-short>IMFASFMutualExclusion::SetType</unmanaged-short>
        internal unsafe void SetType(System.Guid guidType)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidType, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of records in the Advanced Systems Format mutual exclusion object.</p>
        /// </summary>
        /// <param name = "dwRecordCountRef"><dd> <p>Receives the count of records.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Each record includes one or more streams. Every stream in a record is mutually exclusive of streams in every other record.</p><p>Use this method in conjunction with <strong>IMFASFMutualExclusion::GetStreamsForRecord</strong> to retrieve the streams that are included in each record.</p>
        /// </remarks>
        /// <doc-id>ms700201</doc-id>
        /// <unmanaged>HRESULT IMFASFMutualExclusion::GetRecordCount([In] DWORD* pdwRecordCount)</unmanaged>
        /// <unmanaged-short>IMFASFMutualExclusion::GetRecordCount</unmanaged-short>
        public unsafe void GetRecordCount(System.Int32 dwRecordCountRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &dwRecordCountRef, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the stream numbers contained in a record in the Advanced Systems Format mutual exclusion object.</p>
        /// </summary>
        /// <param name = "dwRecordNumber"><dd> <p>The number of the record for which to retrieve the stream numbers.</p> </dd></param>
        /// <param name = "wStreamNumArrayRef"><dd> <p>An array that receives the stream numbers. Set to <strong><c>null</c></strong> to get the number of elements required, which is indicated by the value of <em>pcStreams</em> on return. If this parameter is not <strong><c>null</c></strong>, the method will copy as many stream numbers to the array as there are elements indicated by the value of <em>pcStreams</em>.</p> </dd></param>
        /// <param name = "cStreamsRef"><dd> <p>On input, the number of elements in the array referenced by <em>pwStreamNumArray</em>. On output, the method sets this value to the count of stream numbers in the record. You can call <strong>GetStreamsForRecord</strong> with <em>pwStreamNumArray</em> set to <strong><c>null</c></strong> to retrieve the number of elements required to hold all of the stream numbers.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms703200</doc-id>
        /// <unmanaged>HRESULT IMFASFMutualExclusion::GetStreamsForRecord([In] DWORD dwRecordNumber,[In] unsigned short* pwStreamNumArray,[In] DWORD* pcStreams)</unmanaged>
        /// <unmanaged-short>IMFASFMutualExclusion::GetStreamsForRecord</unmanaged-short>
        public unsafe void GetStreamsForRecord(System.Int32 dwRecordNumber, System.Int16 wStreamNumArrayRef, System.Int32 cStreamsRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwRecordNumber, &wStreamNumArrayRef, &cStreamsRef, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Adds a stream number to a record in the Advanced Systems Format mutual exclusion object.</p>
        /// </summary>
        /// <param name = "dwRecordNumber"><dd> <p>The record number to which the stream is added. A record number is set by the <strong>IMFASFMutualExclusion::AddRecord</strong> method.</p> </dd></param>
        /// <param name = "wStreamNumber"><dd> <p>The stream number to add to the record.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The specified stream number is already associated with the record.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Each record includes one or more streams. Every stream in a record is mutually exclusive of all streams in every other record.</p>
        /// </remarks>
        /// <doc-id>ms703794</doc-id>
        /// <unmanaged>HRESULT IMFASFMutualExclusion::AddStreamForRecord([In] DWORD dwRecordNumber,[In] unsigned short wStreamNumber)</unmanaged>
        /// <unmanaged-short>IMFASFMutualExclusion::AddStreamForRecord</unmanaged-short>
        public unsafe void AddStreamForRecord(System.Int32 dwRecordNumber, System.Int16 wStreamNumber)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwRecordNumber, wStreamNumber, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Removes a stream number from a record in the Advanced Systems Format mutual exclusion object.</p>
        /// </summary>
        /// <param name = "dwRecordNumber"><dd> <p>The record number from which to remove the stream number.</p> </dd></param>
        /// <param name = "wStreamNumber"><dd> <p>The stream number to remove from the record.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The stream number is not listed for the specified record.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms703971</doc-id>
        /// <unmanaged>HRESULT IMFASFMutualExclusion::RemoveStreamFromRecord([In] DWORD dwRecordNumber,[In] unsigned short wStreamNumber)</unmanaged>
        /// <unmanaged-short>IMFASFMutualExclusion::RemoveStreamFromRecord</unmanaged-short>
        public unsafe void RemoveStreamFromRecord(System.Int32 dwRecordNumber, System.Int16 wStreamNumber)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwRecordNumber, wStreamNumber, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Removes a record from the Advanced Systems Format (ASF) mutual exclusion object.</p>
        /// </summary>
        /// <param name = "dwRecordNumber"><dd> <p>The index of the record to remove.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>When a record is removed, the ASF mutual exclusion object indexes the remaining records so that they are sequential starting with zero. You should enumerate the records to ensure that you have the correct index for each record. If the record removed is the one with the highest index, removing it has no effect on the other indexes.</p>
        /// </remarks>
        /// <doc-id>ms704808</doc-id>
        /// <unmanaged>HRESULT IMFASFMutualExclusion::RemoveRecord([In] DWORD dwRecordNumber)</unmanaged>
        /// <unmanaged-short>IMFASFMutualExclusion::RemoveRecord</unmanaged-short>
        public unsafe void RemoveRecord(System.Int32 dwRecordNumber)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwRecordNumber, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Adds a record to the mutual exclusion object. A record specifies streams that are mutually exclusive with the streams in all other records.</p>
        /// </summary>
        /// <param name = "dwRecordNumberRef"><dd> <p>Receives the index assigned to the new record. Record indexes are zero-based and sequential.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>A record can include one or more stream numbers. All of the streams in a record are mutually exclusive with all the streams in all other records in the ASF mutual exclusion object.</p><p>You can use records to create complex mutual exclusion scenarios by using multiple ASF mutual exclusion objects.</p>
        /// </remarks>
        /// <doc-id>ms705615</doc-id>
        /// <unmanaged>HRESULT IMFASFMutualExclusion::AddRecord([In] DWORD* pdwRecordNumber)</unmanaged>
        /// <unmanaged-short>IMFASFMutualExclusion::AddRecord</unmanaged-short>
        public unsafe void AddRecord(System.Int32 dwRecordNumberRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &dwRecordNumberRef, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Creates a copy of the Advanced Systems Format mutual exclusion object.</p>
        /// </summary>
        /// <param name = "iMutexOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.ASFMutualExclusion"/></strong> interface of the new object. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The cloned object is a new object, completely independent of the object from which it was cloned.</p>
        /// </remarks>
        /// <doc-id>ms696217</doc-id>
        /// <unmanaged>HRESULT IMFASFMutualExclusion::Clone([In] IMFASFMutualExclusion** ppIMutex)</unmanaged>
        /// <unmanaged-short>IMFASFMutualExclusion::Clone</unmanaged-short>
        public unsafe void Clone(out SharpDX.MediaFoundation.ASFMutualExclusion iMutexOut)
        {
            System.IntPtr iMutexOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &iMutexOut_, (*(void ***)this._nativePointer)[11]);
            if (iMutexOut_ != System.IntPtr.Zero)
                iMutexOut = new SharpDX.MediaFoundation.ASFMutualExclusion(iMutexOut_);
            else
                iMutexOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("D267BF6A-028B-4e0d-903D-43F0EF82D0D4")]
    public partial class ASFProfile : SharpDX.MediaFoundation.MediaAttributes
    {
        public ASFProfile(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ASFProfile(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ASFProfile(nativePtr);
        /// <summary>
        /// <strong>Note</strong>??This method is not supported.?
        /// </summary>
        /// <doc-id>ms695410</doc-id>
        /// <unmanaged>GetStreamPrioritization</unmanaged>
        /// <unmanaged-short>GetStreamPrioritization</unmanaged-short>
        public SharpDX.MediaFoundation.ASFStreamPrioritization StreamPrioritization
        {
            get
            {
                GetStreamPrioritization(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of streams in the profile.</p>
        /// </summary>
        /// <param name = "cStreamsRef"><dd> <p>Receives the number of streams in the profile.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms703024</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::GetStreamCount([In] DWORD* pcStreams)</unmanaged>
        /// <unmanaged-short>IMFASFProfile::GetStreamCount</unmanaged-short>
        public unsafe void GetStreamCount(System.Int32 cStreamsRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &cStreamsRef, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves a stream from the profile by stream index, and/or retrieves the stream number for a stream index.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The index of the stream to retrieve. Stream indexes are sequential and zero-based. You can get the number of streams that are in the profile by calling the <strong>IMFASFProfile::GetStreamCount</strong> method.</p> </dd></param>
        /// <param name = "wStreamNumberRef"><dd> <p>Receives the stream number of the requested stream. Stream numbers are one-based and are not necessarily sequential. This parameter can be set to <strong><c>null</c></strong> if the stream number is not required.</p> </dd></param>
        /// <param name = "iStreamOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.ASFStreamConfig"/></strong> interface of the ASF stream configuration object. The caller must release the interface. This parameter can be <strong><c>null</c></strong> if you want to retrieve the stream number without accessing the stream configuration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method does not create a copy of the stream configuration object. The reference that is retrieved points to the object within the profile object. You must not make any changes to the stream configuration object using this reference, because doing so can affect the profile object in unexpected ways.</p><p>To change the configuration of the stream configuration object in the profile, you must first clone the stream configuration object by calling <strong>IMFASFStreamConfig::Clone</strong>. Make whatever changes are required to the clone of the object and then add the updated object by calling the <strong>IMFASFProfile::SetStream</strong> method.</p>
        /// </remarks>
        /// <doc-id>ms700799</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::GetStream([In] DWORD dwStreamIndex,[In] unsigned short* pwStreamNumber,[In] IMFASFStreamConfig** ppIStream)</unmanaged>
        /// <unmanaged-short>IMFASFProfile::GetStream</unmanaged-short>
        public unsafe void GetStream(System.Int32 dwStreamIndex, System.Int16 wStreamNumberRef, out SharpDX.MediaFoundation.ASFStreamConfig iStreamOut)
        {
            System.IntPtr iStreamOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, &wStreamNumberRef, &iStreamOut_, (*(void ***)this._nativePointer)[34]);
            if (iStreamOut_ != System.IntPtr.Zero)
                iStreamOut = new SharpDX.MediaFoundation.ASFStreamConfig(iStreamOut_);
            else
                iStreamOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves an Advanced Systems Format (ASF) stream configuration object for a stream in the profile. This method references the stream by stream number instead of stream index.</p>
        /// </summary>
        /// <param name = "wStreamNumber"><dd> <p>The stream number for which to obtain the interface reference.</p> </dd></param>
        /// <param name = "iStreamOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.ASFStreamConfig"/></strong> interface of the ASF stream configuration object. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method does not create a copy of the stream configuration object. The reference that is retrieved points to the object within the profile object. You must not make any changes to the stream configuration object using this reference, because doing so can affect the profile object in unexpected ways.</p><p>To change the configuration of the stream configuration object in the profile, you must first clone the stream configuration object by calling <strong>IMFASFStreamConfig::Clone</strong>. Make whatever changes are required to the clone of the object and then add the updated object by calling the <strong>IMFASFProfile::SetStream</strong> method.</p>
        /// </remarks>
        /// <doc-id>ms694981</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::GetStreamByNumber([In] unsigned short wStreamNumber,[In] IMFASFStreamConfig** ppIStream)</unmanaged>
        /// <unmanaged-short>IMFASFProfile::GetStreamByNumber</unmanaged-short>
        public unsafe void GetStreamByNumber(System.Int16 wStreamNumber, out SharpDX.MediaFoundation.ASFStreamConfig iStreamOut)
        {
            System.IntPtr iStreamOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, wStreamNumber, &iStreamOut_, (*(void ***)this._nativePointer)[35]);
            if (iStreamOut_ != System.IntPtr.Zero)
                iStreamOut = new SharpDX.MediaFoundation.ASFStreamConfig(iStreamOut_);
            else
                iStreamOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Adds a stream to the profile or reconfigures an existing stream.</p>
        /// </summary>
        /// <param name = "iStreamRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.ASFStreamConfig"/></strong> interface of a configured ASF stream configuration object.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the stream number in the ASF stream configuration object is already included in the profile, the information in the new object replaces the old one. If the profile does not contain a stream for the stream number, the ASF stream configuration object is added as a new stream.</p>
        /// </remarks>
        /// <doc-id>ms703051</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::SetStream([In] IMFASFStreamConfig* pIStream)</unmanaged>
        /// <unmanaged-short>IMFASFProfile::SetStream</unmanaged-short>
        public unsafe void SetStream(SharpDX.MediaFoundation.ASFStreamConfig iStreamRef)
        {
            System.IntPtr iStreamRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iStreamRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.ASFStreamConfig>(iStreamRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iStreamRef_, (*(void ***)this._nativePointer)[36]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Removes a stream from the Advanced Systems Format (ASF) profile object.</p>
        /// </summary>
        /// <param name = "wStreamNumber"><dd> <p>Stream number of the stream to remove.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>After a stream is removed, the ASF profile object reassigns stream indexes so that the index values are sequential starting from zero. Any previously stored stream index numbers are no longer valid after deleting a stream.</p>
        /// </remarks>
        /// <doc-id>ms704569</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::RemoveStream([In] unsigned short wStreamNumber)</unmanaged>
        /// <unmanaged-short>IMFASFProfile::RemoveStream</unmanaged-short>
        public unsafe void RemoveStream(System.Int16 wStreamNumber)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, wStreamNumber, (*(void ***)this._nativePointer)[37]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Creates an Advanced Systems Format (ASF) stream configuration object.</p>
        /// </summary>
        /// <param name = "iMediaTypeRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of a configured media type.</p> </dd></param>
        /// <param name = "iStreamOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.ASFStreamConfig"/></strong> interface of the new ASF stream configuration object. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><em>ppIStream</em> is <strong><c>null</c></strong>.</p> </td></tr> <tr><td> <dl> <dt><strong>E_OUTOFMEMORY</strong></dt> </dl> </td><td> <p>stream configuration object could not be created due to insufficient memory.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The ASF stream configuration object created by this method is not included in the profile. To include the stream, you must first configure the stream configuration and then call <strong>IMFASFProfile::SetStream</strong>.</p>
        /// </remarks>
        /// <doc-id>ms696264</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::CreateStream([In] IMFMediaType* pIMediaType,[In] IMFASFStreamConfig** ppIStream)</unmanaged>
        /// <unmanaged-short>IMFASFProfile::CreateStream</unmanaged-short>
        public unsafe void CreateStream(SharpDX.MediaFoundation.MediaType iMediaTypeRef, out SharpDX.MediaFoundation.ASFStreamConfig iStreamOut)
        {
            System.IntPtr iMediaTypeRef_ = System.IntPtr.Zero;
            System.IntPtr iStreamOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iMediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(iMediaTypeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iMediaTypeRef_, &iStreamOut_, (*(void ***)this._nativePointer)[38]);
            if (iStreamOut_ != System.IntPtr.Zero)
                iStreamOut = new SharpDX.MediaFoundation.ASFStreamConfig(iStreamOut_);
            else
                iStreamOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of Advanced Systems Format (ASF) mutual exclusion objects that are associated with the profile.</p>
        /// </summary>
        /// <param name = "cMutexsRef"><dd> <p>Receives the number of mutual exclusion objects.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Multiple mutual exclusion objects may be required for streams that are mutually exclusive in more than one way. For more information, see <strong>IMFASFMutualExclusion::AddRecord</strong>.</p>
        /// </remarks>
        /// <doc-id>ms697361</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::GetMutualExclusionCount([In] DWORD* pcMutexs)</unmanaged>
        /// <unmanaged-short>IMFASFProfile::GetMutualExclusionCount</unmanaged-short>
        public unsafe void GetMutualExclusionCount(System.Int32 cMutexsRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &cMutexsRef, (*(void ***)this._nativePointer)[39]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves an Advanced Systems Format (ASF) mutual exclusion object from the profile.</p>
        /// </summary>
        /// <param name = "dwMutexIndex"><dd> <p>Index of the mutual exclusion object in the profile.</p> </dd></param>
        /// <param name = "iMutexOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.ASFMutualExclusion"/></strong> interface of the ASF mutual exclusion object. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method does not create a copy of the mutual exclusion object. The returned reference refers to the mutual exclusion contained in the profile object. You must not make any changes to the mutual exclusion object using this reference, because doing so can affect the profile object in unexpected ways.</p><p>To change the configuration of the mutual exclusion object in the profile, you must first clone the mutual exclusion object by calling <strong>IMFASFMutualExclusion::Clone</strong>. Make whatever changes are required to the clone of the object, remove the old mutual exclusion object from the profile by calling the <strong>IMFASFProfile::RemoveMutualExclusion</strong> method, and then add the updated object by calling the <strong>IMFASFProfile::AddMutualExclusion</strong> method.</p>
        /// </remarks>
        /// <doc-id>ms701598</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::GetMutualExclusion([In] DWORD dwMutexIndex,[In] IMFASFMutualExclusion** ppIMutex)</unmanaged>
        /// <unmanaged-short>IMFASFProfile::GetMutualExclusion</unmanaged-short>
        public unsafe void GetMutualExclusion(System.Int32 dwMutexIndex, out SharpDX.MediaFoundation.ASFMutualExclusion iMutexOut)
        {
            System.IntPtr iMutexOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwMutexIndex, &iMutexOut_, (*(void ***)this._nativePointer)[40]);
            if (iMutexOut_ != System.IntPtr.Zero)
                iMutexOut = new SharpDX.MediaFoundation.ASFMutualExclusion(iMutexOut_);
            else
                iMutexOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Adds a configured Advanced Systems Format (ASF) mutual exclusion object to the profile.</p>
        /// </summary>
        /// <param name = "iMutexRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.ASFMutualExclusion"/></strong> interface of a configured ASF mutual exclusion object.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You can create a mutual exclusion object by calling the <strong>IMFASFProfile::CreateMutualExclusion</strong> method.</p>
        /// </remarks>
        /// <doc-id>ms703965</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::AddMutualExclusion([In] IMFASFMutualExclusion* pIMutex)</unmanaged>
        /// <unmanaged-short>IMFASFProfile::AddMutualExclusion</unmanaged-short>
        public unsafe void AddMutualExclusion(SharpDX.MediaFoundation.ASFMutualExclusion iMutexRef)
        {
            System.IntPtr iMutexRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iMutexRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.ASFMutualExclusion>(iMutexRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iMutexRef_, (*(void ***)this._nativePointer)[41]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Removes an Advanced Systems Format (ASF) mutual exclusion object from the profile.</p>
        /// </summary>
        /// <param name = "dwMutexIndex"><dd> <p>The index of the mutual exclusion object to remove from the profile.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>When a mutual exclusion object is removed from the profile, the ASF profile object reassigns the mutual exclusion indexes so that they are sequential starting with zero. Any previously stored indexes are no longer valid after calling this method.</p>
        /// </remarks>
        /// <doc-id>ms704007</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::RemoveMutualExclusion([In] DWORD dwMutexIndex)</unmanaged>
        /// <unmanaged-short>IMFASFProfile::RemoveMutualExclusion</unmanaged-short>
        public unsafe void RemoveMutualExclusion(System.Int32 dwMutexIndex)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwMutexIndex, (*(void ***)this._nativePointer)[42]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Creates a new Advanced Systems Format (ASF) mutual exclusion object. Mutual exclusion objects can be added to a profile by calling the <strong>AddMutualExclusion</strong> method.</p>
        /// </summary>
        /// <param name = "iMutexOut">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The ASF mutual exclusion object created by this method is not associated with the profile. Call <strong>IMFASFProfile::AddMutualExclusion</strong> after configuring the object to make this association.</p>
        /// </remarks>
        /// <doc-id>ms697002</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::CreateMutualExclusion([In] IMFASFMutualExclusion** ppIMutex)</unmanaged>
        /// <unmanaged-short>IMFASFProfile::CreateMutualExclusion</unmanaged-short>
        public unsafe void CreateMutualExclusion(out SharpDX.MediaFoundation.ASFMutualExclusion iMutexOut)
        {
            System.IntPtr iMutexOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &iMutexOut_, (*(void ***)this._nativePointer)[43]);
            if (iMutexOut_ != System.IntPtr.Zero)
                iMutexOut = new SharpDX.MediaFoundation.ASFMutualExclusion(iMutexOut_);
            else
                iMutexOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <strong>Note</strong>??This method is not supported.?
        /// </summary>
        /// <param name = "iStreamPrioritizationOut"><dd> <p>Reserved.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>ms695410</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::GetStreamPrioritization([In] IMFASFStreamPrioritization** ppIStreamPrioritization)</unmanaged>
        /// <unmanaged-short>IMFASFProfile::GetStreamPrioritization</unmanaged-short>
        internal unsafe void GetStreamPrioritization(out SharpDX.MediaFoundation.ASFStreamPrioritization iStreamPrioritizationOut)
        {
            System.IntPtr iStreamPrioritizationOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &iStreamPrioritizationOut_, (*(void ***)this._nativePointer)[44]);
            if (iStreamPrioritizationOut_ != System.IntPtr.Zero)
                iStreamPrioritizationOut = new SharpDX.MediaFoundation.ASFStreamPrioritization(iStreamPrioritizationOut_);
            else
                iStreamPrioritizationOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <strong>Note</strong>??This method is not supported.?
        /// </summary>
        /// <param name = "iStreamPrioritizationRef"><dd> <p>Reserved. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>ms697516</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::AddStreamPrioritization([In] IMFASFStreamPrioritization* pIStreamPrioritization)</unmanaged>
        /// <unmanaged-short>IMFASFProfile::AddStreamPrioritization</unmanaged-short>
        public unsafe void AddStreamPrioritization(SharpDX.MediaFoundation.ASFStreamPrioritization iStreamPrioritizationRef)
        {
            System.IntPtr iStreamPrioritizationRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iStreamPrioritizationRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.ASFStreamPrioritization>(iStreamPrioritizationRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iStreamPrioritizationRef_, (*(void ***)this._nativePointer)[45]);
            __result__.CheckError();
        }

        /// <summary>
        /// <strong>Note</strong>??This method is not supported.?
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>ms701838</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::RemoveStreamPrioritization()</unmanaged>
        /// <unmanaged-short>IMFASFProfile::RemoveStreamPrioritization</unmanaged-short>
        public unsafe void RemoveStreamPrioritization()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[46]);
            __result__.CheckError();
        }

        /// <summary>
        /// <strong>Note</strong>??This method is not implemented.?
        /// </summary>
        /// <param name = "iStreamPrioritizationOut"><dd> <p>Reserved. </p> </dd></param>
        /// <returns><p> Returns <strong>E_NOTIMPL</strong>. </p></returns>
        /// <doc-id>ms694914</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::CreateStreamPrioritization([In] IMFASFStreamPrioritization** ppIStreamPrioritization)</unmanaged>
        /// <unmanaged-short>IMFASFProfile::CreateStreamPrioritization</unmanaged-short>
        public unsafe void CreateStreamPrioritization(out SharpDX.MediaFoundation.ASFStreamPrioritization iStreamPrioritizationOut)
        {
            System.IntPtr iStreamPrioritizationOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &iStreamPrioritizationOut_, (*(void ***)this._nativePointer)[47]);
            if (iStreamPrioritizationOut_ != System.IntPtr.Zero)
                iStreamPrioritizationOut = new SharpDX.MediaFoundation.ASFStreamPrioritization(iStreamPrioritizationOut_);
            else
                iStreamPrioritizationOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Creates a copy of the Advanced Systems Format profile object.</p>
        /// </summary>
        /// <param name = "iProfileOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.ASFProfile"/></strong> interface of the new object. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The cloned object is completely independent of the original.</p>
        /// </remarks>
        /// <doc-id>ms704773</doc-id>
        /// <unmanaged>HRESULT IMFASFProfile::Clone([In] IMFASFProfile** ppIProfile)</unmanaged>
        /// <unmanaged-short>IMFASFProfile::Clone</unmanaged-short>
        public unsafe void Clone(out SharpDX.MediaFoundation.ASFProfile iProfileOut)
        {
            System.IntPtr iProfileOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &iProfileOut_, (*(void ***)this._nativePointer)[48]);
            if (iProfileOut_ != System.IntPtr.Zero)
                iProfileOut = new SharpDX.MediaFoundation.ASFProfile(iProfileOut_);
            else
                iProfileOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("12558295-E399-11D5-BC2A-00B0D0F3F4AB")]
    public partial class ASFSplitter : SharpDX.ComObject
    {
        public ASFSplitter(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ASFSplitter(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ASFSplitter(nativePtr);
        /// <summary>
        /// <p> </p><p>Resets the Advanced Systems Format (ASF) splitter and configures it to parse data from an ASF data section.</p>
        /// </summary>
        /// <param name = "iContentInfoRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.ASFContentInfo"/></strong> interface of a ContentInfo object that describes the data to be parsed.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>The <em>pIContentInfo</em> parameter is <strong><c>null</c></strong>.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms704048</doc-id>
        /// <unmanaged>HRESULT IMFASFSplitter::Initialize([In] IMFASFContentInfo* pIContentInfo)</unmanaged>
        /// <unmanaged-short>IMFASFSplitter::Initialize</unmanaged-short>
        public unsafe void Initialize(SharpDX.MediaFoundation.ASFContentInfo iContentInfoRef)
        {
            System.IntPtr iContentInfoRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iContentInfoRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.ASFContentInfo>(iContentInfoRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iContentInfoRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets option flags on the Advanced Systems Format (ASF) splitter.</p>
        /// </summary>
        /// <param name = "dwFlags"><dd> <p>A bitwise combination of zero or more members of the <strong><see cref = "SharpDX.MediaFoundation.AsfSplitterflags"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotInitializeD"/></strong></dt> </dl> </td><td> <p>The splitter is not initialized.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>The <em>dwFlags</em> parameter does not contain a valid flag.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The MFASF_SPLITTER_REVERSE flag is set, but the content cannot be parsed in reverse.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method can only be called after the splitter is initialized.</p>
        /// </remarks>
        /// <doc-id>ms697337</doc-id>
        /// <unmanaged>HRESULT IMFASFSplitter::SetFlags([In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IMFASFSplitter::SetFlags</unmanaged-short>
        public unsafe void SetFlags(System.Int32 dwFlags)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwFlags, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the option flags that are set on the ASF splitter.</p>
        /// </summary>
        /// <param name = "dwFlagsRef"><dd> <p>Receives the option flags. This value is a bitwise <strong>OR</strong> of zero or more members of the <strong><see cref = "SharpDX.MediaFoundation.AsfSplitterflags"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><em>pdwFlags</em> is <strong><c>null</c></strong>.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms702288</doc-id>
        /// <unmanaged>HRESULT IMFASFSplitter::GetFlags([In] DWORD* pdwFlags)</unmanaged>
        /// <unmanaged-short>IMFASFSplitter::GetFlags</unmanaged-short>
        public unsafe void GetFlags(System.Int32 dwFlagsRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &dwFlagsRef, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the streams to be parsed by the Advanced Systems Format (ASF) splitter.</p>
        /// </summary>
        /// <param name = "wStreamNumbersRef"><dd> <p>An array of variables containing the list of stream numbers to select.</p> </dd></param>
        /// <param name = "wNumStreams"><dd> <p>The number of valid elements in the stream number array.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><em>pwStreamNumbers</em> is <strong><c>null</c></strong> and <em>wNumStreams</em> contains a value greater than zero.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>Invalid stream number was passed in the array.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Calling this method supersedes any previous stream selections; only the streams specified in the <em>pwStreamNumbers</em> array will be selected.</p><p>By default, no streams are selected by the splitter.</p><p>You can obtain a list of the currently selected streams by calling the <strong>IMFASFSplitter::GetSelectedStreams</strong> method.</p>
        /// </remarks>
        /// <doc-id>ms701631</doc-id>
        /// <unmanaged>HRESULT IMFASFSplitter::SelectStreams([In] unsigned short* pwStreamNumbers,[In] unsigned short wNumStreams)</unmanaged>
        /// <unmanaged-short>IMFASFSplitter::SelectStreams</unmanaged-short>
        public unsafe void SelectStreams(System.Int16 wStreamNumbersRef, System.Int16 wNumStreams)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &wStreamNumbersRef, wNumStreams, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets a list of currently selected streams. </p>
        /// </summary>
        /// <param name = "wStreamNumbersRef"><dd> <p> The address of an array of <strong>WORDs</strong>. This array receives the stream numbers of the selected streams. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "wNumStreamsRef"><dd> <p>On input, points to a variable that contains the number of elements in the <em>pwStreamNumbers</em> array. Set the variable to zero if <em>pwStreamNumbers</em> is <strong><c>null</c></strong>. </p> <p>On output, receives the number of elements that were copied into <em>pwStreamNumbers</em>. Each element is the identifier of a selected stream.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p> Invalid argument. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "BufferTooSmall"/></strong></dt> </dl> </td><td> <p> The <em>pwStreamNumbers</em> array is smaller than the number of selected streams. See Remarks.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To get the number of selected streams, set <em>pwStreamNumbers</em> to <strong><c>null</c></strong>. The method will return <strong>MF_E_BUFFERTOSMALL</strong> but will also set the value of <code>*pwNumStreams</code> equal  to the number of selected streams. Then allocate an array of that size and call the method again, passing the array in the <em>pwStreamNumbers</em> parameter.</p><p>The following code shows these steps:</p><pre><see cref = "SharpDX.Result"/> DisplaySelectedStreams(<see cref = "SharpDX.MediaFoundation.ASFSplitter"/> *pSplitter)
        /// { WORD count = 0; <see cref = "SharpDX.Result"/> hr = pSplitter-&gt;GetSelectedStreams(<c>null</c>, &amp;count); if (hr == <see cref = "BufferTooSmall"/>) { WORD *pStreamIds = new (std::nothrow) WORD[count]; if (pStreamIds) { hr = pSplitter-&gt;GetSelectedStreams(pStreamIds, &amp;count); if (SUCCEEDED(hr)) { for (WORD i = 0; i &lt; count; i++) { printf("Selected stream ID: %d\n", pStreamIds[i]); } } delete [] pStreamIds; } else { hr = E_OUTOFMEMORY; } } return hr;
        /// }
        /// </pre><p>Alternatively, you can allocate an array that is equal to the total number of streams and pass that to <em>pwStreamNumbers</em>.</p><p>Before calling this method, initialize <code>*pwNumStreams</code> to the number of elements in <em>pwStreamNumbers</em>. If <em>pwStreamNumbers</em> is <strong><c>null</c></strong>, set <code>*pwNumStreams</code> to zero.</p><p> By default, no streams are selected by the splitter. Select streams by calling the <strong>IMFASFSplitter::SelectStreams</strong> method. </p>
        /// </remarks>
        /// <doc-id>ms705602</doc-id>
        /// <unmanaged>HRESULT IMFASFSplitter::GetSelectedStreams([In] unsigned short* pwStreamNumbers,[In] unsigned short* pwNumStreams)</unmanaged>
        /// <unmanaged-short>IMFASFSplitter::GetSelectedStreams</unmanaged-short>
        public unsafe void GetSelectedStreams(System.Int16 wStreamNumbersRef, System.Int16 wNumStreamsRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &wStreamNumbersRef, &wNumStreamsRef, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sends packetized Advanced Systems Format (ASF) data to the ASF splitter for processing.</p>
        /// </summary>
        /// <param name = "iBufferRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaBuffer"/></strong> interface of a buffer object containing data to be parsed.</p> </dd></param>
        /// <param name = "cbBufferOffset"><dd> <p>The offset into the data buffer where the splitter should begin parsing. This value is typically set to 0.</p> </dd></param>
        /// <param name = "cbLength"><dd> <p>The length, in bytes, of the data to parse. This value is measured from the offset specified by <em>cbBufferOffset</em>. Set to 0 to process to the end of the buffer.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>The <em>pIBuffer</em> parameter is <strong><c>null</c></strong>.</p> <p>The specified offset value in <em>cbBufferOffset</em> is greater than the length of the buffer.</p> <p>The total value of <em>cbBufferOffset</em> and <em>cbLength</em> is greater than the length of the buffer.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotInitializeD"/></strong></dt> </dl> </td><td> <p>The <strong>IMFASFSplitter::Initialize</strong> method was not called or the call failed.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotAccepting"/></strong></dt> </dl> </td><td> <p>The splitter cannot process more input at this time.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>After using this method to parse data, you must call <strong>IMFASFSplitter::GetNextSample</strong> to retrieve parsed media samples.</p><p>If your ASF data contains variable-sized packets, you must set the <strong><see cref = "PacketBoundary"/></strong> attribute on the buffers to indicate the sample boundaries, and the buffers cannot span multiple packets.</p><p>If the method returns ME_E_NOTACCEPTING, call <strong>GetNextSample</strong> to get the output samples, or call <strong>IMFASFSplitter::Flush</strong> to clear the splitter.</p><p>The splitter might hold a reference count on the input buffer. Therefore, do not write over the valid data in the buffer after calling this method.</p>
        /// </remarks>
        /// <doc-id>ms694299</doc-id>
        /// <unmanaged>HRESULT IMFASFSplitter::ParseData([In] IMFMediaBuffer* pIBuffer,[In] DWORD cbBufferOffset,[In] DWORD cbLength)</unmanaged>
        /// <unmanaged-short>IMFASFSplitter::ParseData</unmanaged-short>
        public unsafe void ParseData(SharpDX.MediaFoundation.MediaBuffer iBufferRef, System.Int32 cbBufferOffset, System.Int32 cbLength)
        {
            System.IntPtr iBufferRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iBufferRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaBuffer>(iBufferRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iBufferRef_, cbBufferOffset, cbLength, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves a sample from the Advanced Systems Format (ASF) splitter after the data has been parsed.</p>
        /// </summary>
        /// <param name = "dwStatusFlagsRef"><dd> <p>Receives one of the following values.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>ASF_STATUSFLAGS_INCOMPLETE</strong></dt> </dl> </td><td> <p>More samples are ready to be retrieved. Call <strong>GetNextSample</strong> in a loop until the <em>pdwStatusFlags</em> parameter receives the value zero.</p> </td></tr> <tr><td><dl> <dt><strong>Zero</strong></dt> </dl> </td><td> <p>No additional samples are ready. Call <strong>IMFASFSplitter::ParseData</strong> to give more input data to the splitter.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "wStreamNumberRef"><dd> <p>If the method returns a sample in the <em>ppISample</em> parameter, this parameter receives the number of the stream to which the sample belongs.</p> </dd></param>
        /// <param name = "iSampleOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> interface of the parsed sample. The caller must release the interface. If no samples are ready, this parameter receives the value <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "AsfInvalidData"/></strong></dt> </dl> </td><td> <p>The ASF data in the buffer is invalid.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "AsfMissingData"/></strong></dt> </dl> </td><td> <p>There is a gap in the ASF data.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Before calling this method, call <strong>IMFASFSplitter::ParseData</strong> to give input data to the splitter. If the input does not contain enough data for a complete sample, the <strong>GetNextSample</strong> method succeeds but returns <strong><c>null</c></strong> in the <em>ppISample</em> parameter.</p><p>The ASF splitter skips samples for unselected streams. To select streams, call <strong>IMFASFSplitter::SelectStreams</strong>.</p>
        /// </remarks>
        /// <doc-id>ms700167</doc-id>
        /// <unmanaged>HRESULT IMFASFSplitter::GetNextSample([In] DWORD* pdwStatusFlags,[In] unsigned short* pwStreamNumber,[In] IMFSample** ppISample)</unmanaged>
        /// <unmanaged-short>IMFASFSplitter::GetNextSample</unmanaged-short>
        public unsafe void GetNextSample(System.Int32 dwStatusFlagsRef, System.Int16 wStreamNumberRef, out SharpDX.MediaFoundation.Sample iSampleOut)
        {
            System.IntPtr iSampleOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &dwStatusFlagsRef, &wStreamNumberRef, &iSampleOut_, (*(void ***)this._nativePointer)[9]);
            if (iSampleOut_ != System.IntPtr.Zero)
                iSampleOut = new SharpDX.MediaFoundation.Sample(iSampleOut_);
            else
                iSampleOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Resets the Advanced Systems Format (ASF) splitter and releases all pending samples.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Any samples waiting to be retrieved when <strong>Flush</strong> is called are lost.</p>
        /// </remarks>
        /// <doc-id>ms703013</doc-id>
        /// <unmanaged>HRESULT IMFASFSplitter::Flush()</unmanaged>
        /// <unmanaged-short>IMFASFSplitter::Flush</unmanaged-short>
        public unsafe void Flush()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the send time of the last sample received.</p>
        /// </summary>
        /// <param name = "dwLastSendTimeRef"><dd> <p>Receives the send time of the last sample received.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><em>pdwLastSendTime</em> is <strong><c>null</c></strong>.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697272</doc-id>
        /// <unmanaged>HRESULT IMFASFSplitter::GetLastSendTime([In] DWORD* pdwLastSendTime)</unmanaged>
        /// <unmanaged-short>IMFASFSplitter::GetLastSendTime</unmanaged-short>
        public unsafe void GetLastSendTime(System.Int32 dwLastSendTimeRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &dwLastSendTimeRef, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("9E8AE8D2-DBBD-4200-9ACA-06E6DF484913")]
    public partial class ASFStreamConfig : SharpDX.MediaFoundation.MediaAttributes
    {
        public ASFStreamConfig(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ASFStreamConfig(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ASFStreamConfig(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the stream number of the stream.</p>
        /// </summary>
        /// <doc-id>ms703172</doc-id>
        /// <unmanaged>GetStreamNumber / SetStreamNumber</unmanaged>
        /// <unmanaged-short>GetStreamNumber</unmanaged-short>
        public System.Int16 StreamNumber
        {
            get => GetStreamNumber();
            set => SetStreamNumber(value);
        }

        /// <summary>
        /// <p> </p><p>Retrieves the media type of the stream.</p>
        /// </summary>
        /// <remarks>
        /// <p>To reduce unnecessary copying, the method returns a reference to the media type  that is stored internally by the object. Do not modify the returned media type,  as the results are not defined.</p>
        /// </remarks>
        /// <doc-id>ms697489</doc-id>
        /// <unmanaged>GetMediaType / SetMediaType</unmanaged>
        /// <unmanaged-short>GetMediaType</unmanaged-short>
        public SharpDX.MediaFoundation.MediaType MediaType
        {
            get
            {
                GetMediaType(out var __output__);
                return __output__;
            }

            set => SetMediaType(value);
        }

        /// <summary>
        /// <p>Gets the major media type of the stream. </p>
        /// </summary>
        /// <param name = "guidStreamTypeRef"><dd> <p>Receives the major media type for the stream. For a list of possible values, see Major Media Types. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>ms697390</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamConfig::GetStreamType([In] GUID* pguidStreamType)</unmanaged>
        /// <unmanaged-short>IMFASFStreamConfig::GetStreamType</unmanaged-short>
        public unsafe void GetStreamType(System.Guid guidStreamTypeRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidStreamTypeRef, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the stream number of the stream.</p>
        /// </summary>
        /// <returns><p>The method returns the  stream number.</p></returns>
        /// <doc-id>ms703172</doc-id>
        /// <unmanaged>unsigned short IMFASFStreamConfig::GetStreamNumber()</unmanaged>
        /// <unmanaged-short>IMFASFStreamConfig::GetStreamNumber</unmanaged-short>
        internal unsafe System.Int16 GetStreamNumber()
        {
            System.Int16 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallshort(this._nativePointer, (*(void ***)this._nativePointer)[34]);
            return __result__;
        }

        /// <summary>
        /// <p> </p><p>Assigns a stream number to the stream.</p>
        /// </summary>
        /// <param name = "wStreamNum"><dd> <p>The number to assign to the stream.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Stream numbers start from 1 and do not need to be sequential.</p>
        /// </remarks>
        /// <doc-id>ms697298</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamConfig::SetStreamNumber([In] unsigned short wStreamNum)</unmanaged>
        /// <unmanaged-short>IMFASFStreamConfig::SetStreamNumber</unmanaged-short>
        internal unsafe void SetStreamNumber(System.Int16 wStreamNum)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, wStreamNum, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the media type of the stream.</p>
        /// </summary>
        /// <param name = "iMediaTypeOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of the media type object associated with the stream. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To reduce unnecessary copying, the method returns a reference to the media type  that is stored internally by the object. Do not modify the returned media type,  as the results are not defined.</p>
        /// </remarks>
        /// <doc-id>ms697489</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamConfig::GetMediaType([In] IMFMediaType** ppIMediaType)</unmanaged>
        /// <unmanaged-short>IMFASFStreamConfig::GetMediaType</unmanaged-short>
        internal unsafe void GetMediaType(out SharpDX.MediaFoundation.MediaType iMediaTypeOut)
        {
            System.IntPtr iMediaTypeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &iMediaTypeOut_, (*(void ***)this._nativePointer)[36]);
            if (iMediaTypeOut_ != System.IntPtr.Zero)
                iMediaTypeOut = new SharpDX.MediaFoundation.MediaType(iMediaTypeOut_);
            else
                iMediaTypeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the media type for the Advanced Systems Format (ASF) stream configuration object.</p>
        /// </summary>
        /// <param name = "iMediaTypeRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of a configured media type object.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Some validation of the media type is performed by this method. However, a media type can be successfully set, but cause an error when the stream is added to the profile.</p>
        /// </remarks>
        /// <doc-id>ms697185</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamConfig::SetMediaType([In] IMFMediaType* pIMediaType)</unmanaged>
        /// <unmanaged-short>IMFASFStreamConfig::SetMediaType</unmanaged-short>
        internal unsafe void SetMediaType(SharpDX.MediaFoundation.MediaType iMediaTypeRef)
        {
            System.IntPtr iMediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iMediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(iMediaTypeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iMediaTypeRef_, (*(void ***)this._nativePointer)[37]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of payload extensions that are configured for the stream.</p>
        /// </summary>
        /// <param name = "cPayloadExtensionsRef"><dd> <p>Receives the number of payload extensions.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms696251</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamConfig::GetPayloadExtensionCount([In] unsigned short* pcPayloadExtensions)</unmanaged>
        /// <unmanaged-short>IMFASFStreamConfig::GetPayloadExtensionCount</unmanaged-short>
        public unsafe void GetPayloadExtensionCount(System.Int16 cPayloadExtensionsRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &cPayloadExtensionsRef, (*(void ***)this._nativePointer)[38]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves information about an existing payload extension.</p>
        /// </summary>
        /// <param name = "wPayloadExtensionNumber"><dd> <p>The payload extension index. Valid indexes range from 0, to one less than the number of extensions obtained by calling <strong>IMFASFStreamConfig::GetPayloadExtensionCount</strong>.</p> </dd></param>
        /// <param name = "guidExtensionSystemIDRef"><dd> <p>Receives a <see cref = "System.Guid"/> that identifies the payload extension. For a list of predefined payload extensions, see ASF Payload Extension GUIDs. Applications can also define custom payload extensions.</p> </dd></param>
        /// <param name = "cbExtensionDataSizeRef"><dd> <p>Receives the number of bytes added to each sample for the extension.</p> </dd></param>
        /// <param name = "bExtensionSystemInfoRef"><dd> <p>Pointer to a buffer that receives information about this extension system. This information is the same for all samples and is stored in the content header (not in each sample). This parameter can be <strong><c>null</c></strong>. To find the required size of the buffer, set this parameter to <strong><c>null</c></strong>; the size is returned in <em>pcbExtensionSystemInfo</em>.</p> </dd></param>
        /// <param name = "cbExtensionSystemInfoRef"><dd> <p>On input, specifies the size of the buffer pointed to by <em>pbExtensionSystemInfo</em>. On output, receives the required size of the <em>pbExtensionSystemInfo</em> buffer in bytes.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "BufferTooSmall"/></strong></dt> </dl> </td><td> <p>The buffer specified in <em>pbExtensionSystemInfo</em> is too small.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidIndex"/></strong></dt> </dl> </td><td> <p>The <em>wPayloadExtensionNumber</em> parameter is out of range.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697305</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamConfig::GetPayloadExtension([In] unsigned short wPayloadExtensionNumber,[In] GUID* pguidExtensionSystemID,[In] unsigned short* pcbExtensionDataSize,[In] unsigned char* pbExtensionSystemInfo,[In] DWORD* pcbExtensionSystemInfo)</unmanaged>
        /// <unmanaged-short>IMFASFStreamConfig::GetPayloadExtension</unmanaged-short>
        public unsafe void GetPayloadExtension(System.Int16 wPayloadExtensionNumber, System.Guid guidExtensionSystemIDRef, System.Int16 cbExtensionDataSizeRef, System.Byte bExtensionSystemInfoRef, System.Int32 cbExtensionSystemInfoRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, wPayloadExtensionNumber, &guidExtensionSystemIDRef, &cbExtensionDataSizeRef, &bExtensionSystemInfoRef, &cbExtensionSystemInfoRef, (*(void ***)this._nativePointer)[39]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Configures a payload extension for the stream.</p>
        /// </summary>
        /// <param name = "guidExtensionSystemID"><dd> <p>Pointer to a <see cref = "System.Guid"/> that identifies the payload extension. For a list of predefined payload extensions, see ASF Payload Extension GUIDs. Applications can also define custom payload extensions.</p> </dd></param>
        /// <param name = "cbExtensionDataSize"><dd> <p>Number of bytes added to each sample for the extension.</p> </dd></param>
        /// <param name = "bExtensionSystemInfoRef"><dd> <p>A reference to a buffer that contains information about this extension system. This information is the same for all samples and is stored in the content header (not with each sample). This parameter can be <strong><c>null</c></strong> if <em>cbExtensionSystemInfo</em> is 0.</p> </dd></param>
        /// <param name = "cbExtensionSystemInfo"><dd> <p>Amount of data, in bytes, that describes this extension system. If this value is 0, then <em>pbExtensionSystemInfo</em> can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697229</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamConfig::AddPayloadExtension([In] GUID guidExtensionSystemID,[In] unsigned short cbExtensionDataSize,[In] unsigned char* pbExtensionSystemInfo,[In] DWORD cbExtensionSystemInfo)</unmanaged>
        /// <unmanaged-short>IMFASFStreamConfig::AddPayloadExtension</unmanaged-short>
        public unsafe void AddPayloadExtension(System.Guid guidExtensionSystemID, System.Int16 cbExtensionDataSize, System.Byte bExtensionSystemInfoRef, System.Int32 cbExtensionSystemInfo)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, guidExtensionSystemID, cbExtensionDataSize, &bExtensionSystemInfoRef, cbExtensionSystemInfo, (*(void ***)this._nativePointer)[40]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Removes all payload extensions that are configured for the stream.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>None.</p>
        /// </remarks>
        /// <doc-id>ms699009</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamConfig::RemoveAllPayloadExtensions()</unmanaged>
        /// <unmanaged-short>IMFASFStreamConfig::RemoveAllPayloadExtensions</unmanaged-short>
        public unsafe void RemoveAllPayloadExtensions()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[41]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Creates a copy of the Advanced Systems Format (ASF) stream configuration object.</p>
        /// </summary>
        /// <param name = "iStreamConfigOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.ASFStreamConfig"/></strong> interface of the new object. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The cloned object is completely independent of the original.</p>
        /// </remarks>
        /// <doc-id>ms703117</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamConfig::Clone([In] IMFASFStreamConfig** ppIStreamConfig)</unmanaged>
        /// <unmanaged-short>IMFASFStreamConfig::Clone</unmanaged-short>
        public unsafe void Clone(out SharpDX.MediaFoundation.ASFStreamConfig iStreamConfigOut)
        {
            System.IntPtr iStreamConfigOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &iStreamConfigOut_, (*(void ***)this._nativePointer)[42]);
            if (iStreamConfigOut_ != System.IntPtr.Zero)
                iStreamConfigOut = new SharpDX.MediaFoundation.ASFStreamConfig(iStreamConfigOut_);
            else
                iStreamConfigOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("699bdc27-bbaf-49ff-8e38-9c39c9b5e088")]
    public partial class ASFStreamPrioritization : SharpDX.ComObject
    {
        public ASFStreamPrioritization(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ASFStreamPrioritization(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ASFStreamPrioritization(nativePtr);
        /// <summary>
        /// <p> </p><strong>Note</strong>??This interface is not implemented in this version of Media Foundation.?<p>Retrieves the number of entries in the stream priority list.</p>
        /// </summary>
        /// <param name = "dwStreamCountRef"><dd> <p>Receives the number of streams in the stream priority list.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970449</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamPrioritization::GetStreamCount([In] DWORD* pdwStreamCount)</unmanaged>
        /// <unmanaged-short>IMFASFStreamPrioritization::GetStreamCount</unmanaged-short>
        public unsafe void GetStreamCount(System.Int32 dwStreamCountRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &dwStreamCountRef, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Note</strong>??This interface is not implemented in this version of Media Foundation.?<p>Retrieves the stream number of a stream in the stream priority list.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>Zero-based index of the entry to retrieve from the stream priority list. To get the number of entries in the priority list, call <strong>IMFASFStreamPrioritization::GetStreamCount</strong>.</p> </dd></param>
        /// <param name = "wStreamNumberRef"><dd> <p>Receives the stream number of the stream priority entry.</p> </dd></param>
        /// <param name = "wStreamFlagsRef"><dd> <p>Receives a Boolean value. If <strong>TRUE</strong>, the stream is mandatory.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><strong><c>null</c></strong> reference argument or the <em>dwStreamIndex</em> parameter is out of range.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697005</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamPrioritization::GetStream([In] DWORD dwStreamIndex,[In] unsigned short* pwStreamNumber,[In] unsigned short* pwStreamFlags)</unmanaged>
        /// <unmanaged-short>IMFASFStreamPrioritization::GetStream</unmanaged-short>
        public unsafe void GetStream(System.Int32 dwStreamIndex, System.Int16 wStreamNumberRef, System.Int16 wStreamFlagsRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, &wStreamNumberRef, &wStreamFlagsRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Note</strong>??This interface is not implemented in this version of Media Foundation.?<p>Adds a stream to the stream priority list.</p>
        /// </summary>
        /// <param name = "wStreamNumber"><dd> <p>Stream number of the stream to add.</p> </dd></param>
        /// <param name = "wStreamFlags"><dd> <p>If <strong>TRUE</strong>, the stream is mandatory.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>Invalid stream number.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The stream priority list is built by appending entries to the list with each call to <strong>AddStream</strong>. The list is evaluated in descending order of importance. The most important stream should be added first, and the least important should be added last.</p>
        /// </remarks>
        /// <doc-id>ms696987</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamPrioritization::AddStream([In] unsigned short wStreamNumber,[In] unsigned short wStreamFlags)</unmanaged>
        /// <unmanaged-short>IMFASFStreamPrioritization::AddStream</unmanaged-short>
        public unsafe void AddStream(System.Int16 wStreamNumber, System.Int16 wStreamFlags)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, wStreamNumber, wStreamFlags, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Note</strong>??This interface is not implemented in this version of Media Foundation.?<p>Removes a stream from the stream priority list.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>Index of the entry in the stream priority list to remove. Values range from zero, to one less than the stream count retrieved by calling <strong>IMFASFStreamPrioritization::GetStreamCount</strong>.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>When a stream is removed from the stream priority list, the index values of all streams that follow it in the list are decremented.</p>
        /// </remarks>
        /// <doc-id>bb970482</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamPrioritization::RemoveStream([In] DWORD dwStreamIndex)</unmanaged>
        /// <unmanaged-short>IMFASFStreamPrioritization::RemoveStream</unmanaged-short>
        public unsafe void RemoveStream(System.Int32 dwStreamIndex)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Note</strong>??This interface is not implemented in this version of Media Foundation.?<p>Creates a copy of the ASF stream prioritization object.</p>
        /// </summary>
        /// <param name = "iStreamPrioritizationOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.ASFStreamPrioritization"/></strong> interface of the new object. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The new object is completely independent of the original.</p>
        /// </remarks>
        /// <doc-id>ms704679</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamPrioritization::Clone([In] IMFASFStreamPrioritization** ppIStreamPrioritization)</unmanaged>
        /// <unmanaged-short>IMFASFStreamPrioritization::Clone</unmanaged-short>
        public unsafe void Clone(out SharpDX.MediaFoundation.ASFStreamPrioritization iStreamPrioritizationOut)
        {
            System.IntPtr iStreamPrioritizationOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &iStreamPrioritizationOut_, (*(void ***)this._nativePointer)[7]);
            if (iStreamPrioritizationOut_ != System.IntPtr.Zero)
                iStreamPrioritizationOut = new SharpDX.MediaFoundation.ASFStreamPrioritization(iStreamPrioritizationOut_);
            else
                iStreamPrioritizationOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("d01bad4a-4fa0-4a60-9349-c27e62da9d41")]
    public partial class ASFStreamSelector : SharpDX.ComObject
    {
        public ASFStreamSelector(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ASFStreamSelector(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ASFStreamSelector(nativePtr);
        /// <summary>
        /// <p> </p><p>Sets options for the stream selector.</p>
        /// </summary>
        /// <doc-id>ms701635</doc-id>
        /// <unmanaged>SetStreamSelectorFlags</unmanaged>
        /// <unmanaged-short>SetStreamSelectorFlags</unmanaged-short>
        public System.Int32 StreamSelectorFlags
        {
            set => SetStreamSelectorFlags(value);
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of streams that are in the Advanced Systems Format (ASF) content.</p>
        /// </summary>
        /// <param name = "cStreamsRef"><dd> <p>Receives the number of streams in the content.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms704621</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamSelector::GetStreamCount([In] DWORD* pcStreams)</unmanaged>
        /// <unmanaged-short>IMFASFStreamSelector::GetStreamCount</unmanaged-short>
        public unsafe void GetStreamCount(System.Int32 cStreamsRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &cStreamsRef, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of outputs for the Advanced Systems Format (ASF) content.</p>
        /// </summary>
        /// <param name = "cOutputsRef"><dd> <p>Receives the number of outputs.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Outputs are streams in the ASF data section that will be parsed.</p>
        /// </remarks>
        /// <doc-id>ms694076</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamSelector::GetOutputCount([In] DWORD* pcOutputs)</unmanaged>
        /// <unmanaged-short>IMFASFStreamSelector::GetOutputCount</unmanaged-short>
        public unsafe void GetOutputCount(System.Int32 cOutputsRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &cOutputsRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of streams associated with an output.</p>
        /// </summary>
        /// <param name = "dwOutputNum"><dd> <p>The output number for which to retrieve the stream count.</p> </dd></param>
        /// <param name = "cStreamsRef"><dd> <p>Receives the number of streams associated with the output.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>Invalid output number.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>An output is a stream in an ASF data section that will be parsed. If mutual exclusion is used, mutually exclusive streams share the same output.</p>
        /// </remarks>
        /// <doc-id>ms700815</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamSelector::GetOutputStreamCount([In] DWORD dwOutputNum,[In] DWORD* pcStreams)</unmanaged>
        /// <unmanaged-short>IMFASFStreamSelector::GetOutputStreamCount</unmanaged-short>
        public unsafe void GetOutputStreamCount(System.Int32 dwOutputNum, System.Int32 cStreamsRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputNum, &cStreamsRef, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the stream numbers for all of the streams that are associated with an output.</p>
        /// </summary>
        /// <param name = "dwOutputNum"><dd> <p>The output number for which to retrieve stream numbers.</p> </dd></param>
        /// <param name = "rgwStreamNumbers"><dd> <p>Address of an array that receives the stream numbers associated with the output. The caller allocates the array. The array size must be at least as large as the value returned by the <strong>IMFASFStreamSelector::GetOutputStreamCount</strong> method.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>Invalid output number.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>An output is a stream in an ASF data section that will be parsed. If mutual exclusion is used, mutually exclusive streams share the same output.</p>
        /// </remarks>
        /// <doc-id>ms697025</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamSelector::GetOutputStreamNumbers([In] DWORD dwOutputNum,[In] unsigned short* rgwStreamNumbers)</unmanaged>
        /// <unmanaged-short>IMFASFStreamSelector::GetOutputStreamNumbers</unmanaged-short>
        public unsafe void GetOutputStreamNumbers(System.Int32 dwOutputNum, System.Int16 rgwStreamNumbers)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputNum, &rgwStreamNumbers, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the output number associated with a stream.</p>
        /// </summary>
        /// <param name = "wStreamNum"><dd> <p>The stream number for which to retrieve an output number.</p> </dd></param>
        /// <param name = "dwOutputRef"><dd> <p>Receives the output number.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>Invalid stream number.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Outputs are streams in the ASF data section that will be parsed.</p>
        /// </remarks>
        /// <doc-id>ms701979</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamSelector::GetOutputFromStream([In] unsigned short wStreamNum,[In] DWORD* pdwOutput)</unmanaged>
        /// <unmanaged-short>IMFASFStreamSelector::GetOutputFromStream</unmanaged-short>
        public unsafe void GetOutputFromStream(System.Int16 wStreamNum, System.Int32 dwOutputRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, wStreamNum, &dwOutputRef, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the manual output override selection that is set for a stream.</p>
        /// </summary>
        /// <param name = "dwOutputNum"><dd> <p>Stream number for which to retrieve the output override selection.</p> </dd></param>
        /// <param name = "selectionRef"><dd> <p>Receives the output override selection. The value is a member of the <strong><see cref = "SharpDX.MediaFoundation.AsfSelectionStatus"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697510</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamSelector::GetOutputOverride([In] DWORD dwOutputNum,[In] ASF_SELECTION_STATUS* pSelection)</unmanaged>
        /// <unmanaged-short>IMFASFStreamSelector::GetOutputOverride</unmanaged-short>
        public unsafe void GetOutputOverride(System.Int32 dwOutputNum, SharpDX.MediaFoundation.AsfSelectionStatus selectionRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputNum, &selectionRef, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the selection status of an output, overriding other selection criteria.</p>
        /// </summary>
        /// <param name = "dwOutputNum"><dd> <p>Output number for which to set selection.</p> </dd></param>
        /// <param name = "selection"><dd> <p>Member of the <strong><see cref = "SharpDX.MediaFoundation.AsfSelectionStatus"/></strong> enumeration specifying the level of selection for the output.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms703122</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamSelector::SetOutputOverride([In] DWORD dwOutputNum,[In] ASF_SELECTION_STATUS Selection)</unmanaged>
        /// <unmanaged-short>IMFASFStreamSelector::SetOutputOverride</unmanaged-short>
        public unsafe void SetOutputOverride(System.Int32 dwOutputNum, SharpDX.MediaFoundation.AsfSelectionStatus selection)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputNum, unchecked ((System.Int32)selection), (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of mutual exclusion objects associated with an output.</p>
        /// </summary>
        /// <param name = "dwOutputNum"><dd> <p>Output number for which to retrieve the count of mutually exclusive relationships.</p> </dd></param>
        /// <param name = "cMutexesRef"><dd> <p>Receives the number of mutual exclusions.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms703918</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamSelector::GetOutputMutexCount([In] DWORD dwOutputNum,[In] DWORD* pcMutexes)</unmanaged>
        /// <unmanaged-short>IMFASFStreamSelector::GetOutputMutexCount</unmanaged-short>
        public unsafe void GetOutputMutexCount(System.Int32 dwOutputNum, System.Int32 cMutexesRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputNum, &cMutexesRef, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves a mutual exclusion object for an output.</p>
        /// </summary>
        /// <param name = "dwOutputNum"><dd> <p>Output number for which to retrieve a mutual exclusion object.</p> </dd></param>
        /// <param name = "dwMutexNum"><dd> <p>Mutual exclusion number. This is an index of mutually exclusive relationships associated with the output. Set to a number between 0, and 1 less than the number of mutual exclusion objects retrieved by calling <strong>IMFASFStreamSelector::GetOutputMutexCount</strong>.</p> </dd></param>
        /// <param name = "mutexOut"><dd> <p>Receives a reference to the mutual exclusion object's <strong><see cref = "SharpDX.IUnknown"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Outputs are streams in the ASF data section that will be parsed.</p>
        /// </remarks>
        /// <doc-id>ms703819</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamSelector::GetOutputMutex([In] DWORD dwOutputNum,[In] DWORD dwMutexNum,[In] IUnknown** ppMutex)</unmanaged>
        /// <unmanaged-short>IMFASFStreamSelector::GetOutputMutex</unmanaged-short>
        public unsafe void GetOutputMutex(System.Int32 dwOutputNum, System.Int32 dwMutexNum, out SharpDX.IUnknown mutexOut)
        {
            System.IntPtr mutexOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputNum, dwMutexNum, &mutexOut_, (*(void ***)this._nativePointer)[11]);
            if (mutexOut_ != System.IntPtr.Zero)
                mutexOut = new SharpDX.ComObject(mutexOut_);
            else
                mutexOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Selects a mutual exclusion record to use for a mutual exclusion object associated with an output.</p>
        /// </summary>
        /// <param name = "dwOutputNum"><dd> <p>The output number for which to set a stream.</p> </dd></param>
        /// <param name = "dwMutexNum"><dd> <p>Index of the mutual exclusion for which to select.</p> </dd></param>
        /// <param name = "wSelectedRecord"><dd> <p>Record of the specified mutual exclusion to select.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>An output is a stream in an Advanced Systems Format (ASF) data section that will be parsed. If mutual exclusion is used, mutually exclusive streams share the same output.</p><p>An ASF file can contain multiple mutually exclusive relationships, such as a file with both language based and bit-rate based mutual exclusion. If an output is involved in multiple mutually exclusive relationships, a record from each must be selected.</p>
        /// </remarks>
        /// <doc-id>ms704822</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamSelector::SetOutputMutexSelection([In] DWORD dwOutputNum,[In] DWORD dwMutexNum,[In] unsigned short wSelectedRecord)</unmanaged>
        /// <unmanaged-short>IMFASFStreamSelector::SetOutputMutexSelection</unmanaged-short>
        public unsafe void SetOutputMutexSelection(System.Int32 dwOutputNum, System.Int32 dwMutexNum, System.Int16 wSelectedRecord)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputNum, dwMutexNum, wSelectedRecord, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of bandwidth steps that exist for the content. This method is used for multiple bit rate (MBR) content.</p>
        /// </summary>
        /// <param name = "cStepCountRef"><dd> <p>Receives the number of bandwidth steps.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Bandwidth steps are bandwidth levels used for multiple bit rate (MBR) content. If you stream MBR content, you can choose the bandwidth step that matches the network conditions to avoid interruptions during playback.</p>
        /// </remarks>
        /// <doc-id>ms698868</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamSelector::GetBandwidthStepCount([In] DWORD* pcStepCount)</unmanaged>
        /// <unmanaged-short>IMFASFStreamSelector::GetBandwidthStepCount</unmanaged-short>
        public unsafe void GetBandwidthStepCount(System.Int32 cStepCountRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &cStepCountRef, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the stream numbers that apply to a bandwidth step. This method is used for multiple bit rate (MBR) content.</p>
        /// </summary>
        /// <param name = "dwStepNum"><dd> <p>Bandwidth step number for which to retrieve information. Set this value to a number between 0, and 1 less than the number of bandwidth steps returned by <strong>IMFASFStreamSelector::GetBandwidthStepCount</strong>.</p> </dd></param>
        /// <param name = "dwBitrateRef"><dd> <p>Receives the bit rate associated with the bandwidth step.</p> </dd></param>
        /// <param name = "rgwStreamNumbers"><dd> <p>Address of an array that receives the stream numbers. The caller allocates the array. The array size must be at least as large as the value returned by the <strong>IMFASFStreamSelector::GetStreamCount</strong> method.</p> </dd></param>
        /// <param name = "rgSelections"><dd> <p>Address of an array that receives the selection status of each stream, as an <strong><see cref = "SharpDX.MediaFoundation.AsfSelectionStatus"/></strong> value. The members of this array correspond to the members of the <em>rgwStreamNumbers</em> array by index. The caller allocates the array. The array size must be at least as large as the value returned by the <strong>IMFASFStreamSelector::GetStreamCount</strong> method.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Bandwidth steps are bandwidth levels used for MBR content. If you stream MBR content, you can choose the bandwidth step that matches the network conditions to avoid interruptions during playback.</p>
        /// </remarks>
        /// <doc-id>ms700131</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamSelector::GetBandwidthStep([In] DWORD dwStepNum,[In] DWORD* pdwBitrate,[In] unsigned short* rgwStreamNumbers,[In] ASF_SELECTION_STATUS* rgSelections)</unmanaged>
        /// <unmanaged-short>IMFASFStreamSelector::GetBandwidthStep</unmanaged-short>
        public unsafe void GetBandwidthStep(System.Int32 dwStepNum, System.Int32 dwBitrateRef, System.Int16 rgwStreamNumbers, SharpDX.MediaFoundation.AsfSelectionStatus rgSelections)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStepNum, &dwBitrateRef, &rgwStreamNumbers, &rgSelections, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the index of a bandwidth step that is appropriate for a specified bit rate. This method is used for multiple bit rate (MBR) content.</p>
        /// </summary>
        /// <param name = "dwBitrate"><dd> <p>The bit rate to find a bandwidth step for.</p> </dd></param>
        /// <param name = "dwStepNumRef"><dd> <p>Receives the step number. Use this number to retrieve information about the step by calling <strong>IMFASFStreamSelector::GetBandwidthStep</strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>In a streaming multiple bit rate (MBR) scenario, call this method with the current data rate of the network connection to determine the correct step to use. You can also call this method periodically throughout streaming to ensure that the best step is used.</p>
        /// </remarks>
        /// <doc-id>ms704645</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamSelector::BitrateToStepNumber([In] DWORD dwBitrate,[In] DWORD* pdwStepNum)</unmanaged>
        /// <unmanaged-short>IMFASFStreamSelector::BitrateToStepNumber</unmanaged-short>
        public unsafe void BitrateToStepNumber(System.Int32 dwBitrate, System.Int32 dwStepNumRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwBitrate, &dwStepNumRef, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets options for the stream selector.</p>
        /// </summary>
        /// <param name = "dwStreamSelectorFlags"><dd> <p>Bitwise <strong>OR</strong> of zero or more members of the <strong>MFASF_STREAMSELECTOR_FLAGS</strong> enumeration specifying the options to use.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms701635</doc-id>
        /// <unmanaged>HRESULT IMFASFStreamSelector::SetStreamSelectorFlags([In] DWORD dwStreamSelectorFlags)</unmanaged>
        /// <unmanaged-short>IMFASFStreamSelector::SetStreamSelectorFlags</unmanaged-short>
        internal unsafe void SetStreamSelectorFlags(System.Int32 dwStreamSelectorFlags)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamSelectorFlags, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ac6b7889-0740-4d51-8619-905994a55cc6")]
    public partial class AsyncResult : SharpDX.ComObject
    {
        public AsyncResult(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator AsyncResult(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new AsyncResult(nativePtr);
        /// <summary>
        /// <p> </p><p>Returns the state object specified by the caller in the asynchronous <strong>Begin</strong> method.</p>
        /// </summary>
        /// <param name = "unkStateOut"><dd> <p>Receives a reference to the state object's <strong><see cref = "SharpDX.IUnknown"/></strong> interface. If the value is not <strong><c>null</c></strong>, the caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>There is no state object associated with this asynchronous result.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The caller of the asynchronous method specifies the state object, and can use it for any caller-defined purpose. The state object can be <strong><c>null</c></strong>. If the state object is <strong><c>null</c></strong>, <strong>GetState</strong> returns <strong>E_POINTER</strong>.</p><p>If you are implementing an asynchronous method, set the state object on the through the <em>punkState</em> parameter of the <strong>MFCreateAsyncResult</strong> function.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970576</doc-id>
        /// <unmanaged>HRESULT IMFAsyncResult::GetState([Out] IUnknown** ppunkState)</unmanaged>
        /// <unmanaged-short>IMFAsyncResult::GetState</unmanaged-short>
        internal unsafe void GetState(out System.IntPtr unkStateOut)
        {
            SharpDX.Result __result__;
            fixed (void *unkStateOut_ = &unkStateOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unkStateOut_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Returns the status of the asynchronous operation.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The operation completed successfully.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms702095</doc-id>
        /// <unmanaged>HRESULT IMFAsyncResult::GetStatus()</unmanaged>
        /// <unmanaged-short>IMFAsyncResult::GetStatus</unmanaged-short>
        internal unsafe SharpDX.Result GetStatus()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
            return __result__;
        }

        /// <summary>
        /// <p> </p><p>Sets the status of the asynchronous operation.</p>
        /// </summary>
        /// <param name = "hrStatus"><dd> <p>The status of the asynchronous operation.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If you implement an asynchronous method, call <strong>SetStatus</strong> to set the status code for the operation.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970435</doc-id>
        /// <unmanaged>HRESULT IMFAsyncResult::SetStatus([In] HRESULT hrStatus)</unmanaged>
        /// <unmanaged-short>IMFAsyncResult::SetStatus</unmanaged-short>
        internal unsafe void SetStatus(SharpDX.Result hrStatus)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, hrStatus, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Returns an object associated with the asynchronous operation. The type of object, if any, depends on the asynchronous method that was called.</p>
        /// </summary>
        /// <param name = "objectOut"><dd> <p>Receives a reference to the object's <strong><see cref = "SharpDX.IUnknown"/></strong> interface. If no object is associated with the operation, this parameter receives the value <strong><c>null</c></strong>. If the value is not <strong><c>null</c></strong>, the caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>There is no object associated with this asynchronous result.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Typically, this object is used by the component that implements the asynchronous method. It provides a way for the function that invokes the callback to pass information to the asynchronous <strong>End...</strong> method that completes the operation.</p><p>If you are implementing an asynchronous method, you can set the object through the <em>punkObject</em> parameter of the <strong>MFCreateAsyncResult</strong> function.</p><p>If the asynchronous result object's internal <strong><see cref = "SharpDX.IUnknown"/></strong> reference is <strong><c>null</c></strong>, the method returns <strong>E_POINTER</strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970500</doc-id>
        /// <unmanaged>HRESULT IMFAsyncResult::GetObjectW([Out] IUnknown** ppObject)</unmanaged>
        /// <unmanaged-short>IMFAsyncResult::GetObjectW</unmanaged-short>
        internal unsafe void GetObject(out SharpDX.IUnknown objectOut)
        {
            System.IntPtr objectOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &objectOut_, (*(void ***)this._nativePointer)[6]);
            if (objectOut_ != System.IntPtr.Zero)
                objectOut = new SharpDX.ComObject(objectOut_);
            else
                objectOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Returns the state object specified by the caller in the asynchronous <strong>Begin</strong> method, without incrementing the object's reference count.</p>
        /// </summary>
        /// <returns><p>Returns a reference to the state object's <strong><see cref = "SharpDX.IUnknown"/></strong> interface, or <strong><c>null</c></strong> if no object was set. This reference does not have an outstanding reference count. If you store this reference, you must call <strong>AddRef</strong> on the reference.</p></returns>
        /// <remarks>
        /// <p>This method cannot be called remotely.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms696238</doc-id>
        /// <unmanaged>IUnknown* IMFAsyncResult::GetStateNoAddRef()</unmanaged>
        /// <unmanaged-short>IMFAsyncResult::GetStateNoAddRef</unmanaged-short>
        internal unsafe SharpDX.ComObject GetStateNoAddRef()
        {
            SharpDX.ComObject __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.ComObject(__result__native);
            else
                __result__ = null;
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("26a0adc3-ce26-4672-9304-69552edd3faf")]
    public partial class AudioMediaType : SharpDX.MediaFoundation.MediaType
    {
        public AudioMediaType(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator AudioMediaType(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new AudioMediaType(nativePtr);
        /// <summary>
        /// <p>[<strong>GetAudioFormat</strong> is no longer available for use as of Windows?7. Instead, use the media type attributes to get the properties of the audio format.]</p><p> Returns a reference to a <strong><see cref = "SharpDX.Multimedia.WaveFormat"/></strong> structure that describes the audio format.</p>
        /// </summary>
        /// <remarks>
        /// <p>If you need to convert the media type into a <strong><see cref = "SharpDX.Multimedia.WaveFormat"/></strong> structure, call <strong>MFCreateWaveFormatExFromMFMediaType</strong>.</p><p> There are no guarantees about how long the returned reference is valid.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>aa473803</doc-id>
        /// <unmanaged>GetAudioFormat</unmanaged>
        /// <unmanaged-short>GetAudioFormat</unmanaged-short>
        public SharpDX.Multimedia.WaveFormat AudioFormat
        {
            get => GetAudioFormat();
        }

        /// <summary>
        /// <p>[<strong>GetAudioFormat</strong> is no longer available for use as of Windows?7. Instead, use the media type attributes to get the properties of the audio format.]</p><p> Returns a reference to a <strong><see cref = "SharpDX.Multimedia.WaveFormat"/></strong> structure that describes the audio format.</p>
        /// </summary>
        /// <returns><p> This method returns a reference to a <strong><see cref = "SharpDX.Multimedia.WaveFormat"/></strong> structure.</p></returns>
        /// <remarks>
        /// <p>If you need to convert the media type into a <strong><see cref = "SharpDX.Multimedia.WaveFormat"/></strong> structure, call <strong>MFCreateWaveFormatExFromMFMediaType</strong>.</p><p> There are no guarantees about how long the returned reference is valid.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>aa473803</doc-id>
        /// <unmanaged>const WAVEFORMATEX* IMFAudioMediaType::GetAudioFormat()</unmanaged>
        /// <unmanaged-short>IMFAudioMediaType::GetAudioFormat</unmanaged-short>
        internal unsafe SharpDX.Multimedia.WaveFormat GetAudioFormat()
        {
            SharpDX.Multimedia.WaveFormat __result__;
            SharpDX.Multimedia.WaveFormat.__Native __result__native = default (SharpDX.Multimedia.WaveFormat.__Native);
            __result__ = default (SharpDX.Multimedia.WaveFormat);
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__native, (*(void ***)this._nativePointer)[38]);
            __result__.__MarshalFrom(ref __result__native);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a0638c2b-6465-4395-9ae7-a321a9fd2856")]
    public partial class AudioPolicy : SharpDX.ComObject
    {
        public AudioPolicy(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator AudioPolicy(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new AudioPolicy(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the group of sessions to which this audio session belongs.</p>
        /// </summary>
        /// <remarks>
        /// <p>If two or more audio sessions share the same group, the Windows volume control displays one slider control for the entire group. Otherwise, it displays a slider for each session. For more information, see <strong>IAudioSessionControl::SetGroupingParam</strong> in the core audio API documentation.</p>
        /// </remarks>
        /// <doc-id>ms698967</doc-id>
        /// <unmanaged>GetGroupingParam / SetGroupingParam</unmanaged>
        /// <unmanaged-short>GetGroupingParam</unmanaged-short>
        public System.Guid GroupingParam
        {
            get
            {
                GetGroupingParam(out var __output__);
                return __output__;
            }

            set => SetGroupingParam(value);
        }

        /// <summary>
        /// <p> </p><p>Assigns the audio session to a group of sessions.</p>
        /// </summary>
        /// <param name = "rguidClass"><dd> <p>A <strong><see cref = "System.Guid"/></strong> that identifies the session group. Groups are application-defined. To create a new session group, assign a new <see cref = "System.Guid"/>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If two or more audio sessions share the same group, the Windows volume control displays one slider control for the entire group. Otherwise, it displays a slider for each session. For more information, see <strong>IAudioSessionControl::SetGroupingParam</strong> in the core audio API documentation.</p>
        /// </remarks>
        /// <doc-id>ms696185</doc-id>
        /// <unmanaged>HRESULT IMFAudioPolicy::SetGroupingParam([In] const GUID&amp; rguidClass)</unmanaged>
        /// <unmanaged-short>IMFAudioPolicy::SetGroupingParam</unmanaged-short>
        internal unsafe void SetGroupingParam(System.Guid rguidClass)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &rguidClass, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the group of sessions to which this audio session belongs.</p>
        /// </summary>
        /// <param name = "guidClassRef"><dd> <p>Receives a <see cref = "System.Guid"/> that identifies the session group.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If two or more audio sessions share the same group, the Windows volume control displays one slider control for the entire group. Otherwise, it displays a slider for each session. For more information, see <strong>IAudioSessionControl::SetGroupingParam</strong> in the core audio API documentation.</p>
        /// </remarks>
        /// <doc-id>ms698967</doc-id>
        /// <unmanaged>HRESULT IMFAudioPolicy::GetGroupingParam([Out] GUID* pguidClass)</unmanaged>
        /// <unmanaged-short>IMFAudioPolicy::GetGroupingParam</unmanaged-short>
        internal unsafe void GetGroupingParam(out System.Guid guidClassRef)
        {
            guidClassRef = default (System.Guid);
            SharpDX.Result __result__;
            fixed (void *guidClassRef_ = &guidClassRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, guidClassRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the display name of the audio session. The Windows volume control displays this name.</p>
        /// </summary>
        /// <param name = "szNameRef"><dd> <p>A null-terminated wide-character string that contains the display name.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the application does not set a display name, Windows creates one.</p>
        /// </remarks>
        /// <doc-id>ms697038</doc-id>
        /// <unmanaged>HRESULT IMFAudioPolicy::SetDisplayName([In] const wchar_t* pszName)</unmanaged>
        /// <unmanaged-short>IMFAudioPolicy::SetDisplayName</unmanaged-short>
        public unsafe void SetDisplayName(System.String szNameRef)
        {
            SharpDX.Result __result__;
            fixed (char *szNameRef_ = szNameRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szNameRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the display name of the audio session. The Windows volume control displays this name.</p>
        /// </summary>
        /// <param name = "szNameRef"><dd> <p>Receives a reference to the display name string. The caller must free the memory allocated for the string by calling <strong>CoTaskMemFree</strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the application does not set a display name, Windows creates one.</p>
        /// </remarks>
        /// <doc-id>ms698992</doc-id>
        /// <unmanaged>HRESULT IMFAudioPolicy::GetDisplayName([Out] wchar_t** pszName)</unmanaged>
        /// <unmanaged-short>IMFAudioPolicy::GetDisplayName</unmanaged-short>
        public unsafe void GetDisplayName(System.IntPtr szNameRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szNameRef, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Sets the icon resource for the audio session. The Windows volume control displays this icon. </p>
        /// </summary>
        /// <param name = "szPathRef"><dd> <p>A wide-character string that specifies the icon. See Remarks.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The icon path has the format "path,index" or "path,-id", where <em>path</em> is the fully qualified path to a DLL, executable file, or icon file; <em>index</em> is the zero-based index of the icon within the file; and <em>id</em> is a resource identifier. Note that resource identifiers are preceded by a minus sign (-) to distinguish them from indexes. The path can contain environment variables, such as "%windir%". For more information, see <strong>IAudioSessionControl::SetIconPath</strong> in the Windows SDK.</p>
        /// </remarks>
        /// <doc-id>ms694065</doc-id>
        /// <unmanaged>HRESULT IMFAudioPolicy::SetIconPath([In] const wchar_t* pszPath)</unmanaged>
        /// <unmanaged-short>IMFAudioPolicy::SetIconPath</unmanaged-short>
        public unsafe void SetIconPath(System.String szPathRef)
        {
            SharpDX.Result __result__;
            fixed (char *szPathRef_ = szPathRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szPathRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the icon resource for the audio session. The Windows volume control displays this icon.</p>
        /// </summary>
        /// <param name = "szPathRef"><dd> <p>Receives a reference to a wide-character string that specifies a shell resource. The format of the string is described in the topic <strong>IMFAudioPolicy::SetIconPath</strong>. The caller must free the memory allocated for the string by calling <strong>CoTaskMemFree</strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the application did not set an icon path, the method returns an empty string ("").</p><p>For more information, see <strong>IAudioSessionControl::GetIconPath</strong> in the core audio API documentation.</p>
        /// </remarks>
        /// <doc-id>ms704858</doc-id>
        /// <unmanaged>HRESULT IMFAudioPolicy::GetIconPath([Out] wchar_t** pszPath)</unmanaged>
        /// <unmanaged-short>IMFAudioPolicy::GetIconPath</unmanaged-short>
        public unsafe void GetIconPath(System.IntPtr szPathRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szPathRef, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("76B1BBDB-4EC8-4f36-B106-70A9316DF593")]
    public partial class AudioStreamVolume : SharpDX.ComObject
    {
        public AudioStreamVolume(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator AudioStreamVolume(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new AudioStreamVolume(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the number of channels in the audio stream.</p>
        /// </summary>
        /// <doc-id>aa373760</doc-id>
        /// <unmanaged>GetChannelCount</unmanaged>
        /// <unmanaged-short>GetChannelCount</unmanaged-short>
        public System.Int32 ChannelCount
        {
            get
            {
                GetChannelCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of channels in the audio stream.</p>
        /// </summary>
        /// <param name = "dwCountRef"><dd> <p>Receives the number of channels in the audio stream.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>aa373760</doc-id>
        /// <unmanaged>HRESULT IMFAudioStreamVolume::GetChannelCount([Out] unsigned int* pdwCount)</unmanaged>
        /// <unmanaged-short>IMFAudioStreamVolume::GetChannelCount</unmanaged-short>
        internal unsafe void GetChannelCount(out System.Int32 dwCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwCountRef_ = &dwCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwCountRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the volume level for a specified channel in the audio stream.</p>
        /// </summary>
        /// <param name = "dwIndex"><dd> <p>Zero-based index of the audio channel. To get the number of channels, call <strong>IMFAudioStreamVolume::GetChannelCount</strong>.</p> </dd></param>
        /// <param name = "fLevel"><dd> <p>Volume level for the channel.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>aa370771</doc-id>
        /// <unmanaged>HRESULT IMFAudioStreamVolume::SetChannelVolume([In] unsigned int dwIndex,[In] const float fLevel)</unmanaged>
        /// <unmanaged-short>IMFAudioStreamVolume::SetChannelVolume</unmanaged-short>
        public unsafe void SetChannelVolume(System.Int32 dwIndex, System.Single fLevel)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwIndex, fLevel, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the volume level for a specified channel in the audio stream.</p>
        /// </summary>
        /// <param name = "dwIndex"><dd> <p>Zero-based index of the audio channel. To get the number of channels, call <strong>IMFAudioStreamVolume::GetChannelCount</strong>.</p> </dd></param>
        /// <param name = "fLevelRef"><dd> <p>Receives the volume level for the channel.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>aa369737</doc-id>
        /// <unmanaged>HRESULT IMFAudioStreamVolume::GetChannelVolume([In] unsigned int dwIndex,[Out] float* pfLevel)</unmanaged>
        /// <unmanaged-short>IMFAudioStreamVolume::GetChannelVolume</unmanaged-short>
        public unsafe void GetChannelVolume(System.Int32 dwIndex, out System.Single fLevelRef)
        {
            SharpDX.Result __result__;
            fixed (void *fLevelRef_ = &fLevelRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwIndex, fLevelRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the individual volume levels for all of the channels in the audio stream.</p>
        /// </summary>
        /// <param name = "dwCount"><dd> <p>Number of elements in the <em>pfVolumes</em> array. The value must equal the number of channels. To get the number of channels, call <strong>IMFAudioStreamVolume::GetChannelCount</strong>.</p> </dd></param>
        /// <param name = "fVolumesRef"><dd> <p>Address of an array of size <em>dwCount</em>, allocated by the caller. The array specifies the volume levels for all of the channels. Before calling the method, set each element of the array to the desired volume level for the channel.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>aa370454</doc-id>
        /// <unmanaged>HRESULT IMFAudioStreamVolume::SetAllVolumes([In] unsigned int dwCount,[In, Buffer] const float* pfVolumes)</unmanaged>
        /// <unmanaged-short>IMFAudioStreamVolume::SetAllVolumes</unmanaged-short>
        public unsafe void SetAllVolumes(System.Int32 dwCount, System.Single[] fVolumesRef)
        {
            SharpDX.Result __result__;
            fixed (void *fVolumesRef_ = fVolumesRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwCount, fVolumesRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the volume levels for all of the channels in the audio stream.</p>
        /// </summary>
        /// <param name = "dwCount"><dd> <p>Number of elements in the <em>pfVolumes</em> array. The value must equal the number of channels. To get the number of channels, call <strong>IMFAudioStreamVolume::GetChannelCount</strong>.</p> </dd></param>
        /// <param name = "fVolumesRef"><dd> <p>Address of an array of size <em>dwCount</em>, allocated by the caller. The method fills the array with the volume level for each channel in the stream.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>aa373642</doc-id>
        /// <unmanaged>HRESULT IMFAudioStreamVolume::GetAllVolumes([In] unsigned int dwCount,[Out, Buffer] float* pfVolumes)</unmanaged>
        /// <unmanaged-short>IMFAudioStreamVolume::GetAllVolumes</unmanaged-short>
        public unsafe void GetAllVolumes(System.Int32 dwCount, System.Single[] fVolumesRef)
        {
            SharpDX.Result __result__;
            fixed (void *fVolumesRef_ = fVolumesRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwCount, fVolumesRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7DC9D5F9-9ED9-44ec-9BBF-0600BB589FBB")]
    public partial class Buffer2D : SharpDX.ComObject
    {
        public Buffer2D(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Buffer2D(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Buffer2D(nativePtr);
        /// <summary>
        /// <p> </p><p>Queries whether the buffer is contiguous in its native format.</p>
        /// </summary>
        /// <remarks>
        /// <p>For a definition of contiguous as it applies to 2-D buffers, see the Remarks section in <strong><see cref = "SharpDX.MediaFoundation.Buffer2D"/></strong> interface. For non-contiguous buffers, the <strong>IMFMediaBuffer::Lock</strong> method must perform an internal copy.</p>
        /// </remarks>
        /// <doc-id>ms701629</doc-id>
        /// <unmanaged>IsContiguousFormat</unmanaged>
        /// <unmanaged-short>IsContiguousFormat</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsContiguousFormat
        {
            get
            {
                IsContiguousFormat_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of bytes needed to store the contents of the buffer in contiguous format.</p>
        /// </summary>
        /// <remarks>
        /// <p>For a definition of contiguous as it applies to 2-D buffers, see the Remarks section in <strong><see cref = "SharpDX.MediaFoundation.Buffer2D"/></strong> interface.</p>
        /// </remarks>
        /// <doc-id>ms696971</doc-id>
        /// <unmanaged>GetContiguousLength</unmanaged>
        /// <unmanaged-short>GetContiguousLength</unmanaged-short>
        public System.Int32 ContiguousLength
        {
            get
            {
                GetContiguousLength(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Gives the caller access to the memory in the buffer.</p>
        /// </summary>
        /// <param name = "bScanline0Out"><dd> <p>Receives a reference to the first byte of the top row of pixels in the image. The top row is defined as the top row when the image is presented to the viewer, and might not be the first row in memory.</p> </dd></param>
        /// <param name = "lPitchRef"><dd> <p>Receives the surface stride, in bytes. The stride might be negative, indicating that the image is oriented from the bottom up in memory.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>D3DERR_INVALIDCALL</strong></dt> </dl> </td><td> <p>Cannot lock the Direct3D surface.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The buffer cannot be locked at this time.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If <em>p</em> is a reference to the first byte in a row of pixels, <em>p</em> + (*<em>plPitch</em>) points to the first byte in the next row of pixels. A buffer might contain padding after each row of pixels, so the stride might be wider than the width of the image in bytes. Do not access the memory that is reserved for padding bytes, because it might not be read-accessible or write-accessible. For more information, see Image Stride.</p><p>The reference returned in <em>pbScanline0</em> remains valid as long as the caller holds the lock. When you are done accessing the memory, call <strong>IMF2DBuffer::Unlock2D</strong> to unlock the buffer. You must call <strong>Unlock2D</strong> once for each call to <strong>Lock2D</strong>. After you unlock the buffer, the reference returned in <em>pbScanline0</em> is no longer valid and should not be used. Generally, it is best to call <strong>Lock2D</strong> only when you need to access the buffer memory, and not earlier.</p><p>The values returned by the <strong>IMFMediaBuffer::GetCurrentLength</strong> and <strong>IMFMediaBuffer::GetMaxLength</strong> methods do not apply to the buffer that is returned by the <strong>Lock2D</strong> method. For the same reason, you do not need to call <strong>IMFMediaBuffer::SetCurrentLength</strong> after manipulating the data in the buffer returned by the <strong>Lock2D</strong> method.</p><p>The <strong>IMFMediaBuffer::Lock</strong> method fails while the <strong>Lock2D</strong> lock is held, and vice-versa. Applications should use only one of these methods at a time.</p><p>When the underlying buffer is a Direct3D surface, the method fails if the surface is not lockable.</p>
        /// </remarks>
        /// <doc-id>ms700182</doc-id>
        /// <unmanaged>HRESULT IMF2DBuffer::Lock2D([Out, Buffer] unsigned char** ppbScanline0,[Out] LONG* plPitch)</unmanaged>
        /// <unmanaged-short>IMF2DBuffer::Lock2D</unmanaged-short>
        public unsafe void Lock2D(System.Byte[] bScanline0Out, out System.Int32 lPitchRef)
        {
            SharpDX.Result __result__;
            fixed (void *lPitchRef_ = &lPitchRef)
                fixed (void *bScanline0Out_ = bScanline0Out)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bScanline0Out_, lPitchRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Unlocks a buffer that was previously locked. Call this method once for each call to <strong>IMF2DBuffer::Lock2D</strong>.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697066</doc-id>
        /// <unmanaged>HRESULT IMF2DBuffer::Unlock2D()</unmanaged>
        /// <unmanaged-short>IMF2DBuffer::Unlock2D</unmanaged-short>
        public unsafe void Unlock2D()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves a reference to the buffer memory and the surface stride.</p>
        /// </summary>
        /// <param name = "bScanline0Ref"><dd> <p>Receives a reference to the first byte of the top row of pixels in the image.</p> </dd></param>
        /// <param name = "lPitchRef"><dd> <p>Receives the stride, in bytes. For more information, see Image Stride.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>ERROR_INVALID_FUNCTION</strong></dt> </dl> </td><td> <p>You must lock the buffer before calling this method.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Before calling this method, you must lock the buffer by calling <strong>IMF2DBuffer::Lock2D</strong>. The reference returned in <em>plPitch</em> is valid only while the buffer remains locked.</p>
        /// </remarks>
        /// <doc-id>ms694042</doc-id>
        /// <unmanaged>HRESULT IMF2DBuffer::GetScanline0AndPitch([Out] unsigned char** pbScanline0,[Out] LONG* plPitch)</unmanaged>
        /// <unmanaged-short>IMF2DBuffer::GetScanline0AndPitch</unmanaged-short>
        public unsafe void GetScanline0AndPitch(out System.Byte bScanline0Ref, out System.Int32 lPitchRef)
        {
            SharpDX.Result __result__;
            fixed (void *lPitchRef_ = &lPitchRef)
                fixed (void *bScanline0Ref_ = &bScanline0Ref)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bScanline0Ref_, lPitchRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Queries whether the buffer is contiguous in its native format.</p>
        /// </summary>
        /// <param name = "fIsContiguousRef"><dd> <p>Receives a Boolean value. The value is <strong>TRUE</strong> if the buffer is contiguous, and <strong><see cref = "SharpDX.Result.False"/></strong> otherwise.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>For a definition of contiguous as it applies to 2-D buffers, see the Remarks section in <strong><see cref = "SharpDX.MediaFoundation.Buffer2D"/></strong> interface. For non-contiguous buffers, the <strong>IMFMediaBuffer::Lock</strong> method must perform an internal copy.</p>
        /// </remarks>
        /// <doc-id>ms701629</doc-id>
        /// <unmanaged>HRESULT IMF2DBuffer::IsContiguousFormat([Out] BOOL* pfIsContiguous)</unmanaged>
        /// <unmanaged-short>IMF2DBuffer::IsContiguousFormat</unmanaged-short>
        internal unsafe void IsContiguousFormat_(out SharpDX.Mathematics.Interop.RawBool fIsContiguousRef)
        {
            fIsContiguousRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fIsContiguousRef_ = &fIsContiguousRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fIsContiguousRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of bytes needed to store the contents of the buffer in contiguous format.</p>
        /// </summary>
        /// <param name = "cbLengthRef"><dd> <p>Receives the number of bytes needed to store the contents of the buffer in contiguous format.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>For a definition of contiguous as it applies to 2-D buffers, see the Remarks section in <strong><see cref = "SharpDX.MediaFoundation.Buffer2D"/></strong> interface.</p>
        /// </remarks>
        /// <doc-id>ms696971</doc-id>
        /// <unmanaged>HRESULT IMF2DBuffer::GetContiguousLength([Out] DWORD* pcbLength)</unmanaged>
        /// <unmanaged-short>IMF2DBuffer::GetContiguousLength</unmanaged-short>
        internal unsafe void GetContiguousLength(out System.Int32 cbLengthRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbLengthRef_ = &cbLengthRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cbLengthRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Copies this buffer into the caller's buffer, converting the data to contiguous format.</p>
        /// </summary>
        /// <param name = "bDestBufferRef"><dd> <p>Pointer to the destination buffer where the data will be copied. The caller allocates the buffer.</p> </dd></param>
        /// <param name = "cbDestBuffer"><dd> <p>Size of the destination buffer, in bytes. To get the required size, call <strong>IMF2DBuffer::GetContiguousLength</strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid size specified in <em>pbDestBuffer</em>.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the original buffer is not contiguous, this method converts the contents into contiguous format during the copy. For a definition of contiguous as it applies to 2-D buffers, see the Remarks section in <strong><see cref = "SharpDX.MediaFoundation.Buffer2D"/></strong> interface.</p>
        /// </remarks>
        /// <doc-id>ms696215</doc-id>
        /// <unmanaged>HRESULT IMF2DBuffer::ContiguousCopyTo([Out, Buffer] unsigned char* pbDestBuffer,[In] DWORD cbDestBuffer)</unmanaged>
        /// <unmanaged-short>IMF2DBuffer::ContiguousCopyTo</unmanaged-short>
        public unsafe void ContiguousCopyTo(System.Byte[] bDestBufferRef, System.Int32 cbDestBuffer)
        {
            SharpDX.Result __result__;
            fixed (void *bDestBufferRef_ = bDestBufferRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bDestBufferRef_, cbDestBuffer, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Copies data to this buffer from a buffer that has a contiguous format.</p>
        /// </summary>
        /// <param name = "bSrcBufferRef"><dd> <p>Pointer to the source buffer. The caller allocates the buffer.</p> </dd></param>
        /// <param name = "cbSrcBuffer"><dd> <p>Size of the source buffer, in bytes. To get the maximum size of the buffer, call <strong>IMF2DBuffer::GetContiguousLength</strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method copies the contents of the source buffer into the buffer that is managed by this <strong><see cref = "SharpDX.MediaFoundation.Buffer2D"/></strong> object. The source buffer must be in contiguous format. While copying, the method converts the contents into the destination buffer's native format, correcting for the buffer's pitch if necessary.</p><p>For a definition of contiguous as it applies to 2-D buffers, see the Remarks section in the <strong><see cref = "SharpDX.MediaFoundation.Buffer2D"/></strong> interface topic.</p>
        /// </remarks>
        /// <doc-id>ms700162</doc-id>
        /// <unmanaged>HRESULT IMF2DBuffer::ContiguousCopyFrom([In, Buffer] const unsigned char* pbSrcBuffer,[In] DWORD cbSrcBuffer)</unmanaged>
        /// <unmanaged-short>IMF2DBuffer::ContiguousCopyFrom</unmanaged-short>
        public unsafe void ContiguousCopyFrom(System.Byte[] bSrcBufferRef, System.Int32 cbSrcBuffer)
        {
            SharpDX.Result __result__;
            fixed (void *bSrcBufferRef_ = bSrcBufferRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bSrcBufferRef_, cbSrcBuffer, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("33ae5ea6-4316-436f-8ddd-d73d22f829ec")]
    public partial class Buffer2D2 : SharpDX.MediaFoundation.Buffer2D
    {
        public Buffer2D2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Buffer2D2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Buffer2D2(nativePtr);
        /// <summary>
        /// <p>Gives the caller access to the memory in the buffer.</p>
        /// </summary>
        /// <param name = "lockFlags"><dd> <p>A member of the <strong><see cref = "SharpDX.MediaFoundation.Buffer2DLockFlags"/></strong> enumeration that specifies whether to lock the buffer for reading, writing, or both.</p> </dd></param>
        /// <param name = "bScanline0Out"><dd> <p>Receives a reference to the first byte of the top row of pixels in the image. The top row is defined as the top row when the image is presented to the viewer, and might not be the first row in memory. </p> </dd></param>
        /// <param name = "lPitchRef"><dd> <p>Receives the surface stride, in bytes. The stride might be negative, indicating that the image is oriented from the bottom up in memory. </p> </dd></param>
        /// <param name = "bBufferStartOut"><dd> <p>Receives a reference to the start of the accessible buffer in memory.</p> </dd></param>
        /// <param name = "cbBufferLengthRef"><dd> <p>Receives the length of the buffer, in bytes.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>Invalid request. The buffer might already be locked with an incompatible locking flag. See Remarks.</p> </td></tr> <tr><td> <dl> <dt><strong> E_OUTOFMEMORY</strong></dt> </dl> </td><td> <p>There is insufficient memory to complete the operation. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>When you are done accessing the memory, call <strong>IMF2DBuffer::Unlock2D</strong> to unlock the buffer. You must call <strong>Unlock2D</strong> once for each call to <strong>Lock2DSize</strong>.</p><p>This method is equivalent to the <strong>IMF2DBuffer::Lock2D</strong> method. However, <strong>Lock2DSize</strong> is preferred because it enables the caller to validate memory references, and because it supports read-only locks. A buffer is not guaranteed to support the <strong><see cref = "SharpDX.MediaFoundation.Buffer2D2"/></strong> interface. To access a buffer, you should try the following methods in the order listed:</p><ol> <li><strong>IMF2DBuffer2::Lock2DSize</strong></li> <li> <strong>IMF2DBuffer::Lock2D</strong> </li> <li> <strong>IMFMediaBuffer::Lock</strong> </li> </ol><p>The <em>ppbBufferStart</em> and <em>pcbBufferLength</em> parameters receive the bounds of the buffer memory. Use these values to guard against buffer overruns. Use the values of <em>ppbScanline0</em> and <em>plPitch</em> to access the image data. If the image is bottom-up in memory, <em>ppbScanline0</em> will point to the last scan line in memory and <em>plPitch</em> will be negative. For more information, see Image Stride.</p><p>The <em>lockFlags</em> parameter specifies whether the buffer is locked for read-only access, write-only access,  or read/write access. </p><ul> <li>If the buffer is already locked for read-only access, it cannot be locked for write access.</li> <li>If the buffer is already locked for write-only access, it cannot be locked for read access.</li> <li>If the buffer is already locked for read/write acess, it can be locked for read or write acess.</li> </ul><p>When possible, use a read-only or write-only lock, and avoid locking the buffer for read/write access. If the buffer represents a DirectX Graphics Infrastructure (DXGI) surface, a read/write lock can cause an extra copy between CPU memory and GPU memory.</p>
        /// </remarks>
        /// <doc-id>hh447829</doc-id>
        /// <unmanaged>HRESULT IMF2DBuffer2::Lock2DSize([In] MF2DBuffer_LockFlags lockFlags,[Out, Buffer] unsigned char** ppbScanline0,[Out] LONG* plPitch,[Out, Buffer] unsigned char** ppbBufferStart,[Out] DWORD* pcbBufferLength)</unmanaged>
        /// <unmanaged-short>IMF2DBuffer2::Lock2DSize</unmanaged-short>
        public unsafe void Lock2DSize(SharpDX.MediaFoundation.Buffer2DLockFlags lockFlags, System.Byte[] bScanline0Out, out System.Int32 lPitchRef, System.Byte[] bBufferStartOut, out System.Int32 cbBufferLengthRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbBufferLengthRef_ = &cbBufferLengthRef)
                fixed (void *bBufferStartOut_ = bBufferStartOut)
                    fixed (void *lPitchRef_ = &lPitchRef)
                        fixed (void *bScanline0Out_ = bScanline0Out)
                            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)lockFlags), bScanline0Out_, lPitchRef_, bBufferStartOut_, cbBufferLengthRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Copies the buffer to another 2D buffer object.</p>
        /// </summary>
        /// <param name = "destBufferRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.Buffer2D2"/></strong> interface of the destination buffer.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The destination buffer must be at least as large as the source buffer.</p>
        /// </remarks>
        /// <doc-id>hh447828</doc-id>
        /// <unmanaged>HRESULT IMF2DBuffer2::Copy2DTo([In] IMF2DBuffer2* pDestBuffer)</unmanaged>
        /// <unmanaged-short>IMF2DBuffer2::Copy2DTo</unmanaged-short>
        public unsafe void Copy2DTo(SharpDX.MediaFoundation.Buffer2D2 destBufferRef)
        {
            System.IntPtr destBufferRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            destBufferRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Buffer2D2>(destBufferRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)destBufferRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("24cd47f7-81d8-4785-adb2-af697a963cd2")]
    public partial class BufferListNotify : SharpDX.ComObject
    {
        public BufferListNotify(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BufferListNotify(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BufferListNotify(nativePtr);
        /// <summary>
        /// <p>Indicates that a <strong><see cref = "SharpDX.MediaFoundation.SourceBuffer"/></strong> has been added.</p>
        /// </summary>
        /// <doc-id>dn280675</doc-id>
        /// <unmanaged>void IMFBufferListNotify::OnAddSourceBuffer()</unmanaged>
        /// <unmanaged-short>IMFBufferListNotify::OnAddSourceBuffer</unmanaged-short>
        public unsafe void OnAddSourceBuffer()
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[3]);
        }

        /// <summary>
        /// <p>Indicates that a <strong><see cref = "SharpDX.MediaFoundation.SourceBuffer"/></strong> has been removed.</p>
        /// </summary>
        /// <doc-id>dn280676</doc-id>
        /// <unmanaged>void IMFBufferListNotify::OnRemoveSourceBuffer()</unmanaged>
        /// <unmanaged-short>IMFBufferListNotify::OnRemoveSourceBuffer</unmanaged-short>
        public unsafe void OnRemoveSourceBuffer()
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[4]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ad4c1b00-4bf7-422f-9175-756693d9130d")]
    public partial class ByteStream : SharpDX.ComObject, SharpDX.MediaFoundation.IByteStream
    {
        public ByteStream(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ByteStream(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ByteStream(nativePtr);
        /// <summary>
        /// <p> Retrieves the characteristics of the byte stream. </p>
        /// </summary>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms698962</doc-id>
        /// <unmanaged>GetCapabilities</unmanaged>
        /// <unmanaged-short>GetCapabilities</unmanaged-short>
        public System.Int32 Capabilities_
        {
            get
            {
                GetCapabilities_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Retrieves or sets the length of the stream. </p>
        /// </summary>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms698941</doc-id>
        /// <unmanaged>GetLength / SetLength</unmanaged>
        /// <unmanaged-short>GetLength</unmanaged-short>
        public System.Int64 Length_
        {
            get
            {
                GetLength_(out var __output__);
                return __output__;
            }

            set => SetLength_(value);
        }

        /// <summary>
        /// <p>Retrieves or sets the current read or write position in the stream. </p>
        /// </summary>
        /// <remarks>
        /// <p> The methods that update the current position are <strong>Read</strong>, <strong>BeginRead</strong>, <strong>Write</strong>, <strong>BeginWrite</strong>, <strong>SetCurrentPosition</strong>, and <strong>Seek</strong>. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms704059</doc-id>
        /// <unmanaged>GetCurrentPosition / SetCurrentPosition</unmanaged>
        /// <unmanaged-short>GetCurrentPosition</unmanaged-short>
        public System.Int64 CurrentPosition_
        {
            get
            {
                GetCurrentPosition_(out var __output__);
                return __output__;
            }

            set => SetCurrentPosition_(value);
        }

        /// <summary>
        /// <p> </p><p>Queries whether the current position has reached the end of the stream.</p>
        /// </summary>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms697369</doc-id>
        /// <unmanaged>IsEndOfStream</unmanaged>
        /// <unmanaged-short>IsEndOfStream</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsEndOfStream_
        {
            get
            {
                IsEndOfStream__(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Retrieves the characteristics of the byte stream. </p>
        /// </summary>
        /// <param name = "dwCapabilitiesRef"><dd> <p>Receives a bitwise <strong>OR</strong> of zero or more flags. The following flags are defined.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>MFBYTESTREAM_IS_READABLE</strong></dt> <dt>0x00000001</dt> </dl> </td><td> <p> The byte stream can be read. </p> </td></tr> <tr><td><dl> <dt><strong>MFBYTESTREAM_IS_WRITABLE</strong></dt> <dt>0x00000002</dt> </dl> </td><td> <p> The byte stream can be written to. </p> </td></tr> <tr><td><dl> <dt><strong>MFBYTESTREAM_IS_SEEKABLE</strong></dt> <dt>0x00000004</dt> </dl> </td><td> <p> The byte stream can be seeked. </p> </td></tr> <tr><td><dl> <dt><strong>MFBYTESTREAM_IS_REMOTE</strong></dt> <dt>0x00000008</dt> </dl> </td><td> <p> The byte stream is from a remote source, such as a network. </p> </td></tr> <tr><td><dl> <dt><strong>MFBYTESTREAM_IS_DIRECTORY</strong></dt> <dt>0x00000080</dt> </dl> </td><td> <p> The byte stream represents a file directory. </p> </td></tr> <tr><td><dl> <dt><strong>MFBYTESTREAM_HAS_SLOW_SEEK</strong></dt> <dt>0x00000100</dt> </dl> </td><td> <p> Seeking within this stream might be slow. For example, the byte stream might download from a network.</p> </td></tr> <tr><td><dl> <dt><strong>MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED</strong></dt> <dt>0x00000200</dt> </dl> </td><td> <p>The byte stream is currently downloading data to a local cache. Read operations on the byte stream might take longer until the data is completely downloaded.</p> <p>This flag is cleared after all of the data has been downloaded.</p> <p>If the <strong>MFBYTESTREAM_HAS_SLOW_SEEK</strong> flag is also set, it means the byte stream must download the entire file sequentially. Otherwise, the byte stream can respond to seek requests by restarting the download from a new point in the stream.</p> </td></tr> <tr><td><dl> <dt><strong>MFBYTESTREAM_SHARE_WRITE</strong></dt> <dt>0x00000400</dt> </dl> </td><td> <p>Another thread or process can open this byte stream for writing. If this flag is present, the length of thebyte stream could change while it is being read. </p> <p>This flag can affect the behavior of byte-stream handlers. For more information, see <see cref = "HandlerAcceptsShareWrite"/>.</p> <strong>Note</strong>??Requires Windows?7 or later. ? </td></tr> <tr><td><dl> <dt><strong>MFBYTESTREAM_DOES_NOT_USE_NETWORK</strong></dt> <dt>0x00000800</dt> </dl> </td><td> <p>The byte stream is not currentlyusing the network to receive the content.  Networking hardwaremay enter a power saving state when this bit is set.</p> <strong>Note</strong>??Requires Windows?8 or later. ? </td></tr> </table> <p>?</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms698962</doc-id>
        /// <unmanaged>HRESULT IMFByteStream::GetCapabilities([Out] DWORD* pdwCapabilities)</unmanaged>
        /// <unmanaged-short>IMFByteStream::GetCapabilities</unmanaged-short>
        internal unsafe void GetCapabilities_(out System.Int32 dwCapabilitiesRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwCapabilitiesRef_ = &dwCapabilitiesRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwCapabilitiesRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Retrieves the length of the stream. </p>
        /// </summary>
        /// <param name = "qwLengthRef"><dd> <p> Receives the length of the stream, in bytes. If the length is unknown, this value is -1. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms698941</doc-id>
        /// <unmanaged>HRESULT IMFByteStream::GetLength([Out] unsigned longlong* pqwLength)</unmanaged>
        /// <unmanaged-short>IMFByteStream::GetLength</unmanaged-short>
        internal unsafe void GetLength_(out System.Int64 qwLengthRef)
        {
            SharpDX.Result __result__;
            fixed (void *qwLengthRef_ = &qwLengthRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, qwLengthRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the length of the stream.</p>
        /// </summary>
        /// <param name = "qwLength"><dd> <p> Length of the stream in bytes. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms697225</doc-id>
        /// <unmanaged>HRESULT IMFByteStream::SetLength([In] unsigned longlong qwLength)</unmanaged>
        /// <unmanaged-short>IMFByteStream::SetLength</unmanaged-short>
        internal unsafe void SetLength_(System.Int64 qwLength)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, qwLength, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Retrieves the current read or write position in the stream. </p>
        /// </summary>
        /// <param name = "qwPositionRef"><dd> <p> Receives the current position, in bytes. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> The methods that update the current position are <strong>Read</strong>, <strong>BeginRead</strong>, <strong>Write</strong>, <strong>BeginWrite</strong>, <strong>SetCurrentPosition</strong>, and <strong>Seek</strong>. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms704059</doc-id>
        /// <unmanaged>HRESULT IMFByteStream::GetCurrentPosition([Out] unsigned longlong* pqwPosition)</unmanaged>
        /// <unmanaged-short>IMFByteStream::GetCurrentPosition</unmanaged-short>
        internal unsafe void GetCurrentPosition_(out System.Int64 qwPositionRef)
        {
            SharpDX.Result __result__;
            fixed (void *qwPositionRef_ = &qwPositionRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, qwPositionRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the current read or write position.</p>
        /// </summary>
        /// <param name = "qwPosition"><dd> <p>New position in the stream, as a byte offset from the start of the stream.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p> Invalid argument. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> If the new position is larger than the length of the stream, the method returns E_INVALIDARG. </p><p><strong> Implementation notes:</strong> This method should update the current position in the stream by setting the current position to the value passed in to the <em>qwPosition</em> parameter. Other methods that can update the current position are <strong>Read</strong>, <strong>BeginRead</strong>, <strong>Write</strong>, <strong>BeginWrite</strong>, and <strong>Seek</strong>.
        /// </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms695238</doc-id>
        /// <unmanaged>HRESULT IMFByteStream::SetCurrentPosition([In] unsigned longlong qwPosition)</unmanaged>
        /// <unmanaged-short>IMFByteStream::SetCurrentPosition</unmanaged-short>
        internal unsafe void SetCurrentPosition_(System.Int64 qwPosition)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, qwPosition, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Queries whether the current position has reached the end of the stream.</p>
        /// </summary>
        /// <param name = "fEndOfStreamRef"><dd> <p> Receives the value <strong>TRUE</strong> if the end of the stream has been reached, or <strong><see cref = "SharpDX.Result.False"/></strong> otherwise. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms697369</doc-id>
        /// <unmanaged>HRESULT IMFByteStream::IsEndOfStream([Out] BOOL* pfEndOfStream)</unmanaged>
        /// <unmanaged-short>IMFByteStream::IsEndOfStream</unmanaged-short>
        internal unsafe void IsEndOfStream__(out SharpDX.Mathematics.Interop.RawBool fEndOfStreamRef)
        {
            fEndOfStreamRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fEndOfStreamRef_ = &fEndOfStreamRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fEndOfStreamRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Reads data from the stream. </p>
        /// </summary>
        /// <param name = "bRef"><dd> <p> Pointer to a buffer that receives the data. The caller must allocate the buffer. </p> </dd></param>
        /// <param name = "cb"><dd> <p> Size of the buffer in bytes. </p> </dd></param>
        /// <param name = "cbReadRef"><dd> <p> Receives the number of bytes that are copied into the buffer. This parameter cannot be <strong><c>null</c></strong>. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> This method reads at most <em>cb</em> bytes from the current position in the stream and copies them into the buffer provided by the caller. The number of bytes that were read is returned in the <em>pcbRead</em> parameter. The method does not return an error code on reaching the end of the file, so the application should check the value in <em>pcbRead</em> after the method returns. </p><p> This method is synchronous. It blocks until the read operation completes. </p><p><strong> Implementation notes:</strong> This method should update the current position in the stream by adding the number of bytes that were read, which is specified by the value returned in the <em>pcbRead</em> parameter,  to the current position. Other methods that can update the current position are <strong>Read</strong>, <strong>Write</strong>, <strong>BeginWrite</strong>, <strong>Seek</strong>, and <strong>SetCurrentPosition</strong>. 
        /// </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms698913</doc-id>
        /// <unmanaged>HRESULT IMFByteStream::Read([In] unsigned char* pb,[In] ULONG cb,[Out] ULONG* pcbRead)</unmanaged>
        /// <unmanaged-short>IMFByteStream::Read</unmanaged-short>
        internal unsafe void Read_(System.IntPtr bRef, System.Int32 cb, out System.Int32 cbReadRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbReadRef_ = &cbReadRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bRef, cb, cbReadRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Begins an asynchronous read operation from the stream. </p>
        /// </summary>
        /// <param name = "bRef"><dd> <p> Pointer to a buffer that receives the data. The caller must allocate the buffer. </p> </dd></param>
        /// <param name = "cb"><dd> <p> Size of the buffer in bytes. </p> </dd></param>
        /// <param name = "callbackRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface. </p> </dd></param>
        /// <param name = "unkStateRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> When all of the data has been read into the buffer, the callback object's <strong>IMFAsyncCallback::Invoke</strong> method is called. At that point, the application should call <strong>IMFByteStream::EndRead</strong> to complete the asynchronous request. </p><p> Do not read from, write to, free, or reallocate the buffer while an asynchronous read is pending. </p><p><strong> Implementation notes:</strong> This method should update the current position in the stream by adding the number of bytes that will be read, which is specified by the value returned in the <em>pcbRead</em> parameter,  to the current position. Other methods that can update the current position are <strong>BeginRead</strong>, <strong>Write</strong>, <strong>BeginWrite</strong>, <strong>Seek</strong>, and <strong>SetCurrentPosition</strong>. 
        /// </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms704810</doc-id>
        /// <unmanaged>HRESULT IMFByteStream::BeginRead([In] unsigned char* pb,[In] ULONG cb,[In] IMFAsyncCallback* pCallback,[In] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFByteStream::BeginRead</unmanaged-short>
        internal unsafe void BeginRead_(System.IntPtr bRef, System.Int32 cb, SharpDX.MediaFoundation.IAsyncCallback callbackRef, System.IntPtr unkStateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bRef, cb, (void *)callbackRef_, (void *)unkStateRef, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Completes an asynchronous read operation. </p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the <strong>IMFAsyncCallback::Invoke</strong> method. </p> </dd></param>
        /// <param name = "cbReadRef"><dd> <p> Receives the number of bytes that were read. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> Call this method after the <strong>IMFByteStream::BeginRead</strong> method completes asynchronously. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms704042</doc-id>
        /// <unmanaged>HRESULT IMFByteStream::EndRead([In] IMFAsyncResult* pResult,[Out] ULONG* pcbRead)</unmanaged>
        /// <unmanaged-short>IMFByteStream::EndRead</unmanaged-short>
        internal unsafe void EndRead_(SharpDX.MediaFoundation.AsyncResult resultRef, out System.Int32 cbReadRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            fixed (void *cbReadRef_ = &cbReadRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, cbReadRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Writes data to the stream.</p>
        /// </summary>
        /// <param name = "bRef"><dd> <p> Pointer to a buffer that contains the data to write. </p> </dd></param>
        /// <param name = "cb"><dd> <p> Size of the buffer in bytes. </p> </dd></param>
        /// <param name = "cbWrittenRef"><dd> <p> Receives the number of bytes that are written. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> This method writes the contents of the <em>pb</em> buffer to the stream, starting at the current stream position. The number of bytes that were written is returned in the <em>pcbWritten</em> parameter. </p><p> This method is synchronous. It blocks until the write operation completes. </p><p><strong>Implementation notes:</strong> This method should update the current position in the stream by adding the number of bytes that were written to the stream, which is specified by the value returned in the <em>pcbWritten</em>, to the current position offset. </p><p> Other methods that can update the current position are <strong>Read</strong>, <strong>BeginRead</strong>, <strong>BeginWrite</strong>, <strong>Seek</strong>, and <strong>SetCurrentPosition</strong>.
        /// </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms703843</doc-id>
        /// <unmanaged>HRESULT IMFByteStream::Write([In] const unsigned char* pb,[In] ULONG cb,[Out] ULONG* pcbWritten)</unmanaged>
        /// <unmanaged-short>IMFByteStream::Write</unmanaged-short>
        internal unsafe void Write_(System.IntPtr bRef, System.Int32 cb, out System.Int32 cbWrittenRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbWrittenRef_ = &cbWrittenRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bRef, cb, cbWrittenRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Begins an asynchronous write operation to the stream. </p>
        /// </summary>
        /// <param name = "bRef"><dd> <p> Pointer to a buffer containing the data to write. </p> </dd></param>
        /// <param name = "cb"><dd> <p> Size of the buffer in bytes. </p> </dd></param>
        /// <param name = "callbackRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface. </p> </dd></param>
        /// <param name = "unkStateRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> When all of the data has been written to the stream, the callback object's <strong>IMFAsyncCallback::Invoke</strong> method is called. At that point, the application should call <strong>IMFByteStream::EndWrite</strong> to complete the asynchronous request. </p><p> Do not reallocate, free, or write to the buffer while an asynchronous write is still pending. </p><p><strong>Implementation notes:</strong> This method should update the current position in the stream by adding the number of bytes that will be written to the stream, which is specified by the value returned in the <em>pcbWritten</em>, to the current position. Other methods that can update the current position are <strong>Read</strong>, <strong>BeginRead</strong>, <strong>Write</strong>, <strong>Seek</strong>, and <strong>SetCurrentPosition</strong>.
        /// </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms694005</doc-id>
        /// <unmanaged>HRESULT IMFByteStream::BeginWrite([In] const unsigned char* pb,[In] ULONG cb,[In] IMFAsyncCallback* pCallback,[In] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFByteStream::BeginWrite</unmanaged-short>
        internal unsafe void BeginWrite_(System.IntPtr bRef, System.Int32 cb, SharpDX.MediaFoundation.IAsyncCallback callbackRef, System.IntPtr unkStateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bRef, cb, (void *)callbackRef_, (void *)unkStateRef, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Completes an asynchronous write operation.</p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the <strong>IMFAsyncCallback::Invoke</strong> method.</p> </dd></param>
        /// <param name = "cbWrittenRef"><dd> <p> Receives the number of bytes that were written. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> Call this method when the <strong>IMFByteStream::BeginWrite</strong> method completes asynchronously. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms703863</doc-id>
        /// <unmanaged>HRESULT IMFByteStream::EndWrite([In] IMFAsyncResult* pResult,[Out] ULONG* pcbWritten)</unmanaged>
        /// <unmanaged-short>IMFByteStream::EndWrite</unmanaged-short>
        internal unsafe void EndWrite_(SharpDX.MediaFoundation.AsyncResult resultRef, out System.Int32 cbWrittenRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            fixed (void *cbWrittenRef_ = &cbWrittenRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, cbWrittenRef_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Moves the current position in the stream by a specified offset.</p>
        /// </summary>
        /// <param name = "seekOrigin"><dd> <p> Specifies the origin of the seek as a member of the <strong><see cref = "SharpDX.MediaFoundation.ByteStreamSeekOrigin"/></strong> enumeration. The offset is calculated relative to this position. </p> </dd></param>
        /// <param name = "llSeekOffset"><dd> <p> Specifies the new position, as a byte offset from the seek origin. </p> </dd></param>
        /// <param name = "dwSeekFlags"><dd> <p> Specifies zero or more flags. The following flags are defined. </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO</strong></dt> </dl> </td><td> <p> All pending I/O requests are canceled after the seek request completes successfully. </p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "qwCurrentPositionRef"><dd> <p> Receives the new position after the seek. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul><p><strong> Implementation notes:</strong> This method should update the current position in the stream by adding the <em>qwSeekOffset</em> to the seek <em>SeekOrigin</em> position. This should be the same value passed back in the <em>pqwCurrentPosition</em> parameter. 
        /// Other methods that can update the current position are <strong>Read</strong>, <strong>BeginRead</strong>, <strong>Write</strong>, <strong>BeginWrite</strong>, and <strong>SetCurrentPosition</strong>.
        /// </p>
        /// </remarks>
        /// <doc-id>ms697053</doc-id>
        /// <unmanaged>HRESULT IMFByteStream::Seek([In] MFBYTESTREAM_SEEK_ORIGIN SeekOrigin,[In] longlong llSeekOffset,[In] DWORD dwSeekFlags,[Out] unsigned longlong* pqwCurrentPosition)</unmanaged>
        /// <unmanaged-short>IMFByteStream::Seek</unmanaged-short>
        internal unsafe void Seek_(SharpDX.MediaFoundation.ByteStreamSeekOrigin seekOrigin, System.Int64 llSeekOffset, System.Int32 dwSeekFlags, out System.Int64 qwCurrentPositionRef)
        {
            SharpDX.Result __result__;
            fixed (void *qwCurrentPositionRef_ = &qwCurrentPositionRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)seekOrigin), llSeekOffset, dwSeekFlags, qwCurrentPositionRef_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Clears any internal buffers used by the stream. If you are writing to the stream, the buffered data is written to the underlying file or device. </p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> If the byte stream is read-only, this method has no effect.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms694833</doc-id>
        /// <unmanaged>HRESULT IMFByteStream::Flush()</unmanaged>
        /// <unmanaged-short>IMFByteStream::Flush</unmanaged-short>
        internal unsafe void Flush_()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Closes the stream and releases any resources associated with the stream, such as sockets or file handles. This method also cancels any pending asynchronous I/O requests. </p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms703909</doc-id>
        /// <unmanaged>HRESULT IMFByteStream::Close()</unmanaged>
        /// <unmanaged-short>IMFByteStream::Close</unmanaged-short>
        internal unsafe void Close_()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("6d66d782-1d4f-4db7-8c63-cb8c77f1ef5e")]
    public partial class ByteStreamBuffering : SharpDX.ComObject
    {
        public ByteStreamBuffering(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ByteStreamBuffering(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ByteStreamBuffering(nativePtr);
        /// <summary>
        /// <p> </p><p>Sets the buffering parameters.</p>
        /// </summary>
        /// <doc-id>aa366520</doc-id>
        /// <unmanaged>SetBufferingParams</unmanaged>
        /// <unmanaged-short>SetBufferingParams</unmanaged-short>
        public SharpDX.MediaFoundation.ByteStreamBufferingParameters BufferingParams
        {
            set => SetBufferingParams(ref value);
        }

        /// <summary>
        /// <p> </p><p>Sets the buffering parameters.</p>
        /// </summary>
        /// <param name = "paramsRef"><dd> <p>Pointer to an <strong><see cref = "SharpDX.MediaFoundation.ByteStreamBufferingParameters"/></strong> structure that contains the buffering parameters. The byte stream uses this information to calculate how much data to buffer from the network.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>aa366520</doc-id>
        /// <unmanaged>HRESULT IMFByteStreamBuffering::SetBufferingParams([In] MFBYTESTREAM_BUFFERING_PARAMS* pParams)</unmanaged>
        /// <unmanaged-short>IMFByteStreamBuffering::SetBufferingParams</unmanaged-short>
        internal unsafe void SetBufferingParams(ref SharpDX.MediaFoundation.ByteStreamBufferingParameters paramsRef)
        {
            SharpDX.Result __result__;
            fixed (void *paramsRef_ = &paramsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, paramsRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Enables or disables buffering.</p>
        /// </summary>
        /// <param name = "fEnable"><dd> <p>Specifies whether the byte stream buffers data. If <strong>TRUE</strong>, buffering is enabled. If <strong><see cref = "SharpDX.Result.False"/></strong>, buffering is disabled.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Before calling this method, call <strong>IMFByteStreamBuffering::SetBufferingParams</strong> to set the buffering parameters on the byte stream.</p>
        /// </remarks>
        /// <doc-id>aa369933</doc-id>
        /// <unmanaged>HRESULT IMFByteStreamBuffering::EnableBuffering([In] BOOL fEnable)</unmanaged>
        /// <unmanaged-short>IMFByteStreamBuffering::EnableBuffering</unmanaged-short>
        public unsafe void EnableBuffering(SharpDX.Mathematics.Interop.RawBool fEnable)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, fEnable, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Stops any buffering that is in progress.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The byte stream successfully stopped buffering.</p> </td></tr> <tr><td> <dl> <dt><strong>S_FALSE</strong></dt> </dl> </td><td> <p>No buffering was in progress.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the byte stream is currently buffering data, it stops and sends an MEBufferingStopped event. If the byte stream is not currently buffering, this method has no effect.</p>
        /// </remarks>
        /// <doc-id>aa375256</doc-id>
        /// <unmanaged>HRESULT IMFByteStreamBuffering::StopBuffering()</unmanaged>
        /// <unmanaged-short>IMFByteStreamBuffering::StopBuffering</unmanaged-short>
        public unsafe void StopBuffering()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("F5042EA4-7A96-4a75-AA7B-2BE1EF7F88D5")]
    public partial class ByteStreamCacheControl : SharpDX.ComObject
    {
        public ByteStreamCacheControl(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ByteStreamCacheControl(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ByteStreamCacheControl(nativePtr);
        /// <summary>
        /// <p>Stops the background transfer of data to the local cache.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The byte stream resumes transferring data to the cache if the application does one of the following:</p><ul> <li>Reads data from the byte stream.</li> <li>Calls the byte stream's <strong>IMFByteStreamBuffering::EnableBuffering</strong> method.</li> </ul>
        /// </remarks>
        /// <doc-id>dd368786</doc-id>
        /// <unmanaged>HRESULT IMFByteStreamCacheControl::StopBackgroundTransfer()</unmanaged>
        /// <unmanaged-short>IMFByteStreamCacheControl::StopBackgroundTransfer</unmanaged-short>
        public unsafe void StopBackgroundTransfer()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("71CE469C-F34B-49EA-A56B-2D2A10E51149")]
    public partial class ByteStreamCacheControl2 : SharpDX.MediaFoundation.ByteStreamCacheControl
    {
        public ByteStreamCacheControl2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ByteStreamCacheControl2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ByteStreamCacheControl2(nativePtr);
        /// <summary>
        /// <p>Limits the cache size.</p>
        /// </summary>
        /// <doc-id>hh447833</doc-id>
        /// <unmanaged>SetCacheLimit</unmanaged>
        /// <unmanaged-short>SetCacheLimit</unmanaged-short>
        public System.Int64 CacheLimit
        {
            set => SetCacheLimit(value);
        }

        /// <summary>
        /// <p>Queries whether background transfer is active.</p>
        /// </summary>
        /// <remarks>
        /// <p>Background transfer might stop because the cache limit was reached (see <strong>IMFByteStreamCacheControl2::SetCacheLimit</strong>) or because the <strong>IMFByteStreamCacheControl::StopBackgroundTransfer</strong> method was called.</p>
        /// </remarks>
        /// <doc-id>hh447832</doc-id>
        /// <unmanaged>IsBackgroundTransferActive</unmanaged>
        /// <unmanaged-short>IsBackgroundTransferActive</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsBackgroundTransferActive
        {
            get
            {
                IsBackgroundTransferActive_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the ranges of bytes that are currently stored in the cache.</p>
        /// </summary>
        /// <param name = "cRangesRef"><dd> <p>Receives the number of ranges returned in the <em>ppRanges</em> array.</p> </dd></param>
        /// <param name = "rangesOut"><dd> <p>Receives an array of <strong><see cref = "SharpDX.MediaFoundation.ByteStreamCacheRange"/></strong> structures. Each structure specifies a range of bytes stored in the cache. The caller must free the array by calling <strong>CoTaskMemFree</strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447831</doc-id>
        /// <unmanaged>HRESULT IMFByteStreamCacheControl2::GetByteRanges([Out] DWORD* pcRanges,[Buffer, Optional] MF_BYTE_STREAM_CACHE_RANGE** ppRanges)</unmanaged>
        /// <unmanaged-short>IMFByteStreamCacheControl2::GetByteRanges</unmanaged-short>
        public unsafe void GetByteRanges(out System.Int32 cRangesRef, SharpDX.MediaFoundation.ByteStreamCacheRange[] rangesOut)
        {
            SharpDX.Result __result__;
            fixed (void *rangesOut_ = rangesOut)
                fixed (void *cRangesRef_ = &cRangesRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cRangesRef_, rangesOut_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Limits the cache size.</p>
        /// </summary>
        /// <param name = "qwBytes"><dd> <p>The maximum number of bytes to store in the cache, or <strong>ULONGLONG_MAX </strong> for no limit.  The default value is no limit.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447833</doc-id>
        /// <unmanaged>HRESULT IMFByteStreamCacheControl2::SetCacheLimit([In] unsigned longlong qwBytes)</unmanaged>
        /// <unmanaged-short>IMFByteStreamCacheControl2::SetCacheLimit</unmanaged-short>
        internal unsafe void SetCacheLimit(System.Int64 qwBytes)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, qwBytes, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries whether background transfer is active.</p>
        /// </summary>
        /// <param name = "fActiveRef"><dd> <p>Receives the value <strong>TRUE</strong> if background transfer is currently active, or <strong><see cref = "SharpDX.Result.False"/></strong> otherwise.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Background transfer might stop because the cache limit was reached (see <strong>IMFByteStreamCacheControl2::SetCacheLimit</strong>) or because the <strong>IMFByteStreamCacheControl::StopBackgroundTransfer</strong> method was called.</p>
        /// </remarks>
        /// <doc-id>hh447832</doc-id>
        /// <unmanaged>HRESULT IMFByteStreamCacheControl2::IsBackgroundTransferActive([Out] BOOL* pfActive)</unmanaged>
        /// <unmanaged-short>IMFByteStreamCacheControl2::IsBackgroundTransferActive</unmanaged-short>
        internal unsafe void IsBackgroundTransferActive_(out SharpDX.Mathematics.Interop.RawBool fActiveRef)
        {
            fActiveRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fActiveRef_ = &fActiveRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fActiveRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("BB420AA4-765B-4a1f-91FE-D6A8A143924C")]
    public partial class ByteStreamHandler : SharpDX.ComObject
    {
        public ByteStreamHandler(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ByteStreamHandler(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ByteStreamHandler(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the maximum number of bytes needed to create the media source or determine that the byte stream handler cannot parse this stream.</p>
        /// </summary>
        /// <doc-id>ms704770</doc-id>
        /// <unmanaged>GetMaxNumberOfBytesRequiredForResolution</unmanaged>
        /// <unmanaged-short>GetMaxNumberOfBytesRequiredForResolution</unmanaged-short>
        public System.Int64 MaxNumberOfBytesRequiredForResolution
        {
            get
            {
                GetMaxNumberOfBytesRequiredForResolution(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Begins an asynchronous request to create a media source from a byte stream.</p>
        /// </summary>
        /// <param name = "byteStreamRef"><dd> <p>Pointer to the byte stream's <strong><see cref = "SharpDX.MediaFoundation.IByteStream"/></strong> interface.</p> </dd></param>
        /// <param name = "wszURLRef"><dd> <p>String that contains the original URL of the byte stream. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "dwFlags"><dd> <p>Bitwise OR of zero or more flags. See <strong>Source Resolver Flags</strong>.</p> </dd></param>
        /// <param name = "propsRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.ComObject"/></strong> interface of a property store. The byte-stream handler can use this property store to configure the object. This parameter can be <strong><c>null</c></strong>. For more information, see Configuring a Media Source.</p> </dd></param>
        /// <param name = "iUnknownCancelCookieOut"><dd> <p>Receives an <strong><see cref = "SharpDX.IUnknown"/></strong> reference or the value <strong><c>null</c></strong>. If the value is not <strong><c>null</c></strong>, you can cancel the asynchronous operation by passing this reference to the <strong>IMFByteStreamHandler::CancelObjectCreation</strong> method. The caller must release the interface. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface.</p> </dd></param>
        /// <param name = "unkStateRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "CannotParseByteStream"/></strong></dt> </dl> </td><td> <p>Unable to parse the byte stream.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The <em>dwFlags</em> parameter must contain the MF_RESOLUTION_MEDIASOURCE flag and should not contain the MF_RESOLUTION_BYTESTREAM flag.</p><p>The byte-stream handler is responsible for parsing the stream and validating the contents. If the stream is not valid or the byte stream handler cannot parse the stream, the handler should return a failure code. The byte stream is not guaranteed to match the type of stream that the byte handler is designed to parse.</p><p>If the <em>pwszURL</em> parameter is not <strong><c>null</c></strong>, the byte-stream handler might use the URL during the resolution process. (For example, it might use the file name extension, if present.) Also, the byte stream might contain the <strong><see cref = "ContentType"/></strong> attribute, specifying the MIME type.</p><p>When the operation completes, the byte-stream handler calls the <strong>IMFAsyncCallback::Invoke</strong> method. The <strong>Invoke</strong> method should call <strong>IMFByteStreamHandler::EndCreateObject</strong> to get a reference to the media source.</p>
        /// </remarks>
        /// <doc-id>ms696214</doc-id>
        /// <unmanaged>HRESULT IMFByteStreamHandler::BeginCreateObject([In] IMFByteStream* pByteStream,[In] const wchar_t* pwszURL,[In] DWORD dwFlags,[In] IPropertyStore* pProps,[Out, Optional] IUnknown** ppIUnknownCancelCookie,[In] IMFAsyncCallback* pCallback,[In] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFByteStreamHandler::BeginCreateObject</unmanaged-short>
        public unsafe void BeginCreateObject(SharpDX.MediaFoundation.IByteStream byteStreamRef, System.String wszURLRef, System.Int32 dwFlags, SharpDX.ComObject propsRef, out SharpDX.IUnknown iUnknownCancelCookieOut, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown unkStateRef)
        {
            System.IntPtr byteStreamRef_ = System.IntPtr.Zero;
            System.IntPtr propsRef_ = System.IntPtr.Zero;
            System.IntPtr iUnknownCancelCookieOut_ = System.IntPtr.Zero;
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            byteStreamRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IByteStream>(byteStreamRef);
            propsRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.ComObject>(propsRef);
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            fixed (char *wszURLRef_ = wszURLRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)byteStreamRef_, (void *)wszURLRef_, dwFlags, (void *)propsRef_, &iUnknownCancelCookieOut_, (void *)callbackRef_, (void *)unkStateRef_, (*(void ***)this._nativePointer)[3]);
            if (iUnknownCancelCookieOut_ != System.IntPtr.Zero)
                iUnknownCancelCookieOut = new SharpDX.ComObject(iUnknownCancelCookieOut_);
            else
                iUnknownCancelCookieOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Completes an asynchronous request to create a media source.</p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the <strong>Invoke</strong> method.</p> </dd></param>
        /// <param name = "objectTypeRef"><dd> <p>Receives a member of the <strong><see cref = "SharpDX.MediaFoundation.ObjectType"/></strong> enumeration, specifying the type of object that was created.</p> </dd></param>
        /// <param name = "objectOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of the media source. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_ABORT</strong></dt> </dl> </td><td> <p>The operation was canceled. See <strong>IMFByteStreamHandler::CancelObjectCreation</strong>.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "CannotParseByteStream"/></strong></dt> </dl> </td><td> <p>Unable to parse the byte stream.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method from inside the <strong>IMFAsyncCallback::Invoke</strong> method.</p>
        /// </remarks>
        /// <doc-id>ms700217</doc-id>
        /// <unmanaged>HRESULT IMFByteStreamHandler::EndCreateObject([In] IMFAsyncResult* pResult,[Out] MF_OBJECT_TYPE* pObjectType,[Out] IUnknown** ppObject)</unmanaged>
        /// <unmanaged-short>IMFByteStreamHandler::EndCreateObject</unmanaged-short>
        public unsafe void EndCreateObject(SharpDX.MediaFoundation.AsyncResult resultRef, out SharpDX.MediaFoundation.ObjectType objectTypeRef, out SharpDX.IUnknown objectOut)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            System.IntPtr objectOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            fixed (void *objectTypeRef_ = &objectTypeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, objectTypeRef_, &objectOut_, (*(void ***)this._nativePointer)[4]);
            if (objectOut_ != System.IntPtr.Zero)
                objectOut = new SharpDX.ComObject(objectOut_);
            else
                objectOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Cancels the current request to create a media source.</p>
        /// </summary>
        /// <param name = "iUnknownCancelCookieRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface that was returned in the <em>ppIUnknownCancelCookie</em> parameter of the <strong>IMFByteStreamHandler::BeginCreateObject</strong> method.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You can use this method to cancel a previous call to <strong>BeginCreateObject</strong>. Because that method is asynchronous, however, it might be completed before the operation can be canceled. Therefore, your callback might still be invoked after you call this method.</p>
        /// </remarks>
        /// <doc-id>ms701576</doc-id>
        /// <unmanaged>HRESULT IMFByteStreamHandler::CancelObjectCreation([In] IUnknown* pIUnknownCancelCookie)</unmanaged>
        /// <unmanaged-short>IMFByteStreamHandler::CancelObjectCreation</unmanaged-short>
        public unsafe void CancelObjectCreation(SharpDX.IUnknown iUnknownCancelCookieRef)
        {
            System.IntPtr iUnknownCancelCookieRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iUnknownCancelCookieRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(iUnknownCancelCookieRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iUnknownCancelCookieRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the maximum number of bytes needed to create the media source or determine that the byte stream handler cannot parse this stream.</p>
        /// </summary>
        /// <param name = "qwBytesRef"><dd> <p>Receives the maximum number of bytes that are required.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms704770</doc-id>
        /// <unmanaged>HRESULT IMFByteStreamHandler::GetMaxNumberOfBytesRequiredForResolution([Out] unsigned longlong* pqwBytes)</unmanaged>
        /// <unmanaged-short>IMFByteStreamHandler::GetMaxNumberOfBytesRequiredForResolution</unmanaged-short>
        internal unsafe void GetMaxNumberOfBytesRequiredForResolution(out System.Int64 qwBytesRef)
        {
            SharpDX.Result __result__;
            fixed (void *qwBytesRef_ = &qwBytesRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, qwBytesRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a6b43f84-5c0a-42e8-a44d-b1857a76992f")]
    public partial class ByteStreamProxyClassFactory : SharpDX.ComObject
    {
        public ByteStreamProxyClassFactory(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ByteStreamProxyClassFactory(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ByteStreamProxyClassFactory(nativePtr);
        /// <summary>
        /// <p>Creates a proxy to a byte stream. The proxy enables a media source to read from a byte stream in another process.</p>
        /// </summary>
        /// <param name = "byteStreamRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.IByteStream"/></strong> interface of the byte stream to proxy.</p> </dd></param>
        /// <param name = "attributesRef"><dd> <p>Reserved. Set to <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "riid"><dd> <p>The interface identifer (IID) of the interface being requested.</p> </dd></param>
        /// <param name = "vObjectOut"><dd> <p>Receives a reference to the interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447835</doc-id>
        /// <unmanaged>HRESULT IMFByteStreamProxyClassFactory::CreateByteStreamProxy([In, Optional] IMFByteStream* pByteStream,[In, Optional] IMFAttributes* pAttributes,[In] const GUID&amp; riid,[Out] void** ppvObject)</unmanaged>
        /// <unmanaged-short>IMFByteStreamProxyClassFactory::CreateByteStreamProxy</unmanaged-short>
        public unsafe void CreateByteStreamProxy(SharpDX.MediaFoundation.IByteStream byteStreamRef, SharpDX.MediaFoundation.MediaAttributes attributesRef, System.Guid riid, out System.IntPtr vObjectOut)
        {
            System.IntPtr byteStreamRef_ = System.IntPtr.Zero;
            System.IntPtr attributesRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            byteStreamRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IByteStream>(byteStreamRef);
            attributesRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(attributesRef);
            fixed (void *vObjectOut_ = &vObjectOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)byteStreamRef_, (void *)attributesRef_, &riid, vObjectOut_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("64976BFA-FB61-4041-9069-8C9A5F659BEB")]
    public partial class ByteStreamTimeSeek : SharpDX.ComObject
    {
        public ByteStreamTimeSeek(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ByteStreamTimeSeek(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ByteStreamTimeSeek(nativePtr);
        /// <summary>
        /// <p>Queries whether the byte stream supports time-based seeking.</p>
        /// </summary>
        /// <doc-id>hh447838</doc-id>
        /// <unmanaged>IsTimeSeekSupported</unmanaged>
        /// <unmanaged-short>IsTimeSeekSupported</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsTimeSeekSupported
        {
            get
            {
                IsTimeSeekSupported_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Queries whether the byte stream supports time-based seeking.</p>
        /// </summary>
        /// <param name = "fTimeSeekIsSupportedRef"><dd> <p>Receives the value <strong>TRUE</strong> if the byte stream supports time-based seeking, or <strong><see cref = "SharpDX.Result.False"/></strong> otherwise.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447838</doc-id>
        /// <unmanaged>HRESULT IMFByteStreamTimeSeek::IsTimeSeekSupported([Out] BOOL* pfTimeSeekIsSupported)</unmanaged>
        /// <unmanaged-short>IMFByteStreamTimeSeek::IsTimeSeekSupported</unmanaged-short>
        internal unsafe void IsTimeSeekSupported_(out SharpDX.Mathematics.Interop.RawBool fTimeSeekIsSupportedRef)
        {
            fTimeSeekIsSupportedRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fTimeSeekIsSupportedRef_ = &fTimeSeekIsSupportedRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fTimeSeekIsSupportedRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Seeks to a new position in the byte stream.</p>
        /// </summary>
        /// <param name = "qwTimePosition"><dd> <p>The new position, in 100-nanosecond units.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>If the byte stream reads from a server, it might cache the seek request until the next read request. Therefore, the byte stream might not send a request to the server immediately.</p>
        /// </remarks>
        /// <doc-id>hh447839</doc-id>
        /// <unmanaged>HRESULT IMFByteStreamTimeSeek::TimeSeek([In] unsigned longlong qwTimePosition)</unmanaged>
        /// <unmanaged-short>IMFByteStreamTimeSeek::TimeSeek</unmanaged-short>
        public unsafe void TimeSeek(System.Int64 qwTimePosition)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, qwTimePosition, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the result of a time-based seek.</p>
        /// </summary>
        /// <param name = "qwStartTimeRef"><dd> <p>Receives the new position after the seek, in 100-nanosecond units.</p> </dd></param>
        /// <param name = "qwStopTimeRef"><dd> <p>Receives the stop time, in 100-nanosecond units. If the stop time is unknown, the value is zero.</p> </dd></param>
        /// <param name = "qwDurationRef"><dd> <p>Receives the total duration of the file, in 100-nanosecond units. If the duration is unknown, the value is ?1.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The byte stream does not support time-based seeking, or no data is available.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method returns the server response from a previous time-based seek. </p><strong>Note</strong>??This method normally cannot be invoked until some data is read from the byte stream, because the <strong>IMFByteStreamTimeSeek::TimeSeek</strong> method does not send a server request immediately.?
        /// </remarks>
        /// <doc-id>hh447837</doc-id>
        /// <unmanaged>HRESULT IMFByteStreamTimeSeek::GetTimeSeekResult([Out] unsigned longlong* pqwStartTime,[Out] unsigned longlong* pqwStopTime,[Out] unsigned longlong* pqwDuration)</unmanaged>
        /// <unmanaged-short>IMFByteStreamTimeSeek::GetTimeSeekResult</unmanaged-short>
        public unsafe void GetTimeSeekResult(out System.Int64 qwStartTimeRef, out System.Int64 qwStopTimeRef, out System.Int64 qwDurationRef)
        {
            SharpDX.Result __result__;
            fixed (void *qwDurationRef_ = &qwDurationRef)
                fixed (void *qwStopTimeRef_ = &qwStopTimeRef)
                    fixed (void *qwStartTimeRef_ = &qwStartTimeRef)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, qwStartTimeRef_, qwStopTimeRef_, qwDurationRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a6bba433-176b-48b2-b375-53aa03473207")]
    public partial class CaptureEngine : SharpDX.ComObject
    {
        public CaptureEngine(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CaptureEngine(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CaptureEngine(nativePtr);
                ///<summary>Constant ClsidMFCaptureEngine</summary>
        ///<unmanaged>CLSID_MFCaptureEngine</unmanaged>
        internal System.Guid ClsidMFCaptureEngine = new System.Guid("efce38d3-8914-4674-a7df-ae1b3d654b8a");
        /// <summary>
        /// <p>Gets a reference to the capture source object. Use the capture source to configure the capture devices.</p>
        /// </summary>
        /// <doc-id>hh447854</doc-id>
        /// <unmanaged>GetSource</unmanaged>
        /// <unmanaged-short>GetSource</unmanaged-short>
        public SharpDX.MediaFoundation.CaptureSource Source
        {
            get
            {
                GetSource(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Initializes the capture engine.</p>
        /// </summary>
        /// <param name = "eventCallbackRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.CaptureEngineOnEventCallback"/></strong> interface. The caller must implement this interface. The capture engine uses this interface to send asynchronous events to the caller.</p> </dd></param>
        /// <param name = "attributesRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface. This parameter can be <strong><c>null</c></strong>. </p> <p>You can use this parameter to configure the capture engine. Call <strong>MFCreateAttributes</strong> to create an attribute store, and then set any of the following attributes.</p> <ul> <li> <see cref = "D3DManager"/> </li> <li> <see cref = "DisableDXVA"/> </li> <li> <see cref = "DisableHardwareTransforms"/> </li> <li> <see cref = "EncoderTransformFieldOfUseUnlockAttribute"/> </li> <li> <see cref = "EventGeneratorGuid"/> </li> <li> <see cref = "EventStreamIndex"/> </li> <li> <see cref = "MediaSourceConfig"/> </li> <li> <see cref = "RecordSinkAudioMaxProcessedSamples"/> </li> <li> <see cref = "RecordSinkAudioMaxUnprocessedSamples"/> </li> <li> <see cref = "RecordSinkVideoMaxProcessedSamples"/> </li> <li> <see cref = "RecordSinkVideoMaxUnprocessedSamples"/> </li> <li> <see cref = "UseAudioDeviceOnly"/> </li> <li> <see cref = "UseVideoDeviceOnly"/> </li> </ul> </dd></param>
        /// <param name = "audioSourceRef"><dd> <p>An <strong><see cref = "SharpDX.IUnknown"/></strong> reference that specifies an audio-capture device. This parameter can be <strong><c>null</c></strong>.</p> <p>If you set the <see cref = "UseVideoDeviceOnly"/> attribute to <strong>TRUE</strong> in <em>pAttributes</em>, the capture engine does not use an audio device, and the <em>pAudioSource</em> parameter is ignored.</p> <p>Otherwise, if <em>pAudioSource</em> is <strong><c>null</c></strong>, the capture engine selects the microphone that is built into the video camera specified by <em>pVideoSource</em>. If the video camera does not have a microphone, the capture engine enumerates the audio-capture devices on the system and selects the first one.</p> <p>To override the default audio device, set <em>pAudioSource</em> to an <strong><see cref = "SharpDX.MediaFoundation.MediaSource"/></strong> or <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> reference for the device. For more information, see Audio/Video Capture in Media Foundation.</p> </dd></param>
        /// <param name = "videoSourceRef"><dd> <p>An <strong><see cref = "SharpDX.IUnknown"/></strong> reference that specifies a video-capture device. This parameter can be <strong><c>null</c></strong>.</p> <p>If you set the <see cref = "UseAudioDeviceOnly"/> attribute to <strong>TRUE</strong> in <em>pAttributes</em>, the capture engine does not use a video device, and the <em>pVideoSource</em> parameter is ignored.</p> <p>Otherwise, if <em>pVideoSource</em> is <strong><c>null</c></strong>, the capture engine enumerates the video-capture devices on the system and selects the first one.</p> <p>To override the default video device, set <em>pVideoSource</em> to an <strong><see cref = "SharpDX.MediaFoundation.MediaSource"/></strong> or <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> reference for the device. For more information, see Enumerating Video Capture Devices.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The <strong>Initialize</strong> method was already called.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoCaptureDevicesAvailable"/></strong></dt> </dl> </td><td> <p>No capture devices are available.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You must call this method once before using the capture engine. Calling the method a second time returns <strong><see cref = "InvalidRequest"/></strong>.</p><p>This method is asynchronous. If the method returns a success code, the caller will receive an <strong>MF_CAPTURE_ENGINE_INITIALIZED</strong> event through the <strong>IMFCaptureEngineOnEventCallback::OnEvent</strong> method. The operation can fail asynchronously after the method succeeds. If so, the error code is conveyed through the <strong>OnEvent</strong> method.</p>
        /// </remarks>
        /// <doc-id>hh447855</doc-id>
        /// <unmanaged>HRESULT IMFCaptureEngine::Initialize([In] IMFCaptureEngineOnEventCallback* pEventCallback,[In, Optional] IMFAttributes* pAttributes,[In, Optional] IUnknown* pAudioSource,[In, Optional] IUnknown* pVideoSource)</unmanaged>
        /// <unmanaged-short>IMFCaptureEngine::Initialize</unmanaged-short>
        internal unsafe void Initialize(SharpDX.MediaFoundation.CaptureEngineOnEventCallback eventCallbackRef, SharpDX.MediaFoundation.MediaAttributes attributesRef, SharpDX.IUnknown audioSourceRef, SharpDX.IUnknown videoSourceRef)
        {
            System.IntPtr eventCallbackRef_ = System.IntPtr.Zero;
            System.IntPtr attributesRef_ = System.IntPtr.Zero;
            System.IntPtr audioSourceRef_ = System.IntPtr.Zero;
            System.IntPtr videoSourceRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            eventCallbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.CaptureEngineOnEventCallback>(eventCallbackRef);
            attributesRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(attributesRef);
            audioSourceRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(audioSourceRef);
            videoSourceRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(videoSourceRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)eventCallbackRef_, (void *)attributesRef_, (void *)audioSourceRef_, (void *)videoSourceRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Starts preview.</p>
        /// </summary>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The preview sink was not initialized.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Before calling this method, configure the preview sink by calling <strong>IMFCaptureSink::AddStream</strong>. To get a reference to the preview sink, call <strong>IMFCaptureEngine::GetSink</strong>. </p><p>This method is asynchronous. If the method returns a success code, the caller will receive an <strong>MF_CAPTURE_ENGINE_PREVIEW_STARTED</strong> event through the <strong>IMFCaptureEngineOnEventCallback::OnEvent</strong> method. The operation can fail asynchronously after the method succeeds. If so, the error code is conveyed through the <strong>OnEvent</strong> method.</p><p>After the preview sink is configured, you can stop and start preview by calling <strong>IMFCaptureEngine::StopPreview</strong> and <strong>IMFCaptureEngine::StartPreview</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447856</doc-id>
        /// <unmanaged>HRESULT IMFCaptureEngine::StartPreview()</unmanaged>
        /// <unmanaged-short>IMFCaptureEngine::StartPreview</unmanaged-short>
        public unsafe void StartPreview()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Stops preview.</p>
        /// </summary>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The capture engine is not currently previewing.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is asynchronous. If the method returns a success code, the caller will receive an <strong>MF_CAPTURE_ENGINE_PREVIEW_STOPPED</strong> event through the <strong>IMFCaptureEngineOnEventCallback::OnEvent</strong> method. The operation can fail asynchronously after the method succeeds. If so, the error code is conveyed through the <strong>OnEvent</strong> method.</p>
        /// </remarks>
        /// <doc-id>hh447858</doc-id>
        /// <unmanaged>HRESULT IMFCaptureEngine::StopPreview()</unmanaged>
        /// <unmanaged-short>IMFCaptureEngine::StopPreview</unmanaged-short>
        public unsafe void StopPreview()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Starts recording audio and/or video to a file.</p>
        /// </summary>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The recording sink was not initialized.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Before calling this method, configure the recording sink by calling <strong>IMFCaptureSink::AddStream</strong>. To get a reference to the recording sink, call <strong>IMFCaptureEngine::GetSink</strong>.</p><p>This method is asynchronous. If the method returns a success code, the caller will receive an <strong>MF_CAPTURE_ENGINE_RECORD_STARTED</strong> event through the <strong>IMFCaptureEngineOnEventCallback::OnEvent</strong> method. The operation can fail asynchronously after the method succeeds. If so, the error code is conveyed through the <strong>OnEvent</strong> method.</p><p>To stop recording, call <strong>IMFCaptureEngine::StopRecord</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447857</doc-id>
        /// <unmanaged>HRESULT IMFCaptureEngine::StartRecord()</unmanaged>
        /// <unmanaged-short>IMFCaptureEngine::StartRecord</unmanaged-short>
        public unsafe void StartRecord()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Stops recording.</p>
        /// </summary>
        /// <param name = "bFinalize"><dd> <p>A Boolean value that specifies whether to finalize the output file. To create a valid output file, specify <strong>TRUE</strong>. Specify <strong><see cref = "SharpDX.Result.False"/></strong> only if you want to interrupt the recording and discard the output file. If the value is <strong><see cref = "SharpDX.Result.False"/></strong>, the operation completes more quickly, but the file will not be playable. </p> </dd></param>
        /// <param name = "bFlushUnprocessedSamples"><dd> <p>A Boolean value that specifies if the unprocessed samples waiting to be encoded should be flushed.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method is asynchronous. If the method returns a success code, the caller will receive an <strong>MF_CAPTURE_ENGINE_RECORD_STOPPED</strong> event through the <strong>IMFCaptureEngineOnEventCallback::OnEvent</strong> method. The operation can fail asynchronously after the method succeeds. If so, the error code is conveyed through the <strong>OnEvent</strong> method.</p>
        /// </remarks>
        /// <doc-id>hh447859</doc-id>
        /// <unmanaged>HRESULT IMFCaptureEngine::StopRecord([In] BOOL bFinalize,[In] BOOL bFlushUnprocessedSamples)</unmanaged>
        /// <unmanaged-short>IMFCaptureEngine::StopRecord</unmanaged-short>
        public unsafe void StopRecord(SharpDX.Mathematics.Interop.RawBool bFinalize, SharpDX.Mathematics.Interop.RawBool bFlushUnprocessedSamples)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, bFinalize, bFlushUnprocessedSamples, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Captures a still image from the video stream.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Before calling this method, configure the photo sink by calling <strong>IMFCaptureSink::AddStream</strong>. To get a reference to the photo sink, call <strong>IMFCaptureEngine::GetSink</strong>. </p><p>This method is asynchronous. If the method returns a success code, the caller will receive an <strong>MF_CAPTURE_ENGINE_PHOTO_TAKEN</strong> event through the <strong>IMFCaptureEngineOnEventCallback::OnEvent</strong> method. The operation can fail asynchronously after the method succeeds. If so, the error code is conveyed through the <strong>OnEvent</strong> method.</p>
        /// </remarks>
        /// <doc-id>hh447860</doc-id>
        /// <unmanaged>HRESULT IMFCaptureEngine::TakePhoto()</unmanaged>
        /// <unmanaged-short>IMFCaptureEngine::TakePhoto</unmanaged-short>
        public unsafe void TakePhoto()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a reference to one of the capture sink objects. You can use the capture sinks to configure preview, recording, or still-image capture.</p>
        /// </summary>
        /// <param name = "mfCaptureEngineSinkType"><dd> <p>An <strong><see cref = "SharpDX.MediaFoundation.CaptureEngineSinkType"/></strong> value that specifies the capture sink to retrieve.</p> </dd></param>
        /// <param name = "sinkOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.CaptureSink"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>hh447853</doc-id>
        /// <unmanaged>HRESULT IMFCaptureEngine::GetSink([In] MF_CAPTURE_ENGINE_SINK_TYPE mfCaptureEngineSinkType,[Out] IMFCaptureSink** ppSink)</unmanaged>
        /// <unmanaged-short>IMFCaptureEngine::GetSink</unmanaged-short>
        public unsafe void GetSink(SharpDX.MediaFoundation.CaptureEngineSinkType mfCaptureEngineSinkType, out SharpDX.MediaFoundation.CaptureSink sinkOut)
        {
            System.IntPtr sinkOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)mfCaptureEngineSinkType), &sinkOut_, (*(void ***)this._nativePointer)[9]);
            if (sinkOut_ != System.IntPtr.Zero)
                sinkOut = new SharpDX.MediaFoundation.CaptureSink(sinkOut_);
            else
                sinkOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a reference to the capture source object. Use the capture source to configure the capture devices.</p>
        /// </summary>
        /// <param name = "sourceOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.CaptureSource"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447854</doc-id>
        /// <unmanaged>HRESULT IMFCaptureEngine::GetSource([Out] IMFCaptureSource** ppSource)</unmanaged>
        /// <unmanaged-short>IMFCaptureEngine::GetSource</unmanaged-short>
        internal unsafe void GetSource(out SharpDX.MediaFoundation.CaptureSource sourceOut)
        {
            System.IntPtr sourceOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &sourceOut_, (*(void ***)this._nativePointer)[10]);
            if (sourceOut_ != System.IntPtr.Zero)
                sourceOut = new SharpDX.MediaFoundation.CaptureSource(sourceOut_);
            else
                sourceOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("8f02d140-56fc-4302-a705-3a97c78be779")]
    public partial class CaptureEngineClassFactory : SharpDX.ComObject
    {
        public CaptureEngineClassFactory(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CaptureEngineClassFactory(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CaptureEngineClassFactory(nativePtr);
                ///<summary>Constant ClsidMFCaptureEngineClassFactory</summary>
        ///<unmanaged>CLSID_MFCaptureEngineClassFactory</unmanaged>
        internal System.Guid ClsidMFCaptureEngineClassFactory = new System.Guid("efce38d3-8914-4674-a7df-ae1b3d654b8a");
        /// <summary>
        /// <p>Creates an instance of the capture engine.</p>
        /// </summary>
        /// <param name = "clsid"><dd> <p>The CLSID of the object to create. Currently, this parameter must equal <strong><see cref = "ClsidMFCaptureEngine"/></strong>.</p> </dd></param>
        /// <param name = "riid"><dd> <p>The IID of the requested interface. The capture engine supports the <strong><see cref = "SharpDX.MediaFoundation.CaptureEngine"/></strong> interface.</p> </dd></param>
        /// <param name = "vObjectOut"><dd> <p>Receives a reference to the requested interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Before calling this method, call the <strong>MFStartup</strong> function.</p>
        /// </remarks>
        /// <doc-id>hh447848</doc-id>
        /// <unmanaged>HRESULT IMFCaptureEngineClassFactory::CreateInstance([In] const GUID&amp; clsid,[In] const GUID&amp; riid,[Out] void** ppvObject)</unmanaged>
        /// <unmanaged-short>IMFCaptureEngineClassFactory::CreateInstance</unmanaged-short>
        internal unsafe void CreateInstance(System.Guid clsid, System.Guid riid, out System.IntPtr vObjectOut)
        {
            SharpDX.Result __result__;
            fixed (void *vObjectOut_ = &vObjectOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &clsid, &riid, vObjectOut_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("aeda51c0-9025-4983-9012-de597b88b089")]
    internal partial interface CaptureEngineOnEventCallback : SharpDX.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("52150b82-ab39-4467-980f-e48bf0822ecd")]
    public partial interface CaptureEngineOnSampleCallback : SharpDX.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("e37ceed7-340f-4514-9f4d-9c2ae026100b")]
    public partial interface CaptureEngineOnSampleCallback2 : SharpDX.MediaFoundation.CaptureEngineOnSampleCallback
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("19f68549-ca8a-4706-a4ef-481dbc95e12c")]
    public partial class CapturePhotoConfirmation : SharpDX.ComObject
    {
        public CapturePhotoConfirmation(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CapturePhotoConfirmation(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CapturePhotoConfirmation(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPixelFormat / SetPixelFormat</unmanaged>
        /// <unmanaged-short>GetPixelFormat</unmanaged-short>
        public System.Guid PixelFormat
        {
            get
            {
                GetPixelFormat(out var __output__);
                return __output__;
            }

            set => SetPixelFormat(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "notificationCallbackRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFCapturePhotoConfirmation::SetPhotoConfirmationCallback([In] IMFAsyncCallback* pNotificationCallback)</unmanaged>
        /// <unmanaged-short>IMFCapturePhotoConfirmation::SetPhotoConfirmationCallback</unmanaged-short>
        internal unsafe void SetPhotoConfirmationCallback(SharpDX.MediaFoundation.IAsyncCallback notificationCallbackRef)
        {
            System.IntPtr notificationCallbackRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            notificationCallbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(notificationCallbackRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)notificationCallbackRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "subtype">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFCapturePhotoConfirmation::SetPixelFormat([In] GUID subtype)</unmanaged>
        /// <unmanaged-short>IMFCapturePhotoConfirmation::SetPixelFormat</unmanaged-short>
        internal unsafe void SetPixelFormat(System.Guid subtype)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, subtype, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "subtype">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFCapturePhotoConfirmation::GetPixelFormat([Out] GUID* subtype)</unmanaged>
        /// <unmanaged-short>IMFCapturePhotoConfirmation::GetPixelFormat</unmanaged-short>
        internal unsafe void GetPixelFormat(out System.Guid subtype)
        {
            subtype = default (System.Guid);
            SharpDX.Result __result__;
            fixed (void *subtype_ = &subtype)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, subtype_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("d2d43cc8-48bb-4aa7-95db-10c06977e777")]
    public partial class CapturePhotoSink : SharpDX.MediaFoundation.CaptureSink
    {
        public CapturePhotoSink(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CapturePhotoSink(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CapturePhotoSink(nativePtr);
        /// <summary>
        /// <p>Specifies the name of the output file for the still image.</p>
        /// </summary>
        /// <remarks>
        /// <p>Calling this method overrides any previous call to <strong>IMFCapturePhotoSink::SetOutputByteStream</strong> or <strong>IMFCapturePhotoSink::SetSampleCallback</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447863</doc-id>
        /// <unmanaged>SetOutputFileName</unmanaged>
        /// <unmanaged-short>SetOutputFileName</unmanaged-short>
        public System.String OutputFileName
        {
            set => SetOutputFileName(value);
        }

        /// <summary>
        /// <p>Specifies the name of the output file for the still image.</p>
        /// </summary>
        /// <param name = "fileName"><dd> <p>A null-terminated string that contains the URL of the output file. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Calling this method overrides any previous call to <strong>IMFCapturePhotoSink::SetOutputByteStream</strong> or <strong>IMFCapturePhotoSink::SetSampleCallback</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447863</doc-id>
        /// <unmanaged>HRESULT IMFCapturePhotoSink::SetOutputFileName([In] const wchar_t* fileName)</unmanaged>
        /// <unmanaged-short>IMFCapturePhotoSink::SetOutputFileName</unmanaged-short>
        internal unsafe void SetOutputFileName(System.String fileName)
        {
            SharpDX.Result __result__;
            fixed (char *fileName_ = fileName)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fileName_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets a callback to receive the still-image data.</p>
        /// </summary>
        /// <param name = "callbackRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.CaptureEngineOnSampleCallback"/></strong> interface. The caller must implement this interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Calling this method overrides any previous call to <strong>IMFCapturePhotoSink::SetOutputByteStream</strong> or  <strong>IMFCapturePhotoSink::SetOutputFileName</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447864</doc-id>
        /// <unmanaged>HRESULT IMFCapturePhotoSink::SetSampleCallback([In] IMFCaptureEngineOnSampleCallback* pCallback)</unmanaged>
        /// <unmanaged-short>IMFCapturePhotoSink::SetSampleCallback</unmanaged-short>
        internal unsafe void SetSampleCallback(SharpDX.MediaFoundation.CaptureEngineOnSampleCallback callbackRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.CaptureEngineOnSampleCallback>(callbackRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)callbackRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Specifies a byte stream that will receive the still image data.</p>
        /// </summary>
        /// <param name = "byteStreamRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.IByteStream"/></strong> interface of a byte stream. The byte stream must be writable.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Calling this method overrides any previous call to <strong>IMFCapturePhotoSink::SetOutputFileName</strong> or <strong>IMFCapturePhotoSink::SetSampleCallback</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447862</doc-id>
        /// <unmanaged>HRESULT IMFCapturePhotoSink::SetOutputByteStream([In] IMFByteStream* pByteStream)</unmanaged>
        /// <unmanaged-short>IMFCapturePhotoSink::SetOutputByteStream</unmanaged-short>
        internal unsafe void SetOutputByteStream(SharpDX.MediaFoundation.IByteStream byteStreamRef)
        {
            System.IntPtr byteStreamRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            byteStreamRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IByteStream>(byteStreamRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)byteStreamRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("77346cfd-5b49-4d73-ace0-5b52a859f2e0")]
    public partial class CapturePreviewSink : SharpDX.MediaFoundation.CaptureSink
    {
        public CapturePreviewSink(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CapturePreviewSink(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CapturePreviewSink(nativePtr);
        /// <summary>
        /// <p>Specifies a window for preview.</p>
        /// </summary>
        /// <remarks>
        /// <p>Calling this method overrides any previous call to <strong>IMFCapturePreviewSink::SetSampleCallback</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447870</doc-id>
        /// <unmanaged>SetRenderHandle</unmanaged>
        /// <unmanaged-short>SetRenderHandle</unmanaged-short>
        public System.IntPtr RenderHandle
        {
            set => SetRenderHandle(value);
        }

        /// <summary>
        /// <p>Specifies a Microsoft DirectComposition visual for preview.</p>
        /// </summary>
        /// <doc-id>hh447871</doc-id>
        /// <unmanaged>SetRenderSurface</unmanaged>
        /// <unmanaged-short>SetRenderSurface</unmanaged-short>
        public SharpDX.IUnknown RenderSurface
        {
            set => SetRenderSurface(value);
        }

        /// <summary>
        /// <p>Gets or sets the current mirroring state of the video preview stream.</p>
        /// </summary>
        /// <doc-id>hh447866</doc-id>
        /// <unmanaged>GetMirrorState / SetMirrorState</unmanaged>
        /// <unmanaged-short>GetMirrorState</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool MirrorState
        {
            get
            {
                GetMirrorState(out var __output__);
                return __output__;
            }

            set => SetMirrorState(value);
        }

        /// <summary>
        /// <p>Sets a custom media sink for preview.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method overrides the default selection of the media sink for preview.</p>
        /// </remarks>
        /// <doc-id>hh447868</doc-id>
        /// <unmanaged>SetCustomSink</unmanaged>
        /// <unmanaged-short>SetCustomSink</unmanaged-short>
        public SharpDX.MediaFoundation.MediaSink CustomSink
        {
            set => SetCustomSink(value);
        }

        /// <summary>
        /// <p>Specifies a window for preview.</p>
        /// </summary>
        /// <param name = "handle"><dd> <p>A handle to the window. The preview sink draws the video frames inside this window.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Calling this method overrides any previous call to <strong>IMFCapturePreviewSink::SetSampleCallback</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447870</doc-id>
        /// <unmanaged>HRESULT IMFCapturePreviewSink::SetRenderHandle([In] void* handle)</unmanaged>
        /// <unmanaged-short>IMFCapturePreviewSink::SetRenderHandle</unmanaged-short>
        internal unsafe void SetRenderHandle(System.IntPtr handle)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)handle, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Specifies a Microsoft DirectComposition visual for preview.</p>
        /// </summary>
        /// <param name = "surfaceRef"><dd> <p>A reference to a DirectComposition visual that implements the <strong><see cref = "SharpDX.DirectComposition.Visual"/></strong> interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447871</doc-id>
        /// <unmanaged>HRESULT IMFCapturePreviewSink::SetRenderSurface([In] IUnknown* pSurface)</unmanaged>
        /// <unmanaged-short>IMFCapturePreviewSink::SetRenderSurface</unmanaged-short>
        internal unsafe void SetRenderSurface(SharpDX.IUnknown surfaceRef)
        {
            System.IntPtr surfaceRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            surfaceRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(surfaceRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)surfaceRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Updates the video frame.  Call this method when the preview window receives a <strong>WM_PAINT</strong> or <strong>WM_SIZE</strong> message.</p>
        /// </summary>
        /// <param name = "srcRef">No documentation.</param>
        /// <param name = "dstRef">No documentation.</param>
        /// <param name = "borderClrRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447874</doc-id>
        /// <unmanaged>HRESULT IMFCapturePreviewSink::UpdateVideo([In, Optional] const MFVideoNormalizedRect* pSrc,[In, Optional] const RECT* pDst,[In, Optional] const COLORREF* pBorderClr)</unmanaged>
        /// <unmanaged-short>IMFCapturePreviewSink::UpdateVideo</unmanaged-short>
        public unsafe void UpdateVideo(SharpDX.MediaFoundation.VideoNormalizedRect? srcRef, SharpDX.Mathematics.Interop.RawRectangle? dstRef, System.Int32? borderClrRef)
        {
            SharpDX.MediaFoundation.VideoNormalizedRect srcRef_;
            SharpDX.Mathematics.Interop.RawRectangle dstRef_;
            System.Int32 borderClrRef_;
            SharpDX.Result __result__;
            if (srcRef != null)
                srcRef_ = srcRef.Value;
            if (dstRef != null)
                dstRef_ = dstRef.Value;
            if (borderClrRef != null)
                borderClrRef_ = borderClrRef.Value;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, srcRef == null ? (void *)0 : &srcRef_, dstRef == null ? (void *)0 : &dstRef_, borderClrRef == null ? (void *)0 : &borderClrRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets a callback to receive the preview data for one stream.</p>
        /// </summary>
        /// <param name = "dwStreamSinkIndex"><dd> <p>The zero-based index of the stream. The index is returned in the <em>pdwSinkStreamIndex</em> parameter of the <strong>IMFCaptureSink::AddStream</strong> method.</p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.CaptureEngineOnSampleCallback"/></strong> interface. The caller must implement this interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Calling this method overrides any previous call to <strong>IMFCapturePreviewSink::SetRenderHandle</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447873</doc-id>
        /// <unmanaged>HRESULT IMFCapturePreviewSink::SetSampleCallback([In] DWORD dwStreamSinkIndex,[In] IMFCaptureEngineOnSampleCallback* pCallback)</unmanaged>
        /// <unmanaged-short>IMFCapturePreviewSink::SetSampleCallback</unmanaged-short>
        internal unsafe void SetSampleCallback(System.Int32 dwStreamSinkIndex, SharpDX.MediaFoundation.CaptureEngineOnSampleCallback callbackRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.CaptureEngineOnSampleCallback>(callbackRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamSinkIndex, (void *)callbackRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the current mirroring state of the video preview stream.</p>
        /// </summary>
        /// <param name = "fMirrorStateRef"><dd> <p>Receives the value <strong>TRUE</strong> if mirroring is enabled, or <strong><see cref = "SharpDX.Result.False"/></strong> if mirroring is disabled.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447866</doc-id>
        /// <unmanaged>HRESULT IMFCapturePreviewSink::GetMirrorState([Out] BOOL* pfMirrorState)</unmanaged>
        /// <unmanaged-short>IMFCapturePreviewSink::GetMirrorState</unmanaged-short>
        internal unsafe void GetMirrorState(out SharpDX.Mathematics.Interop.RawBool fMirrorStateRef)
        {
            fMirrorStateRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fMirrorStateRef_ = &fMirrorStateRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fMirrorStateRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Enables or disables mirroring of the video preview stream.</p>
        /// </summary>
        /// <param name = "fMirrorState"><dd> <p>If   <strong>TRUE</strong>, mirroring is enabled. If <strong><see cref = "SharpDX.Result.False"/></strong>, mirror is disabled.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447869</doc-id>
        /// <unmanaged>HRESULT IMFCapturePreviewSink::SetMirrorState([In] BOOL fMirrorState)</unmanaged>
        /// <unmanaged-short>IMFCapturePreviewSink::SetMirrorState</unmanaged-short>
        internal unsafe void SetMirrorState(SharpDX.Mathematics.Interop.RawBool fMirrorState)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, fMirrorState, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the rotation of the video preview stream.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of the stream. You must specify a video stream.</p> </dd></param>
        /// <param name = "dwRotationValueRef"><dd> <p>Receives the image rotation, in degrees.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447867</doc-id>
        /// <unmanaged>HRESULT IMFCapturePreviewSink::GetRotation([In] DWORD dwStreamIndex,[Out] DWORD* pdwRotationValue)</unmanaged>
        /// <unmanaged-short>IMFCapturePreviewSink::GetRotation</unmanaged-short>
        public unsafe void GetRotation(System.Int32 dwStreamIndex, out System.Int32 dwRotationValueRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwRotationValueRef_ = &dwRotationValueRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, dwRotationValueRef_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Rotates the video preview stream.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of the stream to rotate. You must specify a video stream.</p> </dd></param>
        /// <param name = "dwRotationValue"><dd> <p>The amount to rotate the video, in degrees. Valid values are 0, 90, 180, and 270. The value zero restores the video to its original orientation.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447872</doc-id>
        /// <unmanaged>HRESULT IMFCapturePreviewSink::SetRotation([In] DWORD dwStreamIndex,[In] DWORD dwRotationValue)</unmanaged>
        /// <unmanaged-short>IMFCapturePreviewSink::SetRotation</unmanaged-short>
        public unsafe void SetRotation(System.Int32 dwStreamIndex, System.Int32 dwRotationValue)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, dwRotationValue, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets a custom media sink for preview.</p>
        /// </summary>
        /// <param name = "mediaSinkRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaSink"/></strong> interface of the media sink.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method overrides the default selection of the media sink for preview.</p>
        /// </remarks>
        /// <doc-id>hh447868</doc-id>
        /// <unmanaged>HRESULT IMFCapturePreviewSink::SetCustomSink([In] IMFMediaSink* pMediaSink)</unmanaged>
        /// <unmanaged-short>IMFCapturePreviewSink::SetCustomSink</unmanaged-short>
        internal unsafe void SetCustomSink(SharpDX.MediaFoundation.MediaSink mediaSinkRef)
        {
            System.IntPtr mediaSinkRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mediaSinkRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaSink>(mediaSinkRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)mediaSinkRef_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3323b55a-f92a-4fe2-8edc-e9bfc0634d77")]
    public partial class CaptureRecordSink : SharpDX.MediaFoundation.CaptureSink
    {
        public CaptureRecordSink(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CaptureRecordSink(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CaptureRecordSink(nativePtr);
        /// <summary>
        /// <p>Specifies the name of the output file for the recording.</p>
        /// </summary>
        /// <remarks>
        /// <p>The capture engine uses the file name extension to select the container type for the output file. For example, if the file name extension is ."mp4", the capture engine creates an MP4 file.</p><p>Calling this method overrides any previous call to <strong>IMFCaptureRecordSink::SetOutputByteStream</strong> or <strong>IMFCaptureRecordSink::SetSampleCallback</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447879</doc-id>
        /// <unmanaged>SetOutputFileName</unmanaged>
        /// <unmanaged-short>SetOutputFileName</unmanaged-short>
        public System.String OutputFileName
        {
            set => SetOutputFileName(value);
        }

        /// <summary>
        /// <p>Sets a custom media sink for recording.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method overrides the default selection of the media sink for recording.</p>
        /// </remarks>
        /// <doc-id>hh447877</doc-id>
        /// <unmanaged>SetCustomSink</unmanaged>
        /// <unmanaged-short>SetCustomSink</unmanaged-short>
        public SharpDX.MediaFoundation.MediaSink CustomSink
        {
            set => SetCustomSink(value);
        }

        /// <summary>
        /// <p>Specifies a byte stream that will receive the data for the recording.</p>
        /// </summary>
        /// <param name = "byteStreamRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.IByteStream"/></strong> interface of a byte stream. The byte stream must be writable.</p> </dd></param>
        /// <param name = "guidContainerType"><dd> <p>A <see cref = "System.Guid"/> that specifies the file container type. Possible values are documented in the <see cref = "TranscodeContainertype"/> attribute.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Calling this method overrides any previous call to <strong>IMFCaptureRecordSink::SetOutputFileName</strong> or <strong>IMFCaptureRecordSink::SetSampleCallback</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447878</doc-id>
        /// <unmanaged>HRESULT IMFCaptureRecordSink::SetOutputByteStream([In] IMFByteStream* pByteStream,[In] const GUID&amp; guidContainerType)</unmanaged>
        /// <unmanaged-short>IMFCaptureRecordSink::SetOutputByteStream</unmanaged-short>
        internal unsafe void SetOutputByteStream(SharpDX.MediaFoundation.IByteStream byteStreamRef, System.Guid guidContainerType)
        {
            System.IntPtr byteStreamRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            byteStreamRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IByteStream>(byteStreamRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)byteStreamRef_, &guidContainerType, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Specifies the name of the output file for the recording.</p>
        /// </summary>
        /// <param name = "fileName"><dd> <p>A null-terminated string that contains the URL of the output file. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The capture engine uses the file name extension to select the container type for the output file. For example, if the file name extension is ."mp4", the capture engine creates an MP4 file.</p><p>Calling this method overrides any previous call to <strong>IMFCaptureRecordSink::SetOutputByteStream</strong> or <strong>IMFCaptureRecordSink::SetSampleCallback</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447879</doc-id>
        /// <unmanaged>HRESULT IMFCaptureRecordSink::SetOutputFileName([In] const wchar_t* fileName)</unmanaged>
        /// <unmanaged-short>IMFCaptureRecordSink::SetOutputFileName</unmanaged-short>
        internal unsafe void SetOutputFileName(System.String fileName)
        {
            SharpDX.Result __result__;
            fixed (char *fileName_ = fileName)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fileName_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets a callback to receive the recording data for one stream.</p>
        /// </summary>
        /// <param name = "dwStreamSinkIndex"><dd> <p>The zero-based index of the stream. The index is returned in the <em>pdwSinkStreamIndex</em> parameter of the <strong>IMFCaptureSink::AddStream</strong> method.</p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.CaptureEngineOnSampleCallback"/></strong> interface. The caller must implement this interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Calling this method overrides any previous call to <strong>IMFCaptureRecordSink::SetOutputByteStream</strong> or  <strong>IMFCaptureRecordSink::SetOutputFileName</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447881</doc-id>
        /// <unmanaged>HRESULT IMFCaptureRecordSink::SetSampleCallback([In] DWORD dwStreamSinkIndex,[In] IMFCaptureEngineOnSampleCallback* pCallback)</unmanaged>
        /// <unmanaged-short>IMFCaptureRecordSink::SetSampleCallback</unmanaged-short>
        internal unsafe void SetSampleCallback(System.Int32 dwStreamSinkIndex, SharpDX.MediaFoundation.CaptureEngineOnSampleCallback callbackRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.CaptureEngineOnSampleCallback>(callbackRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamSinkIndex, (void *)callbackRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets a custom media sink for recording.</p>
        /// </summary>
        /// <param name = "mediaSinkRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaSink"/></strong> interface of the media sink.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method overrides the default selection of the media sink for recording.</p>
        /// </remarks>
        /// <doc-id>hh447877</doc-id>
        /// <unmanaged>HRESULT IMFCaptureRecordSink::SetCustomSink([In] IMFMediaSink* pMediaSink)</unmanaged>
        /// <unmanaged-short>IMFCaptureRecordSink::SetCustomSink</unmanaged-short>
        internal unsafe void SetCustomSink(SharpDX.MediaFoundation.MediaSink mediaSinkRef)
        {
            System.IntPtr mediaSinkRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mediaSinkRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaSink>(mediaSinkRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)mediaSinkRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the rotation that is currently being applied to the recorded video stream.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of the stream. You must specify a video stream.</p> </dd></param>
        /// <param name = "dwRotationValueRef"><dd> <p>Receives the image rotation, in degrees.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447876</doc-id>
        /// <unmanaged>HRESULT IMFCaptureRecordSink::GetRotation([In] DWORD dwStreamIndex,[Out] DWORD* pdwRotationValue)</unmanaged>
        /// <unmanaged-short>IMFCaptureRecordSink::GetRotation</unmanaged-short>
        public unsafe void GetRotation(System.Int32 dwStreamIndex, out System.Int32 dwRotationValueRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwRotationValueRef_ = &dwRotationValueRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, dwRotationValueRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Rotates the recorded video stream.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of the stream to rotate. You must specify a video stream.</p> </dd></param>
        /// <param name = "dwRotationValue"><dd> <p>The amount to rotate the video, in degrees. Valid values are 0, 90, 180, and 270. The value zero restores the video to its original orientation.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447880</doc-id>
        /// <unmanaged>HRESULT IMFCaptureRecordSink::SetRotation([In] DWORD dwStreamIndex,[In] DWORD dwRotationValue)</unmanaged>
        /// <unmanaged-short>IMFCaptureRecordSink::SetRotation</unmanaged-short>
        public unsafe void SetRotation(System.Int32 dwStreamIndex, System.Int32 dwRotationValue)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, dwRotationValue, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("72d6135b-35e9-412c-b926-fd5265f2a885")]
    public partial class CaptureSink : SharpDX.ComObject
    {
        public CaptureSink(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CaptureSink(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CaptureSink(nativePtr);
        /// <summary>
        /// <p>Gets the output format for a stream on this capture sink.</p>
        /// </summary>
        /// <param name = "dwSinkStreamIndex"><dd> <p>The zero-based index of the stream to query. The index is returned in the <em>pdwSinkStreamIndex</em> parameter of the <strong>IMFCaptureSink::AddStream</strong> method.</p> </dd></param>
        /// <param name = "mediaTypeOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface. The caller must release the reference.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>The <em>dwSinkStreamIndex</em> parameter is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>hh447884</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSink::GetOutputMediaType([In] DWORD dwSinkStreamIndex,[Out, Optional] IMFMediaType** ppMediaType)</unmanaged>
        /// <unmanaged-short>IMFCaptureSink::GetOutputMediaType</unmanaged-short>
        public unsafe void GetOutputMediaType(System.Int32 dwSinkStreamIndex, out SharpDX.MediaFoundation.MediaType mediaTypeOut)
        {
            System.IntPtr mediaTypeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwSinkStreamIndex, &mediaTypeOut_, (*(void ***)this._nativePointer)[3]);
            if (mediaTypeOut_ != System.IntPtr.Zero)
                mediaTypeOut = new SharpDX.MediaFoundation.MediaType(mediaTypeOut_);
            else
                mediaTypeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries the underlying Sink Writer object for an interface.</p>
        /// </summary>
        /// <param name = "dwSinkStreamIndex">No documentation.</param>
        /// <param name = "rguidService">No documentation.</param>
        /// <param name = "riid">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <doc-id>hh447885</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSink::GetService([In] DWORD dwSinkStreamIndex,[In] const GUID&amp; rguidService,[In] const GUID&amp; riid,[Out, Optional] IUnknown** ppUnknown)</unmanaged>
        /// <unmanaged-short>IMFCaptureSink::GetService</unmanaged-short>
        public unsafe SharpDX.IUnknown GetService(System.Int32 dwSinkStreamIndex, System.Guid rguidService, System.Guid riid)
        {
            SharpDX.IUnknown unknownOut;
            System.IntPtr unknownOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwSinkStreamIndex, &rguidService, &riid, &unknownOut_, (*(void ***)this._nativePointer)[4]);
            if (unknownOut_ != System.IntPtr.Zero)
                unknownOut = new SharpDX.ComObject(unknownOut_);
            else
                unknownOut = null;
            __result__.CheckError();
            return unknownOut;
        }

        /// <summary>
        /// <p>Connects a stream from the capture source to this capture sink.</p>
        /// </summary>
        /// <param name = "dwSourceStreamIndex"><dd> <p>The source stream to connect. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream. To get the number of streams, call <strong>IMFCaptureSource::GetDeviceStreamCount</strong>.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_PHOTO_STREAM</strong></strong></dt> <dt>0xFFFFFFFB</dt> </dl> </td><td> <p>The first image stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "mediaTypeRef"><dd> <p>An <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> reference that specifies the desired format of the output stream. The details of the format will depend on the capture sink.</p> <ul> <li>Photo sink: A still image format compatible with Windows Imaging Component (WIC).</li> <li>Preview sink: An uncompressed audio or video format.</li> <li>Record sink: The audio or video format that will be written to the output file.</li> </ul> </dd></param>
        /// <param name = "attributesRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface. For compressed streams, you can use this parameter to configure the encoder. This parameter can also be <strong><c>null</c></strong>. For the preview sink, set this parameter to <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "dwSinkStreamIndexRef"><dd> <p>Receives the index of the new stream on the capture sink. Note that this index will not necessarily match the value of <em>dwSourceStreamIndex</em>. </p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidMediaType"/></strong></dt> </dl> </td><td> <p>The format specified in <em>pMediaType</em> is not valid for this capture sink.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>The <em>dwSourceStreamIndex</em> parameter is invalid, or the specified source stream was already connected to this sink.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>hh447883</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSink::AddStream([In] DWORD dwSourceStreamIndex,[In] IMFMediaType* pMediaType,[In, Optional] IMFAttributes* pAttributes,[Out, Optional] DWORD* pdwSinkStreamIndex)</unmanaged>
        /// <unmanaged-short>IMFCaptureSink::AddStream</unmanaged-short>
        public unsafe void AddStream(System.Int32 dwSourceStreamIndex, SharpDX.MediaFoundation.MediaType mediaTypeRef, SharpDX.MediaFoundation.MediaAttributes attributesRef, out System.Int32 dwSinkStreamIndexRef)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            System.IntPtr attributesRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(mediaTypeRef);
            attributesRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(attributesRef);
            fixed (void *dwSinkStreamIndexRef_ = &dwSinkStreamIndexRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwSourceStreamIndex, (void *)mediaTypeRef_, (void *)attributesRef_, dwSinkStreamIndexRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Prepares the capture sink by loading any required pipeline components, such as encoders, video processors, and media sinks.</p>
        /// </summary>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>Invalid request.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Calling this method is optional. This method gives the application an opportunity to configure the pipeline components before they are used. The method is asynchronous. If the method returns a success code, the caller will receive an <strong>MF_CAPTURE_SINK_PREPARED</strong> event through the <strong>IMFCaptureEngineOnEventCallback::OnEvent</strong> method.  After this event is received, call <strong>IMFCaptureSink::GetService</strong> to configure individual components.</p><p>Before calling this method, configure the capture sink by adding at least one stream. To add a stream, call <strong>IMFCaptureSink::AddStream</strong>.</p><p>The <strong>Prepare</strong> method fails if the capture sink is currently in use. For example, calling <strong>Prepare</strong> on the preview sink fails if the capture engine is currently previewing.</p>
        /// </remarks>
        /// <doc-id>hh447886</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSink::Prepare()</unmanaged>
        /// <unmanaged-short>IMFCaptureSink::Prepare</unmanaged-short>
        public unsafe void Prepare()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Removes all streams from the capture sink.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>You can use this method to reconfigure the sink.</p>
        /// </remarks>
        /// <doc-id>hh447887</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSink::RemoveAllStreams()</unmanaged>
        /// <unmanaged-short>IMFCaptureSink::RemoveAllStreams</unmanaged-short>
        public unsafe void RemoveAllStreams()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("f9e4219e-6197-4b5e-b888-bee310ab2c59")]
    public partial class CaptureSink2 : SharpDX.MediaFoundation.CaptureSink
    {
        public CaptureSink2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CaptureSink2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CaptureSink2(nativePtr);
        /// <summary>
        /// <p>Dynamically sets the output media type of the record sink or preview sink.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The stream index to change the output media type on.</p> </dd></param>
        /// <param name = "mediaTypeRef"><dd> <p>The new output media type.</p> </dd></param>
        /// <param name = "encodingAttributesRef"><dd> <p>The new encoder attributes. This can be  <strong>null</strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded</p> </td></tr> <tr><td> <dl> <dt><strong>MF_E_INVALID_MEDIATYPE</strong></dt> </dl> </td><td> <p>The sink does not support the media type.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This is an asynchronous call.  Listen to the MF_CAPTURE_ENGINE_OUTPUT_MEDIA_TYPE_SET event
        /// to be notified when the output media type has been set.</p>
        /// </remarks>
        /// <doc-id>dn280680</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSink2::SetOutputMediaType([In] DWORD dwStreamIndex,[In] IMFMediaType* pMediaType,[In, Optional] IMFAttributes* pEncodingAttributes)</unmanaged>
        /// <unmanaged-short>IMFCaptureSink2::SetOutputMediaType</unmanaged-short>
        public unsafe void SetOutputMediaType(System.Int32 dwStreamIndex, SharpDX.MediaFoundation.MediaType mediaTypeRef, SharpDX.MediaFoundation.MediaAttributes encodingAttributesRef)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            System.IntPtr encodingAttributesRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(mediaTypeRef);
            encodingAttributesRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(encodingAttributesRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (void *)mediaTypeRef_, (void *)encodingAttributesRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("439a42a8-0d2c-4505-be83-f79b2a05d5c4")]
    public partial class CaptureSource : SharpDX.ComObject
    {
        public CaptureSource(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CaptureSource(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CaptureSource(nativePtr);
        /// <summary>
        /// <p>Gets the number of device streams.</p>
        /// </summary>
        /// <doc-id>hh447894</doc-id>
        /// <unmanaged>GetDeviceStreamCount</unmanaged>
        /// <unmanaged-short>GetDeviceStreamCount</unmanaged-short>
        public System.Int32 DeviceStreamCount
        {
            get
            {
                GetDeviceStreamCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the current capture device's <strong><see cref = "SharpDX.MediaFoundation.MediaSource"/></strong> object reference.</p>
        /// </summary>
        /// <param name = "mfCaptureEngineDeviceType">No documentation.</param>
        /// <param name = "mediaSourceOut">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>jj159896</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSource::GetCaptureDeviceSource([In] MF_CAPTURE_ENGINE_DEVICE_TYPE mfCaptureEngineDeviceType,[Out, Optional] IMFMediaSource** ppMediaSource)</unmanaged>
        /// <unmanaged-short>IMFCaptureSource::GetCaptureDeviceSource</unmanaged-short>
        public unsafe void GetCaptureDeviceSource(SharpDX.MediaFoundation.CaptureEngineDeviceType mfCaptureEngineDeviceType, out SharpDX.MediaFoundation.MediaSource mediaSourceOut)
        {
            System.IntPtr mediaSourceOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)mfCaptureEngineDeviceType), &mediaSourceOut_, (*(void ***)this._nativePointer)[3]);
            if (mediaSourceOut_ != System.IntPtr.Zero)
                mediaSourceOut = new SharpDX.MediaFoundation.MediaSource(mediaSourceOut_);
            else
                mediaSourceOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the current capture device's <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> object reference.</p>
        /// </summary>
        /// <param name = "mfCaptureEngineDeviceType">No documentation.</param>
        /// <param name = "activateOut">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>jj159895</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSource::GetCaptureDeviceActivate([In] MF_CAPTURE_ENGINE_DEVICE_TYPE mfCaptureEngineDeviceType,[Out, Optional] IMFActivate** ppActivate)</unmanaged>
        /// <unmanaged-short>IMFCaptureSource::GetCaptureDeviceActivate</unmanaged-short>
        public unsafe void GetCaptureDeviceActivate(SharpDX.MediaFoundation.CaptureEngineDeviceType mfCaptureEngineDeviceType, out SharpDX.MediaFoundation.Activate activateOut)
        {
            System.IntPtr activateOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)mfCaptureEngineDeviceType), &activateOut_, (*(void ***)this._nativePointer)[4]);
            if (activateOut_ != System.IntPtr.Zero)
                activateOut = new SharpDX.MediaFoundation.Activate(activateOut_);
            else
                activateOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a reference to the underlying Source Reader object.</p>
        /// </summary>
        /// <param name = "rguidService">No documentation.</param>
        /// <param name = "riid">No documentation.</param>
        /// <param name = "unknownOut">No documentation.</param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The capture source was not initialized. Possibly there is no capture device on the system.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>hh447896</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSource::GetService([In] const GUID&amp; rguidService,[In] const GUID&amp; riid,[Out, Optional] IUnknown** ppUnknown)</unmanaged>
        /// <unmanaged-short>IMFCaptureSource::GetService</unmanaged-short>
        public unsafe void GetService(System.Guid rguidService, System.Guid riid, out SharpDX.IUnknown unknownOut)
        {
            System.IntPtr unknownOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &rguidService, &riid, &unknownOut_, (*(void ***)this._nativePointer)[5]);
            if (unknownOut_ != System.IntPtr.Zero)
                unknownOut = new SharpDX.ComObject(unknownOut_);
            else
                unknownOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Adds an effect to a capture stream.</p>
        /// </summary>
        /// <param name = "dwSourceStreamIndex"><dd> <p>The capture stream. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream.  To get the number of streams, call <strong>IMFCaptureSource::GetDeviceStreamCount</strong>.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_PHOTO_STREAM</strong></strong></dt> <dt>0xFFFFFFFB</dt> </dl> </td><td> <p>The first image stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "unknownRef"><dd> <p>A reference to one of the following: </p> <ul> <li>A Media Foundation transform (MFT) that exposes the <strong><see cref = "SharpDX.MediaFoundation.Transform"/></strong> interface.</li> <li>An MFT activation object that exposes the <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> interface.</li> </ul> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidMediaType"/></strong></dt> </dl> </td><td> <p>No compatible media type could be found.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>The <em>dwSourceStreamIndex</em> parameter is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The effect must be implemented as a Media Foundation Transform (MFT). The <em>pUnknown</em> parameter can point to an instance of the MFT, or to an activation object for the MFT. For more information, see Activation Objects.</p><p>The effect is applied to the stream before the data reaches the capture sinks. </p>
        /// </remarks>
        /// <doc-id>hh447890</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSource::AddEffect([In] DWORD dwSourceStreamIndex,[In] IUnknown* pUnknown)</unmanaged>
        /// <unmanaged-short>IMFCaptureSource::AddEffect</unmanaged-short>
        public unsafe void AddEffect(System.Int32 dwSourceStreamIndex, SharpDX.IUnknown unknownRef)
        {
            System.IntPtr unknownRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            unknownRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unknownRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwSourceStreamIndex, (void *)unknownRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Removes an effect from a capture stream.</p>
        /// </summary>
        /// <param name = "dwSourceStreamIndex"><dd> <p>The capture stream. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream.  To get the number of streams, call <strong>IMFCaptureSource::GetDeviceStreamCount</strong>.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_PHOTO_STREAM</strong></strong></dt> <dt>0xFFFFFFFB</dt> </dl> </td><td> <p>The first image stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "unknownRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of the effect object. </p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>Invalid request. Possibly the specified effect could not be found.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>The <em>dwSourceStreamIndex</em> parameter is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method removes an effect that was previously added using the <strong>IMFCaptureSource::AddEffect</strong> method.</p>
        /// </remarks>
        /// <doc-id>hh447898</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSource::RemoveEffect([In] DWORD dwSourceStreamIndex,[In] IUnknown* pUnknown)</unmanaged>
        /// <unmanaged-short>IMFCaptureSource::RemoveEffect</unmanaged-short>
        public unsafe void RemoveEffect(System.Int32 dwSourceStreamIndex, SharpDX.IUnknown unknownRef)
        {
            System.IntPtr unknownRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            unknownRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unknownRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwSourceStreamIndex, (void *)unknownRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Removes all effects from a capture stream.</p>
        /// </summary>
        /// <param name = "dwSourceStreamIndex"><dd> <p>The capture stream. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream. To get the number of streams, call <strong>IMFCaptureSource::GetDeviceStreamCount</strong>.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_PHOTO_STREAM</strong></strong></dt> <dt>0xFFFFFFFB</dt> </dl> </td><td> <p>The first image stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>The <em>dwSourceStreamIndex</em> parameter is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>hh447897</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSource::RemoveAllEffects([In] DWORD dwSourceStreamIndex)</unmanaged>
        /// <unmanaged-short>IMFCaptureSource::RemoveAllEffects</unmanaged-short>
        public unsafe void RemoveAllEffects(System.Int32 dwSourceStreamIndex)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwSourceStreamIndex, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a format that is supported by one of the capture streams.</p>
        /// </summary>
        /// <param name = "dwSourceStreamIndex"><dd> <p>The stream to query. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream. To get the number of streams, call <strong>IMFCaptureSource::GetDeviceStreamCount</strong>.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_PHOTO_STREAM</strong></strong></dt> <dt>0xFFFFFFFB</dt> </dl> </td><td> <p>The first image stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "dwMediaTypeIndex"><dd> <p>The zero-based index of the media type to retrieve.</p> </dd></param>
        /// <param name = "mediaTypeOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>The <em>dwSourceStreamIndex</em> parameter is invalid.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoMoreTypes"/></strong></dt> </dl> </td><td> <p>The <em>dwMediaTypeIndex</em> parameter is out of range. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To enumerate all of the available formats on a stream, call this method in a loop while incrementing <em>dwMediaTypeIndex</em>, until the method returns <strong><see cref = "NoMoreTypes"/></strong>.</p><p>Some cameras might support a range of frame rates. The minimum and maximum frame rates are stored in the <see cref = "FrameRateRangeMin"/> and <see cref = "FrameRateRangeMax"/> attributes on the media type.</p>
        /// </remarks>
        /// <doc-id>hh447891</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSource::GetAvailableDeviceMediaType([In] DWORD dwSourceStreamIndex,[In] DWORD dwMediaTypeIndex,[Out, Optional] IMFMediaType** ppMediaType)</unmanaged>
        /// <unmanaged-short>IMFCaptureSource::GetAvailableDeviceMediaType</unmanaged-short>
        public unsafe void GetAvailableDeviceMediaType(System.Int32 dwSourceStreamIndex, System.Int32 dwMediaTypeIndex, out SharpDX.MediaFoundation.MediaType mediaTypeOut)
        {
            System.IntPtr mediaTypeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwSourceStreamIndex, dwMediaTypeIndex, &mediaTypeOut_, (*(void ***)this._nativePointer)[9]);
            if (mediaTypeOut_ != System.IntPtr.Zero)
                mediaTypeOut = new SharpDX.MediaFoundation.MediaType(mediaTypeOut_);
            else
                mediaTypeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the output format for a capture stream.</p>
        /// </summary>
        /// <param name = "dwSourceStreamIndex"><dd> <p>The capture stream to set. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream. To get the number of streams, call <strong>IMFCaptureSource::GetDeviceStreamCount</strong>.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_PHOTO_STREAM</strong></strong></dt> <dt>0xFFFFFFFB</dt> </dl> </td><td> <p>The first image stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "mediaTypeRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>The <em>dwSourceStreamIndex</em> parameter is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method sets the native output type on the capture device. The device must support the specified format. To get the list of available formats, call <strong>IMFCaptureSource::GetAvailableDeviceMediaType</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447899</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSource::SetCurrentDeviceMediaType([In] DWORD dwSourceStreamIndex,[In] IMFMediaType* pMediaType)</unmanaged>
        /// <unmanaged-short>IMFCaptureSource::SetCurrentDeviceMediaType</unmanaged-short>
        public unsafe void SetCurrentDeviceMediaType(System.Int32 dwSourceStreamIndex, SharpDX.MediaFoundation.MediaType mediaTypeRef)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(mediaTypeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwSourceStreamIndex, (void *)mediaTypeRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the current media type for a capture stream.</p>
        /// </summary>
        /// <param name = "dwSourceStreamIndex"><dd> <p>Specifies which stream to query. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream.  To get the number of streams, call <strong>IMFCaptureSource::GetDeviceStreamCount</strong>.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_PHOTO_STREAM</strong></strong></dt> <dt>0xFFFFFFFB</dt> </dl> </td><td> <p>The first image stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_CAPTURE_ENGINE_FIRST_SOURCE_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "mediaTypeOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>The <em>dwSourceStreamIndex</em> parameter is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>hh447893</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSource::GetCurrentDeviceMediaType([In] DWORD dwSourceStreamIndex,[Out] IMFMediaType** ppMediaType)</unmanaged>
        /// <unmanaged-short>IMFCaptureSource::GetCurrentDeviceMediaType</unmanaged-short>
        public unsafe void GetCurrentDeviceMediaType(System.Int32 dwSourceStreamIndex, out SharpDX.MediaFoundation.MediaType mediaTypeOut)
        {
            System.IntPtr mediaTypeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwSourceStreamIndex, &mediaTypeOut_, (*(void ***)this._nativePointer)[11]);
            if (mediaTypeOut_ != System.IntPtr.Zero)
                mediaTypeOut = new SharpDX.MediaFoundation.MediaType(mediaTypeOut_);
            else
                mediaTypeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the number of device streams.</p>
        /// </summary>
        /// <param name = "dwStreamCountRef"><dd> <p>Receives the number of device streams.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447894</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSource::GetDeviceStreamCount([Out] DWORD* pdwStreamCount)</unmanaged>
        /// <unmanaged-short>IMFCaptureSource::GetDeviceStreamCount</unmanaged-short>
        internal unsafe void GetDeviceStreamCount(out System.Int32 dwStreamCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwStreamCountRef_ = &dwStreamCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamCountRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the stream category for the specified source stream index.</p>
        /// </summary>
        /// <param name = "dwSourceStreamIndex"><dd> <p>The index of the source stream.</p> </dd></param>
        /// <param name = "streamCategoryRef"><dd> <p>Receives the <see cref = "SharpDX.MediaFoundation.CaptureEngineStreamCategory"/> of the specified source stream.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>jj159897</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSource::GetDeviceStreamCategory([In] DWORD dwSourceStreamIndex,[Out] MF_CAPTURE_ENGINE_STREAM_CATEGORY* pStreamCategory)</unmanaged>
        /// <unmanaged-short>IMFCaptureSource::GetDeviceStreamCategory</unmanaged-short>
        public unsafe void GetDeviceStreamCategory(System.Int32 dwSourceStreamIndex, out SharpDX.MediaFoundation.CaptureEngineStreamCategory streamCategoryRef)
        {
            SharpDX.Result __result__;
            fixed (void *streamCategoryRef_ = &streamCategoryRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwSourceStreamIndex, streamCategoryRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the current mirroring state of the video preview stream.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of the stream.</p> </dd></param>
        /// <param name = "fMirrorStateRef"><dd> <p>Receives the value <strong>TRUE</strong> if mirroring is enabled, or <strong><see cref = "SharpDX.Result.False"/></strong> if mirroring is disabled.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447895</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSource::GetMirrorState([In] DWORD dwStreamIndex,[Out] BOOL* pfMirrorState)</unmanaged>
        /// <unmanaged-short>IMFCaptureSource::GetMirrorState</unmanaged-short>
        public unsafe void GetMirrorState(System.Int32 dwStreamIndex, out SharpDX.Mathematics.Interop.RawBool fMirrorStateRef)
        {
            fMirrorStateRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fMirrorStateRef_ = &fMirrorStateRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, fMirrorStateRef_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Enables or disables mirroring of the video preview stream.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of the stream.</p> </dd></param>
        /// <param name = "fMirrorState"><dd> <p>If   <strong>TRUE</strong>,    mirroring is enabled; if  <strong><see cref = "SharpDX.Result.False"/></strong>, mirroring is  disabled.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p>The device stream does not have mirroring capability.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The source is not initialized.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>hh447900</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSource::SetMirrorState([In] DWORD dwStreamIndex,[In] BOOL fMirrorState)</unmanaged>
        /// <unmanaged-short>IMFCaptureSource::SetMirrorState</unmanaged-short>
        public unsafe void SetMirrorState(System.Int32 dwStreamIndex, SharpDX.Mathematics.Interop.RawBool fMirrorState)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, dwStreamIndex, fMirrorState, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the actual device stream index translated from a friendly stream name.</p>
        /// </summary>
        /// <param name = "uifriendlyName"><dd> <p>The friendly name.  Can be one of the following:</p> <ul> <li>MF_CAPTURE_ENGINE_FIRST_SOURCE_AUDIO_STREAM</li> <li>MF_CAPTURE_ENGINE_FIRST_SOURCE_VIDEO_STREAM</li> <li>MF_CAPTURE_ENGINE_FIRST_SOURCE_PHOTO_STREAM</li> <li>MF_CAPTURE_ENGINE_PREFERRED_SOURCE_VIDEO_STREAM_FOR_RECORD</li> <li>MF_CAPTURE_ENGINE_PREFERRED_SOURCE_VIDEO_STREAM_FOR_PREVIEW</li> <li>MF_CAPTURE_ENGINE_FIRST_SOURCE_INDEPENDENT_PHOTO_STREAM</li> </ul> </dd></param>
        /// <param name = "dwActualStreamIndexRef"><dd> <p>Receives the value of the stream index that corresponds to the friendly name.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>jj128307</doc-id>
        /// <unmanaged>HRESULT IMFCaptureSource::GetStreamIndexFromFriendlyName([In] unsigned int uifriendlyName,[Out] DWORD* pdwActualStreamIndex)</unmanaged>
        /// <unmanaged-short>IMFCaptureSource::GetStreamIndexFromFriendlyName</unmanaged-short>
        public unsafe void GetStreamIndexFromFriendlyName(System.Int32 uifriendlyName, out System.Int32 dwActualStreamIndexRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwActualStreamIndexRef_ = &dwActualStreamIndexRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, uifriendlyName, dwActualStreamIndexRef_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7a5645d2-43bd-47fd-87b7-dcd24cc7d692")]
    public partial class CdmSuspendNotify : SharpDX.ComObject
    {
        public CdmSuspendNotify(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CdmSuspendNotify(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CdmSuspendNotify(nativePtr);
        /// <summary>
        /// <p>Indicates that the suspend process is starting and  resources should be brought into a consistent state.  </p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280682</doc-id>
        /// <unmanaged>HRESULT IMFCdmSuspendNotify::Begin()</unmanaged>
        /// <unmanaged-short>IMFCdmSuspendNotify::Begin</unmanaged-short>
        public unsafe void Begin()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>The actual suspend is about to occur and no more calls will be made into the Content Decryption Module (CDM).</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280683</doc-id>
        /// <unmanaged>HRESULT IMFCdmSuspendNotify::End()</unmanaged>
        /// <unmanaged-short>IMFCdmSuspendNotify::End</unmanaged-short>
        public unsafe void End()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2eb1e945-18b8-4139-9b1a-d5d584818530")]
    public partial class Clock : SharpDX.ComObject
    {
        public Clock(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Clock(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Clock(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the characteristics of the clock.</p>
        /// </summary>
        /// <doc-id>ms697050</doc-id>
        /// <unmanaged>GetClockCharacteristics</unmanaged>
        /// <unmanaged-short>GetClockCharacteristics</unmanaged-short>
        public System.Int32 ClockCharacteristics
        {
            get
            {
                GetClockCharacteristics(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the clock's continuity key. (Not supported.)</p>
        /// </summary>
        /// <remarks>
        /// <p>Continuity keys are currently not supported in Media Foundation. Clocks must return the value zero in the <em>pdwContinuityKey</em> parameter.</p>
        /// </remarks>
        /// <doc-id>ms700188</doc-id>
        /// <unmanaged>GetContinuityKey</unmanaged>
        /// <unmanaged-short>GetContinuityKey</unmanaged-short>
        public System.Int32 ContinuityKey
        {
            get
            {
                GetContinuityKey(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the properties of the clock.</p>
        /// </summary>
        /// <doc-id>ms701613</doc-id>
        /// <unmanaged>GetProperties</unmanaged>
        /// <unmanaged-short>GetProperties</unmanaged-short>
        public SharpDX.MediaFoundation.ClockProperties Properties
        {
            get
            {
                GetProperties(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the characteristics of the clock.</p>
        /// </summary>
        /// <param name = "dwCharacteristicsRef"><dd> <p>Receives a bitwise OR of values from the <strong><see cref = "SharpDX.MediaFoundation.ClockCharacteristicsFlags"/></strong> enumeration indicating the characteristics of the clock.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697050</doc-id>
        /// <unmanaged>HRESULT IMFClock::GetClockCharacteristics([Out] DWORD* pdwCharacteristics)</unmanaged>
        /// <unmanaged-short>IMFClock::GetClockCharacteristics</unmanaged-short>
        internal unsafe void GetClockCharacteristics(out System.Int32 dwCharacteristicsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwCharacteristicsRef_ = &dwCharacteristicsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwCharacteristicsRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Retrieves the last clock time that was correlated with system time. </p>
        /// </summary>
        /// <param name = "dwReserved"><dd> <p> Reserved, must be zero. </p> </dd></param>
        /// <param name = "llClockTimeRef"><dd> <p> Receives the last known clock time, in units of the clock's frequency. </p> </dd></param>
        /// <param name = "hnsSystemTimeRef"><dd> <p> Receives the system time that corresponds to the clock time returned in <em>pllClockTime</em>, in 100-nanosecond units. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ClockNoTimeSource"/></strong></dt> </dl> </td><td> <p> The clock does not have a time source. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>At some fixed interval, a clock correlates its internal clock ticks with the system time. (The system time is the time returned by the high-resolution performance counter.) This method returns:</p><ul> <li> The most recent clock time that was correlated with system time. </li> <li> The system time when the correlation was performed. </li> </ul><p> The clock time is returned in the <em>pllClockTime</em> parameter and is expressed in units of the clock's frequency. If the clock's <strong>IMFClock::GetClockCharacteristics</strong> method returns the <strong>MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ</strong> flag, the clock's frequency is 10 MHz (each clock tick is 100 nanoseconds). Otherwise, you can get the clock's frequency by calling <strong>IMFClock::GetProperties</strong>. The frequency is given in the <strong>qwClockFrequency</strong> member of the <strong><see cref = "SharpDX.MediaFoundation.ClockProperties"/></strong> structure returned by that method. </p><p> The system time is returned in the <em>phnsSystemTime</em> parameter, and is always expressed in 100-nanosecond units. </p><p> To find out how often the clock correlates its clock time with the system time, call <strong>GetProperties</strong>. The correlation interval is given in the <strong>qwCorrelationRate</strong> member of the <strong><see cref = "SharpDX.MediaFoundation.ClockProperties"/></strong> structure. If <strong>qwCorrelationRate</strong> is zero, it means the clock performs the correlation whenever <strong>GetCorrelatedTime</strong> is called. Otherwise, you can calculate the current clock time by extrapolating from the last correlated time. </p><p> Some clocks support rate changes through the <strong><see cref = "SharpDX.MediaFoundation.RateControl"/></strong> interface. If so, the clock time advances at a speed of frequency ? current rate. If a clock does not expose the <strong><see cref = "SharpDX.MediaFoundation.RateControl"/></strong> interface, the rate is always 1.0. </p><p>For the presentation clock, the clock time is the presentation time, and is always relative to the starting time specified in <strong>IMFPresentationClock::Start</strong>. You can also get the presentation time by calling <strong>IMFPresentationClock::GetTime</strong>.</p>
        /// </remarks>
        /// <doc-id>ms694122</doc-id>
        /// <unmanaged>HRESULT IMFClock::GetCorrelatedTime([In] DWORD dwReserved,[Out] longlong* pllClockTime,[Out] longlong* phnsSystemTime)</unmanaged>
        /// <unmanaged-short>IMFClock::GetCorrelatedTime</unmanaged-short>
        public unsafe void GetCorrelatedTime(System.Int32 dwReserved, out System.Int64 llClockTimeRef, out System.Int64 hnsSystemTimeRef)
        {
            SharpDX.Result __result__;
            fixed (void *hnsSystemTimeRef_ = &hnsSystemTimeRef)
                fixed (void *llClockTimeRef_ = &llClockTimeRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwReserved, llClockTimeRef_, hnsSystemTimeRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the clock's continuity key. (Not supported.)</p>
        /// </summary>
        /// <param name = "dwContinuityKeyRef"><dd> <p>Receives the continuity key.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Continuity keys are currently not supported in Media Foundation. Clocks must return the value zero in the <em>pdwContinuityKey</em> parameter.</p>
        /// </remarks>
        /// <doc-id>ms700188</doc-id>
        /// <unmanaged>HRESULT IMFClock::GetContinuityKey([Out] DWORD* pdwContinuityKey)</unmanaged>
        /// <unmanaged-short>IMFClock::GetContinuityKey</unmanaged-short>
        internal unsafe void GetContinuityKey(out System.Int32 dwContinuityKeyRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwContinuityKeyRef_ = &dwContinuityKeyRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwContinuityKeyRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the current state of the clock.</p>
        /// </summary>
        /// <param name = "dwReserved"><dd> <p>Reserved, must be zero.</p> </dd></param>
        /// <param name = "eClockStateRef"><dd> <p>Receives the clock state, as a member of the <strong><see cref = "SharpDX.MediaFoundation.ClockState"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms700206</doc-id>
        /// <unmanaged>HRESULT IMFClock::GetState([In] DWORD dwReserved,[Out] MFCLOCK_STATE* peClockState)</unmanaged>
        /// <unmanaged-short>IMFClock::GetState</unmanaged-short>
        public unsafe void GetState(System.Int32 dwReserved, out SharpDX.MediaFoundation.ClockState eClockStateRef)
        {
            SharpDX.Result __result__;
            fixed (void *eClockStateRef_ = &eClockStateRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwReserved, eClockStateRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the properties of the clock.</p>
        /// </summary>
        /// <param name = "clockPropertiesRef"><dd> <p>Pointer to an <strong><see cref = "SharpDX.MediaFoundation.ClockProperties"/></strong> structure that receives the properties.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms701613</doc-id>
        /// <unmanaged>HRESULT IMFClock::GetProperties([Out] MFCLOCK_PROPERTIES* pClockProperties)</unmanaged>
        /// <unmanaged-short>IMFClock::GetProperties</unmanaged-short>
        internal unsafe void GetProperties(out SharpDX.MediaFoundation.ClockProperties clockPropertiesRef)
        {
            clockPropertiesRef = default (SharpDX.MediaFoundation.ClockProperties);
            SharpDX.Result __result__;
            fixed (void *clockPropertiesRef_ = &clockPropertiesRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, clockPropertiesRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("6ef2a662-47c0-4666-b13d-cbb717f2fa2c")]
    public partial class ClockConsumer : SharpDX.ComObject
    {
        public ClockConsumer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ClockConsumer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ClockConsumer(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPresentationClock / SetPresentationClock</unmanaged>
        /// <unmanaged-short>GetPresentationClock</unmanaged-short>
        public SharpDX.MediaFoundation.PresentationClock PresentationClock
        {
            get
            {
                GetPresentationClock(out var __output__);
                return __output__;
            }

            set => SetPresentationClock(value);
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Called by the media pipeline to provide the app with an instance of <strong><see cref = "SharpDX.MediaFoundation.PresentationClock"/></strong>.</p>
        /// </summary>
        /// <param name = "presentationClockRef">No documentation.</param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>mt797926</doc-id>
        /// <unmanaged>HRESULT IMFClockConsumer::SetPresentationClock([In, Optional] IMFPresentationClock* pPresentationClock)</unmanaged>
        /// <unmanaged-short>IMFClockConsumer::SetPresentationClock</unmanaged-short>
        internal unsafe void SetPresentationClock(SharpDX.MediaFoundation.PresentationClock presentationClockRef)
        {
            System.IntPtr presentationClockRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            presentationClockRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.PresentationClock>(presentationClockRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)presentationClockRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "presentationClockOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFClockConsumer::GetPresentationClock([Out] IMFPresentationClock** ppPresentationClock)</unmanaged>
        /// <unmanaged-short>IMFClockConsumer::GetPresentationClock</unmanaged-short>
        internal unsafe void GetPresentationClock(out SharpDX.MediaFoundation.PresentationClock presentationClockOut)
        {
            System.IntPtr presentationClockOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &presentationClockOut_, (*(void ***)this._nativePointer)[4]);
            if (presentationClockOut_ != System.IntPtr.Zero)
                presentationClockOut = new SharpDX.MediaFoundation.PresentationClock(presentationClockOut_);
            else
                presentationClockOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("F6696E82-74F7-4f3d-A178-8A5E09C3659F")]
    public partial interface ClockStateSink : SharpDX.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("5BC8A76B-869A-46a3-9B03-FA218A66AEBE")]
    public partial class Collection : SharpDX.ComObject
    {
        public Collection(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Collection(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Collection(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the number of objects in the collection.</p>
        /// </summary>
        /// <doc-id>ms697034</doc-id>
        /// <unmanaged>GetElementCount</unmanaged>
        /// <unmanaged-short>GetElementCount</unmanaged-short>
        public System.Int32 ElementCount
        {
            get
            {
                GetElementCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of objects in the collection.</p>
        /// </summary>
        /// <param name = "cElementsRef"><dd> <p>Receives the number of objects in the collection.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697034</doc-id>
        /// <unmanaged>HRESULT IMFCollection::GetElementCount([Out] DWORD* pcElements)</unmanaged>
        /// <unmanaged-short>IMFCollection::GetElementCount</unmanaged-short>
        internal unsafe void GetElementCount(out System.Int32 cElementsRef)
        {
            SharpDX.Result __result__;
            fixed (void *cElementsRef_ = &cElementsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cElementsRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves an object in the collection.</p>
        /// </summary>
        /// <param name = "dwElementIndex"><dd> <p> Zero-based index of the object to retrieve. Objects are indexed in the order in which they were added to the collection. </p> </dd></param>
        /// <returns><dd> <p> Receives a reference to the object's <strong><see cref = "SharpDX.IUnknown"/></strong> interface. The caller must release the interface. The retrieved reference value might be <strong><c>null</c></strong>. </p> </dd></returns>
        /// <remarks>
        /// <p> This method does not remove the object from the collection. To remove an object, call <strong>IMFCollection::RemoveElement</strong>. </p>
        /// </remarks>
        /// <doc-id>ms701793</doc-id>
        /// <unmanaged>HRESULT IMFCollection::GetElement([In] DWORD dwElementIndex,[Out] IUnknown** ppUnkElement)</unmanaged>
        /// <unmanaged-short>IMFCollection::GetElement</unmanaged-short>
        public unsafe SharpDX.IUnknown GetElement(System.Int32 dwElementIndex)
        {
            SharpDX.IUnknown unkElementOut;
            System.IntPtr unkElementOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwElementIndex, &unkElementOut_, (*(void ***)this._nativePointer)[4]);
            if (unkElementOut_ != System.IntPtr.Zero)
                unkElementOut = new SharpDX.ComObject(unkElementOut_);
            else
                unkElementOut = null;
            __result__.CheckError();
            return unkElementOut;
        }

        /// <summary>
        /// <p> </p><p>Adds an object to the collection.</p>
        /// </summary>
        /// <param name = "unkElementRef"><dd> <p>Pointer to the object's <strong><see cref = "SharpDX.IUnknown"/></strong> interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If <em>pUnkElement</em> is <strong><c>null</c></strong>, a <strong><c>null</c></strong> reference is added to the collection.</p>
        /// </remarks>
        /// <doc-id>ms695202</doc-id>
        /// <unmanaged>HRESULT IMFCollection::AddElement([In, Optional] IUnknown* pUnkElement)</unmanaged>
        /// <unmanaged-short>IMFCollection::AddElement</unmanaged-short>
        public unsafe void AddElement(SharpDX.IUnknown unkElementRef)
        {
            System.IntPtr unkElementRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            unkElementRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkElementRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)unkElementRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Removes an object from the collection.</p>
        /// </summary>
        /// <param name = "dwElementIndex"><dd> <p>Zero-based index of the object to remove. Objects are indexed in the order in which they were added to the collection.</p> </dd></param>
        /// <param name = "unkElementOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of the object. The caller must release the interface. This parameter cannot be <strong><c>null</c></strong>, but the retrieved reference value might be <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697010</doc-id>
        /// <unmanaged>HRESULT IMFCollection::RemoveElement([In] DWORD dwElementIndex,[Out] IUnknown** ppUnkElement)</unmanaged>
        /// <unmanaged-short>IMFCollection::RemoveElement</unmanaged-short>
        public unsafe void RemoveElement(System.Int32 dwElementIndex, out SharpDX.IUnknown unkElementOut)
        {
            System.IntPtr unkElementOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwElementIndex, &unkElementOut_, (*(void ***)this._nativePointer)[6]);
            if (unkElementOut_ != System.IntPtr.Zero)
                unkElementOut = new SharpDX.ComObject(unkElementOut_);
            else
                unkElementOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Adds an object at the specified index in the collection.</p>
        /// </summary>
        /// <param name = "dwIndex"><dd> <p>The zero-based index where the object will be added to the collection.</p> </dd></param>
        /// <param name = "unknownRef"><dd> <p>The object to insert.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms703963</doc-id>
        /// <unmanaged>HRESULT IMFCollection::InsertElementAt([In] DWORD dwIndex,[In, Optional] IUnknown* pUnknown)</unmanaged>
        /// <unmanaged-short>IMFCollection::InsertElementAt</unmanaged-short>
        public unsafe void InsertElementAt(System.Int32 dwIndex, SharpDX.IUnknown unknownRef)
        {
            System.IntPtr unknownRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            unknownRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unknownRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwIndex, (void *)unknownRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Removes all items from the collection.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms700194</doc-id>
        /// <unmanaged>HRESULT IMFCollection::RemoveAllElements()</unmanaged>
        /// <unmanaged-short>IMFCollection::RemoveAllElements</unmanaged-short>
        public unsafe void RemoveAllElements()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7EC4B1BD-43FB-4763-85D2-64FCB5C5F4CB")]
    public partial class ContentDecryptorContext : SharpDX.ComObject
    {
        public ContentDecryptorContext(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ContentDecryptorContext(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ContentDecryptorContext(nativePtr);
        /// <summary>
        /// <p> Allows the display driver to return IHV-specific information used when initializing a new hardware key. </p>
        /// </summary>
        /// <param name = "inputPrivateDataByteCount"><dd> <p>The number of bytes in the buffer that <em>InputPrivateData</em> specifies.</p> </dd></param>
        /// <param name = "inputPrivateData"><dd> <p>The contents of this parameter are defined by the implementation of    the protection system that runs in the security processor. The contents may contain data about license or stream properties.</p> </dd></param>
        /// <param name = "outputPrivateData"><dd> <p>The return data is also defined by the implementation of the protection system implementation    that runs in the security processor.  The contents may contain data associated with the underlying hardware key.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>mt219183</doc-id>
        /// <unmanaged>HRESULT IMFContentDecryptorContext::InitializeHardwareKey([In] unsigned int InputPrivateDataByteCount,[In, Buffer, Optional] const void* InputPrivateData,[Out] unsigned longlong* OutputPrivateData)</unmanaged>
        /// <unmanaged-short>IMFContentDecryptorContext::InitializeHardwareKey</unmanaged-short>
        public unsafe void InitializeHardwareKey(System.Int32 inputPrivateDataByteCount, System.IntPtr inputPrivateData, out System.Int64 outputPrivateData)
        {
            SharpDX.Result __result__;
            fixed (void *outputPrivateData_ = &outputPrivateData)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, inputPrivateDataByteCount, (void *)inputPrivateData, outputPrivateData_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("D3C4EF59-49CE-4381-9071-D5BCD044C770")]
    public partial class ContentEnabler : SharpDX.ComObject
    {
        public ContentEnabler(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ContentEnabler(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ContentEnabler(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the type of operation that this content enabler performs.</p>
        /// </summary>
        /// <remarks>
        /// <p>The following GUIDs are defined for the <em>pType</em> parameter.</p><table> <tr><th>Value</th><th>Description</th></tr> <tr><td>MFENABLETYPE_MF_RebootRequired</td><td>The user must reboot his or her computer.</td></tr> <tr><td>MFENABLETYPE_MF_UpdateRevocationInformation</td><td>Update revocation information.</td></tr> <tr><td>MFENABLETYPE_MF_UpdateUntrustedComponent</td><td>Update untrusted components.</td></tr> <tr><td>MFENABLETYPE_WMDRMV1_LicenseAcquisition</td><td>License acquisition for Windows Media Digital Rights Management (DRM) version 1.</td></tr> <tr><td>MFENABLETYPE_WMDRMV7_Individualization</td><td>Individualization.</td></tr> <tr><td>MFENABLETYPE_WMDRMV7_LicenseAcquisition</td><td>License acquisition for Windows Media DRM version 7 or later.</td></tr> </table><p>?</p>
        /// </remarks>
        /// <doc-id>bb970471</doc-id>
        /// <unmanaged>GetEnableType</unmanaged>
        /// <unmanaged-short>GetEnableType</unmanaged-short>
        public System.Guid EnableType
        {
            get
            {
                GetEnableType(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Queries whether the content enabler can perform all of its actions automatically.</p>
        /// </summary>
        /// <remarks>
        /// <p>If this method returns <strong>TRUE</strong> in the <em>pfAutomatic</em> parameter, call the <strong>IMFContentEnabler::AutomaticEnable</strong> method to perform the enabling action.</p><p>If this method returns <strong><see cref = "SharpDX.Result.False"/></strong> in the <em>pfAutomatic</em> parameter, the application must use manual enabling. To do so, call <strong>IMFContentEnabler::GetEnableURL</strong> and <strong>IMFContentEnabler::GetEnableData</strong> to get the URL and data needed for manual enabling.</p>
        /// </remarks>
        /// <doc-id>bb970334</doc-id>
        /// <unmanaged>IsAutomaticSupported</unmanaged>
        /// <unmanaged-short>IsAutomaticSupported</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsAutomaticSupported
        {
            get
            {
                IsAutomaticSupported_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the type of operation that this content enabler performs.</p>
        /// </summary>
        /// <param name = "typeRef"><dd> <p>Receives a <see cref = "System.Guid"/> that identifies the type of operation. An application can tailor its user interface (UI) strings for known operation types. See Remarks.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The following GUIDs are defined for the <em>pType</em> parameter.</p><table> <tr><th>Value</th><th>Description</th></tr> <tr><td>MFENABLETYPE_MF_RebootRequired</td><td>The user must reboot his or her computer.</td></tr> <tr><td>MFENABLETYPE_MF_UpdateRevocationInformation</td><td>Update revocation information.</td></tr> <tr><td>MFENABLETYPE_MF_UpdateUntrustedComponent</td><td>Update untrusted components.</td></tr> <tr><td>MFENABLETYPE_WMDRMV1_LicenseAcquisition</td><td>License acquisition for Windows Media Digital Rights Management (DRM) version 1.</td></tr> <tr><td>MFENABLETYPE_WMDRMV7_Individualization</td><td>Individualization.</td></tr> <tr><td>MFENABLETYPE_WMDRMV7_LicenseAcquisition</td><td>License acquisition for Windows Media DRM version 7 or later.</td></tr> </table><p>?</p>
        /// </remarks>
        /// <doc-id>bb970471</doc-id>
        /// <unmanaged>HRESULT IMFContentEnabler::GetEnableType([Out] GUID* pType)</unmanaged>
        /// <unmanaged-short>IMFContentEnabler::GetEnableType</unmanaged-short>
        internal unsafe void GetEnableType(out System.Guid typeRef)
        {
            typeRef = default (System.Guid);
            SharpDX.Result __result__;
            fixed (void *typeRef_ = &typeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, typeRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves a URL for performing a manual content enabling action.</p>
        /// </summary>
        /// <param name = "wszURLOut"><dd> <p>Receives a reference to a buffer that contains the URL. The caller must release the memory for the buffer by calling <strong>CoTaskMemFree</strong>.</p> </dd></param>
        /// <param name = "cchURLRef"><dd> <p>Receives the number of characters returned in <em>ppwszURL</em>, including the terminating <c>null</c> character.</p> </dd></param>
        /// <param name = "trustStatusRef"><dd> <p>Receives a member of the <strong><see cref = "SharpDX.MediaFoundation.UrlTrustStatus"/></strong> enumeration indicating whether the URL is trusted.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotAvailable"/></strong></dt> </dl> </td><td> <p>No URL is available.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the enabling action can be performed by navigating to a URL, this method returns the URL. If no such URL exists, the method returns a failure code.</p><p>The purpose of the URL depends on the content enabler type, which is obtained by calling <strong>IMFContentEnabler::GetEnableType</strong>.</p><table> <tr><th>Enable type</th><th>Purpose of URL</th></tr> <tr><td>Individualization</td><td>Not applicable.</td></tr> <tr><td>License acquisition</td><td>URL to obtain the license. Call <strong>IMFContentEnabler::GetEnableData</strong> and submit the data to the URL as an HTTP POST request. To receive notification when the license is acquired, call <strong>IMFContentEnabler::MonitorEnable</strong>.</td></tr> <tr><td>Revocation</td><td>URL to a webpage where the user can download and install an updated component.</td></tr> </table><p>?</p>
        /// </remarks>
        /// <doc-id>bb970345</doc-id>
        /// <unmanaged>HRESULT IMFContentEnabler::GetEnableURL([Buffer, Optional] wchar_t** ppwszURL,[Out] DWORD* pcchURL,[InOut, Optional] MF_URL_TRUST_STATUS* pTrustStatus)</unmanaged>
        /// <unmanaged-short>IMFContentEnabler::GetEnableURL</unmanaged-short>
        public unsafe void GetEnableURL(System.String wszURLOut, out System.Int32 cchURLRef, System.IntPtr trustStatusRef)
        {
            SharpDX.Result __result__;
            fixed (void *cchURLRef_ = &cchURLRef)
                fixed (char *wszURLOut_ = wszURLOut)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszURLOut_, cchURLRef_, (void *)trustStatusRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the data for a manual content enabling action.</p>
        /// </summary>
        /// <param name = "bDataOut"><dd> <p>Receives a reference to a buffer that contains the data. The caller must free the buffer by calling <strong>CoTaskMemFree</strong>.</p> </dd></param>
        /// <param name = "cbDataRef"><dd> <p>Receives the size of the <em>ppbData</em> buffer.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotAvailable"/></strong></dt> </dl> </td><td> <p>No data is available.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The purpose of the data depends on the content enabler type, which is obtained by calling <strong>IMFContentEnabler::GetEnableType</strong>.</p><table> <tr><th>Enable type</th><th>Purpose of data</th></tr> <tr><td>Individualization</td><td>Not applicable.</td></tr> <tr><td>License acquisition</td><td>HTTP POST data.</td></tr> <tr><td>Revocation</td><td> <strong><see cref = "SharpDX.MediaFoundation.RrComponents"/></strong> structure.</td></tr> </table><p>?</p>
        /// </remarks>
        /// <doc-id>bb970525</doc-id>
        /// <unmanaged>HRESULT IMFContentEnabler::GetEnableData([Buffer, Optional] unsigned char** ppbData,[Out] DWORD* pcbData)</unmanaged>
        /// <unmanaged-short>IMFContentEnabler::GetEnableData</unmanaged-short>
        public unsafe void GetEnableData(System.Byte[] bDataOut, out System.Int32 cbDataRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbDataRef_ = &cbDataRef)
                fixed (void *bDataOut_ = bDataOut)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bDataOut_, cbDataRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Queries whether the content enabler can perform all of its actions automatically.</p>
        /// </summary>
        /// <param name = "fAutomaticRef"><dd> <p>Receives a Boolean value. If <strong>TRUE</strong>, the content enabler can perform the enabing action automatically.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If this method returns <strong>TRUE</strong> in the <em>pfAutomatic</em> parameter, call the <strong>IMFContentEnabler::AutomaticEnable</strong> method to perform the enabling action.</p><p>If this method returns <strong><see cref = "SharpDX.Result.False"/></strong> in the <em>pfAutomatic</em> parameter, the application must use manual enabling. To do so, call <strong>IMFContentEnabler::GetEnableURL</strong> and <strong>IMFContentEnabler::GetEnableData</strong> to get the URL and data needed for manual enabling.</p>
        /// </remarks>
        /// <doc-id>bb970334</doc-id>
        /// <unmanaged>HRESULT IMFContentEnabler::IsAutomaticSupported([Out] BOOL* pfAutomatic)</unmanaged>
        /// <unmanaged-short>IMFContentEnabler::IsAutomaticSupported</unmanaged-short>
        internal unsafe void IsAutomaticSupported_(out SharpDX.Mathematics.Interop.RawBool fAutomaticRef)
        {
            fAutomaticRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fAutomaticRef_ = &fAutomaticRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fAutomaticRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Performs a content enabling action without any user interaction.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is asynchronous. When the operation is complete, the content enabler sends an MEEnablerCompleted event. While the operation is in progress, the content enabler might send MEEnablerProgress events.</p><p>To find out whether the content enabler supports this method, call <strong>IMFContentEnabler::IsAutomaticSupported</strong>.</p>
        /// </remarks>
        /// <doc-id>ms699012</doc-id>
        /// <unmanaged>HRESULT IMFContentEnabler::AutomaticEnable()</unmanaged>
        /// <unmanaged-short>IMFContentEnabler::AutomaticEnable</unmanaged-short>
        public unsafe void AutomaticEnable()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Requests notification when the enabling action is completed.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>S_FALSE</strong></dt> </dl> </td><td> <p>The method succeeded and no action was required.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If you use a manual enabling action, call this method to be notified when the operation completes. If this method returns <see cref = "SharpDX.Result.Ok"/>, the content enabler will send an MEEnablerCompleted event when the operation is completed. If the application cancels the operatation before completing it, call <strong>IMFContentEnabler::Cancel</strong>.</p><p>You do not have to call <strong>MonitorEnable</strong> when you use automatic enabling by calling <strong>IMFContentEnabler::AutomaticEnable</strong>.</p>
        /// </remarks>
        /// <doc-id>ms698997</doc-id>
        /// <unmanaged>HRESULT IMFContentEnabler::MonitorEnable()</unmanaged>
        /// <unmanaged-short>IMFContentEnabler::MonitorEnable</unmanaged-short>
        public unsafe void MonitorEnable()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Cancels a pending content enabling action.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The content enabler sends an MEEnablerCompleted event with a status code of E_CANCEL.</p>
        /// </remarks>
        /// <doc-id>ms704633</doc-id>
        /// <unmanaged>HRESULT IMFContentEnabler::Cancel()</unmanaged>
        /// <unmanaged-short>IMFContentEnabler::Cancel</unmanaged-short>
        public unsafe void Cancel()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("E6257174-A060-4C9A-A088-3B1B471CAD28")]
    public partial class ContentProtectionDevice : SharpDX.ComObject
    {
        public ContentProtectionDevice(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ContentProtectionDevice(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ContentProtectionDevice(nativePtr);
        /// <summary>
        /// <p>Calls into the implementation of the protection system in the security processor. </p>
        /// </summary>
        /// <param name = "functionId"><dd> <p>The identifier of the function that you want to run. This identifier is defined by the implementation of the protection system.</p> </dd></param>
        /// <param name = "inputBufferByteCount"><dd> <p>The number of bytes of in the buffer that <em>InputBuffer</em> specifies, including private data.</p> </dd></param>
        /// <param name = "inputBuffer"><dd> <p>A reference to the data that you want to provide as input.</p> </dd></param>
        /// <param name = "outputBufferByteCount"><dd> <p>Pointer to a value that specifies the length in bytes of the data that the function wrote to the buffer that <em>OutputBuffer</em> specifies, including the private data.    </p> </dd></param>
        /// <param name = "outputBuffer"><dd> <p>Pointer to the buffer where you want the function to write its output.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>mt219186</doc-id>
        /// <unmanaged>HRESULT IMFContentProtectionDevice::InvokeFunction([In] DWORD FunctionId,[In] DWORD InputBufferByteCount,[In, Buffer] const unsigned char* InputBuffer,[InOut] DWORD* OutputBufferByteCount,[Out, Buffer] unsigned char* OutputBuffer)</unmanaged>
        /// <unmanaged-short>IMFContentProtectionDevice::InvokeFunction</unmanaged-short>
        public unsafe void InvokeFunction(System.Int32 functionId, System.Int32 inputBufferByteCount, System.Byte[] inputBuffer, ref System.Int32 outputBufferByteCount, System.Byte[] outputBuffer)
        {
            SharpDX.Result __result__;
            fixed (void *outputBuffer_ = outputBuffer)
                fixed (void *outputBufferByteCount_ = &outputBufferByteCount)
                    fixed (void *inputBuffer_ = inputBuffer)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, functionId, inputBufferByteCount, inputBuffer_, outputBufferByteCount_, outputBuffer_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the required number of bytes that need to be prepended to    the  input and output buffers when you call the security processor through the <strong>InvokeFunction</strong> method.   When you specify this number of bytes, the Media Foundation transform (MFT) decryptor can allocate the total amount of bytes and can avoid making copies of the data when the decrytor moves the data to the security processor.  </p>
        /// </summary>
        /// <param name = "privateInputByteCount">No documentation.</param>
        /// <param name = "privateOutputByteCount">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>mt219185</doc-id>
        /// <unmanaged>HRESULT IMFContentProtectionDevice::GetPrivateDataByteCount([Out] DWORD* PrivateInputByteCount,[Out] DWORD* PrivateOutputByteCount)</unmanaged>
        /// <unmanaged-short>IMFContentProtectionDevice::GetPrivateDataByteCount</unmanaged-short>
        public unsafe void GetPrivateDataByteCount(out System.Int32 privateInputByteCount, out System.Int32 privateOutputByteCount)
        {
            SharpDX.Result __result__;
            fixed (void *privateOutputByteCount_ = &privateOutputByteCount)
                fixed (void *privateInputByteCount_ = &privateInputByteCount)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, privateInputByteCount_, privateOutputByteCount_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ACF92459-6A61-42bd-B57C-B43E51203CB0")]
    public partial class ContentProtectionManager : SharpDX.ComObject
    {
        public ContentProtectionManager(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ContentProtectionManager(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ContentProtectionManager(nativePtr);
        /// <summary>
        /// <p>Begins an asynchronous request to perform a content enabling action.</p><p>This method requests the application to perform a specific step needed to acquire rights to the content, using a content enabler object.</p>
        /// </summary>
        /// <param name = "enablerActivateRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> interface of a content enabler object. To create the content enabler, call <strong>IMFActivate::ActivateObject</strong> and request the <strong><see cref = "SharpDX.MediaFoundation.ContentEnabler"/></strong> interface. The application should use the methods in <strong><see cref = "SharpDX.MediaFoundation.ContentEnabler"/></strong> to complete the content enabling action. </p> </dd></param>
        /// <param name = "topoRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.Topology"/></strong> interface of the pending topology. </p> </dd></param>
        /// <param name = "callbackRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. When the operation is complete, the application should call <strong>IMFAsyncCallback::Invoke</strong> on the callback. </p> </dd></param>
        /// <param name = "unkStateRef"><dd> <p> Reserved. Currently this parameter is always <strong><c>null</c></strong>. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Do not block within this callback method. Instead, perform the content enabling action asynchronously on another thread. When the operation is finished, notify the protected media path (PMP) through the <em>pCallback</em> parameter.</p><p>If you return a success code from this method, you must call <strong>Invoke</strong> on the callback. Conversely, if you return an error code from this method, you must not call <strong>Invoke</strong>. If the operation fails after the method returns a success code, use status code on the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> object to report the error.</p><p>After the callback is invoked, the PMP will call the application's <strong>IMFContentProtectionManager::EndEnableContent</strong> method to complete the asynchronous call.</p><p>This method is not necessarily called every time the application plays protected content. Generally, the method will not be called if the user has a valid, up-to-date license for the content. Internally, the input trust authority (ITA) determines whether <strong>BeginEnableContent</strong> is called, based on the content provider's DRM policy. For more information, see Protected Media Path.</p>
        /// </remarks>
        /// <doc-id>ms696203</doc-id>
        /// <unmanaged>HRESULT IMFContentProtectionManager::BeginEnableContent([In] IMFActivate* pEnablerActivate,[In] IMFTopology* pTopo,[In] IMFAsyncCallback* pCallback,[In] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFContentProtectionManager::BeginEnableContent</unmanaged-short>
        public unsafe void BeginEnableContent(SharpDX.MediaFoundation.Activate enablerActivateRef, SharpDX.MediaFoundation.Topology topoRef, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown unkStateRef)
        {
            System.IntPtr enablerActivateRef_ = System.IntPtr.Zero;
            System.IntPtr topoRef_ = System.IntPtr.Zero;
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            enablerActivateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Activate>(enablerActivateRef);
            topoRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Topology>(topoRef);
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)enablerActivateRef_, (void *)topoRef_, (void *)callbackRef_, (void *)unkStateRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Ends an asynchronous request to perform a content enabling action. This method is called by the protected media path (PMP) to complete an asynchronous call to <strong>IMFContentProtectionManager::BeginEnableContent</strong>.</p>
        /// </summary>
        /// <param name = "resultRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>When the <strong>BeginEnableContent</strong> method completes asynchronously, the application notifies the PMP by invoking the asynchronous callback. The PMP calls <strong>EndEnableContent</strong> on the application to get the result code. This method is called on the application's thread from inside the callback method. Therefore, it must not block the thread that invoked the callback.</p><p>The application must return the success or failure code of the asynchronous processing that followed the call to <strong>BeginEnableContent</strong>.</p>
        /// </remarks>
        /// <doc-id>ms694267</doc-id>
        /// <unmanaged>HRESULT IMFContentProtectionManager::EndEnableContent([In] IMFAsyncResult* pResult)</unmanaged>
        /// <unmanaged-short>IMFContentProtectionManager::EndEnableContent</unmanaged-short>
        public unsafe void EndEnableContent(SharpDX.MediaFoundation.AsyncResult resultRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("56C294D0-753E-4260-8D61-A3D8820B1D54")]
    public partial class DesiredSample : SharpDX.ComObject
    {
        public DesiredSample(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DesiredSample(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DesiredSample(nativePtr);
        /// <summary>
        /// <p> </p><p>Called by the mixer to get the time and duration of the sample requested by the presenter.</p>
        /// </summary>
        /// <param name = "hnsSampleTimeRef"><dd> <p>Receives the desired sample time that should be mixed.</p> </dd></param>
        /// <param name = "hnsSampleDurationRef"><dd> <p>Receives the sample duration that should be mixed.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotAvailable"/></strong></dt> </dl> </td><td> <p>No time stamp was set for this sample. See <strong>IMFDesiredSample::Clear</strong>.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms694058</doc-id>
        /// <unmanaged>HRESULT IMFDesiredSample::GetDesiredSampleTimeAndDuration([Out] longlong* phnsSampleTime,[Out] longlong* phnsSampleDuration)</unmanaged>
        /// <unmanaged-short>IMFDesiredSample::GetDesiredSampleTimeAndDuration</unmanaged-short>
        public unsafe void GetDesiredSampleTimeAndDuration(out System.Int64 hnsSampleTimeRef, out System.Int64 hnsSampleDurationRef)
        {
            SharpDX.Result __result__;
            fixed (void *hnsSampleDurationRef_ = &hnsSampleDurationRef)
                fixed (void *hnsSampleTimeRef_ = &hnsSampleTimeRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, hnsSampleTimeRef_, hnsSampleDurationRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Called by the presenter to set the time and duration of the sample that it requests from the mixer.</p>
        /// </summary>
        /// <param name = "hnsSampleTime"><dd> <p>The time of the requested sample.</p> </dd></param>
        /// <param name = "hnsSampleDuration"><dd> <p>The duration of the requested sample.</p> </dd></param>
        /// <remarks>
        /// <p>This value should be set prior to passing the buffer to the mixer for a Mix operation. The mixer sets the actual start and duration times on the sample before sending it back.</p>
        /// </remarks>
        /// <doc-id>ms694296</doc-id>
        /// <unmanaged>void IMFDesiredSample::SetDesiredSampleTimeAndDuration([In] longlong hnsSampleTime,[In] longlong hnsSampleDuration)</unmanaged>
        /// <unmanaged-short>IMFDesiredSample::SetDesiredSampleTimeAndDuration</unmanaged-short>
        public unsafe void SetDesiredSampleTimeAndDuration(System.Int64 hnsSampleTime, System.Int64 hnsSampleDuration)
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, hnsSampleTime, hnsSampleDuration, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// <p> </p><p>Clears the time stamps previously set by a call to <strong>IMFDesiredSample::SetDesiredSampleTimeAndDuration</strong>.</p>
        /// </summary>
        /// <remarks>
        /// <p>After this method is called, the <strong>IMFDesiredSample::GetDesiredSampleTimeAndDuration</strong> method returns <see cref = "NotAvailable"/>.</p><p>This method also clears the time stamp and duration and removes all attributes from the sample.</p>
        /// </remarks>
        /// <doc-id>ms703903</doc-id>
        /// <unmanaged>void IMFDesiredSample::Clear()</unmanaged>
        /// <unmanaged-short>IMFDesiredSample::Clear</unmanaged-short>
        public unsafe void Clear()
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[5]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("D818FBD8-FC46-42F2-87AC-1EA2D1F9BF32")]
    public partial class DeviceTransform : SharpDX.ComObject
    {
        public DeviceTransform(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DeviceTransform(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DeviceTransform(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "attributesRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::InitializeTransform([In] IMFAttributes* pAttributes)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::InitializeTransform</unmanaged-short>
        public unsafe void InitializeTransform(SharpDX.MediaFoundation.MediaAttributes attributesRef)
        {
            System.IntPtr attributesRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            attributesRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(attributesRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)attributesRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwInputStreamID">No documentation.</param>
        /// <param name = "dwTypeIndex">No documentation.</param>
        /// <param name = "mediaTypeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::GetInputAvailableType([In] DWORD dwInputStreamID,[In] DWORD dwTypeIndex,[Out] IMFMediaType** pMediaType)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::GetInputAvailableType</unmanaged-short>
        public unsafe void GetInputAvailableType(System.Int32 dwInputStreamID, System.Int32 dwTypeIndex, out SharpDX.MediaFoundation.MediaType mediaTypeRef)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamID, dwTypeIndex, &mediaTypeRef_, (*(void ***)this._nativePointer)[4]);
            if (mediaTypeRef_ != System.IntPtr.Zero)
                mediaTypeRef = new SharpDX.MediaFoundation.MediaType(mediaTypeRef_);
            else
                mediaTypeRef = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwInputStreamID">No documentation.</param>
        /// <param name = "mediaTypeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::GetInputCurrentType([In] DWORD dwInputStreamID,[Out] IMFMediaType** pMediaType)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::GetInputCurrentType</unmanaged-short>
        public unsafe void GetInputCurrentType(System.Int32 dwInputStreamID, out SharpDX.MediaFoundation.MediaType mediaTypeRef)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamID, &mediaTypeRef_, (*(void ***)this._nativePointer)[5]);
            if (mediaTypeRef_ != System.IntPtr.Zero)
                mediaTypeRef = new SharpDX.MediaFoundation.MediaType(mediaTypeRef_);
            else
                mediaTypeRef = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwInputStreamID">No documentation.</param>
        /// <param name = "attributesOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::GetInputStreamAttributes([In] DWORD dwInputStreamID,[Out] IMFAttributes** ppAttributes)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::GetInputStreamAttributes</unmanaged-short>
        public unsafe void GetInputStreamAttributes(System.Int32 dwInputStreamID, out SharpDX.MediaFoundation.MediaAttributes attributesOut)
        {
            System.IntPtr attributesOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamID, &attributesOut_, (*(void ***)this._nativePointer)[6]);
            if (attributesOut_ != System.IntPtr.Zero)
                attributesOut = new SharpDX.MediaFoundation.MediaAttributes(attributesOut_);
            else
                attributesOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwOutputStreamID">No documentation.</param>
        /// <param name = "dwTypeIndex">No documentation.</param>
        /// <param name = "mediaTypeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::GetOutputAvailableType([In] DWORD dwOutputStreamID,[In] DWORD dwTypeIndex,[Out] IMFMediaType** pMediaType)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::GetOutputAvailableType</unmanaged-short>
        public unsafe void GetOutputAvailableType(System.Int32 dwOutputStreamID, System.Int32 dwTypeIndex, out SharpDX.MediaFoundation.MediaType mediaTypeRef)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputStreamID, dwTypeIndex, &mediaTypeRef_, (*(void ***)this._nativePointer)[7]);
            if (mediaTypeRef_ != System.IntPtr.Zero)
                mediaTypeRef = new SharpDX.MediaFoundation.MediaType(mediaTypeRef_);
            else
                mediaTypeRef = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwOutputStreamID">No documentation.</param>
        /// <param name = "mediaTypeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::GetOutputCurrentType([In] DWORD dwOutputStreamID,[Out] IMFMediaType** pMediaType)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::GetOutputCurrentType</unmanaged-short>
        public unsafe void GetOutputCurrentType(System.Int32 dwOutputStreamID, out SharpDX.MediaFoundation.MediaType mediaTypeRef)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputStreamID, &mediaTypeRef_, (*(void ***)this._nativePointer)[8]);
            if (mediaTypeRef_ != System.IntPtr.Zero)
                mediaTypeRef = new SharpDX.MediaFoundation.MediaType(mediaTypeRef_);
            else
                mediaTypeRef = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwOutputStreamID">No documentation.</param>
        /// <param name = "attributesOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::GetOutputStreamAttributes([In] DWORD dwOutputStreamID,[Out] IMFAttributes** ppAttributes)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::GetOutputStreamAttributes</unmanaged-short>
        public unsafe void GetOutputStreamAttributes(System.Int32 dwOutputStreamID, out SharpDX.MediaFoundation.MediaAttributes attributesOut)
        {
            System.IntPtr attributesOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputStreamID, &attributesOut_, (*(void ***)this._nativePointer)[9]);
            if (attributesOut_ != System.IntPtr.Zero)
                attributesOut = new SharpDX.MediaFoundation.MediaAttributes(attributesOut_);
            else
                attributesOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cInputStreamsRef">No documentation.</param>
        /// <param name = "cOutputStreamsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::GetStreamCount([Out] DWORD* pcInputStreams,[Out] DWORD* pcOutputStreams)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::GetStreamCount</unmanaged-short>
        public unsafe void GetStreamCount(out System.Int32 cInputStreamsRef, out System.Int32 cOutputStreamsRef)
        {
            SharpDX.Result __result__;
            fixed (void *cOutputStreamsRef_ = &cOutputStreamsRef)
                fixed (void *cInputStreamsRef_ = &cInputStreamsRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cInputStreamsRef_, cOutputStreamsRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwInputIDArraySize">No documentation.</param>
        /// <param name = "dwInputStreamIdsRef">No documentation.</param>
        /// <param name = "dwOutputIDArraySize">No documentation.</param>
        /// <param name = "dwOutputStreamIdsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::GetStreamIDs([In] DWORD dwInputIDArraySize,[Out] DWORD* pdwInputStreamIds,[In] DWORD dwOutputIDArraySize,[Out] DWORD* pdwOutputStreamIds)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::GetStreamIDs</unmanaged-short>
        public unsafe void GetStreamIDs(System.Int32 dwInputIDArraySize, out System.Int32 dwInputStreamIdsRef, System.Int32 dwOutputIDArraySize, out System.Int32 dwOutputStreamIdsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwOutputStreamIdsRef_ = &dwOutputStreamIdsRef)
                fixed (void *dwInputStreamIdsRef_ = &dwInputStreamIdsRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputIDArraySize, dwInputStreamIdsRef_, dwOutputIDArraySize, dwOutputStreamIdsRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwInputStreamID">No documentation.</param>
        /// <param name = "eventRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::ProcessEvent([In] DWORD dwInputStreamID,[In] IMFMediaEvent* pEvent)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::ProcessEvent</unmanaged-short>
        public unsafe void ProcessEvent(System.Int32 dwInputStreamID, SharpDX.MediaFoundation.MediaEvent eventRef)
        {
            System.IntPtr eventRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            eventRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaEvent>(eventRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamID, (void *)eventRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwInputStreamID">No documentation.</param>
        /// <param name = "sampleRef">No documentation.</param>
        /// <param name = "dwFlags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::ProcessInput([In] DWORD dwInputStreamID,[In] IMFSample* pSample,[In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::ProcessInput</unmanaged-short>
        public unsafe void ProcessInput(System.Int32 dwInputStreamID, SharpDX.MediaFoundation.Sample sampleRef, System.Int32 dwFlags)
        {
            System.IntPtr sampleRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            sampleRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Sample>(sampleRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamID, (void *)sampleRef_, dwFlags, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "eMessage">No documentation.</param>
        /// <param name = "ulParam">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::ProcessMessage([In] MFT_MESSAGE_TYPE eMessage,[In] ULONG_PTR ulParam)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::ProcessMessage</unmanaged-short>
        public unsafe void ProcessMessage(SharpDX.MediaFoundation.TMessageType eMessage, System.IntPtr ulParam)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)eMessage), (void *)ulParam, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwFlags">No documentation.</param>
        /// <param name = "cOutputBufferCount">No documentation.</param>
        /// <param name = "outputSampleRef">No documentation.</param>
        /// <param name = "dwStatusRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::ProcessOutput([In] DWORD dwFlags,[In] DWORD cOutputBufferCount,[InOut] MFT_OUTPUT_DATA_BUFFER* pOutputSample,[Out] DWORD* pdwStatus)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::ProcessOutput</unmanaged-short>
        public unsafe void ProcessOutput(System.Int32 dwFlags, System.Int32 cOutputBufferCount, ref SharpDX.MediaFoundation.TOutputDataBuffer outputSampleRef, out System.Int32 dwStatusRef)
        {
            SharpDX.MediaFoundation.TOutputDataBuffer.__Native outputSampleRef_ = default (SharpDX.MediaFoundation.TOutputDataBuffer.__Native);
            SharpDX.Result __result__;
            outputSampleRef.__MarshalTo(ref outputSampleRef_);
            fixed (void *dwStatusRef_ = &dwStatusRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwFlags, cOutputBufferCount, &outputSampleRef_, dwStatusRef_, (*(void ***)this._nativePointer)[15]);
            outputSampleRef.__MarshalFrom(ref outputSampleRef_);
            outputSampleRef.__MarshalFree(ref outputSampleRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>The <strong>SetInputStreamState</strong> method sets the Device MFT input stream state and media type.</p>
        /// </summary>
        /// <param name = "dwStreamID"><dd> <p>Stream ID of the input stream where the state and media type needs to be changed.</p> </dd></param>
        /// <param name = "mediaTypeRef"><dd> <p>Preferred media type for the input stream is passed in through this parameter. Device MFT should change the media type only if the incoming media type is different from the current media type.</p> </dd></param>
        /// <param name = "value"><dd> <p>Specifies the  <strong>DeviceStreamState</strong> which the input stream should transition to.</p> </dd></param>
        /// <param name = "dwFlags"><dd> <p>When  <strong><see cref = "SharpDX.Result.Ok"/></strong> is returned, perform the state change operation. Otherwise, this contains an error that occurred while setting the media type on the devproxy  output pin. In this case, propagate the error appropriately.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include but not limited to values given in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Initialization succeeded</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>Device MFT could not  support the request at this time.</p> </td></tr> <tr><td> <dl> <dt><strong>MF_E_INVAILIDSTREAMNUMBER</strong></dt> </dl> </td><td> <p>An invalid stream ID was passed.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamState"/></strong></dt> </dl> </td><td> <p>The requested stream transition is not possible.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface function helps to transition the input stream to a specified state with a specified media type set on the input stream. This will be used by device transform  manager (DTM) when the Device MFT requests a specific input stream?s state and media type to be changed. Device MFT would need to request such a change when one of the Device MFT's output changes.</p><p>As an  example, consider a Device MFT that has two input streams and three output streams. Let  Output 1 and Output 2 source from Input 1 and  stream at 720p. Now, if   Output 2?s media type changes to 1080p, Device MFT has to change Input 1's media type to 1080p. To achieve this, Device MFT should request DTM to call this method using the METransformInputStreamStateChanged message.
        /// </p>
        /// </remarks>
        /// <doc-id>mt797683</doc-id>
        /// <unmanaged>HRESULT IMFDeviceTransform::SetInputStreamState([In] DWORD dwStreamID,[In] IMFMediaType* pMediaType,[In] DeviceStreamState value,[In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::SetInputStreamState</unmanaged-short>
        public unsafe void SetInputStreamState(System.Int32 dwStreamID, SharpDX.MediaFoundation.MediaType mediaTypeRef, SharpDX.MediaFoundation.DeviceStreamState value, System.Int32 dwFlags)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(mediaTypeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamID, (void *)mediaTypeRef_, unchecked ((System.Int32)value), dwFlags, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwStreamID">No documentation.</param>
        /// <param name = "value">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::GetInputStreamState([In] DWORD dwStreamID,[Out] DeviceStreamState* value)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::GetInputStreamState</unmanaged-short>
        public unsafe void GetInputStreamState(System.Int32 dwStreamID, out SharpDX.MediaFoundation.DeviceStreamState value)
        {
            SharpDX.Result __result__;
            fixed (void *value_ = &value)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamID, value_, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>The <strong>SetOutputStreamState</strong> method sets the Device MFT output stream state and media type.</p>
        /// </summary>
        /// <param name = "dwStreamID"><dd> <p>Stream ID of the input stream where the state and media type needs to be changed.</p> </dd></param>
        /// <param name = "mediaTypeRef"><dd> <p>Preferred media type for the input stream is passed in through this parameter. Device MFT should change the media type only if the incoming media type is different from the current media type.</p> </dd></param>
        /// <param name = "value"><dd> <p>Specifies the  <strong>DeviceStreamState</strong> which the input stream should transition to.</p> </dd></param>
        /// <param name = "dwFlags"><dd> <p>Must be zero.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include but not limited to values given in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Transitioning the stream state succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>Device MFT could not  support the request at this time.</p> </td></tr> <tr><td> <dl> <dt><strong>MF_E_INVAILIDSTREAMNUMBER</strong></dt> </dl> </td><td> <p>An invalid stream ID was passed.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamState"/></strong></dt> </dl> </td><td> <p>The requested stream transition is not possible.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface method helps to transition the output stream to a specified state with specified media type set on the output stream. This will be used by the DTM when the Device Source requests a specific output stream?s state and media type to be changed. Device MFT should change the specified output stream?s media type and state to the requested media type.</p><p>If the incoming media type and stream state are same as the current media type and stream state the method return <strong><see cref = "SharpDX.Result.Ok"/></strong>.</p><p>If the incoming media type and current media type of the stream are the same, Device MFT must change the stream?s state to the requested value and return the appropriate <strong><see cref = "SharpDX.Result"/></strong>.</p><p>When a change in the output stream?s media type requires a corresponding change in the input then Device MFT must post the METransformInputStreamStateChanged event  to DTM to change the relevant input stream. The call must return only after changing the input stream?s media type and the appropriate <strong><see cref = "SharpDX.Result"/></strong>.</p><p>As an  example, consider a Device MFT that has two input streams and three output streams. Let  Output 1 and Output 2 source from Input 1 and  stream at 720p. Now, let us say Output 2?s media type changes to 1080p. To satisfy this request, Device MFT must  change the Input 1 media type to 1080p, by posting METransformInputStreamStateChanged event to the DTM. DTM would call <strong>SetInputStreamState</strong> to change the input stream? media type and state. After this call, the <strong>SetOutputStreamState</strong> must return.</p>
        /// </remarks>
        /// <doc-id>mt797684</doc-id>
        /// <unmanaged>HRESULT IMFDeviceTransform::SetOutputStreamState([In] DWORD dwStreamID,[In] IMFMediaType* pMediaType,[In] DeviceStreamState value,[In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::SetOutputStreamState</unmanaged-short>
        public unsafe void SetOutputStreamState(System.Int32 dwStreamID, SharpDX.MediaFoundation.MediaType mediaTypeRef, SharpDX.MediaFoundation.DeviceStreamState value, System.Int32 dwFlags)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(mediaTypeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamID, (void *)mediaTypeRef_, unchecked ((System.Int32)value), dwFlags, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwStreamID">No documentation.</param>
        /// <param name = "value">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::GetOutputStreamState([In] DWORD dwStreamID,[Out] DeviceStreamState* value)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::GetOutputStreamState</unmanaged-short>
        public unsafe void GetOutputStreamState(System.Int32 dwStreamID, out SharpDX.MediaFoundation.DeviceStreamState value)
        {
            SharpDX.Result __result__;
            fixed (void *value_ = &value)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamID, value_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwStreamID">No documentation.</param>
        /// <param name = "value">No documentation.</param>
        /// <param name = "mediaTypeOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::GetInputStreamPreferredState([In] DWORD dwStreamID,[Out] DeviceStreamState* value,[Out] IMFMediaType** ppMediaType)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::GetInputStreamPreferredState</unmanaged-short>
        public unsafe void GetInputStreamPreferredState(System.Int32 dwStreamID, out SharpDX.MediaFoundation.DeviceStreamState value, out SharpDX.MediaFoundation.MediaType mediaTypeOut)
        {
            System.IntPtr mediaTypeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (void *value_ = &value)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamID, value_, &mediaTypeOut_, (*(void ***)this._nativePointer)[20]);
            if (mediaTypeOut_ != System.IntPtr.Zero)
                mediaTypeOut = new SharpDX.MediaFoundation.MediaType(mediaTypeOut_);
            else
                mediaTypeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwStreamIndex">No documentation.</param>
        /// <param name = "dwFlags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::FlushInputStream([In] DWORD dwStreamIndex,[In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::FlushInputStream</unmanaged-short>
        public unsafe void FlushInputStream(System.Int32 dwStreamIndex, System.Int32 dwFlags)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, dwFlags, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwStreamIndex">No documentation.</param>
        /// <param name = "dwFlags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransform::FlushOutputStream([In] DWORD dwStreamIndex,[In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransform::FlushOutputStream</unmanaged-short>
        public unsafe void FlushOutputStream(System.Int32 dwStreamIndex, System.Int32 dwFlags)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, dwFlags, (*(void ***)this._nativePointer)[22]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("6D5CB646-29EC-41FB-8179-8C4C6D750811")]
    public partial class DeviceTransformCallback : SharpDX.ComObject
    {
        public DeviceTransformCallback(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DeviceTransformCallback(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DeviceTransformCallback(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "callbackAttributesRef">No documentation.</param>
        /// <param name = "pinId">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFDeviceTransformCallback::OnBufferSent([In] IMFAttributes* pCallbackAttributes,[In] DWORD pinId)</unmanaged>
        /// <unmanaged-short>IMFDeviceTransformCallback::OnBufferSent</unmanaged-short>
        public unsafe void OnBufferSent(SharpDX.MediaFoundation.MediaAttributes callbackAttributesRef, System.Int32 pinId)
        {
            System.IntPtr callbackAttributesRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackAttributesRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(callbackAttributesRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)callbackAttributesRef_, pinId, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("0c012799-1b61-4c10-bda9-04445be5f561")]
    public partial class DLNASinkInit : SharpDX.ComObject
    {
        public DLNASinkInit(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DLNASinkInit(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DLNASinkInit(nativePtr);
        /// <summary>
        /// <p>Initializes the Digital Living Network Alliance (DLNA) media sink.</p>
        /// </summary>
        /// <param name = "byteStreamRef"><dd> <p>Pointer to a byte stream. The DLNA media sink writes data to this byte stream. The byte stream must be writable.</p> </dd></param>
        /// <param name = "fPal"><dd> <p>If <strong>TRUE</strong>, the DLNA media sink accepts PAL video formats. Otherwise, it accepts NTSC video  formats.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "AlreadyInitializeD"/></strong></strong></dt> </dl> </td><td> <p>The method was already called.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p>The media sink's <strong>IMFMediaSink::Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>dd368788</doc-id>
        /// <unmanaged>HRESULT IMFDLNASinkInit::Initialize([In] IMFByteStream* pByteStream,[In] BOOL fPal)</unmanaged>
        /// <unmanaged-short>IMFDLNASinkInit::Initialize</unmanaged-short>
        public unsafe void Initialize(SharpDX.MediaFoundation.IByteStream byteStreamRef, SharpDX.Mathematics.Interop.RawBool fPal)
        {
            System.IntPtr byteStreamRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            byteStreamRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IByteStream>(byteStreamRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)byteStreamRef_, fPal, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3D1FF0EA-679A-4190-8D46-7FA69E8C7E15")]
    public partial class DRMNetHelper : SharpDX.ComObject
    {
        public DRMNetHelper(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DRMNetHelper(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DRMNetHelper(nativePtr);
        /// <summary>
        /// <p>Gets the license response for the specified request.</p>
        /// </summary>
        /// <param name = "licenseRequestRef"><dd> <p>Pointer to a byte array that contains the license request.</p> </dd></param>
        /// <param name = "cbLicenseRequest"><dd> <p>Size, in bytes, of the license request.</p> </dd></param>
        /// <param name = "licenseResponseOut"><dd> <p>Receives a reference to a byte array that contains the license response. The caller must free the array by calling <strong>CoTaskMemFree</strong>.</p> </dd></param>
        /// <param name = "cbLicenseResponseRef"><dd> <p>Receives the size, in bytes, of the license response.</p> </dd></param>
        /// <param name = "bstrKIDRef"><dd> <p>Receives the key identifier. The caller must release the string by calling <strong>SysFreeString</strong>.</p> </dd></param>
        /// <returns><p>The function returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media sink was shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>dd368791</doc-id>
        /// <unmanaged>HRESULT IMFDRMNetHelper::ProcessLicenseRequest([In, Buffer] unsigned char* pLicenseRequest,[In] DWORD cbLicenseRequest,[Buffer, Optional] unsigned char** ppLicenseResponse,[Out] DWORD* pcbLicenseResponse,[Out] wchar_t** pbstrKID)</unmanaged>
        /// <unmanaged-short>IMFDRMNetHelper::ProcessLicenseRequest</unmanaged-short>
        public unsafe void ProcessLicenseRequest(System.Byte[] licenseRequestRef, System.Int32 cbLicenseRequest, System.Byte[] licenseResponseOut, out System.Int32 cbLicenseResponseRef, System.IntPtr bstrKIDRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbLicenseResponseRef_ = &cbLicenseResponseRef)
                fixed (void *licenseResponseOut_ = licenseResponseOut)
                    fixed (void *licenseRequestRef_ = licenseRequestRef)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, licenseRequestRef_, cbLicenseRequest, licenseResponseOut_, cbLicenseResponseRef_, (void *)bstrKIDRef, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Not implemented in this release.</p>
        /// </summary>
        /// <param name = "licenseResponseOut"><dd> <p>Receives a reference to a byte array that contains the license response. The caller must free the array by calling <strong>CoTaskMemFree</strong>.</p> </dd></param>
        /// <param name = "cbLicenseResponseRef"><dd> <p>Receives the size, in bytes, of the license response.</p> </dd></param>
        /// <returns><p>The method returns <strong>E_NOTIMPL</strong>.</p></returns>
        /// <doc-id>dd368790</doc-id>
        /// <unmanaged>HRESULT IMFDRMNetHelper::GetChainedLicenseResponse([Buffer, Optional] unsigned char** ppLicenseResponse,[Out] DWORD* pcbLicenseResponse)</unmanaged>
        /// <unmanaged-short>IMFDRMNetHelper::GetChainedLicenseResponse</unmanaged-short>
        public unsafe void GetChainedLicenseResponse(System.Byte[] licenseResponseOut, out System.Int32 cbLicenseResponseRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbLicenseResponseRef_ = &cbLicenseResponseRef)
                fixed (void *licenseResponseOut_ = licenseResponseOut)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, licenseResponseOut_, cbLicenseResponseRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("e7174cfa-1c9e-48b1-8866-626226bfc258")]
    public partial class DXGIBuffer : SharpDX.ComObject
    {
        public DXGIBuffer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DXGIBuffer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DXGIBuffer(nativePtr);
        /// <summary>
        /// <p>Gets the index of the subresource that is associated with this media buffer.</p>
        /// </summary>
        /// <remarks>
        /// <p>The subresource index is specified when you create the media buffer object. See <strong>MFCreateDXGISurfaceBuffer</strong>.</p><p>For more information about texture subresources, see <strong>ID3D11Device::CreateTexture2D</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447903</doc-id>
        /// <unmanaged>GetSubresourceIndex</unmanaged>
        /// <unmanaged-short>GetSubresourceIndex</unmanaged-short>
        public System.Int32 SubresourceIndex
        {
            get
            {
                GetSubresourceIndex(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Queries the Microsoft DirectX Graphics Infrastructure (DXGI) surface for an interface.</p>
        /// </summary>
        /// <param name = "riid"><dd> <p>The interface identifer (IID) of the interface being requested.</p> </dd></param>
        /// <param name = "vObjectOut"><dd> <p>Receives a reference to the interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong> E_NOINTERFACE</strong></dt> </dl> </td><td> <p>The object does not support the specified interface.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>Invalid request.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You can use this method to get a reference to the <strong><see cref = "SharpDX.Direct3D11.Texture2D"/></strong> interface of the surface. If the buffer is locked, the method returns <strong><see cref = "InvalidRequest"/></strong>.</p>
        /// </remarks>
        /// <doc-id>hh447902</doc-id>
        /// <unmanaged>HRESULT IMFDXGIBuffer::GetResource([In] const GUID&amp; riid,[Out] void** ppvObject)</unmanaged>
        /// <unmanaged-short>IMFDXGIBuffer::GetResource</unmanaged-short>
        public unsafe void GetResource(System.Guid riid, out System.IntPtr vObjectOut)
        {
            SharpDX.Result __result__;
            fixed (void *vObjectOut_ = &vObjectOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &riid, vObjectOut_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the index of the subresource that is associated with this media buffer.</p>
        /// </summary>
        /// <param name = "uSubresourceRef"><dd> <p>Receives the zero-based index of the subresource.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The subresource index is specified when you create the media buffer object. See <strong>MFCreateDXGISurfaceBuffer</strong>.</p><p>For more information about texture subresources, see <strong>ID3D11Device::CreateTexture2D</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447903</doc-id>
        /// <unmanaged>HRESULT IMFDXGIBuffer::GetSubresourceIndex([Out] unsigned int* puSubresource)</unmanaged>
        /// <unmanaged-short>IMFDXGIBuffer::GetSubresourceIndex</unmanaged-short>
        internal unsafe void GetSubresourceIndex(out System.Int32 uSubresourceRef)
        {
            SharpDX.Result __result__;
            fixed (void *uSubresourceRef_ = &uSubresourceRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, uSubresourceRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets an <strong><see cref = "SharpDX.IUnknown"/></strong> reference that was previously stored in the media buffer object.</p>
        /// </summary>
        /// <param name = "guid">No documentation.</param>
        /// <param name = "riid">No documentation.</param>
        /// <param name = "vObjectOut">No documentation.</param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong> E_NOINTERFACE</strong></dt> </dl> </td><td> <p>The object does not support the specified interface.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotFound"/></strong></dt> </dl> </td><td> <p>The specified key was not found.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>hh447904</doc-id>
        /// <unmanaged>HRESULT IMFDXGIBuffer::GetUnknown([In] const GUID&amp; guid,[In] const GUID&amp; riid,[Out] void** ppvObject)</unmanaged>
        /// <unmanaged-short>IMFDXGIBuffer::GetUnknown</unmanaged-short>
        public unsafe void GetUnknown(System.Guid guid, System.Guid riid, out System.IntPtr vObjectOut)
        {
            SharpDX.Result __result__;
            fixed (void *vObjectOut_ = &vObjectOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guid, &riid, vObjectOut_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Stores an arbitrary <strong><see cref = "SharpDX.IUnknown"/></strong> reference in the media buffer object.</p>
        /// </summary>
        /// <param name = "guid">No documentation.</param>
        /// <param name = "unkDataRef">No documentation.</param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong>ERROR_OBJECT_ALREADY_EXISTS</strong></dt> </dl> </td><td> <p>An item already exists with this key.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To retrieve the reference from the object, call <strong>IMFDXGIBuffer::GetUnknown</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447905</doc-id>
        /// <unmanaged>HRESULT IMFDXGIBuffer::SetUnknown([In] const GUID&amp; guid,[In, Optional] IUnknown* pUnkData)</unmanaged>
        /// <unmanaged-short>IMFDXGIBuffer::SetUnknown</unmanaged-short>
        public unsafe void SetUnknown(System.Guid guid, SharpDX.IUnknown unkDataRef)
        {
            System.IntPtr unkDataRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            unkDataRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkDataRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guid, (void *)unkDataRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("eb533d5d-2db6-40f8-97a9-494692014f07")]
    public partial class DXGIDeviceManager : SharpDX.ComObject
    {
        public DXGIDeviceManager(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DXGIDeviceManager(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DXGIDeviceManager(nativePtr);
        /// <summary>
        /// <p>Enables two threads to share the same Microsoft Direct3D?11 device.</p>
        /// </summary>
        /// <param name = "hDevice">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <remarks>
        /// <p>This interface is exposed by the Microsoft DirectX Graphics Infrastructure (DXGI) Device Manager. To create the DXGI Device Manager, call the <strong>MFCreateDXGIDeviceManager</strong> function.</p><p>When you create an <strong><see cref = "SharpDX.MediaFoundation.DXGIDeviceManager"/></strong> with <strong>MFCreateDXGIDeviceManager</strong>, a Direct3D?11 device is not associated with the device manager. To associate a Direct3D?11 device with the device manager, call <strong>IMFDXGIDeviceManager::ResetDevice</strong>, passing in the reference to the Direct3D?11 device. To create a Direct3D?11 device, call <strong>D3D11CreateDevice</strong>. The device should be created with the <strong>D3D11_CREATE_DEVICE_VIDEO_SUPPORT</strong> device creation flag which is defined in the <strong><see cref = "SharpDX.Direct3D11.DeviceCreationFlags"/></strong> enumeration.</p><p>For Microsoft Direct3D?9 devices, use the <strong>IDirect3DDeviceManager9</strong> interface.</p><p>Windows Store apps must use <strong><see cref = "SharpDX.MediaFoundation.DXGIDeviceManager"/></strong> and Direct3D 11 Video APIs. </p>
        /// </remarks>
        /// <doc-id>hh447906</doc-id>
        /// <unmanaged>HRESULT IMFDXGIDeviceManager::CloseDeviceHandle([In] void* hDevice)</unmanaged>
        /// <unmanaged-short>IMFDXGIDeviceManager::CloseDeviceHandle</unmanaged-short>
        public unsafe void CloseDeviceHandle(System.IntPtr hDevice)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hDevice, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries the Microsoft Direct3D device for an interface.</p>
        /// </summary>
        /// <param name = "hDevice"><dd> <p>A handle to the Direct3D device. To get the device handle, call <strong>IMFDXGIDeviceManager::OpenDeviceHandle</strong>.</p> </dd></param>
        /// <param name = "riid"><dd> <p>The interface identifier (IID) of the requested interface. The Direct3D device supports the following interfaces:</p> <ul> <li> <strong><see cref = "SharpDX.Direct3D11.Device"/></strong>. To get a reference to the Direct3D11 device, use <strong>IID_ID3D11Device</strong> as the <em>riid</em>.</li> <li> <strong><see cref = "SharpDX.Direct3D11.VideoDevice"/></strong>. To get a reference to the Direct3D11 video device, use <strong>IID_ID3D11VideoDevice</strong> as the <em>riid</em>.</li> </ul> </dd></param>
        /// <returns><dd> <p>Receives a reference to the requested interface. The caller must release the interface.</p> </dd></returns>
        /// <remarks>
        /// <p>If the method returns <strong><see cref = "DxgiNewVideoDevice"/></strong>, call <strong>IMFDXGIDeviceManager::CloseDeviceHandle</strong> to close the handle and then call <strong>OpenDeviceHandle</strong> again to get a new handle. The  <strong>IMFDXGIDeviceManager::ResetDevice</strong> method invalidates all open device handles.</p><p>For more info see, Supporting Direct3D 11 Video Decoding in Media Foundation.</p>
        /// </remarks>
        /// <doc-id>hh447908</doc-id>
        /// <unmanaged>HRESULT IMFDXGIDeviceManager::GetVideoService([In] void* hDevice,[In] const GUID&amp; riid,[Out] void** ppService)</unmanaged>
        /// <unmanaged-short>IMFDXGIDeviceManager::GetVideoService</unmanaged-short>
        public unsafe System.IntPtr GetVideoService(System.IntPtr hDevice, System.Guid riid)
        {
            System.IntPtr serviceOut;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hDevice, &riid, &serviceOut, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
            return serviceOut;
        }

        /// <summary>
        /// <p>Gives the caller exclusive access to the Microsoft Direct3D device.</p>
        /// </summary>
        /// <param name = "hDevice"><dd> <p>A handle to the Direct3D device. To get the device handle, call <strong>IMFDXGIDeviceManager::OpenDeviceHandle</strong>.</p> </dd></param>
        /// <param name = "riid"><dd> <p>The interface identifier (IID) of the requested interface. The Direct3D device will support the following interfaces:</p> <ul> <li> <strong><see cref = "SharpDX.Direct3D11.Device"/></strong> </li> <li> <strong><see cref = "SharpDX.Direct3D11.VideoContext"/></strong> </li> <li> <strong><see cref = "SharpDX.Direct3D11.VideoDevice"/></strong> </li> </ul> </dd></param>
        /// <param name = "fBlock"><dd> <p>Specifies whether to wait for the device lock. If the device is already locked and this parameter is <strong>TRUE</strong>, the method blocks until the device is unlocked. Otherwise, if the device is locked and this parameter is <strong><see cref = "SharpDX.Result.False"/></strong>, the method returns immediately with the error code <strong>DXVA2_E_VIDEO_DEVICE_LOCKED</strong>.</p> </dd></param>
        /// <returns><dd> <p>Receives a reference to the requested interface. The caller must release the interface.</p> </dd></returns>
        /// <remarks>
        /// <p>When you are done using the Direct3D device, call <strong>IMFDXGIDeviceManager::UnlockDevice</strong> to unlock the device.</p><p>If the method returns <strong><see cref = "DxgiNewVideoDevice"/></strong>, call <strong>IMFDXGIDeviceManager::CloseDeviceHandle</strong> to close the handle and then call <strong>OpenDeviceHandle</strong> again to get a new handle. The  <strong>IMFDXGIDeviceManager::ResetDevice</strong> method invalidates all open device handles.</p><p>If <em>fBlock</em> is <strong>TRUE</strong>, this method can potentially deadlock. For example, it will deadlock if a thread calls <strong>LockDevice</strong> and then waits on another thread that calls <strong>LockDevice</strong>. It will also deadlock if a thread calls <strong>LockDevice</strong> twice without calling <strong>UnlockDevice</strong> in between.  </p>
        /// </remarks>
        /// <doc-id>hh447909</doc-id>
        /// <unmanaged>HRESULT IMFDXGIDeviceManager::LockDevice([In] void* hDevice,[In] const GUID&amp; riid,[Out] void** ppUnkDevice,[In] BOOL fBlock)</unmanaged>
        /// <unmanaged-short>IMFDXGIDeviceManager::LockDevice</unmanaged-short>
        public unsafe System.IntPtr LockDevice(System.IntPtr hDevice, System.Guid riid, SharpDX.Mathematics.Interop.RawBool fBlock)
        {
            System.IntPtr unkDeviceOut;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)hDevice, &riid, &unkDeviceOut, fBlock, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
            return unkDeviceOut;
        }

        /// <summary>
        /// <p>Gets a handle to the Microsoft Direct3D device. </p>
        /// </summary>
        /// <returns><dd> <p>Receives the device handle.</p> </dd></returns>
        /// <doc-id>hh447910</doc-id>
        /// <unmanaged>HRESULT IMFDXGIDeviceManager::OpenDeviceHandle([Out] void** phDevice)</unmanaged>
        /// <unmanaged-short>IMFDXGIDeviceManager::OpenDeviceHandle</unmanaged-short>
        public unsafe System.IntPtr OpenDeviceHandle()
        {
            System.IntPtr hDeviceRef;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &hDeviceRef, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
            return hDeviceRef;
        }

        /// <summary>
        /// <p>Enables two threads to share the same Microsoft Direct3D?11 device.</p>
        /// </summary>
        /// <param name = "unkDeviceRef">No documentation.</param>
        /// <param name = "resetToken">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <remarks>
        /// <p>This interface is exposed by the Microsoft DirectX Graphics Infrastructure (DXGI) Device Manager. To create the DXGI Device Manager, call the <strong>MFCreateDXGIDeviceManager</strong> function.</p><p>When you create an <strong><see cref = "SharpDX.MediaFoundation.DXGIDeviceManager"/></strong> with <strong>MFCreateDXGIDeviceManager</strong>, a Direct3D?11 device is not associated with the device manager. To associate a Direct3D?11 device with the device manager, call <strong>IMFDXGIDeviceManager::ResetDevice</strong>, passing in the reference to the Direct3D?11 device. To create a Direct3D?11 device, call <strong>D3D11CreateDevice</strong>. The device should be created with the <strong>D3D11_CREATE_DEVICE_VIDEO_SUPPORT</strong> device creation flag which is defined in the <strong><see cref = "SharpDX.Direct3D11.DeviceCreationFlags"/></strong> enumeration.</p><p>For Microsoft Direct3D?9 devices, use the <strong>IDirect3DDeviceManager9</strong> interface.</p><p>Windows Store apps must use <strong><see cref = "SharpDX.MediaFoundation.DXGIDeviceManager"/></strong> and Direct3D 11 Video APIs. </p>
        /// </remarks>
        /// <doc-id>hh447906</doc-id>
        /// <unmanaged>HRESULT IMFDXGIDeviceManager::ResetDevice([In] IUnknown* pUnkDevice,[In] unsigned int resetToken)</unmanaged>
        /// <unmanaged-short>IMFDXGIDeviceManager::ResetDevice</unmanaged-short>
        internal unsafe void ResetDevice(SharpDX.IUnknown unkDeviceRef, System.Int32 resetToken)
        {
            System.IntPtr unkDeviceRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            unkDeviceRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkDeviceRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)unkDeviceRef_, resetToken, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Tests whether a Microsoft Direct3D device handle is valid.</p>
        /// </summary>
        /// <param name = "hDevice"><dd> <p>A handle to the Direct3D device. To get the device handle, call <strong>IMFDXGIDeviceManager::OpenDeviceHandle</strong>.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong>E_HANDLE</strong></dt> </dl> </td><td> <p>The specified handle is not a Direct3D device handle.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "DxgiNewVideoDevice"/></strong></dt> </dl> </td><td> <p>The device handle is invalid. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the method returns <strong><see cref = "DxgiNewVideoDevice"/></strong>, call <strong>IMFDXGIDeviceManager::CloseDeviceHandle</strong> to close the handle and then call <strong>OpenDeviceHandle</strong> again to get a new handle. The  <strong>IMFDXGIDeviceManager::ResetDevice</strong> method invalidates all open device handles.</p>
        /// </remarks>
        /// <doc-id>hh447912</doc-id>
        /// <unmanaged>HRESULT IMFDXGIDeviceManager::TestDevice([In] void* hDevice)</unmanaged>
        /// <unmanaged-short>IMFDXGIDeviceManager::TestDevice</unmanaged-short>
        public unsafe void TestDevice(System.IntPtr hDevice)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hDevice, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Unlocks the Microsoft Direct3D device.</p>
        /// </summary>
        /// <param name = "hDevice"><dd> <p>A handle to the Direct3D device. To get the device handle, call <strong>IMFDXGIDeviceManager::OpenDeviceHandle</strong>.</p> </dd></param>
        /// <param name = "fSaveState"><dd> <p>Reserved.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> Call this method to release the device after calling <strong>IMFDXGIDeviceManager::LockDevice</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447913</doc-id>
        /// <unmanaged>HRESULT IMFDXGIDeviceManager::UnlockDevice([In] void* hDevice,[In] BOOL fSaveState)</unmanaged>
        /// <unmanaged-short>IMFDXGIDeviceManager::UnlockDevice</unmanaged-short>
        internal unsafe void UnlockDevice(System.IntPtr hDevice, SharpDX.Mathematics.Interop.RawBool fSaveState)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)hDevice, fSaveState, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("20bc074b-7a8d-4609-8c3b-64a0a3b5d7ce")]
    public partial class DXGIDeviceManagerSource : SharpDX.ComObject
    {
        public DXGIDeviceManagerSource(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DXGIDeviceManagerSource(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DXGIDeviceManagerSource(nativePtr);
        /// <summary>
        /// <p>Gets the <strong><see cref = "SharpDX.MediaFoundation.DXGIDeviceManager"/></strong> from the Microsoft Media Foundation video rendering sink.</p>
        /// </summary>
        /// <doc-id>dn280688</doc-id>
        /// <unmanaged>GetManager</unmanaged>
        /// <unmanaged-short>GetManager</unmanaged-short>
        public SharpDX.MediaFoundation.DXGIDeviceManager Manager
        {
            get
            {
                GetManager(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the <strong><see cref = "SharpDX.MediaFoundation.DXGIDeviceManager"/></strong> from the Microsoft Media Foundation video rendering sink.</p>
        /// </summary>
        /// <param name = "managerOut">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280688</doc-id>
        /// <unmanaged>HRESULT IMFDXGIDeviceManagerSource::GetManager([Out] IMFDXGIDeviceManager** ppManager)</unmanaged>
        /// <unmanaged-short>IMFDXGIDeviceManagerSource::GetManager</unmanaged-short>
        internal unsafe void GetManager(out SharpDX.MediaFoundation.DXGIDeviceManager managerOut)
        {
            System.IntPtr managerOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &managerOut_, (*(void ***)this._nativePointer)[3]);
            if (managerOut_ != System.IntPtr.Zero)
                managerOut = new SharpDX.MediaFoundation.DXGIDeviceManager(managerOut_);
            else
                managerOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5C595E64-4630-4231-855A-12842F733245")]
    public partial class ExtendedCameraIntrinsicModel : SharpDX.ComObject
    {
        public ExtendedCameraIntrinsicModel(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ExtendedCameraIntrinsicModel(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ExtendedCameraIntrinsicModel(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetModel / SetModel</unmanaged>
        /// <unmanaged-short>GetModel</unmanaged-short>
        public SharpDX.MediaFoundation.ExtendedCameraIntrinsicIntrinsicModel Model
        {
            get
            {
                GetModel(out var __output__);
                return __output__;
            }

            set => SetModel(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDistortionModelType</unmanaged>
        /// <unmanaged-short>GetDistortionModelType</unmanaged-short>
        public SharpDX.MediaFoundation.CameraIntrinsicDistortionModelType DistortionModelType
        {
            get
            {
                GetDistortionModelType(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "intrinsicModelRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFExtendedCameraIntrinsicModel::GetModel([Out] MFExtendedCameraIntrinsic_IntrinsicModel* pIntrinsicModel)</unmanaged>
        /// <unmanaged-short>IMFExtendedCameraIntrinsicModel::GetModel</unmanaged-short>
        internal unsafe void GetModel(out SharpDX.MediaFoundation.ExtendedCameraIntrinsicIntrinsicModel intrinsicModelRef)
        {
            intrinsicModelRef = default (SharpDX.MediaFoundation.ExtendedCameraIntrinsicIntrinsicModel);
            SharpDX.Result __result__;
            fixed (void *intrinsicModelRef_ = &intrinsicModelRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, intrinsicModelRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "intrinsicModelRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFExtendedCameraIntrinsicModel::SetModel([In] const MFExtendedCameraIntrinsic_IntrinsicModel* pIntrinsicModel)</unmanaged>
        /// <unmanaged-short>IMFExtendedCameraIntrinsicModel::SetModel</unmanaged-short>
        internal unsafe void SetModel(ref SharpDX.MediaFoundation.ExtendedCameraIntrinsicIntrinsicModel intrinsicModelRef)
        {
            SharpDX.Result __result__;
            fixed (void *intrinsicModelRef_ = &intrinsicModelRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, intrinsicModelRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "distortionModelTypeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFExtendedCameraIntrinsicModel::GetDistortionModelType([Out] MFCameraIntrinsic_DistortionModelType* pDistortionModelType)</unmanaged>
        /// <unmanaged-short>IMFExtendedCameraIntrinsicModel::GetDistortionModelType</unmanaged-short>
        internal unsafe void GetDistortionModelType(out SharpDX.MediaFoundation.CameraIntrinsicDistortionModelType distortionModelTypeRef)
        {
            SharpDX.Result __result__;
            fixed (void *distortionModelTypeRef_ = &distortionModelTypeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, distortionModelTypeRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("687F6DAC-6987-4750-A16A-734D1E7A10FE")]
    public partial class ExtendedCameraIntrinsics : SharpDX.ComObject
    {
        public ExtendedCameraIntrinsics(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ExtendedCameraIntrinsics(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ExtendedCameraIntrinsics(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetBufferSize</unmanaged>
        /// <unmanaged-short>GetBufferSize</unmanaged-short>
        public System.Int32 BufferSize
        {
            get
            {
                GetBufferSize(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetIntrinsicModelCount</unmanaged>
        /// <unmanaged-short>GetIntrinsicModelCount</unmanaged-short>
        public System.Int32 IntrinsicModelCount
        {
            get
            {
                GetIntrinsicModelCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bBufferRef">No documentation.</param>
        /// <param name = "dwBufferSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFExtendedCameraIntrinsics::InitializeFromBuffer([In, Buffer] unsigned char* pbBuffer,[In] DWORD dwBufferSize)</unmanaged>
        /// <unmanaged-short>IMFExtendedCameraIntrinsics::InitializeFromBuffer</unmanaged-short>
        public unsafe void InitializeFromBuffer(System.Byte[] bBufferRef, System.Int32 dwBufferSize)
        {
            SharpDX.Result __result__;
            fixed (void *bBufferRef_ = bBufferRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bBufferRef_, dwBufferSize, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwBufferSizeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFExtendedCameraIntrinsics::GetBufferSize([Out] DWORD* pdwBufferSize)</unmanaged>
        /// <unmanaged-short>IMFExtendedCameraIntrinsics::GetBufferSize</unmanaged-short>
        internal unsafe void GetBufferSize(out System.Int32 dwBufferSizeRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwBufferSizeRef_ = &dwBufferSizeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwBufferSizeRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bBufferRef">No documentation.</param>
        /// <param name = "dwBufferSizeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFExtendedCameraIntrinsics::SerializeToBuffer([Out, Buffer] unsigned char* pbBuffer,[InOut] DWORD* pdwBufferSize)</unmanaged>
        /// <unmanaged-short>IMFExtendedCameraIntrinsics::SerializeToBuffer</unmanaged-short>
        public unsafe void SerializeToBuffer(System.Byte[] bBufferRef, ref System.Int32 dwBufferSizeRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwBufferSizeRef_ = &dwBufferSizeRef)
                fixed (void *bBufferRef_ = bBufferRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bBufferRef_, dwBufferSizeRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFExtendedCameraIntrinsics::GetIntrinsicModelCount([Out] DWORD* pdwCount)</unmanaged>
        /// <unmanaged-short>IMFExtendedCameraIntrinsics::GetIntrinsicModelCount</unmanaged-short>
        internal unsafe void GetIntrinsicModelCount(out System.Int32 dwCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwCountRef_ = &dwCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwCountRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwIndex">No documentation.</param>
        /// <param name = "intrinsicModelOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFExtendedCameraIntrinsics::GetIntrinsicModelByIndex([In] DWORD dwIndex,[Out] IMFExtendedCameraIntrinsicModel** ppIntrinsicModel)</unmanaged>
        /// <unmanaged-short>IMFExtendedCameraIntrinsics::GetIntrinsicModelByIndex</unmanaged-short>
        public unsafe void GetIntrinsicModelByIndex(System.Int32 dwIndex, out SharpDX.MediaFoundation.ExtendedCameraIntrinsicModel intrinsicModelOut)
        {
            System.IntPtr intrinsicModelOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwIndex, &intrinsicModelOut_, (*(void ***)this._nativePointer)[7]);
            if (intrinsicModelOut_ != System.IntPtr.Zero)
                intrinsicModelOut = new SharpDX.MediaFoundation.ExtendedCameraIntrinsicModel(intrinsicModelOut_);
            else
                intrinsicModelOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "intrinsicModelRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFExtendedCameraIntrinsics::AddIntrinsicModel([In] IMFExtendedCameraIntrinsicModel* pIntrinsicModel)</unmanaged>
        /// <unmanaged-short>IMFExtendedCameraIntrinsics::AddIntrinsicModel</unmanaged-short>
        public unsafe void AddIntrinsicModel(SharpDX.MediaFoundation.ExtendedCameraIntrinsicModel intrinsicModelRef)
        {
            System.IntPtr intrinsicModelRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            intrinsicModelRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.ExtendedCameraIntrinsicModel>(intrinsicModelRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)intrinsicModelRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("74C2653B-5F55-4EB1-9F0F-18B8F68B7D3D")]
    public partial class ExtendedCameraIntrinsicsDistortionModel6KT : SharpDX.ComObject
    {
        public ExtendedCameraIntrinsicsDistortionModel6KT(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ExtendedCameraIntrinsicsDistortionModel6KT(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ExtendedCameraIntrinsicsDistortionModel6KT(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDistortionModel / SetDistortionModel</unmanaged>
        /// <unmanaged-short>GetDistortionModel</unmanaged-short>
        public SharpDX.MediaFoundation.CameraIntrinsicDistortionModel6KT DistortionModel
        {
            get
            {
                GetDistortionModel(out var __output__);
                return __output__;
            }

            set => SetDistortionModel(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "distortionModelRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFExtendedCameraIntrinsicsDistortionModel6KT::GetDistortionModel([Out] MFCameraIntrinsic_DistortionModel6KT* pDistortionModel)</unmanaged>
        /// <unmanaged-short>IMFExtendedCameraIntrinsicsDistortionModel6KT::GetDistortionModel</unmanaged-short>
        internal unsafe void GetDistortionModel(out SharpDX.MediaFoundation.CameraIntrinsicDistortionModel6KT distortionModelRef)
        {
            distortionModelRef = default (SharpDX.MediaFoundation.CameraIntrinsicDistortionModel6KT);
            SharpDX.Result __result__;
            fixed (void *distortionModelRef_ = &distortionModelRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, distortionModelRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "distortionModelRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFExtendedCameraIntrinsicsDistortionModel6KT::SetDistortionModel([In] const MFCameraIntrinsic_DistortionModel6KT* pDistortionModel)</unmanaged>
        /// <unmanaged-short>IMFExtendedCameraIntrinsicsDistortionModel6KT::SetDistortionModel</unmanaged-short>
        internal unsafe void SetDistortionModel(ref SharpDX.MediaFoundation.CameraIntrinsicDistortionModel6KT distortionModelRef)
        {
            SharpDX.Result __result__;
            fixed (void *distortionModelRef_ = &distortionModelRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, distortionModelRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("812D5F95-B572-45DC-BAFC-AE24199DDDA8")]
    public partial class ExtendedCameraIntrinsicsDistortionModelArcTan : SharpDX.ComObject
    {
        public ExtendedCameraIntrinsicsDistortionModelArcTan(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ExtendedCameraIntrinsicsDistortionModelArcTan(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ExtendedCameraIntrinsicsDistortionModelArcTan(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDistortionModel / SetDistortionModel</unmanaged>
        /// <unmanaged-short>GetDistortionModel</unmanaged-short>
        public SharpDX.MediaFoundation.CameraIntrinsicDistortionModelArcTan DistortionModel
        {
            get
            {
                GetDistortionModel(out var __output__);
                return __output__;
            }

            set => SetDistortionModel(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "distortionModelRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFExtendedCameraIntrinsicsDistortionModelArcTan::GetDistortionModel([Out] MFCameraIntrinsic_DistortionModelArcTan* pDistortionModel)</unmanaged>
        /// <unmanaged-short>IMFExtendedCameraIntrinsicsDistortionModelArcTan::GetDistortionModel</unmanaged-short>
        internal unsafe void GetDistortionModel(out SharpDX.MediaFoundation.CameraIntrinsicDistortionModelArcTan distortionModelRef)
        {
            distortionModelRef = default (SharpDX.MediaFoundation.CameraIntrinsicDistortionModelArcTan);
            SharpDX.Result __result__;
            fixed (void *distortionModelRef_ = &distortionModelRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, distortionModelRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "distortionModelRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFExtendedCameraIntrinsicsDistortionModelArcTan::SetDistortionModel([In] const MFCameraIntrinsic_DistortionModelArcTan* pDistortionModel)</unmanaged>
        /// <unmanaged-short>IMFExtendedCameraIntrinsicsDistortionModelArcTan::SetDistortionModel</unmanaged-short>
        internal unsafe void SetDistortionModel(ref SharpDX.MediaFoundation.CameraIntrinsicDistortionModelArcTan distortionModelRef)
        {
            SharpDX.Result __result__;
            fixed (void *distortionModelRef_ = &distortionModelRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, distortionModelRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("332EC562-3758-468D-A784-E38F23552128")]
    public partial class ExtendedDRMTypeSupport : SharpDX.ComObject
    {
        public ExtendedDRMTypeSupport(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ExtendedDRMTypeSupport(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ExtendedDRMTypeSupport(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "type">No documentation.</param>
        /// <param name = "keySystem">No documentation.</param>
        /// <param name = "answerRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFExtendedDRMTypeSupport::IsTypeSupportedEx([In, Optional] wchar_t* type,[In] wchar_t* keySystem,[Out] MF_MEDIA_ENGINE_CANPLAY* pAnswer)</unmanaged>
        /// <unmanaged-short>IMFExtendedDRMTypeSupport::IsTypeSupportedEx</unmanaged-short>
        public unsafe void IsTypeSupportedEx(System.String type, System.String keySystem, out SharpDX.MediaFoundation.MediaEngineCanPlay answerRef)
        {
            SharpDX.Result __result__;
            fixed (void *answerRef_ = &answerRef)
                fixed (char *keySystem_ = keySystem)
                    fixed (char *type_ = type)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)type_, (void *)keySystem_, answerRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("508E71D3-EC66-4fc3-8775-B4B9ED6BA847")]
    public partial class FieldOfUseMFTUnlock : SharpDX.ComObject
    {
        public FieldOfUseMFTUnlock(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FieldOfUseMFTUnlock(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FieldOfUseMFTUnlock(nativePtr);
        /// <summary>
        /// <p>Unlocks a Media Foundation transform (MFT) so that the application can use it.</p>
        /// </summary>
        /// <param name = "unkMFTRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of the MFT.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method authenticates the caller, using a private communication channel between the MFT and the object that implements the <strong><see cref = "SharpDX.MediaFoundation.FieldOfUseMFTUnlock"/></strong> interface. The details of the communication depend entirely on the implementation.</p>
        /// </remarks>
        /// <doc-id>dd368793</doc-id>
        /// <unmanaged>HRESULT IMFFieldOfUseMFTUnlock::Unlock([In, Optional] IUnknown* pUnkMFT)</unmanaged>
        /// <unmanaged-short>IMFFieldOfUseMFTUnlock::Unlock</unmanaged-short>
        public unsafe void Unlock(SharpDX.IUnknown unkMFTRef)
        {
            System.IntPtr unkMFTRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            unkMFTRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkMFTRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)unkMFTRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("83E91E85-82C1-4ea7-801D-85DC50B75086")]
    public partial class FilterConfig : SharpDX.ComObject
    {
        public FilterConfig(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FilterConfig(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FilterConfig(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the number of input pins on the EVR filter. The EVR filter always has at least one input pin, which corresponds to the reference stream.</p>
        /// </summary>
        /// <doc-id>ms701550</doc-id>
        /// <unmanaged>GetNumberOfStreams / SetNumberOfStreams</unmanaged>
        /// <unmanaged-short>GetNumberOfStreams</unmanaged-short>
        public System.Int32 NumberOfStreams
        {
            get
            {
                GetNumberOfStreams(out var __output__);
                return __output__;
            }

            set => SetNumberOfStreams(value);
        }

        /// <summary>
        /// <p> </p><p>Sets the number of input pins on the EVR filter.</p>
        /// </summary>
        /// <param name = "dwMaxStreams"><dd> <p>Specifies the total number of input pins on the EVR filter. This value includes the input pin for the reference stream, which is created by default. For example, to mix one substream plus the reference stream, set this parameter to 2.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid number of streams. The minimum is one, and the maximum is 16.</p> </td></tr> <tr><td> <dl> <dt><strong>VFW_E_WRONG_STATE</strong></dt> </dl> </td><td> <p>This method has already been called, or at least one pin is already connected.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>After this method has been called, it cannot be called a second time on the same instance of the EVR filter. Also, the method fails if any input pins are connected.</p>
        /// </remarks>
        /// <doc-id>ms698968</doc-id>
        /// <unmanaged>HRESULT IEVRFilterConfig::SetNumberOfStreams([In] DWORD dwMaxStreams)</unmanaged>
        /// <unmanaged-short>IEVRFilterConfig::SetNumberOfStreams</unmanaged-short>
        internal unsafe void SetNumberOfStreams(System.Int32 dwMaxStreams)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwMaxStreams, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of input pins on the EVR filter. The EVR filter always has at least one input pin, which corresponds to the reference stream.</p>
        /// </summary>
        /// <param name = "dwMaxStreamsRef"><dd> <p>Receives the number of streams.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms701550</doc-id>
        /// <unmanaged>HRESULT IEVRFilterConfig::GetNumberOfStreams([Out] DWORD* pdwMaxStreams)</unmanaged>
        /// <unmanaged-short>IEVRFilterConfig::GetNumberOfStreams</unmanaged-short>
        internal unsafe void GetNumberOfStreams(out System.Int32 dwMaxStreamsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwMaxStreamsRef_ = &dwMaxStreamsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwMaxStreamsRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("aea36028-796d-454f-beee-b48071e24304")]
    public partial class FilterConfigEx : SharpDX.MediaFoundation.FilterConfig
    {
        public FilterConfigEx(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FilterConfigEx(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FilterConfigEx(nativePtr);
        /// <summary>
        /// <p>Gets or sets the configuration parameters for the Microsoft DirectShow <strong>Enhanced Video Renderer Filter</strong> filter.</p>
        /// </summary>
        /// <doc-id>dd373925</doc-id>
        /// <unmanaged>GetConfigPrefs / SetConfigPrefs</unmanaged>
        /// <unmanaged-short>GetConfigPrefs</unmanaged-short>
        public System.Int32 ConfigPrefs
        {
            get
            {
                GetConfigPrefs(out var __output__);
                return __output__;
            }

            set => SetConfigPrefs(value);
        }

        /// <summary>
        /// <p>Sets the configuration parameters for the Microsoft DirectShow <strong>Enhanced Video Renderer Filter</strong> (EVR).</p>
        /// </summary>
        /// <param name = "dwConfigFlags">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>dd373926</doc-id>
        /// <unmanaged>HRESULT IEVRFilterConfigEx::SetConfigPrefs([In] DWORD dwConfigFlags)</unmanaged>
        /// <unmanaged-short>IEVRFilterConfigEx::SetConfigPrefs</unmanaged-short>
        internal unsafe void SetConfigPrefs(System.Int32 dwConfigFlags)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwConfigFlags, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the configuration parameters for the Microsoft DirectShow <strong>Enhanced Video Renderer Filter</strong> filter.</p>
        /// </summary>
        /// <param name = "dwConfigFlagsRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd373925</doc-id>
        /// <unmanaged>HRESULT IEVRFilterConfigEx::GetConfigPrefs([Out] DWORD* pdwConfigFlags)</unmanaged>
        /// <unmanaged-short>IEVRFilterConfigEx::GetConfigPrefs</unmanaged-short>
        internal unsafe void GetConfigPrefs(out System.Int32 dwConfigFlagsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwConfigFlagsRef_ = &dwConfigFlagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwConfigFlagsRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("EAECB74A-9A50-42ce-9541-6A7F57AA4AD7")]
    public partial class FinalizableMediaSink : SharpDX.MediaFoundation.MediaSink
    {
        public FinalizableMediaSink(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FinalizableMediaSink(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FinalizableMediaSink(nativePtr);
        /// <summary>
        /// <p> </p><p>Notifies the media sink to asynchronously take any steps it needs to finish its tasks.</p>
        /// </summary>
        /// <param name = "callbackRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of an asynchronous object. The caller must implement this interface.</p> </dd></param>
        /// <param name = "unkStateRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Many archive media sinks have steps they need to do at the end of archiving to complete their file operations, such as updating the header (for some formats) or flushing all pending writes to disk. In some cases, this may include expensive operations such as indexing the content. <strong>BeginFinalize</strong> is an asynchronous way to initiate final tasks.</p><p>When the finalize operation is complete, the callback object's <strong>IMFAsyncCallback::Invoke</strong> method is called. At that point, the application should call <strong>IMFFinalizableMediaSink::EndFinalize</strong> to complete the asynchronous request.</p>
        /// </remarks>
        /// <doc-id>ms705643</doc-id>
        /// <unmanaged>HRESULT IMFFinalizableMediaSink::BeginFinalize([In] IMFAsyncCallback* pCallback,[In] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFFinalizableMediaSink::BeginFinalize</unmanaged-short>
        public unsafe void BeginFinalize(SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown unkStateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)callbackRef_, (void *)unkStateRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Completes an asynchronous finalize operation.</p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the <strong>IMFAsyncCallback::Invoke</strong> method.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method after the <strong>IMFFinalizableMediaSink::BeginFinalize</strong> method completes asynchronously.</p>
        /// </remarks>
        /// <doc-id>ms694891</doc-id>
        /// <unmanaged>HRESULT IMFFinalizableMediaSink::EndFinalize([In] IMFAsyncResult* pResult)</unmanaged>
        /// <unmanaged-short>IMFFinalizableMediaSink::EndFinalize</unmanaged-short>
        public unsafe void EndFinalize(SharpDX.MediaFoundation.AsyncResult resultRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("DE400F54-5BF1-40CF-8964-0BEA136B1E3D")]
    public partial class HDCPStatus : SharpDX.ComObject
    {
        public HDCPStatus(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator HDCPStatus(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new HDCPStatus(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "statusRef">No documentation.</param>
        /// <param name = "fStatusRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHDCPStatus::Query([InOut] MF_HDCP_STATUS* pStatus,[InOut] BOOL* pfStatus)</unmanaged>
        /// <unmanaged-short>IMFHDCPStatus::Query</unmanaged-short>
        public unsafe void Query(ref SharpDX.MediaFoundation.HdcpStatus statusRef, ref SharpDX.Mathematics.Interop.RawBool fStatusRef)
        {
            SharpDX.Result __result__;
            fixed (void *fStatusRef_ = &fStatusRef)
                fixed (void *statusRef_ = &statusRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, statusRef_, fStatusRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "status">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHDCPStatus::Set([In] MF_HDCP_STATUS status)</unmanaged>
        /// <unmanaged-short>IMFHDCPStatus::Set</unmanaged-short>
        public unsafe void Set(SharpDX.MediaFoundation.HdcpStatus status)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)status), (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("F779FDDF-26E7-4270-8A8B-B983D1859DE0")]
    public partial class HttpDownloadRequest : SharpDX.ComObject
    {
        public HttpDownloadRequest(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator HttpDownloadRequest(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new HttpDownloadRequest(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetHttpStatus</unmanaged>
        /// <unmanaged-short>GetHttpStatus</unmanaged-short>
        public System.Int32 HttpStatus
        {
            get
            {
                GetHttpStatus(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetAtEndOfPayload</unmanaged>
        /// <unmanaged-short>GetAtEndOfPayload</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool AtEndOfPayload
        {
            get
            {
                GetAtEndOfPayload(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetTotalLength</unmanaged>
        /// <unmanaged-short>GetTotalLength</unmanaged-short>
        public System.Int64 TotalLength
        {
            get
            {
                GetTotalLength(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetRangeEndOffset</unmanaged>
        /// <unmanaged-short>GetRangeEndOffset</unmanaged-short>
        public System.Int64 RangeEndOffset
        {
            get
            {
                GetRangeEndOffset(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "szHeader">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::AddHeader([In] const wchar_t* szHeader)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::AddHeader</unmanaged-short>
        public unsafe void AddHeader(System.String szHeader)
        {
            SharpDX.Result __result__;
            fixed (char *szHeader_ = szHeader)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szHeader_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bPayloadRef">No documentation.</param>
        /// <param name = "cbPayload">No documentation.</param>
        /// <param name = "callbackRef">No documentation.</param>
        /// <param name = "unkStateRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::BeginSendRequest([In, Buffer, Optional] const unsigned char* pbPayload,[In] ULONG cbPayload,[In] IMFAsyncCallback* pCallback,[In, Optional] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::BeginSendRequest</unmanaged-short>
        public unsafe void BeginSendRequest(System.Byte[] bPayloadRef, System.Int32 cbPayload, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown unkStateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            fixed (void *bPayloadRef_ = bPayloadRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bPayloadRef_, cbPayload, (void *)callbackRef_, (void *)unkStateRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "resultRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::EndSendRequest([In] IMFAsyncResult* pResult)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::EndSendRequest</unmanaged-short>
        public unsafe void EndSendRequest(SharpDX.MediaFoundation.AsyncResult resultRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "callbackRef">No documentation.</param>
        /// <param name = "unkStateRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::BeginReceiveResponse([In] IMFAsyncCallback* pCallback,[In, Optional] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::BeginReceiveResponse</unmanaged-short>
        public unsafe void BeginReceiveResponse(SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown unkStateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)callbackRef_, (void *)unkStateRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "resultRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::EndReceiveResponse([In] IMFAsyncResult* pResult)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::EndReceiveResponse</unmanaged-short>
        public unsafe void EndReceiveResponse(SharpDX.MediaFoundation.AsyncResult resultRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bRef">No documentation.</param>
        /// <param name = "cb">No documentation.</param>
        /// <param name = "callbackRef">No documentation.</param>
        /// <param name = "unkStateRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::BeginReadPayload([Out, Buffer] unsigned char* pb,[In] ULONG cb,[In] IMFAsyncCallback* pCallback,[In, Optional] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::BeginReadPayload</unmanaged-short>
        public unsafe void BeginReadPayload(System.Byte[] bRef, System.Int32 cb, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown unkStateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            fixed (void *bRef_ = bRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bRef_, cb, (void *)callbackRef_, (void *)unkStateRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "resultRef">No documentation.</param>
        /// <param name = "qwOffsetRef">No documentation.</param>
        /// <param name = "cbReadRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::EndReadPayload([In] IMFAsyncResult* pResult,[Out] unsigned longlong* pqwOffset,[Out] ULONG* pcbRead)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::EndReadPayload</unmanaged-short>
        public unsafe void EndReadPayload(SharpDX.MediaFoundation.AsyncResult resultRef, out System.Int64 qwOffsetRef, out System.Int32 cbReadRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            fixed (void *cbReadRef_ = &cbReadRef)
                fixed (void *qwOffsetRef_ = &qwOffsetRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, qwOffsetRef_, cbReadRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "szHeaderName">No documentation.</param>
        /// <param name = "dwIndex">No documentation.</param>
        /// <param name = "szHeaderValueOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::QueryHeader([In] const wchar_t* szHeaderName,[In] DWORD dwIndex,[Out] wchar_t** ppszHeaderValue)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::QueryHeader</unmanaged-short>
        public unsafe void QueryHeader(System.String szHeaderName, System.Int32 dwIndex, System.IntPtr szHeaderValueOut)
        {
            SharpDX.Result __result__;
            fixed (char *szHeaderName_ = szHeaderName)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szHeaderName_, dwIndex, (void *)szHeaderValueOut, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "szURLOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::GetURL([Out] wchar_t** ppszURL)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::GetURL</unmanaged-short>
        public unsafe void GetURL(System.IntPtr szURLOut)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szURLOut, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fNullSourceOriginRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::HasNullSourceOrigin([Out] BOOL* pfNullSourceOrigin)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::HasNullSourceOrigin</unmanaged-short>
        public unsafe void HasNullSourceOrigin(out SharpDX.Mathematics.Interop.RawBool fNullSourceOriginRef)
        {
            fNullSourceOriginRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fNullSourceOriginRef_ = &fNullSourceOriginRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fNullSourceOriginRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "qwStartTimeRef">No documentation.</param>
        /// <param name = "qwStopTimeRef">No documentation.</param>
        /// <param name = "qwDurationRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::GetTimeSeekResult([Out] unsigned longlong* pqwStartTime,[Out] unsigned longlong* pqwStopTime,[Out] unsigned longlong* pqwDuration)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::GetTimeSeekResult</unmanaged-short>
        public unsafe void GetTimeSeekResult(out System.Int64 qwStartTimeRef, out System.Int64 qwStopTimeRef, out System.Int64 qwDurationRef)
        {
            SharpDX.Result __result__;
            fixed (void *qwDurationRef_ = &qwDurationRef)
                fixed (void *qwStopTimeRef_ = &qwStopTimeRef)
                    fixed (void *qwStartTimeRef_ = &qwStartTimeRef)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, qwStartTimeRef_, qwStopTimeRef_, qwDurationRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwHttpStatusRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::GetHttpStatus([Out] DWORD* pdwHttpStatus)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::GetHttpStatus</unmanaged-short>
        internal unsafe void GetHttpStatus(out System.Int32 dwHttpStatusRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwHttpStatusRef_ = &dwHttpStatusRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwHttpStatusRef_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fAtEndOfPayloadRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::GetAtEndOfPayload([Out] BOOL* pfAtEndOfPayload)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::GetAtEndOfPayload</unmanaged-short>
        internal unsafe void GetAtEndOfPayload(out SharpDX.Mathematics.Interop.RawBool fAtEndOfPayloadRef)
        {
            fAtEndOfPayloadRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fAtEndOfPayloadRef_ = &fAtEndOfPayloadRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fAtEndOfPayloadRef_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "qwTotalLengthRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::GetTotalLength([Out] unsigned longlong* pqwTotalLength)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::GetTotalLength</unmanaged-short>
        internal unsafe void GetTotalLength(out System.Int64 qwTotalLengthRef)
        {
            SharpDX.Result __result__;
            fixed (void *qwTotalLengthRef_ = &qwTotalLengthRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, qwTotalLengthRef_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "qwRangeEndRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::GetRangeEndOffset([Out] unsigned longlong* pqwRangeEnd)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::GetRangeEndOffset</unmanaged-short>
        internal unsafe void GetRangeEndOffset(out System.Int64 qwRangeEndRef)
        {
            SharpDX.Result __result__;
            fixed (void *qwRangeEndRef_ = &qwRangeEndRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, qwRangeEndRef_, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadRequest::Close()</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadRequest::Close</unmanaged-short>
        public unsafe void Close()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("71FA9A2C-53CE-4662-A132-1A7E8CBF62DB")]
    public partial class HttpDownloadSession : SharpDX.ComObject
    {
        public HttpDownloadSession(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator HttpDownloadSession(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new HttpDownloadSession(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "szServerName">No documentation.</param>
        /// <param name = "nPort">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadSession::SetServer([In] const wchar_t* szServerName,[In] DWORD nPort)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadSession::SetServer</unmanaged-short>
        public unsafe void SetServer(System.String szServerName, System.Int32 nPort)
        {
            SharpDX.Result __result__;
            fixed (char *szServerName_ = szServerName)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szServerName_, nPort, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "szObjectName">No documentation.</param>
        /// <param name = "fBypassProxyCache">No documentation.</param>
        /// <param name = "fSecure">No documentation.</param>
        /// <param name = "szVerb">No documentation.</param>
        /// <param name = "szReferrer">No documentation.</param>
        /// <param name = "requestOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadSession::CreateRequest([In] const wchar_t* szObjectName,[In] BOOL fBypassProxyCache,[In] BOOL fSecure,[In, Optional] const wchar_t* szVerb,[In, Optional] const wchar_t* szReferrer,[Out] IMFHttpDownloadRequest** ppRequest)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadSession::CreateRequest</unmanaged-short>
        public unsafe void CreateRequest(System.String szObjectName, SharpDX.Mathematics.Interop.RawBool fBypassProxyCache, SharpDX.Mathematics.Interop.RawBool fSecure, System.String szVerb, System.String szReferrer, out SharpDX.MediaFoundation.HttpDownloadRequest requestOut)
        {
            System.IntPtr requestOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (char *szReferrer_ = szReferrer)
                fixed (char *szVerb_ = szVerb)
                    fixed (char *szObjectName_ = szObjectName)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)szObjectName_, fBypassProxyCache, fSecure, (void *)szVerb_, (void *)szReferrer_, &requestOut_, (*(void ***)this._nativePointer)[4]);
            if (requestOut_ != System.IntPtr.Zero)
                requestOut = new SharpDX.MediaFoundation.HttpDownloadRequest(requestOut_);
            else
                requestOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFHttpDownloadSession::Close()</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadSession::Close</unmanaged-short>
        public unsafe void Close()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("1B4CF4B9-3A16-4115-839D-03CC5C99DF01")]
    public partial class HttpDownloadSessionProvider : SharpDX.ComObject
    {
        public HttpDownloadSessionProvider(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator HttpDownloadSessionProvider(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new HttpDownloadSessionProvider(nativePtr);
        /// <summary>
        /// <p>Applications implement this interface in order to provide custom a custom HTTP or HTTPS download implementation. Use the <strong><see cref = "SharpDX.MediaFoundation.SourceResolver"/></strong> interface to register the provider. For more information, see Using the Source Resolver. Once registered, the Microsoft Media Foundation will invoke the <strong>CreateHttpDownloadSession</strong> method of the provider  implementation to open HTTP or HTTPS URLs instead of using the default implementation.</p>
        /// </summary>
        /// <param name = "wszScheme">No documentation.</param>
        /// <param name = "downloadSessionOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <doc-id>mt781238</doc-id>
        /// <unmanaged>HRESULT IMFHttpDownloadSessionProvider::CreateHttpDownloadSession([In] const wchar_t* wszScheme,[Out] IMFHttpDownloadSession** ppDownloadSession)</unmanaged>
        /// <unmanaged-short>IMFHttpDownloadSessionProvider::CreateHttpDownloadSession</unmanaged-short>
        public unsafe void CreateHttpDownloadSession(System.String wszScheme, out SharpDX.MediaFoundation.HttpDownloadSession downloadSessionOut)
        {
            System.IntPtr downloadSessionOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (char *wszScheme_ = wszScheme)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszScheme_, &downloadSessionOut_, (*(void ***)this._nativePointer)[3]);
            if (downloadSessionOut_ != System.IntPtr.Zero)
                downloadSessionOut = new SharpDX.MediaFoundation.HttpDownloadSession(downloadSessionOut_);
            else
                downloadSessionOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a27003cf-2354-4f2a-8d6a-ab7cff15437e")]
    public partial interface IAsyncCallback : SharpDX.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("c7a4dca1-f5f0-47b6-b92b-bf0106d25791")]
    public partial interface IAsyncCallbackLogging : SharpDX.MediaFoundation.IAsyncCallback
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("EBBAF249-AFC2-4582-91C6-B60DF2E84954")]
    public partial class IAudioSourceProvider : SharpDX.ComObject
    {
        public IAudioSourceProvider(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator IAudioSourceProvider(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new IAudioSourceProvider(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwSampleCount">No documentation.</param>
        /// <param name = "dwChannelCountRef">No documentation.</param>
        /// <param name = "interleavedAudioDataRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IAudioSourceProvider::ProvideInput([In] DWORD dwSampleCount,[InOut] DWORD* pdwChannelCount,[Out, Buffer, Optional] float* pInterleavedAudioData)</unmanaged>
        /// <unmanaged-short>IAudioSourceProvider::ProvideInput</unmanaged-short>
        public unsafe void ProvideInput(System.Int32 dwSampleCount, ref System.Int32 dwChannelCountRef, System.Single[] interleavedAudioDataRef)
        {
            SharpDX.Result __result__;
            fixed (void *interleavedAudioDataRef_ = interleavedAudioDataRef)
                fixed (void *dwChannelCountRef_ = &dwChannelCountRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwSampleCount, dwChannelCountRef_, interleavedAudioDataRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ad4c1b00-4bf7-422f-9175-756693d9130d")]
    public partial interface IByteStream : SharpDX.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("65abea96-cf36-453f-af8a-705e98f16260")]
    public partial class IDMOQualityControl : SharpDX.ComObject
    {
        public IDMOQualityControl(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator IDMOQualityControl(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new IDMOQualityControl(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetNow</unmanaged>
        /// <unmanaged-short>SetNow</unmanaged-short>
        public System.Int64 Now
        {
            set => SetNow(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStatus / SetStatus</unmanaged>
        /// <unmanaged-short>GetStatus</unmanaged-short>
        public System.Int32 Status
        {
            get
            {
                GetStatus(out var __output__);
                return __output__;
            }

            set => SetStatus(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rtNow">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDMOQualityControl::SetNow([In] longlong rtNow)</unmanaged>
        /// <unmanaged-short>IDMOQualityControl::SetNow</unmanaged-short>
        internal unsafe void SetNow(System.Int64 rtNow)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, rtNow, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwFlags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDMOQualityControl::SetStatus([In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IDMOQualityControl::SetStatus</unmanaged-short>
        internal unsafe void SetStatus(System.Int32 dwFlags)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwFlags, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwFlagsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDMOQualityControl::GetStatus([Out] DWORD* pdwFlags)</unmanaged>
        /// <unmanaged-short>IDMOQualityControl::GetStatus</unmanaged-short>
        internal unsafe void GetStatus(out System.Int32 dwFlagsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwFlagsRef_ = &dwFlagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwFlagsRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("be8f4f4e-5b16-4d29-b350-7f6b5d9298ac")]
    public partial class IDMOVideoOutputOptimizations : SharpDX.ComObject
    {
        public IDMOVideoOutputOptimizations(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator IDMOVideoOutputOptimizations(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new IDMOVideoOutputOptimizations(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ulOutputStreamIndex">No documentation.</param>
        /// <param name = "dwRequestedCapabilitiesRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDMOVideoOutputOptimizations::QueryOperationModePreferences([In] ULONG ulOutputStreamIndex,[Out] DWORD* pdwRequestedCapabilities)</unmanaged>
        /// <unmanaged-short>IDMOVideoOutputOptimizations::QueryOperationModePreferences</unmanaged-short>
        public unsafe void QueryOperationModePreferences(System.Int32 ulOutputStreamIndex, out System.Int32 dwRequestedCapabilitiesRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwRequestedCapabilitiesRef_ = &dwRequestedCapabilitiesRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, ulOutputStreamIndex, dwRequestedCapabilitiesRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ulOutputStreamIndex">No documentation.</param>
        /// <param name = "dwEnabledFeatures">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDMOVideoOutputOptimizations::SetOperationMode([In] ULONG ulOutputStreamIndex,[In] DWORD dwEnabledFeatures)</unmanaged>
        /// <unmanaged-short>IDMOVideoOutputOptimizations::SetOperationMode</unmanaged-short>
        public unsafe void SetOperationMode(System.Int32 ulOutputStreamIndex, System.Int32 dwEnabledFeatures)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, ulOutputStreamIndex, dwEnabledFeatures, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>The <code>GetCurrentOperationMode</code> method retrieves the optimization features in effect.</p>
        /// </summary>
        /// <param name = "ulOutputStreamIndex"><dd> <p>Zero-based index of an output stream on the DMO.</p> </dd></param>
        /// <param name = "dwEnabledFeaturesRef"><dd> <p>Pointer to a variable that receives the current features. The returned value is a bitwise combination of zero or more flags from the <strong>DMO_VIDEO_OUTPUT_STREAM_FLAGS</strong> enumeration.</p> </dd></param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Possible values include those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong>DMO_E_INVALIDSTREAMINDEX</strong></dt> </dl> </td><td> <p>Invalid stream index</p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p><strong><c>null</c></strong> reference argument</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>dd406844</doc-id>
        /// <unmanaged>HRESULT IDMOVideoOutputOptimizations::GetCurrentOperationMode([In] ULONG ulOutputStreamIndex,[Out] DWORD* pdwEnabledFeatures)</unmanaged>
        /// <unmanaged-short>IDMOVideoOutputOptimizations::GetCurrentOperationMode</unmanaged-short>
        public unsafe void GetCurrentOperationMode(System.Int32 ulOutputStreamIndex, out System.Int32 dwEnabledFeaturesRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwEnabledFeaturesRef_ = &dwEnabledFeaturesRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, ulOutputStreamIndex, dwEnabledFeaturesRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>The <code>GetCurrentSampleRequirements</code> method retrieves the optimization features required to process the next sample, given the features already agreed to by the application.</p>
        /// </summary>
        /// <param name = "ulOutputStreamIndex"><dd> <p>Zero-based index of an output stream on the DMO.</p> </dd></param>
        /// <param name = "dwRequestedFeaturesRef"><dd> <p>Pointer to a variable that receives the required features. The returned value is a bitwise combination of zero or more flags from the <strong>DMO_VIDEO_OUTPUT_STREAM_FLAGS</strong> enumeration.</p> </dd></param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Possible values include those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong>DMO_E_INVALIDSTREAMINDEX</strong></dt> </dl> </td><td> <p>Invalid stream index</p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p><strong><c>null</c></strong> reference argument</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>After an application calls the <strong>IDMOVideoOutputOptimizations::SetOperationMode</strong> method, it must provide all the features it has agreed to. However, the DMO might not require every feature on every sample. This method enables the DMO to waive an agreed-upon feature for one sample.</p><p>Before processing a sample, the application can call this method. If the DMO does not require a given feature in order to process the next sample, it omits the corresponding flag from the <em>pdwRequestedFeatures</em> parameter. For the next sample only, the application can ignore the feature. The results of this method are valid only for the next call to the <strong>IMediaObject::ProcessOutput</strong> method.</p><p>The DMO will return only the flags that were agreed to in the <strong>SetOperationMode</strong> method. In other words, you cannot dynamically enable new features with this method.</p>
        /// </remarks>
        /// <doc-id>dd406845</doc-id>
        /// <unmanaged>HRESULT IDMOVideoOutputOptimizations::GetCurrentSampleRequirements([In] ULONG ulOutputStreamIndex,[Out] DWORD* pdwRequestedFeatures)</unmanaged>
        /// <unmanaged-short>IDMOVideoOutputOptimizations::GetCurrentSampleRequirements</unmanaged-short>
        public unsafe void GetCurrentSampleRequirements(System.Int32 ulOutputStreamIndex, out System.Int32 dwRequestedFeaturesRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwRequestedFeaturesRef_ = &dwRequestedFeaturesRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, ulOutputStreamIndex, dwRequestedFeaturesRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2c3cd98a-2bfa-4a53-9c27-5249ba64ba0f")]
    public partial class IEnumDMO : SharpDX.ComObject
    {
        public IEnumDMO(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator IEnumDMO(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new IEnumDMO(nativePtr);
        /// <summary>
        /// <p> </p><p>The <code>Next</code> method retrieves a specified number of items in the enumeration sequence.</p>
        /// </summary>
        /// <param name = "cItemsToFetch"><dd> <p>Number of items to retrieve.</p> </dd></param>
        /// <param name = "cLSIDRef"><dd> <p>Array of size <em>cItemsToFetch</em> that is filled with the CLSIDs of the enumerated DMOs.</p> </dd></param>
        /// <param name = "names"><dd> <p>Array of size <em>cItemsToFetch</em> that is filled with the friendly names of the enumerated DMOs.</p> </dd></param>
        /// <param name = "cItemsFetchedRef"><dd> <p>Pointer to a variable that receives the actual number of items retrieved. Can be <strong><c>null</c></strong> if <em>cItemsToFetch</em> equals 1.</p> </dd></param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Possible values include those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> <tr><td> <dl> <dt><strong>E_OUTOFMEMORY</strong></dt> </dl> </td><td> <p>Insufficient memory.</p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p><strong><c>null</c></strong> reference argument.</p> </td></tr> <tr><td> <dl> <dt><strong>S_FALSE</strong></dt> </dl> </td><td> <p>Retrieved fewer items than requested.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Retrieved the requested number of items.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the method succeeds, the arrays given by the <em>pCLSID</em> and <em>Names</em> parameters are filled with CLSIDs and wide-character strings. The value of *<em>pcItemsFetched</em> specifies the number of items returned in these arrays.</p><p>The method returns <see cref = "SharpDX.Result.Ok"/> if it retrieves the requested number of items (in other words, if *<em>pcItemsFetched</em> equals <em>cItemsToFetch</em>). Otherwise, it returns S_FALSE or an error code.</p><p>The caller must free the memory allocated for each string returned in the <em>Names</em> parameter, using the <strong>CoTaskMemFree</strong> function.</p>
        /// </remarks>
        /// <doc-id>dd376587</doc-id>
        /// <unmanaged>HRESULT IEnumDMO::Next([In] DWORD cItemsToFetch,[Out, Buffer] GUID* pCLSID,[Out, Buffer] wchar_t** Names,[Out] DWORD* pcItemsFetched)</unmanaged>
        /// <unmanaged-short>IEnumDMO::Next</unmanaged-short>
        public unsafe void Next(System.Int32 cItemsToFetch, System.Guid[] cLSIDRef, System.IntPtr names, out System.Int32 cItemsFetchedRef)
        {
            SharpDX.Result __result__;
            fixed (void *cItemsFetchedRef_ = &cItemsFetchedRef)
                fixed (void *cLSIDRef_ = cLSIDRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cItemsToFetch, cLSIDRef_, (void *)names, cItemsFetchedRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cItemsToSkip">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IEnumDMO::Skip([In] DWORD cItemsToSkip)</unmanaged>
        /// <unmanaged-short>IEnumDMO::Skip</unmanaged-short>
        public unsafe void Skip(System.Int32 cItemsToSkip)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cItemsToSkip, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>The <code>Reset</code> method resets the enumeration sequence to the beginning.</p>
        /// </summary>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/>.</p></returns>
        /// <doc-id>dd376588</doc-id>
        /// <unmanaged>HRESULT IEnumDMO::Reset()</unmanaged>
        /// <unmanaged-short>IEnumDMO::Reset</unmanaged-short>
        public unsafe void Reset()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "enumOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IEnumDMO::Clone([Out] IEnumDMO** ppEnum)</unmanaged>
        /// <unmanaged-short>IEnumDMO::Clone</unmanaged-short>
        public unsafe void Clone(out SharpDX.MediaFoundation.IEnumDMO enumOut)
        {
            System.IntPtr enumOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &enumOut_, (*(void ***)this._nativePointer)[6]);
            if (enumOut_ != System.IntPtr.Zero)
                enumOut = new SharpDX.MediaFoundation.IEnumDMO(enumOut_);
            else
                enumOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("59eff8b9-938c-4a26-82f2-95cb84cdc837")]
    public partial class IMediaBuffer : SharpDX.ComObject
    {
        public IMediaBuffer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator IMediaBuffer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new IMediaBuffer(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetLength</unmanaged>
        /// <unmanaged-short>SetLength</unmanaged-short>
        public System.Int32 Length
        {
            set => SetLength(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMaxLength</unmanaged>
        /// <unmanaged-short>GetMaxLength</unmanaged-short>
        public System.Int32 MaxLength
        {
            get
            {
                GetMaxLength(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cbLength">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMediaBuffer::SetLength([In] DWORD cbLength)</unmanaged>
        /// <unmanaged-short>IMediaBuffer::SetLength</unmanaged-short>
        internal unsafe void SetLength(System.Int32 cbLength)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cbLength, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cbMaxLengthRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMediaBuffer::GetMaxLength([Out] DWORD* pcbMaxLength)</unmanaged>
        /// <unmanaged-short>IMediaBuffer::GetMaxLength</unmanaged-short>
        internal unsafe void GetMaxLength(out System.Int32 cbMaxLengthRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbMaxLengthRef_ = &cbMaxLengthRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cbMaxLengthRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bufferOut">No documentation.</param>
        /// <param name = "cbLengthRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMediaBuffer::GetBufferAndLength([Out, Buffer, Optional] unsigned char** ppBuffer,[Out, Optional] DWORD* pcbLength)</unmanaged>
        /// <unmanaged-short>IMediaBuffer::GetBufferAndLength</unmanaged-short>
        public unsafe void GetBufferAndLength(System.Byte[] bufferOut, out System.Int32 cbLengthRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbLengthRef_ = &cbLengthRef)
                fixed (void *bufferOut_ = bufferOut)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bufferOut_, cbLengthRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("d8ad0f58-5494-4102-97c5-ec798e59bcf4")]
    public partial class IMediaObject : SharpDX.ComObject
    {
        public IMediaObject(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator IMediaObject(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new IMediaObject(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cInputStreamsRef">No documentation.</param>
        /// <param name = "cOutputStreamsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMediaObject::GetStreamCount([Out] DWORD* pcInputStreams,[Out] DWORD* pcOutputStreams)</unmanaged>
        /// <unmanaged-short>IMediaObject::GetStreamCount</unmanaged-short>
        public unsafe void GetStreamCount(out System.Int32 cInputStreamsRef, out System.Int32 cOutputStreamsRef)
        {
            SharpDX.Result __result__;
            fixed (void *cOutputStreamsRef_ = &cOutputStreamsRef)
                fixed (void *cInputStreamsRef_ = &cInputStreamsRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cInputStreamsRef_, cOutputStreamsRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwInputStreamIndex">No documentation.</param>
        /// <param name = "dwFlagsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMediaObject::GetInputStreamInfo([In] DWORD dwInputStreamIndex,[Out] DWORD* pdwFlags)</unmanaged>
        /// <unmanaged-short>IMediaObject::GetInputStreamInfo</unmanaged-short>
        public unsafe void GetInputStreamInfo(System.Int32 dwInputStreamIndex, out System.Int32 dwFlagsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwFlagsRef_ = &dwFlagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamIndex, dwFlagsRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>The <code>GetOutputStreamInfo</code> method retrieves information about an output stream; for example, whether the stream is discardable, and whether it uses a fixed sample size. This information never changes.</p>
        /// </summary>
        /// <param name = "dwOutputStreamIndex"><dd> <p>Zero-based index of an output stream on the DMO.</p> </dd></param>
        /// <param name = "dwFlagsRef"><dd> <p>Pointer to a variable that receives a bitwise combination of zero or more <strong>DMO_OUTPUT_STREAM_INFO_FLAGS</strong> flags.</p> </dd></param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Possible values include those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong>DMO_E_INVALIDSTREAMINDEX</strong></dt> </dl> </td><td> <p>Invalid stream index</p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p><strong><c>null</c></strong> reference argument</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>dd406955</doc-id>
        /// <unmanaged>HRESULT IMediaObject::GetOutputStreamInfo([In] DWORD dwOutputStreamIndex,[Out] DWORD* pdwFlags)</unmanaged>
        /// <unmanaged-short>IMediaObject::GetOutputStreamInfo</unmanaged-short>
        public unsafe void GetOutputStreamInfo(System.Int32 dwOutputStreamIndex, out System.Int32 dwFlagsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwFlagsRef_ = &dwFlagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputStreamIndex, dwFlagsRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>The <code>GetInputType</code> method retrieves a preferred media type for a specified input stream.</p>
        /// </summary>
        /// <param name = "dwInputStreamIndex"><dd> <p>Zero-based index of an input stream on the DMO.</p> </dd></param>
        /// <param name = "dwTypeIndex"><dd> <p>Zero-based index on the set of acceptable media types.</p> </dd></param>
        /// <param name = "mtRef"><dd> <p>Pointer to a <strong><see cref = "SharpDX.MediaFoundation.DmoMediaType"/></strong> structure allocated by the caller, or <strong><c>null</c></strong>. If this parameter is non-<strong><c>null</c></strong>, the method fills the structure with the media type. You can use the value <strong><c>null</c></strong> to test whether the type index is in range, by checking the return code.</p> </dd></param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Possible values include those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong>DMO_E_INVALIDSTREAMINDEX</strong></dt> </dl> </td><td> <p>Invalid stream index.</p> </td></tr> <tr><td> <dl> <dt><strong>DMO_E_NO_MORE_ITEMS</strong></dt> </dl> </td><td> <p>Type index is out of range.</p> </td></tr> <tr><td> <dl> <dt><strong>E_OUTOFMEMORY</strong></dt> </dl> </td><td> <p>Insufficient memory.</p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p><strong><c>null</c></strong> reference argument.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method to enumerate an input stream's preferred media types. The DMO assigns each media type an index value in order of preference. The most preferred type has an index of zero. To enumerate all the types, make successive calls while incrementing the type index until the method returns DMO_E_NO_MORE_ITEMS. The DMO is not guaranteed to enumerate every media type that it supports.</p><p>The format block in the returned type might be <strong><c>null</c></strong>. If so, the format type is GUID_NULL. Check the format type before dereferencing the format block.</p><p>If the method succeeds, call <strong>MoFreeMediaType</strong> to free the format block. (This function is also safe to call when the format block is <strong><c>null</c></strong>.)</p><p>To set the media type, call the <strong>IMediaObject::SetInputType</strong> method. Setting the media type on one stream can change another stream's preferred types. In fact, a stream might not have a preferred type until the type is set on another stream. For example, a decoder might not have a preferred output type until the input type is set. However, the DMO is not required to update its preferred types dynamically in this fashion. Thus, the types returned by this method are not guaranteed to be valid; they might fail when used in the <strong>SetInputType</strong> method.</p><p>To test whether a particular media type is acceptable, call <strong>SetInputType</strong> with the DMO_SET_TYPEF_TEST_ONLY flag.</p><p>To test whether the <em>dwTypeIndex</em> parameter is in range, set <em>pmt</em> to <strong><c>null</c></strong>. The method returns <see cref = "SharpDX.Result.Ok"/> if the index is in range, or DMO_E_NO_MORE_ITEMS if the index is out of range.</p>
        /// </remarks>
        /// <doc-id>dd406952</doc-id>
        /// <unmanaged>HRESULT IMediaObject::GetInputType([In] DWORD dwInputStreamIndex,[In] DWORD dwTypeIndex,[Out, Optional] DMO_MEDIA_TYPE* pmt)</unmanaged>
        /// <unmanaged-short>IMediaObject::GetInputType</unmanaged-short>
        public unsafe void GetInputType(System.Int32 dwInputStreamIndex, System.Int32 dwTypeIndex, out SharpDX.MediaFoundation.DmoMediaType mtRef)
        {
            SharpDX.MediaFoundation.DmoMediaType.__Native mtRef_ = default (SharpDX.MediaFoundation.DmoMediaType.__Native);
            mtRef = default (SharpDX.MediaFoundation.DmoMediaType);
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamIndex, dwTypeIndex, &mtRef_, (*(void ***)this._nativePointer)[6]);
            mtRef.__MarshalFrom(ref mtRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwOutputStreamIndex">No documentation.</param>
        /// <param name = "dwTypeIndex">No documentation.</param>
        /// <param name = "mtRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMediaObject::GetOutputType([In] DWORD dwOutputStreamIndex,[In] DWORD dwTypeIndex,[Out, Optional] DMO_MEDIA_TYPE* pmt)</unmanaged>
        /// <unmanaged-short>IMediaObject::GetOutputType</unmanaged-short>
        public unsafe void GetOutputType(System.Int32 dwOutputStreamIndex, System.Int32 dwTypeIndex, out SharpDX.MediaFoundation.DmoMediaType mtRef)
        {
            SharpDX.MediaFoundation.DmoMediaType.__Native mtRef_ = default (SharpDX.MediaFoundation.DmoMediaType.__Native);
            mtRef = default (SharpDX.MediaFoundation.DmoMediaType);
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputStreamIndex, dwTypeIndex, &mtRef_, (*(void ***)this._nativePointer)[7]);
            mtRef.__MarshalFrom(ref mtRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>The <code>SetInputType</code> method sets the media type on an input stream, or tests whether a media type is acceptable.</p>
        /// </summary>
        /// <param name = "dwInputStreamIndex"><dd> <p>Zero-based index of an input stream on the DMO.</p> </dd></param>
        /// <param name = "mtRef"><dd> <p>Pointer to a <strong><see cref = "SharpDX.MediaFoundation.DmoMediaType"/></strong> structure that specifies the media type.</p> </dd></param>
        /// <param name = "dwFlags"><dd> <p>Bitwise combination of zero or more flags from the <strong>DMO_SET_TYPE_FLAGS</strong> enumeration.</p> </dd></param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Possible values include those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong>DMO_E_INVALIDSTREAMINDEX</strong></dt> </dl> </td><td> <p>Invalid stream index</p> </td></tr> <tr><td> <dl> <dt><strong>DMO_E_TYPE_NOT_ACCEPTED</strong></dt> </dl> </td><td> <p>Media type was not accepted</p> </td></tr> <tr><td> <dl> <dt><strong>S_FALSE</strong></dt> </dl> </td><td> <p>Media type is not acceptable</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Media type was set successfully, or is acceptable</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method to test, set, or clear the media type on an input stream:</p><ul> <li>To test the media type without setting it, use the DMO_SET_TYPEF_TEST_ONLY flag. If the media type is not acceptable, the method returns S_FALSE.</li> <li>To set the media type, set <em>dwFlags</em> to zero. If the media type is not acceptable, the method returns DMO_E_TYPE_NOT_ACCEPTED.</li> <li>To clear the current media type (if any), use the DMO_SET_TYPEF_CLEAR flag and set <em>pmt</em> to <strong><c>null</c></strong>. When the method returns, the stream no longer has a media type. The DMO cannot process samples until the application sets a new media type.</li> </ul><p>The media types that are currently set on other streams can affect whether the media type is acceptable.</p>
        /// </remarks>
        /// <doc-id>dd406962</doc-id>
        /// <unmanaged>HRESULT IMediaObject::SetInputType([In] DWORD dwInputStreamIndex,[In, Optional] const DMO_MEDIA_TYPE* pmt,[In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IMediaObject::SetInputType</unmanaged-short>
        public unsafe void SetInputType(System.Int32 dwInputStreamIndex, SharpDX.MediaFoundation.DmoMediaType? mtRef, System.Int32 dwFlags)
        {
            SharpDX.MediaFoundation.DmoMediaType.__Native mtRef_ = default (SharpDX.MediaFoundation.DmoMediaType.__Native);
            SharpDX.Result __result__;
            if (mtRef != null)
                mtRef.Value.__MarshalTo(ref mtRef_);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamIndex, mtRef == null ? (void *)0 : &mtRef_, dwFlags, (*(void ***)this._nativePointer)[8]);
            if (mtRef != null)
                mtRef.Value.__MarshalFree(ref mtRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwOutputStreamIndex">No documentation.</param>
        /// <param name = "mtRef">No documentation.</param>
        /// <param name = "dwFlags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMediaObject::SetOutputType([In] DWORD dwOutputStreamIndex,[In, Optional] const DMO_MEDIA_TYPE* pmt,[In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IMediaObject::SetOutputType</unmanaged-short>
        public unsafe void SetOutputType(System.Int32 dwOutputStreamIndex, SharpDX.MediaFoundation.DmoMediaType? mtRef, System.Int32 dwFlags)
        {
            SharpDX.MediaFoundation.DmoMediaType.__Native mtRef_ = default (SharpDX.MediaFoundation.DmoMediaType.__Native);
            SharpDX.Result __result__;
            if (mtRef != null)
                mtRef.Value.__MarshalTo(ref mtRef_);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputStreamIndex, mtRef == null ? (void *)0 : &mtRef_, dwFlags, (*(void ***)this._nativePointer)[9]);
            if (mtRef != null)
                mtRef.Value.__MarshalFree(ref mtRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>The <code>GetInputCurrentType</code> method retrieves the media type that was set for an input stream, if any.</p>
        /// </summary>
        /// <param name = "dwInputStreamIndex"><dd> <p>Zero-based index of an input stream on the DMO.</p> </dd></param>
        /// <param name = "mtRef"><dd> <p>Pointer to a <strong><see cref = "SharpDX.MediaFoundation.DmoMediaType"/></strong> structure allocated by the caller. The method fills the structure with the media type.</p> </dd></param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Possible values include those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong>DMO_E_INVALIDSTREAMINDEX</strong></dt> </dl> </td><td> <p>Invalid stream index.</p> </td></tr> <tr><td> <dl> <dt><strong>DMO_E_TYPE_NOT_SET</strong></dt> </dl> </td><td> <p>Media type was not set.</p> </td></tr> <tr><td> <dl> <dt><strong>E_OUTOFMEMORY</strong></dt> </dl> </td><td> <p>Insufficient memory.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The caller must set the media type for the stream before calling this method. To set the media type, call the <strong>IMediaObject::SetInputType</strong> method.</p><p>If the method succeeds, call <strong>MoFreeMediaType</strong> to free the format block.</p>
        /// </remarks>
        /// <doc-id>dd406947</doc-id>
        /// <unmanaged>HRESULT IMediaObject::GetInputCurrentType([In] DWORD dwInputStreamIndex,[Out] DMO_MEDIA_TYPE* pmt)</unmanaged>
        /// <unmanaged-short>IMediaObject::GetInputCurrentType</unmanaged-short>
        public unsafe void GetInputCurrentType(System.Int32 dwInputStreamIndex, out SharpDX.MediaFoundation.DmoMediaType mtRef)
        {
            SharpDX.MediaFoundation.DmoMediaType.__Native mtRef_ = default (SharpDX.MediaFoundation.DmoMediaType.__Native);
            mtRef = default (SharpDX.MediaFoundation.DmoMediaType);
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamIndex, &mtRef_, (*(void ***)this._nativePointer)[10]);
            mtRef.__MarshalFrom(ref mtRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwOutputStreamIndex">No documentation.</param>
        /// <param name = "mtRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMediaObject::GetOutputCurrentType([In] DWORD dwOutputStreamIndex,[Out] DMO_MEDIA_TYPE* pmt)</unmanaged>
        /// <unmanaged-short>IMediaObject::GetOutputCurrentType</unmanaged-short>
        public unsafe void GetOutputCurrentType(System.Int32 dwOutputStreamIndex, out SharpDX.MediaFoundation.DmoMediaType mtRef)
        {
            SharpDX.MediaFoundation.DmoMediaType.__Native mtRef_ = default (SharpDX.MediaFoundation.DmoMediaType.__Native);
            mtRef = default (SharpDX.MediaFoundation.DmoMediaType);
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputStreamIndex, &mtRef_, (*(void ***)this._nativePointer)[11]);
            mtRef.__MarshalFrom(ref mtRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>The <code>GetInputSizeInfo</code> method retrieves the buffer requirements for a specified input stream.</p>
        /// </summary>
        /// <param name = "dwInputStreamIndex"><dd> <p>Zero-based index of an input stream on the DMO.</p> </dd></param>
        /// <param name = "cbSizeRef"><dd> <p>Pointer to a variable that receives the minimum size of an input buffer for this stream, in bytes.</p> </dd></param>
        /// <param name = "cbMaxLookaheadRef"><dd> <p>Pointer to a variable that receives the maximum amount of data that the DMO will hold for lookahead, in bytes. If the DMO does not perform lookahead on the stream, the value is zero.</p> </dd></param>
        /// <param name = "cbAlignmentRef"><dd> <p>Pointer to a variable that receives the required buffer alignment, in bytes. If the input stream has no alignment requirement, the value is 1.</p> </dd></param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Possible values include those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong>DMO_E_INVALIDSTREAMINDEX</strong></dt> </dl> </td><td> <p>Invalid stream index.</p> </td></tr> <tr><td> <dl> <dt><strong>DMO_E_TYPE_NOT_SET</strong></dt> </dl> </td><td> <p>Media type was not set.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The buffer requirements may depend on the media types of the various streams. Before calling this method, set the media type of each stream by calling the <strong>IMediaObject::SetInputType</strong> and <strong>IMediaObject::SetOutputType</strong> methods. If the media types have not been set, this method might return an error.</p><p>If the DMO performs lookahead on the input stream, it returns the DMO_INPUT_STREAMF_HOLDS_BUFFERS flag in the <strong>IMediaObject::GetInputStreamInfo</strong> method. During processing, the DMO holds up to the number of bytes indicated by the <em>pcbMaxLookahead</em> parameter. The application must allocate enough buffers for the DMO to hold this much data.</p><p>A buffer is <em>aligned</em> if the buffer's start address is a multiple of <em>*pcbAlignment</em>. The alignment must be a power of two. Depending on the microprocessor, reads and writes to an aligned buffer might be faster than to an unaligned buffer. Also, some microprocessors do not support unaligned reads and writes.</p>
        /// </remarks>
        /// <doc-id>dd406949</doc-id>
        /// <unmanaged>HRESULT IMediaObject::GetInputSizeInfo([In] DWORD dwInputStreamIndex,[Out] DWORD* pcbSize,[Out] DWORD* pcbMaxLookahead,[Out] DWORD* pcbAlignment)</unmanaged>
        /// <unmanaged-short>IMediaObject::GetInputSizeInfo</unmanaged-short>
        public unsafe void GetInputSizeInfo(System.Int32 dwInputStreamIndex, out System.Int32 cbSizeRef, out System.Int32 cbMaxLookaheadRef, out System.Int32 cbAlignmentRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbAlignmentRef_ = &cbAlignmentRef)
                fixed (void *cbMaxLookaheadRef_ = &cbMaxLookaheadRef)
                    fixed (void *cbSizeRef_ = &cbSizeRef)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamIndex, cbSizeRef_, cbMaxLookaheadRef_, cbAlignmentRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwOutputStreamIndex">No documentation.</param>
        /// <param name = "cbSizeRef">No documentation.</param>
        /// <param name = "cbAlignmentRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMediaObject::GetOutputSizeInfo([In] DWORD dwOutputStreamIndex,[Out] DWORD* pcbSize,[Out] DWORD* pcbAlignment)</unmanaged>
        /// <unmanaged-short>IMediaObject::GetOutputSizeInfo</unmanaged-short>
        public unsafe void GetOutputSizeInfo(System.Int32 dwOutputStreamIndex, out System.Int32 cbSizeRef, out System.Int32 cbAlignmentRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbAlignmentRef_ = &cbAlignmentRef)
                fixed (void *cbSizeRef_ = &cbSizeRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputStreamIndex, cbSizeRef_, cbAlignmentRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwInputStreamIndex">No documentation.</param>
        /// <param name = "rtMaxLatencyRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMediaObject::GetInputMaxLatency([In] DWORD dwInputStreamIndex,[Out] longlong* prtMaxLatency)</unmanaged>
        /// <unmanaged-short>IMediaObject::GetInputMaxLatency</unmanaged-short>
        public unsafe void GetInputMaxLatency(System.Int32 dwInputStreamIndex, out System.Int64 rtMaxLatencyRef)
        {
            SharpDX.Result __result__;
            fixed (void *rtMaxLatencyRef_ = &rtMaxLatencyRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamIndex, rtMaxLatencyRef_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwInputStreamIndex">No documentation.</param>
        /// <param name = "rtMaxLatency">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMediaObject::SetInputMaxLatency([In] DWORD dwInputStreamIndex,[In] longlong rtMaxLatency)</unmanaged>
        /// <unmanaged-short>IMediaObject::SetInputMaxLatency</unmanaged-short>
        public unsafe void SetInputMaxLatency(System.Int32 dwInputStreamIndex, System.Int64 rtMaxLatency)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamIndex, rtMaxLatency, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>The <code>Flush</code> method flushes all internally buffered data.</p>
        /// </summary>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> if successful. Otherwise, returns an <strong><see cref = "SharpDX.Result"/></strong> value indicating the cause of the error.</p></returns>
        /// <remarks>
        /// <p>The DMO performs the following actions when this method is called:</p><ul> <li>Releases any <strong><see cref = "SharpDX.MediaFoundation.IMediaBuffer"/></strong> references it holds.</li> <li>Discards any values that specify the time stamp or sample length for a media buffer.</li> <li>Reinitializes any internal states that depend on the contents of a media sample.</li> </ul><p>Media types, maximum latency, and locked state do not change.</p><p>When the method returns, every input stream accepts data. Output streams cannot produce any data until the application calls the <strong>IMediaObject::ProcessInput</strong> method on at least one input stream.</p>
        /// </remarks>
        /// <doc-id>dd406945</doc-id>
        /// <unmanaged>HRESULT IMediaObject::Flush()</unmanaged>
        /// <unmanaged-short>IMediaObject::Flush</unmanaged-short>
        public unsafe void Flush()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>The <code>Discontinuity</code> method signals a discontinuity on the specified input stream.</p>
        /// </summary>
        /// <param name = "dwInputStreamIndex"><dd> <p>Zero-based index of an input stream on the DMO.</p> </dd></param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Possible values include those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong>DMO_E_INVALIDSTREAMINDEX</strong></dt> </dl> </td><td> <p>Invalid stream index</p> </td></tr> <tr><td> <dl> <dt><strong>DMO_E_NOTACCEPTING</strong></dt> </dl> </td><td> <p>The DMO is not accepting input.</p> </td></tr> <tr><td> <dl> <dt><strong>DMO_E_TYPE_NOT_SET</strong></dt> </dl> </td><td> <p>The input and output types have not been set.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>A discontinuity represents a break in the input. A discontinuity might occur because no more data is expected, the format is changing, or there is a gap in the data. After a discontinuity, the DMO does not accept further input on that stream until all pending data has been processed. The application should call the <strong>IMediaObject::ProcessOutput</strong> method until none of the streams returns the DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE flag.</p><p>This method might fail if it is called before the client sets the input and output types on the DMO.</p>
        /// </remarks>
        /// <doc-id>dd406944</doc-id>
        /// <unmanaged>HRESULT IMediaObject::Discontinuity([In] DWORD dwInputStreamIndex)</unmanaged>
        /// <unmanaged-short>IMediaObject::Discontinuity</unmanaged-short>
        public unsafe void Discontinuity(System.Int32 dwInputStreamIndex)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamIndex, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMediaObject::AllocateStreamingResources()</unmanaged>
        /// <unmanaged-short>IMediaObject::AllocateStreamingResources</unmanaged-short>
        public unsafe void AllocateStreamingResources()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMediaObject::FreeStreamingResources()</unmanaged>
        /// <unmanaged-short>IMediaObject::FreeStreamingResources</unmanaged-short>
        public unsafe void FreeStreamingResources()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwInputStreamIndex">No documentation.</param>
        /// <param name = "dwFlags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMediaObject::GetInputStatus([In] DWORD dwInputStreamIndex,[Out] DWORD* dwFlags)</unmanaged>
        /// <unmanaged-short>IMediaObject::GetInputStatus</unmanaged-short>
        public unsafe void GetInputStatus(System.Int32 dwInputStreamIndex, out System.Int32 dwFlags)
        {
            SharpDX.Result __result__;
            fixed (void *dwFlags_ = &dwFlags)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamIndex, dwFlags_, (*(void ***)this._nativePointer)[20]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>The <code>ProcessInput</code> method delivers a buffer to the specified input stream.</p>
        /// </summary>
        /// <param name = "dwInputStreamIndex"><dd> <p>Zero-based index of an input stream on the DMO.</p> </dd></param>
        /// <param name = "bufferRef"><dd> <p>Pointer to the buffer's <strong><see cref = "SharpDX.MediaFoundation.IMediaBuffer"/></strong> interface.</p> </dd></param>
        /// <param name = "dwFlags"><dd> <p>Bitwise combination of zero or more flags from the <strong>DMO_INPUT_DATA_BUFFER_FLAGS</strong> enumeration.</p> </dd></param>
        /// <param name = "rtTimestamp"><dd> <p>Time stamp that specifies the start time of the data in the buffer. If the buffer has a valid time stamp, set the DMO_INPUT_DATA_BUFFERF_TIME flag in the <em>dwFlags</em> parameter. Otherwise, the DMO ignores this value.</p> </dd></param>
        /// <param name = "rtTimelength"><dd> <p>Reference time specifying the duration of the data in the buffer. If this value is valid, set the DMO_INPUT_DATA_BUFFERF_TIMELENGTH flag in the <em>dwFlags</em> parameter. Otherwise, the DMO ignores this value.</p> </dd></param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Possible values include those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong>DMO_E_INVALIDSTREAMINDEX</strong></dt> </dl> </td><td> <p>Invalid stream index.</p> </td></tr> <tr><td> <dl> <dt><strong>DMO_E_NOTACCEPTING</strong></dt> </dl> </td><td> <p>Data cannot be accepted.</p> </td></tr> <tr><td> <dl> <dt><strong>S_FALSE</strong></dt> </dl> </td><td> <p>No output to process.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The input buffer specified in the <em>pBuffer</em> parameter is read-only. The DMO will not modify the data in this buffer. All write operations occur on the output buffers, which are given in a separate call to the <strong>IMediaObject::ProcessOutput</strong> method.</p><p>If the DMO does not process all the data in the buffer, it keeps a reference count on the buffer. It releases the buffer once it has generated all the output, unless it needs to perform lookahead on the data. (To determine whether a DMO performs lookahead, call the <strong>IMediaObject::GetInputStreamInfo</strong> method.)</p><p>If this method returns DMO_E_NOTACCEPTING, call <strong>ProcessOutput</strong> until the input stream can accept more data. To determine whether the stream can accept more data, call the <strong>IMediaObject::GetInputStatus</strong> method.</p><p>If the method returns S_FALSE, no output was generated from this input and the application does not need to call <strong>ProcessOutput</strong>. However, a DMO is not required to return S_FALSE in this situation; it might return <see cref = "SharpDX.Result.Ok"/>.</p>
        /// </remarks>
        /// <doc-id>dd406959</doc-id>
        /// <unmanaged>HRESULT IMediaObject::ProcessInput([In] DWORD dwInputStreamIndex,[In] IMediaBuffer* pBuffer,[In] DWORD dwFlags,[In] longlong rtTimestamp,[In] longlong rtTimelength)</unmanaged>
        /// <unmanaged-short>IMediaObject::ProcessInput</unmanaged-short>
        public unsafe void ProcessInput(System.Int32 dwInputStreamIndex, SharpDX.MediaFoundation.IMediaBuffer bufferRef, System.Int32 dwFlags, System.Int64 rtTimestamp, System.Int64 rtTimelength)
        {
            System.IntPtr bufferRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            bufferRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IMediaBuffer>(bufferRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamIndex, (void *)bufferRef_, dwFlags, rtTimestamp, rtTimelength, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>The <code>ProcessOutput</code> method generates output from the current input data.</p>
        /// </summary>
        /// <param name = "dwFlags"><dd> <p>Bitwise combination of zero or more flags from the <strong>DMO_PROCESS_OUTPUT_FLAGS</strong> enumeration.</p> </dd></param>
        /// <param name = "cOutputBufferCount"><dd> <p>Number of output buffers.</p> </dd></param>
        /// <param name = "outputBuffersRef"><dd> <p>Pointer to an array of <strong><see cref = "SharpDX.MediaFoundation.DmoOutputDataBuffer"/></strong> structures containing the output buffers. Specify the size of the array in the <em>cOutputBufferCount</em> parameter.</p> </dd></param>
        /// <param name = "dwStatusRef"><dd> <p>Pointer to a variable that receives a reserved value (zero). The application should ignore this value.</p> </dd></param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Possible values include those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong>E_FAIL</strong></dt> </dl> </td><td> <p>Failure</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid argument</p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p><strong><c>null</c></strong> reference argument</p> </td></tr> <tr><td> <dl> <dt><strong>S_FALSE</strong></dt> </dl> </td><td> <p>No output was generated</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The <em>pOutputBuffers</em> parameter points to an array of <strong><see cref = "SharpDX.MediaFoundation.DmoOutputDataBuffer"/></strong> structures. The application must allocate one structure for each output stream. To determine the number of output streams, call the <strong>IMediaObject::GetStreamCount</strong> method. Set the <em>cOutputBufferCount</em> parameter to this number.</p><p>Each <strong><see cref = "SharpDX.MediaFoundation.DmoOutputDataBuffer"/></strong> structure contains a reference to a buffer's <strong><see cref = "SharpDX.MediaFoundation.IMediaBuffer"/></strong> interface. The application allocates these buffers. The other members of the structure are status fields. The DMO sets these fields if the method succeeds. If the method fails, their values are undefined.</p><p>When the application calls <code>ProcessOutput</code>, the DMO processes as much input data as possible. It writes the output data to the output buffers, starting from the end of the data in each buffer. (To find the end of the data, call the <strong>IMediaBuffer::GetBufferAndLength</strong> method.) The DMO never holds a reference count on an output buffer.</p><p>If the DMO fills an entire output buffer and still has input data to process, the DMO returns the DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE flag in the <strong><see cref = "SharpDX.MediaFoundation.DmoOutputDataBuffer"/></strong> structure. The application should check for this flag by testing the <strong>dwStatus</strong> member of each structure.</p><p>If the method returns S_FALSE, no output was generated. However, a DMO is not required to return S_FALSE in this situation; it might return <see cref = "SharpDX.Result.Ok"/>.</p><p><strong>Discarding data:</strong></p><p>You can discard data from a stream by setting the DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER flag in the <em>dwFlags</em> parameter. For each stream that you want to discard, set the <strong>pBuffer</strong> member of the <strong><see cref = "SharpDX.MediaFoundation.DmoOutputDataBuffer"/></strong> structure to <strong><c>null</c></strong>.</p><p>For each stream in which <strong>pBuffer</strong> is <strong><c>null</c></strong>:</p><ul> <li>If the DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER flag is set, and the stream is discardable or optional, the DMO discards the data.</li> <li>If the flag is set but the stream is neither discardable nor optional, the DMO discards the data if possible. It is not guaranteed to discard the data.</li> <li>If the flag is not set, the DMO does not produce output data for that stream, but does not discard the data.</li> </ul><p>To check whether a stream is discardable or optional, call the <strong>IMediaObject::GetOutputStreamInfo</strong> method.</p>
        /// </remarks>
        /// <doc-id>dd406960</doc-id>
        /// <unmanaged>HRESULT IMediaObject::ProcessOutput([In] DWORD dwFlags,[In] DWORD cOutputBufferCount,[Out, Buffer] DMO_OUTPUT_DATA_BUFFER* pOutputBuffers,[Out] DWORD* pdwStatus)</unmanaged>
        /// <unmanaged-short>IMediaObject::ProcessOutput</unmanaged-short>
        public unsafe void ProcessOutput(System.Int32 dwFlags, System.Int32 cOutputBufferCount, SharpDX.MediaFoundation.DmoOutputDataBuffer[] outputBuffersRef, out System.Int32 dwStatusRef)
        {
            SharpDX.MediaFoundation.DmoOutputDataBuffer.__Native[] outputBuffersRef_ = new SharpDX.MediaFoundation.DmoOutputDataBuffer.__Native[outputBuffersRef.Length];
            SharpDX.Result __result__;
            fixed (void *dwStatusRef_ = &dwStatusRef)
                fixed (void *_outputBuffersRef = outputBuffersRef_)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwFlags, cOutputBufferCount, _outputBuffersRef, dwStatusRef_, (*(void ***)this._nativePointer)[22]);
            for (int i = 0; i < outputBuffersRef.Length; ++i)
                outputBuffersRef[i].__MarshalFrom(ref (outputBuffersRef_)[i]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>The <code>Lock</code> method acquires or releases a lock on the DMO. Call this method to keep the DMO serialized when performing multiple operations.</p>
        /// </summary>
        /// <param name = "bLock"><dd> <p>Value that specifies whether to acquire or release the lock. If the value is non-zero, a lock is acquired. If the value is zero, the lock is released.</p> </dd></param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Possible values include those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong>E_FAIL</strong></dt> </dl> </td><td> <p>Failure</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method prevents other threads from calling methods on the DMO. If another thread calls a method on the DMO, the thread blocks until the lock is released.</p><p>If you are using the Active Template Library (ATL) to implement a DMO, the name of the Lock method conflicts with the <strong>CComObjectRootEx::Lock</strong> method. To work around this problem, define the preprocessor symbol FIX_LOCK_NAME before including the header file Dmo.h:</p><pre> #define FIX_LOCK_NAME
        /// #include &lt;dmo.h&gt;
        /// </pre><p>This directive causes the preprocessor to rename the <strong><see cref = "SharpDX.MediaFoundation.IMediaObject"/></strong> method to <em>DMOLock</em>. In your DMO, implement the method as <em>DMOLock</em>. In your implementation, call the ATL <strong>Lock</strong> or <strong>Unlock</strong> method, depending on the value of <em>bLock</em>. Applications can still invoke the method using the name <em>Lock</em> because the vtable order does not change.</p>
        /// </remarks>
        /// <doc-id>dd406958</doc-id>
        /// <unmanaged>HRESULT IMediaObject::Lock([In] LONG bLock)</unmanaged>
        /// <unmanaged-short>IMediaObject::Lock</unmanaged-short>
        public unsafe void Lock(System.Int32 bLock)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bLock, (*(void ***)this._nativePointer)[23]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("651b9ad0-0fc7-4aa9-9538-d89931010741")]
    public partial class IMediaObjectInPlace : SharpDX.ComObject
    {
        public IMediaObjectInPlace(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator IMediaObjectInPlace(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new IMediaObjectInPlace(nativePtr);
        /// <summary>
        /// <p> </p><p>The <code>GetLatency</code> method retrieves the latency introduced by this DMO.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method returns the average time required to process each buffer. This value usually depends on factors in the run-time environment, such as the processor speed and the CPU load. One possible way to implement this method is for the DMO to keep a running average based on historical data.</p>
        /// </remarks>
        /// <doc-id>dd406941</doc-id>
        /// <unmanaged>GetLatency</unmanaged>
        /// <unmanaged-short>GetLatency</unmanaged-short>
        public System.Int64 Latency
        {
            get
            {
                GetLatency(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ulSize">No documentation.</param>
        /// <param name = "dataRef">No documentation.</param>
        /// <param name = "refTimeStart">No documentation.</param>
        /// <param name = "dwFlags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMediaObjectInPlace::Process([In] ULONG ulSize,[Out, Buffer] unsigned char* pData,[In] longlong refTimeStart,[In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IMediaObjectInPlace::Process</unmanaged-short>
        public unsafe void Process(System.Int32 ulSize, System.Byte[] dataRef, System.Int64 refTimeStart, System.Int32 dwFlags)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, ulSize, dataRef_, refTimeStart, dwFlags, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>The <code>Clone</code> method creates a copy of the DMO in its current state.</p>
        /// </summary>
        /// <param name = "mediaObjectOut"><dd> <p>Address of a reference to receive the new DMO's <strong><see cref = "SharpDX.MediaFoundation.IMediaObjectInPlace"/></strong> interface.</p> </dd></param>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> if successful. Otherwise, returns an <strong><see cref = "SharpDX.Result"/></strong> value indicating the cause of the error.</p></returns>
        /// <remarks>
        /// <p>If the method succeeds, the <strong><see cref = "SharpDX.MediaFoundation.IMediaObjectInPlace"/></strong> interface that it returns has an outstanding reference count. Be sure to release the interface when you are finished using it.</p>
        /// </remarks>
        /// <doc-id>dd406940</doc-id>
        /// <unmanaged>HRESULT IMediaObjectInPlace::Clone([Out] IMediaObjectInPlace** ppMediaObject)</unmanaged>
        /// <unmanaged-short>IMediaObjectInPlace::Clone</unmanaged-short>
        public unsafe void Clone(out SharpDX.MediaFoundation.IMediaObjectInPlace mediaObjectOut)
        {
            System.IntPtr mediaObjectOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &mediaObjectOut_, (*(void ***)this._nativePointer)[4]);
            if (mediaObjectOut_ != System.IntPtr.Zero)
                mediaObjectOut = new SharpDX.MediaFoundation.IMediaObjectInPlace(mediaObjectOut_);
            else
                mediaObjectOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>The <code>GetLatency</code> method retrieves the latency introduced by this DMO.</p>
        /// </summary>
        /// <param name = "latencyTimeRef"><dd> <p>Pointer to a variable that receives the latency, in 100-nanosecond units.</p> </dd></param>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> if successful. Otherwise, returns an <strong><see cref = "SharpDX.Result"/></strong> value indicating the cause of the error.</p></returns>
        /// <remarks>
        /// <p>This method returns the average time required to process each buffer. This value usually depends on factors in the run-time environment, such as the processor speed and the CPU load. One possible way to implement this method is for the DMO to keep a running average based on historical data.</p>
        /// </remarks>
        /// <doc-id>dd406941</doc-id>
        /// <unmanaged>HRESULT IMediaObjectInPlace::GetLatency([Out] longlong* pLatencyTime)</unmanaged>
        /// <unmanaged-short>IMediaObjectInPlace::GetLatency</unmanaged-short>
        internal unsafe void GetLatency(out System.Int64 latencyTimeRef)
        {
            SharpDX.Result __result__;
            fixed (void *latencyTimeRef_ = &latencyTimeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, latencyTimeRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("D19F8E98-B126-4446-890C-5DCB7AD71453")]
    public partial class InputTrustAuthority : SharpDX.ComObject
    {
        public InputTrustAuthority(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator InputTrustAuthority(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new InputTrustAuthority(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves a decrypter transform.</p>
        /// </summary>
        /// <param name = "riid"><dd> <p>Interface identifier (IID) of the interface being requested. Currently this value must be IID_IMFTransform, which requests the <strong><see cref = "SharpDX.MediaFoundation.Transform"/></strong> interface.</p> </dd></param>
        /// <param name = "vOut"><dd> <p>Receives a reference to the interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOINTERFACE</strong></dt> </dl> </td><td> <p>The decrypter does not support the requested interface.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotProtected"/></strong></dt> </dl> </td><td> <p>This input trust authority (ITA) does not provide a decrypter.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The decrypter should be created in a disabled state, where any calls to <strong>IMFTransform::ProcessOutput</strong> automatically fail. After the input trust authority (ITA) has verified that it is running inside the protected media path (PMP), the ITA should enable the decrypter.</p><p>An ITA is not required to provide a decrypter. If the source content is not encrypted, the method should return <see cref = "NotProtected"/>. The PMP will then proceed without using a decrypter for that stream.</p><p>The ITA must create a new instance of its decrypter for each call to <strong>GetDecrypter</strong>. Do not return multiple references to the same decrypter. They must be separate instances because the Media Session might place them in two different branches of the topology.</p>
        /// </remarks>
        /// <doc-id>bb970385</doc-id>
        /// <unmanaged>HRESULT IMFInputTrustAuthority::GetDecrypter([In] const GUID&amp; riid,[Out] void** ppv)</unmanaged>
        /// <unmanaged-short>IMFInputTrustAuthority::GetDecrypter</unmanaged-short>
        public unsafe void GetDecrypter(System.Guid riid, out System.IntPtr vOut)
        {
            SharpDX.Result __result__;
            fixed (void *vOut_ = &vOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &riid, vOut_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Requests permission to perform a specified action on the stream.</p>
        /// </summary>
        /// <param name = "action"><dd> <p>The requested action, specified as a member of the <strong><see cref = "SharpDX.MediaFoundation.PolicymanagerAction"/></strong> enumeration.</p> </dd></param>
        /// <param name = "contentEnablerActivateOut"><dd> <p>Receives the value <strong><c>null</c></strong> or a reference to the <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> interface. The <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> interface is used to create a content enabler object. The caller must release the interface. For more information, see Remarks.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The user has permission to perform this action.</p> </td></tr> <tr><td> <dl> <dt><strong>NS_E_DRM_NEEDS_INDIVIDUALIZATION</strong></dt> </dl> </td><td> <p>The user must individualize the application.</p> </td></tr> <tr><td> <dl> <dt><strong>NS_E_LICENSE_REQUIRED</strong></dt> </dl> </td><td> <p>The user must obtain a license.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method verifies whether the user has permission to perform a specified action on the stream. The ITA does any work needed to verify the user's right to perform the action, such as checking licenses.</p><p>To verify the user's rights, the ITA might need to perform additional steps that require interaction with the user or consent from the user. For example, it might need to acquire a new license or individualize a DRM component. In that case, the ITA creates an activation object for a content enabler and returns the activation object's <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> interface in the <em>ppContentEnablerActivate</em> parameter. The activation object is responsible for creating a content enabler that exposes the <strong><see cref = "SharpDX.MediaFoundation.ContentEnabler"/></strong> interface. The content enabler is used as follows:</p><ol> <li> <p>The Media Session returns the <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> reference to the application.</p> </li> <li> <p>The application calls <strong>IMFActivate::ActivateObject</strong> to activate the content enabler.</p> </li> <li> <p>The application calls <strong><see cref = "SharpDX.MediaFoundation.ContentEnabler"/></strong> methods to perform whatever actions are needed, such as individualization or obtaining a license. The content enabler object must encapsulate this functionality through the <strong><see cref = "SharpDX.MediaFoundation.ContentEnabler"/></strong> interface.</p> </li> <li> <p>The Media Session calls <strong>RequestAccess</strong> again.</p> </li> </ol><p>The return value signals whether the user has permission to perform the action:</p><ul> <li> <p>If the user already has permission to perform the action, the method returns <see cref = "SharpDX.Result.Ok"/> and sets *<em>ppContentEnablerActivate</em> to <strong><c>null</c></strong>.</p> </li> <li> <p>If the user does not have permission, the method returns a failure code and sets *<em>ppContentEnablerActivate</em> to <strong><c>null</c></strong>.</p> </li> <li> <p>If the ITA must perform additional steps that require interaction with the user, the method returns a failure code and returns the content enabler's <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> reference in <em>ppContentEnablerActivate</em>.</p> </li> </ul><p>The Media Session will not allow the action unless this method returns <see cref = "SharpDX.Result.Ok"/>. However, a return value of <see cref = "SharpDX.Result.Ok"/> does not guarantee that the action will be performed, because some other failure might occur after this method is called. When the action is definitely about to happen, the Media Session calls <strong>IMFInputTrustAuthority::BindAccess</strong>.</p><p>A stream can go to multiple outputs, so this method might be called multiple times with different actions, once for every output.</p>
        /// </remarks>
        /// <doc-id>bb970453</doc-id>
        /// <unmanaged>HRESULT IMFInputTrustAuthority::RequestAccess([In] MFPOLICYMANAGER_ACTION Action,[Out] IMFActivate** ppContentEnablerActivate)</unmanaged>
        /// <unmanaged-short>IMFInputTrustAuthority::RequestAccess</unmanaged-short>
        public unsafe void RequestAccess(SharpDX.MediaFoundation.PolicymanagerAction action, out SharpDX.MediaFoundation.Activate contentEnablerActivateOut)
        {
            System.IntPtr contentEnablerActivateOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)action), &contentEnablerActivateOut_, (*(void ***)this._nativePointer)[4]);
            if (contentEnablerActivateOut_ != System.IntPtr.Zero)
                contentEnablerActivateOut = new SharpDX.MediaFoundation.Activate(contentEnablerActivateOut_);
            else
                contentEnablerActivateOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the policy that defines which output protection systems are allowed for this stream, and the configuration data for each protection system.</p>
        /// </summary>
        /// <param name = "action"><dd> <p>The action that will be performed on this stream, specified as a member of the <strong><see cref = "SharpDX.MediaFoundation.PolicymanagerAction"/></strong> enumeration.</p> </dd></param>
        /// <param name = "policyOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.OutputPolicy"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970400</doc-id>
        /// <unmanaged>HRESULT IMFInputTrustAuthority::GetPolicy([In] MFPOLICYMANAGER_ACTION Action,[Out] IMFOutputPolicy** ppPolicy)</unmanaged>
        /// <unmanaged-short>IMFInputTrustAuthority::GetPolicy</unmanaged-short>
        public unsafe void GetPolicy(SharpDX.MediaFoundation.PolicymanagerAction action, out SharpDX.MediaFoundation.OutputPolicy policyOut)
        {
            System.IntPtr policyOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)action), &policyOut_, (*(void ***)this._nativePointer)[5]);
            if (policyOut_ != System.IntPtr.Zero)
                policyOut = new SharpDX.MediaFoundation.OutputPolicy(policyOut_);
            else
                policyOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Notifies the input trust authority (ITA) that a requested action is about to be performed.</p>
        /// </summary>
        /// <param name = "paramRef"><dd> <p>Pointer to an <strong><see cref = "SharpDX.MediaFoundation.InputTrustauthorityAccessParameters"/></strong> structure that contains parameters for the <strong>BindAccess</strong> action.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Before calling this method, the Media Session calls <strong>IMFInputTrustAuthority::RequestAccess</strong> to request an action. The <strong>BindAccess</strong> method notifies the ITA that the action is definitely about to occur, so that the ITA can update its internal state as needed. If the method returns a failure code, the Media Session cancels the action.</p>
        /// </remarks>
        /// <doc-id>ms701551</doc-id>
        /// <unmanaged>HRESULT IMFInputTrustAuthority::BindAccess([In] MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS* pParam)</unmanaged>
        /// <unmanaged-short>IMFInputTrustAuthority::BindAccess</unmanaged-short>
        public unsafe void BindAccess(ref SharpDX.MediaFoundation.InputTrustauthorityAccessParameters paramRef)
        {
            SharpDX.MediaFoundation.InputTrustauthorityAccessParameters.__Native paramRef_ = default (SharpDX.MediaFoundation.InputTrustauthorityAccessParameters.__Native);
            SharpDX.Result __result__;
            paramRef.__MarshalTo(ref paramRef_);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &paramRef_, (*(void ***)this._nativePointer)[6]);
            paramRef.__MarshalFree(ref paramRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Notifies the input trust authority (ITA) when the number of output trust authorities (OTAs) that will perform a specified action has changed.</p>
        /// </summary>
        /// <param name = "paramRef"><dd> <p>Pointer to an <strong><see cref = "SharpDX.MediaFoundation.InputTrustauthorityAccessParameters"/></strong> structure that contains parameters for the <strong>UpdateAccess</strong> action.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The ITA can update its internal state if needed. If the method returns a failure code, the Media Session cancels the action.</p>
        /// </remarks>
        /// <doc-id>ms697037</doc-id>
        /// <unmanaged>HRESULT IMFInputTrustAuthority::UpdateAccess([In] MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS* pParam)</unmanaged>
        /// <unmanaged-short>IMFInputTrustAuthority::UpdateAccess</unmanaged-short>
        public unsafe void UpdateAccess(ref SharpDX.MediaFoundation.InputTrustauthorityAccessParameters paramRef)
        {
            SharpDX.MediaFoundation.InputTrustauthorityAccessParameters.__Native paramRef_ = default (SharpDX.MediaFoundation.InputTrustauthorityAccessParameters.__Native);
            SharpDX.Result __result__;
            paramRef.__MarshalTo(ref paramRef_);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &paramRef_, (*(void ***)this._nativePointer)[7]);
            paramRef.__MarshalFree(ref paramRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Resets the input trust authority (ITA) to its initial state.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>When this method is called, the ITA should disable any decrypter that was returned in the <strong>IMFInputTrustAuthority::GetDecrypter</strong> method.</p>
        /// </remarks>
        /// <doc-id>ms703015</doc-id>
        /// <unmanaged>HRESULT IMFInputTrustAuthority::Reset()</unmanaged>
        /// <unmanaged-short>IMFInputTrustAuthority::Reset</unmanaged-short>
        public unsafe void Reset()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("149c4d73-b4be-4f8d-8b87-079e926b6add")]
    public partial class LocalMFTRegistration : SharpDX.ComObject
    {
        public LocalMFTRegistration(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator LocalMFTRegistration(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new LocalMFTRegistration(nativePtr);
        /// <summary>
        /// <p>Registers one or more Media Foundation transforms (MFTs) in the caller's process.</p>
        /// </summary>
        /// <param name = "mFTsRef"><dd> <p>A reference to an array of <strong><see cref = "SharpDX.MediaFoundation.TRegistrationInformation"/></strong> structures.</p> </dd></param>
        /// <param name = "cMFTs"><dd> <p>The number of elements in the <em>pMFTs</em> array.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method is similar to the <strong>MFTRegisterLocalByCLSID</strong> function. It registers one or more MFTs in the caller's process. These MFTs can be enumerated by calling the <strong>MFTEnumEx</strong> function with the <strong>MFT_ENUM_FLAG_LOCALMFT</strong> flag.</p><p>Unlike <strong>MFTRegisterLocalByCLSID</strong>, however, this method also makes the MFT available in the Protected Media Path (PMP) process, and is therefore useful if you are using the Media Session inside the PMP. For more information, see the following topics:</p><ul> <li> <strong>MFCreatePMPMediaSession</strong> </li> <li> Protected Media Path </li> </ul>
        /// </remarks>
        /// <doc-id>dd374223</doc-id>
        /// <unmanaged>HRESULT IMFLocalMFTRegistration::RegisterMFTs([In, Buffer] MFT_REGISTRATION_INFO* pMFTs,[In] DWORD cMFTs)</unmanaged>
        /// <unmanaged-short>IMFLocalMFTRegistration::RegisterMFTs</unmanaged-short>
        public unsafe void RegisterMFTs(SharpDX.MediaFoundation.TRegistrationInformation[] mFTsRef, System.Int32 cMFTs)
        {
            SharpDX.MediaFoundation.TRegistrationInformation.__Native[] mFTsRef_ = new SharpDX.MediaFoundation.TRegistrationInformation.__Native[mFTsRef.Length];
            SharpDX.Result __result__;
            for (int i = 0; i < mFTsRef.Length; ++i)
                mFTsRef[i].__MarshalTo(ref (mFTsRef_)[i]);
            fixed (void *_mFTsRef = mFTsRef_)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, _mFTsRef, cMFTs, (*(void ***)this._nativePointer)[3]);
            for (int i = 0; i < mFTsRef.Length; ++i)
                mFTsRef[i].__MarshalFree(ref (mFTsRef_)[i]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd2d921-c447-44a7-a13c-4adabfc247e3")]
    public partial class MediaAttributes : SharpDX.ComObject
    {
        public MediaAttributes(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaAttributes(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaAttributes(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the number of attributes that are set on this object.</p>
        /// </summary>
        /// <remarks>
        /// <p>To enumerate all of the attributes, call <strong>IMFAttributes::GetItemByIndex</strong> for each index value.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970413</doc-id>
        /// <unmanaged>GetCount</unmanaged>
        /// <unmanaged-short>GetCount</unmanaged-short>
        public System.Int32 Count
        {
            get
            {
                GetCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the value associated with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p> A <see cref = "System.Guid"/> that identifies which value to retrieve. </p> </dd></param>
        /// <param name = "valueRef"><dd> <p>A reference to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that receives the value. The method fills the <strong><see cref = "SharpDX.Win32.Variant"/></strong> with a copy of the stored value, if the value is found. Call <strong>PropVariantClear</strong> to free the memory allocated by this method. This parameter can be <strong><c>null</c></strong>. If this parameter is <strong><c>null</c></strong>, the method searches for the key and returns <see cref = "SharpDX.Result.Ok"/> if the key is found, but does not copy the value.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Attributenotfound"/></strong></dt> </dl> </td><td> <p> The specified key was not found. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970450</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::GetItem([In] const GUID&amp; guidKey,[In] PROPVARIANT* pValue)</unmanaged>
        /// <unmanaged-short>IMFAttributes::GetItem</unmanaged-short>
        internal unsafe void GetItem(System.Guid guidKey, System.IntPtr valueRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, (void *)valueRef, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the data type of the value associated with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies which value to query.</p> </dd></param>
        /// <returns><dd> <p>Receives a member of the <strong><see cref = "SharpDX.MediaFoundation.AttributeType"/></strong> enumeration.</p> </dd></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970369</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::GetItemType([In] const GUID&amp; guidKey,[Out] MF_ATTRIBUTE_TYPE* pType)</unmanaged>
        /// <unmanaged-short>IMFAttributes::GetItemType</unmanaged-short>
        public unsafe SharpDX.MediaFoundation.AttributeType GetItemType(System.Guid guidKey)
        {
            SharpDX.MediaFoundation.AttributeType typeRef;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, &typeRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
            return typeRef;
        }

        /// <summary>
        /// <p> </p><p>Queries whether a stored attribute value equals to a specified <strong><see cref = "SharpDX.Win32.Variant"/></strong>.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies which value to query.</p> </dd></param>
        /// <param name = "value"><dd> <p><strong><see cref = "SharpDX.Win32.Variant"/></strong> that contains the value to compare.</p> </dd></param>
        /// <returns><dd> <p>Receives a Boolean value indicating whether the attribute matches the value given in <em>Value</em>. See Remarks. This parameter must not be <strong><c>null</c></strong>. If this parameter is <strong><c>null</c></strong>, an access violation occurs.</p> </dd></returns>
        /// <remarks>
        /// <p>The method sets <em>pbResult</em> to <strong><see cref = "SharpDX.Result.False"/></strong> for any of the following reasons:</p><ul> <li> <p>No attribute is found whose key matches the one given in <em>guidKey</em>.</p> </li> <li> <p>The attribute's <strong><see cref = "SharpDX.Win32.Variant"/></strong> type does not match the type given in <em>Value</em>.</p> </li> <li> <p>The attribute value does not match the value given in <em>Value</em>.</p> </li> <li> <p>The method fails.</p> </li> </ul><p>Otherwise, the method sets <em>pbResult</em> to <strong>TRUE</strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970566</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::CompareItem([In] const GUID&amp; guidKey,[In] const PROPVARIANT&amp; Value,[Out] BOOL* pbResult)</unmanaged>
        /// <unmanaged-short>IMFAttributes::CompareItem</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool CompareItem(System.Guid guidKey, SharpDX.Win32.Variant value)
        {
            SharpDX.Mathematics.Interop.RawBool bResultRef;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, &value, &bResultRef, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
            return bResultRef;
        }

        /// <summary>
        /// <p> </p><p>Compares the attributes on this object with the attributes on another object.</p>
        /// </summary>
        /// <param name = "theirsRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface of the object to compare with this object.</p> </dd></param>
        /// <param name = "matchType"><dd> <p>Member of the <strong><see cref = "SharpDX.MediaFoundation.AttributesMatchType"/></strong> enumeration, specifying the type of comparison to make.</p> </dd></param>
        /// <returns><dd> <p>Receives a Boolean value. The value is <strong>TRUE</strong> if the two sets of attributes match in the way specified by the <em>MatchType</em> parameter. Otherwise, the value is <strong><see cref = "SharpDX.Result.False"/></strong>.</p> </dd></returns>
        /// <remarks>
        /// <p>If <em>pThis</em> is the object whose <strong>Compare</strong> method is called, and <em>pTheirs</em> is the object passed in as the <em>pTheirs</em> parameter, the following comparisons are defined by <em>MatchType</em>.</p><table> <tr><th>Match type</th><th>Returns <strong>TRUE</strong> if and only if</th></tr> <tr><td><strong>MF_ATTRIBUTES_MATCH_OUR_ITEMS</strong></td><td>For every attribute in <em>pThis</em>, an attribute with the same key and value exists in <em>pTheirs</em>.</td></tr> <tr><td><strong>MF_ATTRIBUTES_MATCH_THEIR_ITEMS</strong></td><td>For every attribute in <em>pTheirs</em>, an attribute with the same key and value exists in <em>pThis</em>.</td></tr> <tr><td><strong>MF_ATTRIBUTES_MATCH_ALL_ITEMS</strong></td><td>The key/value pairs are identical in both objects.</td></tr> <tr><td><strong>MF_ATTRIBUTES_MATCH_INTERSECTION</strong></td><td>Take the intersection of the keys in <em>pThis</em> and the keys in <em>pTheirs</em>. The values associated with those keys are identical in both <em>pThis</em> and <em>pTheirs</em>.</td></tr> <tr><td><strong>MF_ATTRIBUTES_MATCH_SMALLER</strong></td><td>Take the object with the smallest number of attributes. For every attribute in that object, an attribute with the same key and value exists in the other object.</td></tr> </table><p>?</p><p>The <em>pTheirs</em> and <em>pbResult</em> parameters must not be <strong><c>null</c></strong>. If either parameter is <strong><c>null</c></strong>, an access violation occurs.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970349</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::Compare([In, Optional] IMFAttributes* pTheirs,[In] MF_ATTRIBUTES_MATCH_TYPE MatchType,[Out] BOOL* pbResult)</unmanaged>
        /// <unmanaged-short>IMFAttributes::Compare</unmanaged-short>
        public unsafe SharpDX.Mathematics.Interop.RawBool Compare(SharpDX.MediaFoundation.MediaAttributes theirsRef, SharpDX.MediaFoundation.AttributesMatchType matchType)
        {
            System.IntPtr theirsRef_ = System.IntPtr.Zero;
            SharpDX.Mathematics.Interop.RawBool bResultRef;
            SharpDX.Result __result__;
            theirsRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(theirsRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)theirsRef_, unchecked ((System.Int32)matchType), &bResultRef, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
            return bResultRef;
        }

        /// <summary>
        /// <p> </p><p>Retrieves a <strong>UINT32</strong> value associated with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies which value to retrieve. The attribute type must be <strong>MF_ATTRIBUTE_UINT32</strong>.</p> </dd></param>
        /// <returns><dd> <p>Receives a <strong>UINT32</strong> value. If the key is found and the data type is <strong>UINT32</strong>, the method copies the value into this parameter. Otherwise, the original value of this parameter is not changed.</p> </dd></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970551</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::GetUINT32([In] const GUID&amp; guidKey,[Out] unsigned int* punValue)</unmanaged>
        /// <unmanaged-short>IMFAttributes::GetUINT32</unmanaged-short>
        internal unsafe System.Int32 GetInt(System.Guid guidKey)
        {
            System.Int32 unValueRef;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, &unValueRef, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
            return unValueRef;
        }

        /// <summary>
        /// <p> </p><p>Retrieves a <strong>UINT64</strong> value associated with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies which value to retrieve. The attribute type must be <strong>MF_ATTRIBUTE_UINT64</strong>.</p> </dd></param>
        /// <returns><dd> <p>Receives a <strong>UINT64</strong> value. If the key is found and the data type is <strong>UINT64</strong>, the method copies the value into this parameter. Otherwise, the original value of this parameter is not changed.</p> </dd></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970569</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::GetUINT64([In] const GUID&amp; guidKey,[Out] unsigned longlong* punValue)</unmanaged>
        /// <unmanaged-short>IMFAttributes::GetUINT64</unmanaged-short>
        internal unsafe System.Int64 GetLong(System.Guid guidKey)
        {
            System.Int64 unValueRef;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, &unValueRef, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
            return unValueRef;
        }

        /// <summary>
        /// <p> </p><p>Retrieves a <strong>double</strong> value associated with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies which value to retrieve. The attribute type must be <strong>MF_ATTRIBUTE_DOUBLE</strong>.</p> </dd></param>
        /// <returns><dd> <p>Receives a <strong>double</strong> value. If the key is found and the data type is <strong>double</strong>, the method copies the value into this parameter. Otherwise, the original value of this parameter is not changed.</p> </dd></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970418</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::GetDouble([In] const GUID&amp; guidKey,[Out] double* pfValue)</unmanaged>
        /// <unmanaged-short>IMFAttributes::GetDouble</unmanaged-short>
        internal unsafe System.Double GetDouble(System.Guid guidKey)
        {
            System.Double fValueRef;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, &fValueRef, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
            return fValueRef;
        }

        /// <summary>
        /// <p> </p><p>Retrieves a <see cref = "System.Guid"/> value associated with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies which value to retrieve. The attribute type must be <strong>MF_ATTRIBUTE_GUID</strong>.</p> </dd></param>
        /// <returns><dd> <p>Receives a <see cref = "System.Guid"/> value. If the key is found and the data type is <see cref = "System.Guid"/>, the method copies the value into this parameter. Otherwise, the original value of this parameter is not changed.</p> </dd></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970426</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::GetGUID([In] const GUID&amp; guidKey,[Out] GUID* pguidValue)</unmanaged>
        /// <unmanaged-short>IMFAttributes::GetGUID</unmanaged-short>
        internal unsafe System.Guid GetGUID(System.Guid guidKey)
        {
            System.Guid guidValueRef;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, &guidValueRef, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
            return guidValueRef;
        }

        /// <summary>
        /// <p> </p><p>Retrieves the length of a string value associated with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies which value to retrieve. The attribute type must be <strong>MF_ATTRIBUTE_STRING</strong>.</p> </dd></param>
        /// <returns><dd> <p>If the key is found and the value is a string type, this parameter receives the number of characters in the string, not including the terminating <strong><c>null</c></strong> character. To get the string value, call <strong>IMFAttributes::GetString</strong>.</p> </dd></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970425</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::GetStringLength([In] const GUID&amp; guidKey,[Out] unsigned int* pcchLength)</unmanaged>
        /// <unmanaged-short>IMFAttributes::GetStringLength</unmanaged-short>
        internal unsafe System.Int32 GetStringLength(System.Guid guidKey)
        {
            System.Int32 cchLengthRef;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, &cchLengthRef, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
            return cchLengthRef;
        }

        /// <summary>
        /// <p> </p><p>Retrieves a wide-character string associated with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies which value to retrieve. The attribute type must be <strong>MF_ATTRIBUTE_STRING</strong>.</p> </dd></param>
        /// <param name = "wszValueRef"><dd> <p>Pointer to a wide-character array allocated by the caller. The array must be large enough to hold the string, including the terminating <strong><c>null</c></strong> character. If the key is found and the value is a string type, the method copies the string into this buffer. To find the length of the string, call <strong>IMFAttributes::GetStringLength</strong>.</p> </dd></param>
        /// <param name = "cchBufSize"><dd> <p>The size of the <em>pwszValue</em> array, in characters. This value includes the terminating <c>null</c> character.</p> </dd></param>
        /// <param name = "cchLengthRef"><dd> <p>Receives the number of characters in the string, excluding the terminating <strong><c>null</c></strong> character. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_OUTOFMEMORY</strong></dt> </dl> </td><td> <p>The length of the string is too large to fit in a <strong>UINT32</strong> value.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOT_SUFFICIENT_BUFFER</strong></dt> </dl> </td><td> <p>The buffer is not large enough to hold the string.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Attributenotfound"/></strong></dt> </dl> </td><td> <p>The specified key was not found.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidType"/></strong></dt> </dl> </td><td> <p>The attribute value is not a string.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You can also use the <strong>IMFAttributes::GetAllocatedString</strong> method, which allocates the buffer to hold the string.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970430</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::GetString([In] const GUID&amp; guidKey,[Out, Buffer] wchar_t* pwszValue,[In] unsigned int cchBufSize,[InOut, Optional] unsigned int* pcchLength)</unmanaged>
        /// <unmanaged-short>IMFAttributes::GetString</unmanaged-short>
        internal unsafe void GetString(System.Guid guidKey, System.IntPtr wszValueRef, System.Int32 cchBufSize, System.IntPtr cchLengthRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, (void *)wszValueRef, cchBufSize, (void *)cchLengthRef, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets a wide-character string associated with a key. This method allocates the memory for the string. </p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p>A <see cref = "System.Guid"/> that identifies which value to retrieve. The attribute type must be <strong>MF_ATTRIBUTE_STRING</strong>. </p> </dd></param>
        /// <param name = "wszValueOut"><dd> <p>If the key is found and the value is a string type, this parameter receives a copy of the string. The caller must free the memory for the string by calling <strong>CoTaskMemFree</strong>. </p> </dd></param>
        /// <param name = "cchLengthRef"><dd> <p> Receives the number of characters in the string, excluding the terminating <strong><c>null</c></strong> character. This parameter must not be <strong><c>null</c></strong>. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Attributenotfound"/></strong></dt> </dl> </td><td> <p> The specified key was not found. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidType"/></strong></dt> </dl> </td><td> <p> The attribute value is not a string. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To copy a string value into a caller-allocated buffer, use the <strong>IMFAttributes::GetString</strong> method.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul><strong>Note</strong>??An earlier version of the documentation incorrectly stated that the <em>pcchLength</em> parameter can be <strong><c>null</c></strong>. Setting this parameter to <strong><c>null</c></strong> might succeed in some cases, but is not guaranteed. The caller must pass a non-<strong><c>null</c></strong> reference for this parameter.?
        /// </remarks>
        /// <doc-id>bb970406</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::GetAllocatedString([In] const GUID&amp; guidKey,[Buffer, Optional] wchar_t** ppwszValue,[Out] unsigned int* pcchLength)</unmanaged>
        /// <unmanaged-short>IMFAttributes::GetAllocatedString</unmanaged-short>
        internal unsafe void GetAllocatedString(System.Guid guidKey, System.String wszValueOut, out System.Int32 cchLengthRef)
        {
            SharpDX.Result __result__;
            fixed (void *cchLengthRef_ = &cchLengthRef)
                fixed (char *wszValueOut_ = wszValueOut)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, (void *)wszValueOut_, cchLengthRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the length of a byte array associated with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies which value to retrieve. The attribute type must be <strong>MF_ATTRIBUTE_BLOB</strong>.</p> </dd></param>
        /// <returns><dd> <p>If the key is found and the value is a byte array, this parameter receives the size of the array, in bytes.</p> </dd></returns>
        /// <remarks>
        /// <p>To get the byte array, call <strong>IMFAttributes::GetBlob</strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970459</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::GetBlobSize([In] const GUID&amp; guidKey,[Out] unsigned int* pcbBlobSize)</unmanaged>
        /// <unmanaged-short>IMFAttributes::GetBlobSize</unmanaged-short>
        internal unsafe System.Int32 GetBlobSize(System.Guid guidKey)
        {
            System.Int32 cbBlobSizeRef;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, &cbBlobSizeRef, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
            return cbBlobSizeRef;
        }

        /// <summary>
        /// <p> </p><p>Retrieves a byte array associated with a key. This method copies the array into a caller-allocated buffer.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies which value to retrieve. The attribute type must be <strong>MF_ATTRIBUTE_BLOB</strong>.</p> </dd></param>
        /// <param name = "bufRef"><dd> <p>Pointer to a buffer allocated by the caller. If the key is found and the value is a byte array, the method copies the array into this buffer. To find the required size of the buffer, call <strong>IMFAttributes::GetBlobSize</strong>.</p> </dd></param>
        /// <param name = "cbBufSize"><dd> <p>The size of the <em>pBuf</em> buffer, in bytes.</p> </dd></param>
        /// <param name = "cbBlobSizeRef"><dd> <p>Receives the size of the byte array. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>E_NOT_SUFFICIENT_BUFFER</strong></strong></dt> </dl> </td><td> <p>The buffer is not large enough to the array.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Attributenotfound"/></strong></strong></dt> </dl> </td><td> <p>The specified key was not found.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidType"/></strong></strong></dt> </dl> </td><td> <p>The attribute value is not a byte array.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You can also use the <strong>IMFAttributes::GetAllocatedBlob</strong> method, which allocates the buffer to hold the byte array.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970421</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::GetBlob([In] const GUID&amp; guidKey,[In] unsigned char* pBuf,[In] unsigned int cbBufSize,[InOut, Optional] unsigned int* pcbBlobSize)</unmanaged>
        /// <unmanaged-short>IMFAttributes::GetBlob</unmanaged-short>
        internal unsafe void GetBlob(System.Guid guidKey, System.IntPtr bufRef, System.Int32 cbBufSize, System.IntPtr cbBlobSizeRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, (void *)bufRef, cbBufSize, (void *)cbBlobSizeRef, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Provides a generic way to store key/value pairs on an object. The keys are <strong><see cref = "System.Guid"/></strong>s, and the values can be any of the following data types: <strong>UINT32</strong>, <strong>UINT64</strong>, <strong>double</strong>, <strong><see cref = "System.Guid"/></strong>, wide-character string, byte array, or <strong><see cref = "SharpDX.IUnknown"/></strong> reference. The standard implementation of this interface holds a thread lock while values are added, deleted, or retrieved.</p><p>For a list of predefined attribute <strong><see cref = "System.Guid"/></strong>s, see Media Foundation Attributes. Each attribute <strong><see cref = "System.Guid"/></strong> has an expected data type. The various "set" methods in <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> do not validate the type against the attribute <strong><see cref = "System.Guid"/></strong>. It is the application's responsibility to set the correct type for the attribute.</p><p>To create an empty attribute store, call <strong>MFCreateAttributes</strong>.</p>
        /// </summary>
        /// <param name = "guidKey">No documentation.</param>
        /// <param name = "bufOut">No documentation.</param>
        /// <param name = "cbSizeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms704598</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::GetAllocatedBlob([In] const GUID&amp; guidKey,[Buffer, Optional] unsigned char** ppBuf,[Out] unsigned int* pcbSize)</unmanaged>
        /// <unmanaged-short>IMFAttributes::GetAllocatedBlob</unmanaged-short>
        internal unsafe void GetAllocatedBlob(System.Guid guidKey, System.Byte[] bufOut, out System.Int32 cbSizeRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbSizeRef_ = &cbSizeRef)
                fixed (void *bufOut_ = bufOut)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, bufOut_, cbSizeRef_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves an interface reference associated with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies which value to retrieve. The attribute type must be <strong>MF_ATTRIBUTE_IUNKNOWN</strong>.</p> </dd></param>
        /// <param name = "riid"><dd> <p>Interface identifier (IID) of the interface to retrieve.</p> </dd></param>
        /// <param name = "vOut"><dd> <p>Receives a reference to the requested interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOINTERFACE</strong></dt> </dl> </td><td> <p>The attribute value is an <strong><see cref = "SharpDX.IUnknown"/></strong> reference but does not support requested interface.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Attributenotfound"/></strong></dt> </dl> </td><td> <p>The specified key was not found.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidType"/></strong></dt> </dl> </td><td> <p>The attribute value is not an <strong><see cref = "SharpDX.IUnknown"/></strong> reference.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970481</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::GetUnknown([In] const GUID&amp; guidKey,[In] const GUID&amp; riid,[Out] void** ppv)</unmanaged>
        /// <unmanaged-short>IMFAttributes::GetUnknown</unmanaged-short>
        internal unsafe void GetUnknown(System.Guid guidKey, System.Guid riid, out System.IntPtr vOut)
        {
            SharpDX.Result __result__;
            fixed (void *vOut_ = &vOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, &riid, vOut_, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Adds an attribute value with a specified key. </p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p> A <see cref = "System.Guid"/> that identifies the value to set. If this key already exists, the method overwrites the old value. </p> </dd></param>
        /// <param name = "value"><dd> <p> A <strong><see cref = "SharpDX.Win32.Variant"/></strong> that contains the attribute value. The method copies the value. The <strong><see cref = "SharpDX.Win32.Variant"/></strong> type must be one of the types listed in the <strong><see cref = "SharpDX.MediaFoundation.AttributeType"/></strong> enumeration. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_OUTOFMEMORY</strong></dt> </dl> </td><td> <p> Insufficient memory. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidType"/></strong></dt> </dl> </td><td> <p> Invalid attribute type. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> This method checks whether the <strong><see cref = "SharpDX.Win32.Variant"/></strong> type is one of the attribute types defined in <strong><see cref = "SharpDX.MediaFoundation.AttributeType"/></strong>, and fails if an unsupported type is used. However, this method does not check whether the <strong><see cref = "SharpDX.Win32.Variant"/></strong> is the correct type for the specified attribute <see cref = "System.Guid"/>. (There is no programmatic way to associate attribute GUIDs with property types.) For a list of Media Foundation attributes and their data types, see Media Foundation Attributes. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970346</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::SetItem([In] const GUID&amp; guidKey,[In] const PROPVARIANT&amp; Value)</unmanaged>
        /// <unmanaged-short>IMFAttributes::SetItem</unmanaged-short>
        internal unsafe void Set(System.Guid guidKey, SharpDX.Win32.Variant value)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, &value, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Removes a key/value pair from the object's attribute list.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies the value to delete.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the specified key does not exist, the method returns <strong><see cref = "SharpDX.Result.Ok"/></strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970486</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::DeleteItem([In] const GUID&amp; guidKey)</unmanaged>
        /// <unmanaged-short>IMFAttributes::DeleteItem</unmanaged-short>
        public unsafe void DeleteItem(System.Guid guidKey)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Removes all key/value pairs from the object's attribute list.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms700200</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::DeleteAllItems()</unmanaged>
        /// <unmanaged-short>IMFAttributes::DeleteAllItems</unmanaged-short>
        public unsafe void DeleteAllItems()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[20]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Associates a <strong>UINT32</strong> value with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies the value to set. If this key already exists, the method overwrites the old value.</p> </dd></param>
        /// <param name = "unValue"><dd> <p>New value for this key.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To retrieve the <strong>UINT32</strong> value, call <strong>IMFAttributes::GetUINT32</strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970467</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::SetUINT32([In] const GUID&amp; guidKey,[In] unsigned int unValue)</unmanaged>
        /// <unmanaged-short>IMFAttributes::SetUINT32</unmanaged-short>
        internal unsafe void Set(System.Guid guidKey, System.Int32 unValue)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, unValue, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Associates a <strong>UINT64</strong> value with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies the value to set. If this key already exists, the method overwrites the old value.</p> </dd></param>
        /// <param name = "unValue"><dd> <p>New value for this key.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To retrieve the <strong>UINT64</strong> value, call <strong>IMFAttributes::GetUINT64</strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970439</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::SetUINT64([In] const GUID&amp; guidKey,[In] unsigned longlong unValue)</unmanaged>
        /// <unmanaged-short>IMFAttributes::SetUINT64</unmanaged-short>
        internal unsafe void Set(System.Guid guidKey, System.Int64 unValue)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, unValue, (*(void ***)this._nativePointer)[22]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Associates a <strong>double</strong> value with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies the value to set. If this key already exists, the method overwrites the old value.</p> </dd></param>
        /// <param name = "fValue"><dd> <p>New value for this key.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To retrieve the double value, call <strong>IMFAttributes::GetDouble</strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970505</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::SetDouble([In] const GUID&amp; guidKey,[In] double fValue)</unmanaged>
        /// <unmanaged-short>IMFAttributes::SetDouble</unmanaged-short>
        internal unsafe void Set(System.Guid guidKey, System.Double fValue)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, fValue, (*(void ***)this._nativePointer)[23]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Associates a <see cref = "System.Guid"/> value with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies the value to set. If this key already exists, the method overwrites the old value.</p> </dd></param>
        /// <param name = "guidValue"><dd> <p>New value for this key.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_OUTOFMEMORY</strong></dt> </dl> </td><td> <p>Insufficient memory.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To retrieve the <see cref = "System.Guid"/> value, call <strong>IMFAttributes::GetGUID</strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970530</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::SetGUID([In] const GUID&amp; guidKey,[In] const GUID&amp; guidValue)</unmanaged>
        /// <unmanaged-short>IMFAttributes::SetGUID</unmanaged-short>
        internal unsafe void Set(System.Guid guidKey, System.Guid guidValue)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, &guidValue, (*(void ***)this._nativePointer)[24]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Associates a wide-character string with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies the value to set. If this key already exists, the method overwrites the old value.</p> </dd></param>
        /// <param name = "wszValue"><dd> <p>Null-terminated wide-character string to associate with this key. The method stores a copy of the string.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To retrieve the string, call <strong>IMFAttributes::GetString</strong> or <strong>IMFAttributes::GetAllocatedString</strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970404</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::SetString([In] const GUID&amp; guidKey,[In] const wchar_t* wszValue)</unmanaged>
        /// <unmanaged-short>IMFAttributes::SetString</unmanaged-short>
        internal unsafe void Set(System.Guid guidKey, System.String wszValue)
        {
            SharpDX.Result __result__;
            fixed (char *wszValue_ = wszValue)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, (void *)wszValue_, (*(void ***)this._nativePointer)[25]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Associates a byte array with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies the value to set. If this key already exists, the method overwrites the old value.</p> </dd></param>
        /// <param name = "bufRef"><dd> <p>Pointer to a byte array to associate with this key. The method stores a copy of the array.</p> </dd></param>
        /// <param name = "cbBufSize"><dd> <p>Size of the array, in bytes.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To retrieve the byte array, call <strong>IMFAttributes::GetBlob</strong> or <strong>IMFAttributes::GetAllocatedBlob</strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970395</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::SetBlob([In] const GUID&amp; guidKey,[In] const unsigned char* pBuf,[In] unsigned int cbBufSize)</unmanaged>
        /// <unmanaged-short>IMFAttributes::SetBlob</unmanaged-short>
        internal unsafe void SetBlob(System.Guid guidKey, System.IntPtr bufRef, System.Int32 cbBufSize)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, (void *)bufRef, cbBufSize, (*(void ***)this._nativePointer)[26]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Associates an <strong><see cref = "SharpDX.IUnknown"/></strong> reference with a key.</p>
        /// </summary>
        /// <param name = "guidKey"><dd> <p><see cref = "System.Guid"/> that identifies the value to set. If this key already exists, the method overwrites the old value.</p> </dd></param>
        /// <param name = "unknownRef"><dd> <p><strong><see cref = "SharpDX.IUnknown"/></strong> reference to be associated with this key.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To retrieve the <strong><see cref = "SharpDX.IUnknown"/></strong> reference, call <strong>IMFAttributes::GetUnknown</strong>.</p><p>It is not an error to call <strong>SetUnknown</strong> with <em>pUnknown</em> equal to <strong><c>null</c></strong>. However, <strong>GetUnknown</strong> will return <strong><see cref = "InvalidType"/></strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970533</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::SetUnknown([In] const GUID&amp; guidKey,[In, Optional] IUnknown* pUnknown)</unmanaged>
        /// <unmanaged-short>IMFAttributes::SetUnknown</unmanaged-short>
        internal unsafe void Set(System.Guid guidKey, SharpDX.IUnknown unknownRef)
        {
            System.IntPtr unknownRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            unknownRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unknownRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidKey, (void *)unknownRef_, (*(void ***)this._nativePointer)[27]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Locks the attribute store so that no other thread can access it. If the attribute store is already locked by another thread, this method blocks until the other thread unlocks the object. After calling this method, call <strong>IMFAttributes::UnlockStore</strong> to unlock the object.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method can cause a deadlock if a thread that calls <strong>LockStore</strong> waits on a thread that calls any other <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> methods on the same object.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms698926</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::LockStore()</unmanaged>
        /// <unmanaged-short>IMFAttributes::LockStore</unmanaged-short>
        public unsafe void LockStore()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[28]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Unlocks the attribute store after a call to the <strong>IMFAttributes::LockStore</strong> method. While the object is unlocked, multiple threads can access the object's attributes.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms697545</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::UnlockStore()</unmanaged>
        /// <unmanaged-short>IMFAttributes::UnlockStore</unmanaged-short>
        public unsafe void UnlockStore()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[29]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of attributes that are set on this object.</p>
        /// </summary>
        /// <param name = "cItemsRef"><dd> <p>Receives the number of attributes. This parameter must not be <strong><c>null</c></strong>. If this parameter is <strong><c>null</c></strong>, an access violation occurs.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To enumerate all of the attributes, call <strong>IMFAttributes::GetItemByIndex</strong> for each index value.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970413</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::GetCount([Out] unsigned int* pcItems)</unmanaged>
        /// <unmanaged-short>IMFAttributes::GetCount</unmanaged-short>
        internal unsafe void GetCount(out System.Int32 cItemsRef)
        {
            SharpDX.Result __result__;
            fixed (void *cItemsRef_ = &cItemsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cItemsRef_, (*(void ***)this._nativePointer)[30]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves an attribute at the specified index.</p>
        /// </summary>
        /// <param name = "unIndex"><dd> <p>Index of the attribute to retrieve. To get the number of attributes, call <strong>IMFAttributes::GetCount</strong>.</p> </dd></param>
        /// <param name = "guidKeyRef"><dd> <p>Receives the <see cref = "System.Guid"/> that identifies this attribute.</p> </dd></param>
        /// <param name = "valueRef"><dd> <p>Pointer to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that receives the value. This parameter can be <strong><c>null</c></strong>. If it is not <strong><c>null</c></strong>, the method fills the <strong><see cref = "SharpDX.Win32.Variant"/></strong> with a copy of the attribute value. Call <strong>PropVariantClear</strong> to free the memory allocated by this method.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid index.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To enumerate all of an object's attributes in a thread-safe way, do the following:</p><ol> <li> <p>Call <strong>IMFAttributes::LockStore</strong> to prevent another thread from adding or deleting attributes.</p> </li> <li> <p>Call <strong>IMFAttributes::GetCount</strong> to find the number of attributes.</p> </li> <li> <p>Call <strong>GetItemByIndex</strong> to get each attribute by index.</p> </li> <li> <p>Call <strong>IMFAttributes::UnlockStore</strong> to unlock the attribute store.</p> </li> </ol><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970331</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::GetItemByIndex([In] unsigned int unIndex,[Out] GUID* pguidKey,[InOut, Optional] PROPVARIANT* pValue)</unmanaged>
        /// <unmanaged-short>IMFAttributes::GetItemByIndex</unmanaged-short>
        internal unsafe void GetItemByIndex(System.Int32 unIndex, out System.Guid guidKeyRef, System.IntPtr valueRef)
        {
            guidKeyRef = default (System.Guid);
            SharpDX.Result __result__;
            fixed (void *guidKeyRef_ = &guidKeyRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unIndex, guidKeyRef_, (void *)valueRef, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Copies all of the attributes from this object into another attribute store. </p>
        /// </summary>
        /// <param name = "destRef"><dd> <p> A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface of the attribute store that receives the copy. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> This method deletes all of the attributes originally stored in <em>pDest</em>. </p><strong>Note</strong>??<p>When you call <strong>CopyAllItems</strong> on an <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong>, which inherits this method, the sample time, duration, and flags are not copied to the destination sample. You must copy these values to the new sample manually.</p>?<p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970330</doc-id>
        /// <unmanaged>HRESULT IMFAttributes::CopyAllItems([In, Optional] IMFAttributes* pDest)</unmanaged>
        /// <unmanaged-short>IMFAttributes::CopyAllItems</unmanaged-short>
        public unsafe void CopyAllItems(SharpDX.MediaFoundation.MediaAttributes destRef)
        {
            System.IntPtr destRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            destRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(destRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)destRef_, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("045FA593-8799-42b8-BC8D-8968C6453507")]
    public partial class MediaBuffer : SharpDX.ComObject
    {
        public MediaBuffer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaBuffer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaBuffer(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the length of the valid data in the buffer.</p>
        /// </summary>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms698987</doc-id>
        /// <unmanaged>GetCurrentLength / SetCurrentLength</unmanaged>
        /// <unmanaged-short>GetCurrentLength</unmanaged-short>
        public System.Int32 CurrentLength
        {
            get
            {
                GetCurrentLength(out var __output__);
                return __output__;
            }

            set => SetCurrentLength(value);
        }

        /// <summary>
        /// <p> </p><p>Retrieves the allocated size of the buffer.</p>
        /// </summary>
        /// <remarks>
        /// <p>The buffer might or might not contain any valid data, and if there is valid data in the buffer, it might be smaller than the buffer's allocated size. To get the length of the valid data, call <strong>IMFMediaBuffer::GetCurrentLength</strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms704840</doc-id>
        /// <unmanaged>GetMaxLength</unmanaged>
        /// <unmanaged-short>GetMaxLength</unmanaged-short>
        public System.Int32 MaxLength
        {
            get
            {
                GetMaxLength(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Gives the caller access to the memory in the buffer, for reading or writing</p>
        /// </summary>
        /// <param name = "cbMaxLengthRef"><dd> <p>Receives the maximum amount of data that can be written to the buffer. This parameter can be <strong><c>null</c></strong>. The same value is returned by the <strong>IMFMediaBuffer::GetMaxLength</strong> method.</p> </dd></param>
        /// <param name = "cbCurrentLengthRef"><dd> <p>Receives the length of the valid data in the buffer, in bytes. This parameter can be <strong><c>null</c></strong>. The same value is returned by the <strong>IMFMediaBuffer::GetCurrentLength</strong> method.</p> </dd></param>
        /// <returns><dd> <p>Receives a reference to the start of the buffer.</p> </dd></returns>
        /// <remarks>
        /// <p>This method gives the caller access to the entire buffer, up to the maximum size returned in the <em>pcbMaxLength</em> parameter. The value returned in <em>pcbCurrentLength</em> is the size of any valid data already in the buffer, which might be less than the total buffer size.</p><p>The reference returned in <em>ppbBuffer</em> is guaranteed to be valid, and can safely be accessed across the entire buffer for as long as the lock is held. When you are done accessing the buffer, call <strong>IMFMediaBuffer::Unlock</strong> to unlock the buffer. You must call <strong>Unlock</strong> once for each call to <strong>Lock</strong>. After you unlock the buffer, the reference returned in <em>ppbBuffer</em> is no longer valid, and should not be used. Generally, it is best to call <strong>Lock</strong> only when you need to access the buffer memory, and not earlier.</p><p>Locking the buffer does not prevent other threads from calling <strong>Lock</strong>, so you should not rely on this method to synchronize threads.</p><p>This method does not allocate any memory, or transfer ownership of the memory to the caller. Do not release or free the memory; the media buffer will free the memory when the media buffer is destroyed.</p><p>If you modify the contents of the buffer, update the current length by calling <strong>IMFMediaBuffer::SetCurrentLength</strong>.</p><p>If the buffer supports the <strong><see cref = "SharpDX.MediaFoundation.Buffer2D"/></strong> interface, you should use the <strong>IMF2DBuffer::Lock2D</strong> method to lock the buffer. For 2-D buffers, the <strong>Lock2D</strong> method is more efficient than the <strong>Lock</strong> method. If the buffer is locked using <strong>Lock2D</strong>, the Lock method might return <strong><see cref = "InvalidRequest"/></strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970366</doc-id>
        /// <unmanaged>HRESULT IMFMediaBuffer::Lock([Out] unsigned char** ppbBuffer,[Out, Optional] DWORD* pcbMaxLength,[Out, Optional] DWORD* pcbCurrentLength)</unmanaged>
        /// <unmanaged-short>IMFMediaBuffer::Lock</unmanaged-short>
        public unsafe System.IntPtr Lock(out System.Int32 cbMaxLengthRef, out System.Int32 cbCurrentLengthRef)
        {
            System.IntPtr bBufferOut;
            SharpDX.Result __result__;
            fixed (void *cbCurrentLengthRef_ = &cbCurrentLengthRef)
                fixed (void *cbMaxLengthRef_ = &cbMaxLengthRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &bBufferOut, cbMaxLengthRef_, cbCurrentLengthRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
            return bBufferOut;
        }

        /// <summary>
        /// <p> </p><p>Unlocks a buffer that was previously locked. Call this method once for every call to <strong>IMFMediaBuffer::Lock</strong>.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>D3DERR_INVALIDCALL</strong></dt> </dl> </td><td> <p>For Direct3D surface buffers, an error occurred when unlocking the surface.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>It is an error to call <strong>Unlock</strong> if you did not call <strong>Lock</strong> previously.</p><p>After calling this method, do not use the reference returned by the <strong>Lock</strong> method. It is no longer guaranteed to be valid.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms696259</doc-id>
        /// <unmanaged>HRESULT IMFMediaBuffer::Unlock()</unmanaged>
        /// <unmanaged-short>IMFMediaBuffer::Unlock</unmanaged-short>
        public unsafe void Unlock()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the length of the valid data in the buffer.</p>
        /// </summary>
        /// <param name = "cbCurrentLengthRef"><dd> <p>Receives the length of the valid data, in bytes. If the buffer does not contain any valid data, the value is zero.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms698987</doc-id>
        /// <unmanaged>HRESULT IMFMediaBuffer::GetCurrentLength([Out] DWORD* pcbCurrentLength)</unmanaged>
        /// <unmanaged-short>IMFMediaBuffer::GetCurrentLength</unmanaged-short>
        internal unsafe void GetCurrentLength(out System.Int32 cbCurrentLengthRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbCurrentLengthRef_ = &cbCurrentLengthRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cbCurrentLengthRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the length of the valid data in the buffer.</p>
        /// </summary>
        /// <param name = "cbCurrentLength"><dd> <p>Length of the valid data, in bytes. This value cannot be greater than the allocated size of the buffer, which is returned by the <strong>IMFMediaBuffer::GetMaxLength</strong> method.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>The specified length is greater than the maximum size of the buffer.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method if you write data into the buffer.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms703202</doc-id>
        /// <unmanaged>HRESULT IMFMediaBuffer::SetCurrentLength([In] DWORD cbCurrentLength)</unmanaged>
        /// <unmanaged-short>IMFMediaBuffer::SetCurrentLength</unmanaged-short>
        internal unsafe void SetCurrentLength(System.Int32 cbCurrentLength)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cbCurrentLength, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the allocated size of the buffer.</p>
        /// </summary>
        /// <param name = "cbMaxLengthRef"><dd> <p>Receives the allocated size of the buffer, in bytes.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The buffer might or might not contain any valid data, and if there is valid data in the buffer, it might be smaller than the buffer's allocated size. To get the length of the valid data, call <strong>IMFMediaBuffer::GetCurrentLength</strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms704840</doc-id>
        /// <unmanaged>HRESULT IMFMediaBuffer::GetMaxLength([Out] DWORD* pcbMaxLength)</unmanaged>
        /// <unmanaged-short>IMFMediaBuffer::GetMaxLength</unmanaged-short>
        internal unsafe void GetMaxLength(out System.Int32 cbMaxLengthRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbMaxLengthRef_ = &cbMaxLengthRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cbMaxLengthRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("98a1b0bb-03eb-4935-ae7c-93c1fa0e1c93")]
    public partial class MediaEngine : SharpDX.ComObject
    {
        public MediaEngine(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngine(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngine(nativePtr);
        /// <summary>
        /// <p>Gets the most recent error status.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method returns the last error status, if any, that resulted from loading the media source. If there has not been an error, <em>ppError</em> receives the value <strong><c>null</c></strong>.</p><p>This method corresponds to the <strong>error</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh447985</doc-id>
        /// <unmanaged>GetError</unmanaged>
        /// <unmanaged-short>GetError</unmanaged-short>
        public SharpDX.MediaFoundation.MediaError Error
        {
            get
            {
                GetError(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Sets the current error code.</p>
        /// </summary>
        /// <doc-id>hh448012</doc-id>
        /// <unmanaged>SetErrorCode</unmanaged>
        /// <unmanaged-short>SetErrorCode</unmanaged-short>
        public SharpDX.MediaFoundation.MediaEngineErr ErrorCode
        {
            set => SetErrorCode(value);
        }

        /// <summary>
        /// <p>Sets a list of media sources.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to adding a list of <strong>source</strong> elements to a media element in HTML5. </p><p>The Media Engine tries to load each item in the <em>pSrcElements</em> list, until it finds one that loads successfully. After this method is called, the application can use the <strong><see cref = "SharpDX.MediaFoundation.MediaEngineSrcElements"/></strong> interface to update the list at any time. To reload the list, call <strong>IMFMediaEngine::Load</strong>.</p><p>This method completes asynchronously. When the operation starts, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_LOADSTART</strong> event. If no errors occur during the <strong>Load</strong> operation, several other events are generated, including the following.</p><ul> <li><strong>MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA</strong></li> <li><strong>MF_MEDIA_ENGINE_EVENT_LOADEDDATA</strong></li> <li><strong>MF_MEDIA_ENGINE_EVENT_CANPLAY</strong></li> <li><strong>MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH</strong></li> </ul><p>If the Media Engine is unable to load a URL, it sends an <strong>MF_MEDIA_ENGINE_EVENT_ERROR</strong> event. </p><p>For more information about event handling in the Media Engine, see <strong><see cref = "SharpDX.MediaFoundation.MediaEngineNotify"/></strong>.</p><p>If the application also calls <strong>IMFMediaEngine::SetSource</strong>, the URL passed to <strong>SetSource</strong> takes precedence over the list given to <strong>SetSourceElements</strong>.</p>
        /// </remarks>
        /// <doc-id>hh448018</doc-id>
        /// <unmanaged>SetSourceElements</unmanaged>
        /// <unmanaged-short>SetSourceElements</unmanaged-short>
        public SharpDX.MediaFoundation.MediaEngineSrcElements SourceElements
        {
            set => SetSourceElements(value);
        }

        /// <summary>
        /// <p>Gets the current network state of the media engine.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to the <strong>networkState</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh447989</doc-id>
        /// <unmanaged>GetNetworkState</unmanaged>
        /// <unmanaged-short>GetNetworkState</unmanaged-short>
        public System.Int16 NetworkState
        {
            get => GetNetworkState();
        }

        /// <summary>
        /// <p>Gets or sets the preload flag.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to the <strong>preload</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5. The value is a hint to the user-agent whether to preload the media resource.</p>
        /// </remarks>
        /// <doc-id>hh447992</doc-id>
        /// <unmanaged>GetPreload / SetPreload</unmanaged>
        /// <unmanaged-short>GetPreload</unmanaged-short>
        public SharpDX.MediaFoundation.MediaEnginePreload Preload
        {
            get => GetPreload();
            set => SetPreload(value);
        }

        /// <summary>
        /// <p>Queries how much resource data the media engine has buffered.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to the <strong>buffered</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>The returned  <strong><see cref = "SharpDX.MediaFoundation.MediaTimeRange"/></strong> interface represents a list of time ranges. The time ranges indicate which portions of the media resource have been downloaded. The time range list can be empty.</p>
        /// </remarks>
        /// <doc-id>hh447980</doc-id>
        /// <unmanaged>GetBuffered</unmanaged>
        /// <unmanaged-short>GetBuffered</unmanaged-short>
        public SharpDX.MediaFoundation.MediaTimeRange Buffered
        {
            get
            {
                GetBuffered(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the ready state, which indicates whether the current media resource can be rendered.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to the <strong>readyState</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh447993</doc-id>
        /// <unmanaged>GetReadyState</unmanaged>
        /// <unmanaged-short>GetReadyState</unmanaged-short>
        public System.Int16 ReadyState
        {
            get => GetReadyState();
        }

        /// <summary>
        /// <p>Queries whether the Media Engine is currently seeking to a new playback position.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to the <strong>seeking</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh448004</doc-id>
        /// <unmanaged>IsSeeking</unmanaged>
        /// <unmanaged-short>IsSeeking</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsSeeking
        {
            get => IsSeeking_();
        }

        /// <summary>
        /// <p>Gets or sets the current playback position.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to the <strong>currentTime</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5. </p>
        /// </remarks>
        /// <doc-id>hh447982</doc-id>
        /// <unmanaged>GetCurrentTime / SetCurrentTime</unmanaged>
        /// <unmanaged-short>GetCurrentTime</unmanaged-short>
        public System.Double CurrentTime
        {
            get => GetCurrentTime();
            set => SetCurrentTime(value);
        }

        /// <summary>
        /// <p>Gets the initial playback position.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to the <strong>initialTime</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh447995</doc-id>
        /// <unmanaged>GetStartTime</unmanaged>
        /// <unmanaged-short>GetStartTime</unmanaged-short>
        public System.Double StartTime
        {
            get => GetStartTime();
        }

        /// <summary>
        /// <p>Gets the duration of the media resource.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to the <strong>duration</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>If the duration changes, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE</strong> event. See <strong>IMFMediaEngineNotify::EventNotify</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447984</doc-id>
        /// <unmanaged>GetDuration</unmanaged>
        /// <unmanaged-short>GetDuration</unmanaged-short>
        public System.Double Duration
        {
            get => GetDuration();
        }

        /// <summary>
        /// <p>Queries whether playback is currently paused.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to the <strong>paused</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh448003</doc-id>
        /// <unmanaged>IsPaused</unmanaged>
        /// <unmanaged-short>IsPaused</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsPaused
        {
            get => IsPaused_();
        }

        /// <summary>
        /// <p>Gets or sets the default playback rate.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to getting the <strong>defaultPlaybackRate</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5. </p><p>The default playback rate is used for the next call to the <strong>IMFMediaEngine::Play</strong> method. To change the current playback rate, call <strong>IMFMediaEngine::SetPlaybackRate</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447983</doc-id>
        /// <unmanaged>GetDefaultPlaybackRate / SetDefaultPlaybackRate</unmanaged>
        /// <unmanaged-short>GetDefaultPlaybackRate</unmanaged-short>
        public System.Double DefaultPlaybackRate
        {
            get => GetDefaultPlaybackRate();
            set => SetDefaultPlaybackRate(value);
        }

        /// <summary>
        /// <p>Gets or sets the current playback rate.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to getting the <strong>playbackRate</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5. </p>
        /// </remarks>
        /// <doc-id>hh447990</doc-id>
        /// <unmanaged>GetPlaybackRate / SetPlaybackRate</unmanaged>
        /// <unmanaged-short>GetPlaybackRate</unmanaged-short>
        public System.Double PlaybackRate
        {
            get => GetPlaybackRate();
            set => SetPlaybackRate(value);
        }

        /// <summary>
        /// <p>Gets the time ranges that have been rendered.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to the <strong>played</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh447991</doc-id>
        /// <unmanaged>GetPlayed</unmanaged>
        /// <unmanaged-short>GetPlayed</unmanaged-short>
        public SharpDX.MediaFoundation.MediaTimeRange Played
        {
            get
            {
                GetPlayed(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the time ranges to which the Media Engine can currently seek.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to the <strong>seekable</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>To find out whether the media source supports seeking, call <strong>IMFMediaEngineEx::GetResourceCharacteristics</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447994</doc-id>
        /// <unmanaged>GetSeekable</unmanaged>
        /// <unmanaged-short>GetSeekable</unmanaged-short>
        public SharpDX.MediaFoundation.MediaTimeRange Seekable
        {
            get
            {
                GetSeekable(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Queries whether playback has ended.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to the <strong>ended</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh448002</doc-id>
        /// <unmanaged>IsEnded</unmanaged>
        /// <unmanaged-short>IsEnded</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsEnded
        {
            get => IsEnded_();
        }

        /// <summary>
        /// <p>Queries whether the Media Engine automatically begins playback.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to the <strong>autoplay</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>If this method returns <strong>TRUE</strong>, playback begins automatically after the <strong>IMFMediaEngine::Load</strong> method completes. Otherwise, playback begins when the application calls <strong>IMFMediaEngine::Play</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447979</doc-id>
        /// <unmanaged>GetAutoPlay / SetAutoPlay</unmanaged>
        /// <unmanaged-short>GetAutoPlay</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool AutoPlay
        {
            get => GetAutoPlay();
            set => SetAutoPlay(value);
        }

        /// <summary>
        /// <p>Queries whether the Media Engine will loop playback.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to getting the <strong>loop</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>If looping is enabled, the Media Engine seeks to the start of the content when playback reaches the end.</p>
        /// </remarks>
        /// <doc-id>hh447986</doc-id>
        /// <unmanaged>GetLoop / SetLoop</unmanaged>
        /// <unmanaged-short>GetLoop</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool Loop
        {
            get => GetLoop();
            set => SetLoop(value);
        }

        /// <summary>
        /// <p>Queries whether the audio is muted. </p>
        /// </summary>
        /// <doc-id>hh447987</doc-id>
        /// <unmanaged>GetMuted / SetMuted</unmanaged>
        /// <unmanaged-short>GetMuted</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool Muted
        {
            get => GetMuted();
            set => SetMuted(value);
        }

        /// <summary>
        /// <p>Gets or sets the audio volume level.</p>
        /// </summary>
        /// <doc-id>hh447997</doc-id>
        /// <unmanaged>GetVolume / SetVolume</unmanaged>
        /// <unmanaged-short>GetVolume</unmanaged-short>
        public System.Double Volume
        {
            get => GetVolume();
            set => SetVolume(value);
        }

        /// <summary>
        /// <p>Gets the most recent error status.</p>
        /// </summary>
        /// <param name = "errorOut"><dd> <p>Receives either a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaError"/></strong> interface, or the value <strong><c>null</c></strong>. If the value is <strong>non-<c>null</c></strong>, the caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method returns the last error status, if any, that resulted from loading the media source. If there has not been an error, <em>ppError</em> receives the value <strong><c>null</c></strong>.</p><p>This method corresponds to the <strong>error</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh447985</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::GetError([Out] IMFMediaError** ppError)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetError</unmanaged-short>
        internal unsafe void GetError(out SharpDX.MediaFoundation.MediaError errorOut)
        {
            System.IntPtr errorOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &errorOut_, (*(void ***)this._nativePointer)[3]);
            if (errorOut_ != System.IntPtr.Zero)
                errorOut = new SharpDX.MediaFoundation.MediaError(errorOut_);
            else
                errorOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the current error code.</p>
        /// </summary>
        /// <param name = "error"><dd> <p>The error code, as an <strong><see cref = "SharpDX.MediaFoundation.MediaEngineErr"/></strong> value.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh448012</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::SetErrorCode([In] MF_MEDIA_ENGINE_ERR error)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::SetErrorCode</unmanaged-short>
        internal unsafe void SetErrorCode(SharpDX.MediaFoundation.MediaEngineErr error)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)error), (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets a list of media sources.</p>
        /// </summary>
        /// <param name = "srcElementsRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaEngineSrcElements"/></strong> interface. The caller must implement this interface. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to adding a list of <strong>source</strong> elements to a media element in HTML5. </p><p>The Media Engine tries to load each item in the <em>pSrcElements</em> list, until it finds one that loads successfully. After this method is called, the application can use the <strong><see cref = "SharpDX.MediaFoundation.MediaEngineSrcElements"/></strong> interface to update the list at any time. To reload the list, call <strong>IMFMediaEngine::Load</strong>.</p><p>This method completes asynchronously. When the operation starts, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_LOADSTART</strong> event. If no errors occur during the <strong>Load</strong> operation, several other events are generated, including the following.</p><ul> <li><strong>MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA</strong></li> <li><strong>MF_MEDIA_ENGINE_EVENT_LOADEDDATA</strong></li> <li><strong>MF_MEDIA_ENGINE_EVENT_CANPLAY</strong></li> <li><strong>MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH</strong></li> </ul><p>If the Media Engine is unable to load a URL, it sends an <strong>MF_MEDIA_ENGINE_EVENT_ERROR</strong> event. </p><p>For more information about event handling in the Media Engine, see <strong><see cref = "SharpDX.MediaFoundation.MediaEngineNotify"/></strong>.</p><p>If the application also calls <strong>IMFMediaEngine::SetSource</strong>, the URL passed to <strong>SetSource</strong> takes precedence over the list given to <strong>SetSourceElements</strong>.</p>
        /// </remarks>
        /// <doc-id>hh448018</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::SetSourceElements([In] IMFMediaEngineSrcElements* pSrcElements)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::SetSourceElements</unmanaged-short>
        internal unsafe void SetSourceElements(SharpDX.MediaFoundation.MediaEngineSrcElements srcElementsRef)
        {
            System.IntPtr srcElementsRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            srcElementsRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaEngineSrcElements>(srcElementsRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)srcElementsRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the URL of a media resource.</p>
        /// </summary>
        /// <param name = "urlRef"><dd> <p>The URL of the media resource.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to setting the <strong>src</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>The URL specified by this method takes precedence over media resources specified in the <strong>IMFMediaEngine::SetSourceElements</strong> method. To load the URL, call <strong>IMFMediaEngine::Load</strong>.</p><p>This method asynchronously loads the URL. When the operation starts, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_LOADSTART</strong> event. If no errors occur during the <strong>Load</strong> operation, several other events are generated, including the following.</p><ul> <li><strong>MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA</strong></li> <li><strong>MF_MEDIA_ENGINE_EVENT_LOADEDDATA</strong></li> <li><strong>MF_MEDIA_ENGINE_EVENT_CANPLAY</strong></li> <li><strong>MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH</strong></li> </ul><p>If the Media Engine is unable to load the URL, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_ERROR</strong> event. </p><p>For more information about event handling in the Media Engine, see <strong><see cref = "SharpDX.MediaFoundation.MediaEngineNotify"/></strong>.</p>
        /// </remarks>
        /// <doc-id>hh448017</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::SetSource([In] wchar_t* pUrl)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::SetSource</unmanaged-short>
        internal unsafe void SetSource(System.IntPtr urlRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)urlRef, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the URL of the current media resource, or an empty string if no media resource is present.</p>
        /// </summary>
        /// <param name = "urlOut"><dd> <p>Receives a <strong>BSTR</strong> that contains the URL of the current media resource. If there is no media resource, <em>ppUrl</em> receives an empty string. The caller must free the  <strong>BSTR</strong> by calling <strong>SysFreeString</strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>currentSrc</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>Initially, the current media resource is empty. It is updated when the Media Engine performs the resource selection algorithm.</p>
        /// </remarks>
        /// <doc-id>hh447981</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::GetCurrentSource([Out] wchar_t** ppUrl)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetCurrentSource</unmanaged-short>
        public unsafe void GetCurrentSource(System.IntPtr urlOut)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)urlOut, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the current network state of the media engine.</p>
        /// </summary>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.MediaFoundation.MediaEngineNetwork"/></strong> enumeration value.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>networkState</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh447989</doc-id>
        /// <unmanaged>unsigned short IMFMediaEngine::GetNetworkState()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetNetworkState</unmanaged-short>
        internal unsafe System.Int16 GetNetworkState()
        {
            System.Int16 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallshort(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the preload flag.</p>
        /// </summary>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.MediaFoundation.MediaEnginePreload"/></strong> enumeration value.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>preload</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5. The value is a hint to the user-agent whether to preload the media resource.</p>
        /// </remarks>
        /// <doc-id>hh447992</doc-id>
        /// <unmanaged>MF_MEDIA_ENGINE_PRELOAD IMFMediaEngine::GetPreload()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetPreload</unmanaged-short>
        internal unsafe SharpDX.MediaFoundation.MediaEnginePreload GetPreload()
        {
            SharpDX.MediaFoundation.MediaEnginePreload __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMediaFoundationMediaEnginePreload(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// <p>Sets the preload flag.</p>
        /// </summary>
        /// <param name = "preload"><dd> <p>An <strong><see cref = "SharpDX.MediaFoundation.MediaEnginePreload"/></strong> value equal to  the preload flag.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to setting the <strong>preload</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5. The value is a hint to the user-agent whether to preload the media resource.</p>
        /// </remarks>
        /// <doc-id>hh448016</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::SetPreload([In] MF_MEDIA_ENGINE_PRELOAD Preload)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::SetPreload</unmanaged-short>
        internal unsafe void SetPreload(SharpDX.MediaFoundation.MediaEnginePreload preload)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)preload), (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries how much resource data the media engine has buffered.</p>
        /// </summary>
        /// <param name = "bufferedOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaTimeRange"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>buffered</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>The returned  <strong><see cref = "SharpDX.MediaFoundation.MediaTimeRange"/></strong> interface represents a list of time ranges. The time ranges indicate which portions of the media resource have been downloaded. The time range list can be empty.</p>
        /// </remarks>
        /// <doc-id>hh447980</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::GetBuffered([Out] IMFMediaTimeRange** ppBuffered)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetBuffered</unmanaged-short>
        internal unsafe void GetBuffered(out SharpDX.MediaFoundation.MediaTimeRange bufferedOut)
        {
            System.IntPtr bufferedOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &bufferedOut_, (*(void ***)this._nativePointer)[11]);
            if (bufferedOut_ != System.IntPtr.Zero)
                bufferedOut = new SharpDX.MediaFoundation.MediaTimeRange(bufferedOut_);
            else
                bufferedOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Loads the current media source.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The main purpose of this method is to reload a list of source elements after updating the list. For more information, see <strong>SetSourceElements</strong>. Otherwise, calling this method is generally not required. To load a new media source, call <strong>IMFMediaEngine::SetSource</strong> or <strong>IMFMediaEngine::SetSourceElements</strong>.</p><p>The <strong>Load</strong> method explictly invokes the Media Engine's media resource loading algorithm. Before calling this method, you must set the media resource by calling <strong>IMFMediaEngine::SetSource</strong> or <strong>IMFMediaEngine::SetSourceElements</strong>. </p><p>This method completes asynchronously. When the <strong>Load</strong> operation starts, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_LOADSTART</strong> event. If no errors occur during the <strong>Load</strong> operation, several other events are generated, including the following.</p><ul> <li><strong>MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA</strong></li> <li><strong>MF_MEDIA_ENGINE_EVENT_LOADEDDATA</strong></li> <li><strong>MF_MEDIA_ENGINE_EVENT_CANPLAY</strong></li> <li><strong>MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH</strong></li> </ul><p>If the Media Engine is unable to load the file, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_ERROR</strong> event. </p><p>For more information about event handling in the Media Engine, see <strong><see cref = "SharpDX.MediaFoundation.MediaEngineNotify"/></strong>.</p><p>This method corresponds to the <strong>load</strong> method of the <strong>HTMLMediaElement</strong> interface in HTML5. </p>
        /// </remarks>
        /// <doc-id>hh448005</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::Load()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::Load</unmanaged-short>
        public unsafe void Load()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries how likely it is that the Media Engine can play a specified type of media resource.</p>
        /// </summary>
        /// <param name = "type"><dd> <p>A string that contains a MIME type with an optional codecs parameter, as defined in RFC 4281.</p> </dd></param>
        /// <param name = "answerRef"><dd> <p>Receives an <strong><see cref = "SharpDX.MediaFoundation.MediaEngineCanPlay"/></strong> enumeration value.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>canPlayType</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>The <strong>canPlayType</strong> attribute defines the following values.</p><table> <tr><th>Value</th><th>Description</th></tr> <tr><td>"" (empty string)</td><td>The user-agent cannot play the resource, or the resource type is "application/octet-stream".</td></tr> <tr><td>"probably"</td><td>The user-agent probably can play the resource.</td></tr> <tr><td>"maybe"</td><td>Neither of the previous values applies.</td></tr> </table><p>?</p><p>The value "probably" is used because a MIME type for a media resource is generally not a complete description of the resource. For example, "video/mp4" specifies an MP4 file with video, but does not describe the codec. Even with the optional codecs parameter, the MIME type omits some information, such as the actual coded bit rate. Therefore, it is usually impossible to be certain that playback is possible until the actual media resource is opened.</p>
        /// </remarks>
        /// <doc-id>hh447978</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::CanPlayType([In] wchar_t* type,[Out] MF_MEDIA_ENGINE_CANPLAY* pAnswer)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::CanPlayType</unmanaged-short>
        public unsafe void CanPlayType(System.String type, out SharpDX.MediaFoundation.MediaEngineCanPlay answerRef)
        {
            SharpDX.Result __result__;
            fixed (void *answerRef_ = &answerRef)
                fixed (char *type_ = type)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)type_, answerRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the ready state, which indicates whether the current media resource can be rendered.</p>
        /// </summary>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.MediaFoundation.MediaEngineReady"/></strong> enumeration value.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>readyState</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh447993</doc-id>
        /// <unmanaged>unsigned short IMFMediaEngine::GetReadyState()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetReadyState</unmanaged-short>
        internal unsafe System.Int16 GetReadyState()
        {
            System.Int16 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallshort(this._nativePointer, (*(void ***)this._nativePointer)[14]);
            return __result__;
        }

        /// <summary>
        /// <p>Queries whether the Media Engine is currently seeking to a new playback position.</p>
        /// </summary>
        /// <returns><p>Returns <strong>TRUE</strong> if the Media Engine is seeking, or <strong><see cref = "SharpDX.Result.False"/></strong> otherwise.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>seeking</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh448004</doc-id>
        /// <unmanaged>BOOL IMFMediaEngine::IsSeeking()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::IsSeeking</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsSeeking_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[15]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the current playback position.</p>
        /// </summary>
        /// <returns><p>Returns the playback position, in seconds.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>currentTime</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5. </p>
        /// </remarks>
        /// <doc-id>hh447982</doc-id>
        /// <unmanaged>double IMFMediaEngine::GetCurrentTime()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetCurrentTime</unmanaged-short>
        internal unsafe System.Double GetCurrentTime()
        {
            System.Double __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCalldouble(this._nativePointer, (*(void ***)this._nativePointer)[16]);
            return __result__;
        }

        /// <summary>
        /// <p>Seeks to a new playback position.</p>
        /// </summary>
        /// <param name = "seekTime"><dd> <p>The new playback position, in seconds.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to setting the <strong>currentTime</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>The method completes asynchronously. When the seek operation starts, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_SEEKING</strong> event. When the seek operation completes, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_SEEKED</strong> event. See <strong>IMFMediaEventNotify::EventNotify</strong>.</p>
        /// </remarks>
        /// <doc-id>hh448010</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::SetCurrentTime([In] double seekTime)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::SetCurrentTime</unmanaged-short>
        internal unsafe void SetCurrentTime(System.Double seekTime)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, seekTime, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the initial playback position.</p>
        /// </summary>
        /// <returns><p>Returns the initial playback position, in seconds.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>initialTime</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh447995</doc-id>
        /// <unmanaged>double IMFMediaEngine::GetStartTime()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetStartTime</unmanaged-short>
        internal unsafe System.Double GetStartTime()
        {
            System.Double __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCalldouble(this._nativePointer, (*(void ***)this._nativePointer)[18]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the duration of the media resource.</p>
        /// </summary>
        /// <returns><p>Returns the duration, in seconds. If no media data is available, the method returns not-a-number (NaN). If the duration is unbounded, the method returns an infinite value.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>duration</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>If the duration changes, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE</strong> event. See <strong>IMFMediaEngineNotify::EventNotify</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447984</doc-id>
        /// <unmanaged>double IMFMediaEngine::GetDuration()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetDuration</unmanaged-short>
        internal unsafe System.Double GetDuration()
        {
            System.Double __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCalldouble(this._nativePointer, (*(void ***)this._nativePointer)[19]);
            return __result__;
        }

        /// <summary>
        /// <p>Queries whether playback is currently paused.</p>
        /// </summary>
        /// <returns><p>Returns <strong>TRUE</strong> if playback is paused, or  <strong><see cref = "SharpDX.Result.False"/></strong> otherwise.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>paused</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh448003</doc-id>
        /// <unmanaged>BOOL IMFMediaEngine::IsPaused()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::IsPaused</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsPaused_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[20]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the default playback rate.</p>
        /// </summary>
        /// <returns><p>Returns the default playback rate, as a multiple of normal (1?) playback. A negative value indicates reverse playback.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to getting the <strong>defaultPlaybackRate</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5. </p><p>The default playback rate is used for the next call to the <strong>IMFMediaEngine::Play</strong> method. To change the current playback rate, call <strong>IMFMediaEngine::SetPlaybackRate</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447983</doc-id>
        /// <unmanaged>double IMFMediaEngine::GetDefaultPlaybackRate()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetDefaultPlaybackRate</unmanaged-short>
        internal unsafe System.Double GetDefaultPlaybackRate()
        {
            System.Double __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCalldouble(this._nativePointer, (*(void ***)this._nativePointer)[21]);
            return __result__;
        }

        /// <summary>
        /// <p>Sets the default playback rate.</p>
        /// </summary>
        /// <param name = "rate"><dd> <p>The default playback rate, as a multiple of normal (1?) playback. A negative value indicates reverse playback.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to setting the <strong>defaultPlaybackRate</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh448011</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::SetDefaultPlaybackRate([In] double Rate)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::SetDefaultPlaybackRate</unmanaged-short>
        internal unsafe void SetDefaultPlaybackRate(System.Double rate)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, rate, (*(void ***)this._nativePointer)[22]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the current playback rate.</p>
        /// </summary>
        /// <returns><p>Returns the playback rate, as a multiple of normal (1?) playback. A negative value indicates reverse playback.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to getting the <strong>playbackRate</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5. </p>
        /// </remarks>
        /// <doc-id>hh447990</doc-id>
        /// <unmanaged>double IMFMediaEngine::GetPlaybackRate()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetPlaybackRate</unmanaged-short>
        internal unsafe System.Double GetPlaybackRate()
        {
            System.Double __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCalldouble(this._nativePointer, (*(void ***)this._nativePointer)[23]);
            return __result__;
        }

        /// <summary>
        /// <p>Sets the current playback rate.</p>
        /// </summary>
        /// <param name = "rate"><dd> <p>The playback rate, as a multiple of normal (1?) playback. A negative value indicates reverse playback.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to setting the <strong>playbackRate</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh448015</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::SetPlaybackRate([In] double Rate)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::SetPlaybackRate</unmanaged-short>
        internal unsafe void SetPlaybackRate(System.Double rate)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, rate, (*(void ***)this._nativePointer)[24]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the time ranges that have been rendered.</p>
        /// </summary>
        /// <param name = "playedOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaTimeRange"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>played</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh447991</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::GetPlayed([Out] IMFMediaTimeRange** ppPlayed)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetPlayed</unmanaged-short>
        internal unsafe void GetPlayed(out SharpDX.MediaFoundation.MediaTimeRange playedOut)
        {
            System.IntPtr playedOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &playedOut_, (*(void ***)this._nativePointer)[25]);
            if (playedOut_ != System.IntPtr.Zero)
                playedOut = new SharpDX.MediaFoundation.MediaTimeRange(playedOut_);
            else
                playedOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the time ranges to which the Media Engine can currently seek.</p>
        /// </summary>
        /// <param name = "seekableOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaTimeRange"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>seekable</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>To find out whether the media source supports seeking, call <strong>IMFMediaEngineEx::GetResourceCharacteristics</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447994</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::GetSeekable([Out] IMFMediaTimeRange** ppSeekable)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetSeekable</unmanaged-short>
        internal unsafe void GetSeekable(out SharpDX.MediaFoundation.MediaTimeRange seekableOut)
        {
            System.IntPtr seekableOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &seekableOut_, (*(void ***)this._nativePointer)[26]);
            if (seekableOut_ != System.IntPtr.Zero)
                seekableOut = new SharpDX.MediaFoundation.MediaTimeRange(seekableOut_);
            else
                seekableOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries whether playback has ended.</p>
        /// </summary>
        /// <returns><p>Returns <strong>TRUE</strong> if the direction of playback is forward and playback has reached the end of the media resource. Returns <strong><see cref = "SharpDX.Result.False"/></strong> otherwise.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>ended</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh448002</doc-id>
        /// <unmanaged>BOOL IMFMediaEngine::IsEnded()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::IsEnded</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsEnded_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[27]);
            return __result__;
        }

        /// <summary>
        /// <p>Queries whether the Media Engine automatically begins playback.</p>
        /// </summary>
        /// <returns><p>Returns <strong>TRUE</strong> if the Media Engine automatically begins playback, or <strong><see cref = "SharpDX.Result.False"/></strong> otherwise.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>autoplay</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>If this method returns <strong>TRUE</strong>, playback begins automatically after the <strong>IMFMediaEngine::Load</strong> method completes. Otherwise, playback begins when the application calls <strong>IMFMediaEngine::Play</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447979</doc-id>
        /// <unmanaged>BOOL IMFMediaEngine::GetAutoPlay()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetAutoPlay</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool GetAutoPlay()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[28]);
            return __result__;
        }

        /// <summary>
        /// <p>Specifies whether the Media Engine automatically begins playback.</p>
        /// </summary>
        /// <param name = "autoPlay"><dd> <p>If <strong>TRUE</strong>, the Media Engine automatically begins playback after it loads a media source. Otherwise, playback does not begin until the application calls <strong>IMFMediaEngine::Play</strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to setting the <strong>autoplay</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh448009</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::SetAutoPlay([In] BOOL AutoPlay)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::SetAutoPlay</unmanaged-short>
        internal unsafe void SetAutoPlay(SharpDX.Mathematics.Interop.RawBool autoPlay)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, autoPlay, (*(void ***)this._nativePointer)[29]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries whether the Media Engine will loop playback.</p>
        /// </summary>
        /// <returns><p>Returns <strong>TRUE</strong> if looping is enabled, or <strong><see cref = "SharpDX.Result.False"/></strong> otherwise.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to getting the <strong>loop</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>If looping is enabled, the Media Engine seeks to the start of the content when playback reaches the end.</p>
        /// </remarks>
        /// <doc-id>hh447986</doc-id>
        /// <unmanaged>BOOL IMFMediaEngine::GetLoop()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetLoop</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool GetLoop()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[30]);
            return __result__;
        }

        /// <summary>
        /// <p>Specifies whether the Media Engine loops playback.</p>
        /// </summary>
        /// <param name = "loop"><dd> <p>Specify <strong>TRUE</strong> to enable looping, or <strong><see cref = "SharpDX.Result.False"/></strong> to disable looping.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>If <em>Loop</em> is <strong>TRUE</strong>, playback loops back to the beginning when it reaches the end of the source.</p><p>This method corresponds to setting the <strong>loop</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh448013</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::SetLoop([In] BOOL Loop)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::SetLoop</unmanaged-short>
        internal unsafe void SetLoop(SharpDX.Mathematics.Interop.RawBool loop)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, loop, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Starts playback.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>play</strong> method of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>The method completes asynchronously. When the operation starts, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_PLAY</strong> event. When playback is under way, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_PLAYING</strong> event. See <strong>IMFMediaEventNotify::EventNotify</strong>.</p>
        /// </remarks>
        /// <doc-id>hh448008</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::Play()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::Play</unmanaged-short>
        public unsafe void Play()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Pauses playback.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>pause</strong> method of the <strong>HTMLMediaElement</strong> interface in HTML5.</p><p>The method completes asynchronously. When the transition to paused is complete, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_PAUSE                </strong> event. See <strong>IMFMediaEventNotify::EventNotify</strong>.</p>
        /// </remarks>
        /// <doc-id>hh448007</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::Pause()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::Pause</unmanaged-short>
        public unsafe void Pause()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries whether the audio is muted. </p>
        /// </summary>
        /// <returns><p>Returns <strong>TRUE</strong> if the audio is muted, or <strong><see cref = "SharpDX.Result.False"/></strong> otherwise.</p></returns>
        /// <doc-id>hh447987</doc-id>
        /// <unmanaged>BOOL IMFMediaEngine::GetMuted()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetMuted</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool GetMuted()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[34]);
            return __result__;
        }

        /// <summary>
        /// <p>Mutes or unmutes the audio. </p>
        /// </summary>
        /// <param name = "muted"><dd> <p>Specify <strong>TRUE</strong> to mute the audio, or <strong><see cref = "SharpDX.Result.False"/></strong> to unmute the audio. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh448014</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::SetMuted([In] BOOL Muted)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::SetMuted</unmanaged-short>
        internal unsafe void SetMuted(SharpDX.Mathematics.Interop.RawBool muted)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, muted, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the audio volume level.</p>
        /// </summary>
        /// <returns><p>Returns the volume level. Volume is expressed as an attenuation level, where 0.0 indicates silence and 1.0 indicates full volume (no attenuation).</p></returns>
        /// <doc-id>hh447997</doc-id>
        /// <unmanaged>double IMFMediaEngine::GetVolume()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetVolume</unmanaged-short>
        internal unsafe System.Double GetVolume()
        {
            System.Double __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCalldouble(this._nativePointer, (*(void ***)this._nativePointer)[36]);
            return __result__;
        }

        /// <summary>
        /// <p>Sets the audio volume level.</p>
        /// </summary>
        /// <param name = "volume"><dd> <p>The volume level. Volume is expressed as an attenuation level, where 0.0 indicates silence and 1.0 indicates full volume (no attenuation). </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>When the audio balance changes, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_VOLUMECHANGE</strong> event. See <strong>IMFMediaEventNotify::EventNotify</strong>.</p>
        /// </remarks>
        /// <doc-id>hh448019</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::SetVolume([In] double Volume)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::SetVolume</unmanaged-short>
        internal unsafe void SetVolume(System.Double volume)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, volume, (*(void ***)this._nativePointer)[37]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries whether the current media resource contains a video stream.</p>
        /// </summary>
        /// <returns><p>Returns <strong>TRUE</strong> if the current media resource contains a video stream. Returns <strong><see cref = "SharpDX.Result.False"/></strong> if there is no media resource or the media resource does not contain a video stream.</p></returns>
        /// <doc-id>hh448001</doc-id>
        /// <unmanaged>BOOL IMFMediaEngine::HasVideo()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::HasVideo</unmanaged-short>
        public unsafe SharpDX.Mathematics.Interop.RawBool HasVideo()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[38]);
            return __result__;
        }

        /// <summary>
        /// <p>Queries whether the current media resource contains an audio stream.</p>
        /// </summary>
        /// <returns><p>Returns <strong>TRUE</strong> if the current media resource contains an audio stream. Returns <strong><see cref = "SharpDX.Result.False"/></strong> if there is no media resource or the media resource does not contain an audio stream.</p></returns>
        /// <doc-id>hh447998</doc-id>
        /// <unmanaged>BOOL IMFMediaEngine::HasAudio()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::HasAudio</unmanaged-short>
        public unsafe SharpDX.Mathematics.Interop.RawBool HasAudio()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[39]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the size of the video frame, adjusted for aspect ratio.</p>
        /// </summary>
        /// <param name = "cx"><dd> <p>Receives the width in pixels.</p> </dd></param>
        /// <param name = "cy"><dd> <p>Receives the height in pixels.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method adjusts for the correct picture aspect ratio.
        /// For example, if the encoded frame is 720 ? 420 and the picture aspect ratio is 4:3, the method will return a size equal to 640 ? 480 pixels.</p>
        /// </remarks>
        /// <doc-id>hh447988</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::GetNativeVideoSize([Out, Optional] DWORD* cx,[Out, Optional] DWORD* cy)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetNativeVideoSize</unmanaged-short>
        public unsafe void GetNativeVideoSize(out System.Int32 cx, out System.Int32 cy)
        {
            SharpDX.Result __result__;
            fixed (void *cy_ = &cy)
                fixed (void *cx_ = &cx)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cx_, cy_, (*(void ***)this._nativePointer)[40]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the picture aspect ratio of the video stream.</p>
        /// </summary>
        /// <param name = "cx"><dd> <p>Receives the x component of the aspect ratio.</p> </dd></param>
        /// <param name = "cy"><dd> <p>Receives the y component of the aspect ratio.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The Media Engine automatically converts the pixel aspect ratio to 1:1 (square pixels).</p>
        /// </remarks>
        /// <doc-id>hh447996</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::GetVideoAspectRatio([Out, Optional] DWORD* cx,[Out, Optional] DWORD* cy)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::GetVideoAspectRatio</unmanaged-short>
        public unsafe void GetVideoAspectRatio(out System.Int32 cx, out System.Int32 cy)
        {
            SharpDX.Result __result__;
            fixed (void *cy_ = &cy)
                fixed (void *cx_ = &cx)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cx_, cy_, (*(void ***)this._nativePointer)[41]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Shuts down the Media Engine and releases the resources it is using. </p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh448020</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::Shutdown()</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::Shutdown</unmanaged-short>
        public unsafe void Shutdown()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[42]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Copies the current video frame to a DXGI surface or WIC bitmap.</p>
        /// </summary>
        /// <param name = "dstSurfRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of the destination surface. </p> </dd></param>
        /// <param name = "srcRef"><dd> <p>A reference to an <strong><see cref = "SharpDX.MediaFoundation.VideoNormalizedRect"/></strong> structure that specifies the source rectangle.</p> </dd></param>
        /// <param name = "dstRef"><dd> <p>A reference to a <strong><see cref = "SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure that specifies the destination rectangle.</p> </dd></param>
        /// <param name = "borderClrRef"><dd> <p>A reference to an <strong><see cref = "SharpDX.Mathematics.Interop.RawColorBGRA"/></strong> structure that specifies the border color. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>In frame-server mode, call this method to blit the video frame to a DXGI or WIC surface. The application can call this method at any time after the Media Engine loads a video resource. Typically, however, the application calls <strong>IMFMediaEngine::OnVideoStreamTick</strong> first, to determine whether a new frame is available. If <strong>OnVideoStreamTick</strong> returns <strong><see cref = "SharpDX.Result.Ok"/></strong>, the application then calls <strong>TransferVideoFrame</strong>.</p><p>The Media Engine scales and letterboxes the video to fit the destination rectangle. It fills the letterbox area with the border color.</p><p>For protected content, call the <strong>IMFMediaEngineProtectedContent::TransferVideoFrame</strong> method instead of this method.</p>
        /// </remarks>
        /// <doc-id>hh448021</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::TransferVideoFrame([In] IUnknown* pDstSurf,[In, Optional] const MFVideoNormalizedRect* pSrc,[In] const RECT* pDst,[In, Optional] const MFARGB* pBorderClr)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::TransferVideoFrame</unmanaged-short>
        public unsafe void TransferVideoFrame(SharpDX.IUnknown dstSurfRef, SharpDX.MediaFoundation.VideoNormalizedRect? srcRef, SharpDX.Mathematics.Interop.RawRectangle dstRef, SharpDX.Mathematics.Interop.RawColorBGRA? borderClrRef)
        {
            System.IntPtr dstSurfRef_ = System.IntPtr.Zero;
            SharpDX.MediaFoundation.VideoNormalizedRect srcRef_;
            SharpDX.Mathematics.Interop.RawColorBGRA borderClrRef_;
            SharpDX.Result __result__;
            dstSurfRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(dstSurfRef);
            if (srcRef != null)
                srcRef_ = srcRef.Value;
            if (borderClrRef != null)
                borderClrRef_ = borderClrRef.Value;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)dstSurfRef_, srcRef == null ? (void *)0 : &srcRef_, &dstRef, borderClrRef == null ? (void *)0 : &borderClrRef_, (*(void ***)this._nativePointer)[43]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries the Media Engine to find out whether a new video frame is ready.</p>
        /// </summary>
        /// <param name = "ptsRef"><dd> <p>If a new frame is ready, receives the presentation time of the frame.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong>S_FALSE</strong></dt> </dl> </td><td> <p>The method succeeded, but the Media Engine does not have a new frame.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>A new video frame is ready for display.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>In frame-server mode, the application should call this method whenever a vertical blank occurs in the display device. If the method returns <strong><see cref = "SharpDX.Result.Ok"/></strong>, call <strong>IMFMediaEngine::TransferVideoFrame</strong> to blit the frame to the render target. If the method returns <strong>S_FALSE</strong>, wait for the next vertical blank and call the method again.</p><p>Do not call this method in rendering mode or audio-only mode. </p>
        /// </remarks>
        /// <doc-id>hh448006</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngine::OnVideoStreamTick([Out] longlong* pPts)</unmanaged>
        /// <unmanaged-short>IMFMediaEngine::OnVideoStreamTick</unmanaged-short>
        internal unsafe SharpDX.Result OnVideoStreamTick_(out System.Int64 ptsRef)
        {
            SharpDX.Result __result__;
            fixed (void *ptsRef_ = &ptsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, ptsRef_, (*(void ***)this._nativePointer)[44]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7a3bac98-0e76-49fb-8c20-8a86fd98eaf2")]
    public partial class MediaEngineAudioEndpointId : SharpDX.ComObject
    {
        public MediaEngineAudioEndpointId(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineAudioEndpointId(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineAudioEndpointId(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "szEndpointIdRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaEngineAudioEndpointId::SetAudioEndpointId([In, Optional] const wchar_t* pszEndpointId)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineAudioEndpointId::SetAudioEndpointId</unmanaged-short>
        public unsafe void SetAudioEndpointId(System.String szEndpointIdRef)
        {
            SharpDX.Result __result__;
            fixed (char *szEndpointIdRef_ = szEndpointIdRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szEndpointIdRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "szEndpointIdOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaEngineAudioEndpointId::GetAudioEndpointId([Out] wchar_t** ppszEndpointId)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineAudioEndpointId::GetAudioEndpointId</unmanaged-short>
        public unsafe void GetAudioEndpointId(System.IntPtr szEndpointIdOut)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szEndpointIdOut, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("4D645ACE-26AA-4688-9BE1-DF3516990B93")]
    public partial class MediaEngineClassFactory : SharpDX.ComObject
    {
        public MediaEngineClassFactory(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineClassFactory(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineClassFactory(nativePtr);
                ///<summary>Constant ClsidMFMediaEngineClassFactory</summary>
        ///<unmanaged>CLSID_MFMediaEngineClassFactory</unmanaged>
        internal System.Guid ClsidMFMediaEngineClassFactory = new System.Guid("b44392da-499b-446b-a4cb-005fead0e6d5");
        /// <summary>
        /// <p>Creates a new instance of the Media Engine.</p>
        /// </summary>
        /// <param name = "flags"><dd> <p>A bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.MediaEngineCreateFlags"/></strong> enumeration.</p> </dd></param>
        /// <param name = "attrRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface of an attribute store. </p> <p>This parameter  specifies configuration attributes for the Media Engine. Call <strong>MFCreateAttributes</strong> to create the attribute store. Then, set one or more attributes from the list of Media Engine Attributes. For details, see Remarks.</p> </dd></param>
        /// <param name = "playerOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaEngine"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Attributenotfound"/></strong></dt> </dl> </td><td> <p>A required attribute was missing from <em>pAttr</em>, or an invalid combination of attributes was used.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Before calling this method, call <strong>MFStartup</strong>.</p><p>The Media Engine supports three distinct modes:</p><table> <tr><th>Mode</th><th>Description</th></tr> <tr><td>Frame-server mode</td><td> <p>In this mode, the Media Engine delivers uncompressed video frames to the application. The application is responsible for displaying each frame, using Microsoft Direct3D or any other rendering technique. </p> <p>The Media Engine renders the audio; the application is not responsible for audio rendering.</p> <p>Frame-server mode is the default mode. </p> </td></tr> <tr><td>Rendering mode</td><td> <p>In this mode, the Media Engine renders both audio and video. The video is rendered to a window or Microsoft DirectComposition visual provided by the application.</p> <p>To enable rendering mode, set either the <see cref = "PlaybackHwnd"/> attribute or the  <see cref = "PlaybackVisual"/> attribute.</p> </td></tr> <tr><td>Audio  mode</td><td> <p>In this mode, the Media Engine renders audio only, with no video.</p> <p>To enable audio mode, set the <strong>MF_MEDIA_ENGINE_AUDIOONLY</strong> flag in the <em>dwFlags</em> parameter.</p> </td></tr> </table><p>?</p>
        /// </remarks>
        /// <doc-id>hh447921</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineClassFactory::CreateInstance([In] DWORD dwFlags,[In] IMFAttributes* pAttr,[Out, Fast] IMFMediaEngine** ppPlayer)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineClassFactory::CreateInstance</unmanaged-short>
        internal unsafe void CreateInstance(SharpDX.MediaFoundation.MediaEngineCreateFlags flags, SharpDX.MediaFoundation.MediaAttributes attrRef, SharpDX.MediaFoundation.MediaEngine playerOut)
        {
            System.IntPtr attrRef_ = System.IntPtr.Zero;
            System.IntPtr playerOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            attrRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(attrRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)flags), (void *)attrRef_, &playerOut_, (*(void ***)this._nativePointer)[3]);
            (playerOut).NativePointer = playerOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Creates a time range object.</p>
        /// </summary>
        /// <param name = "timeRangeOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaTimeRange"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447922</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineClassFactory::CreateTimeRange([Out, Fast] IMFMediaTimeRange** ppTimeRange)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineClassFactory::CreateTimeRange</unmanaged-short>
        internal unsafe void CreateTimeRange(SharpDX.MediaFoundation.MediaTimeRange timeRangeOut)
        {
            System.IntPtr timeRangeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &timeRangeOut_, (*(void ***)this._nativePointer)[4]);
            (timeRangeOut).NativePointer = timeRangeOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Creates a media error object.</p>
        /// </summary>
        /// <param name = "errorOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaError"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447920</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineClassFactory::CreateError([Out, Fast] IMFMediaError** ppError)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineClassFactory::CreateError</unmanaged-short>
        internal unsafe void CreateError(SharpDX.MediaFoundation.MediaError errorOut)
        {
            System.IntPtr errorOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &errorOut_, (*(void ***)this._nativePointer)[5]);
            (errorOut).NativePointer = errorOut_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("09083cef-867f-4bf6-8776-dee3a7b42fca")]
    public partial class MediaEngineClassFactory2 : SharpDX.ComObject
    {
        public MediaEngineClassFactory2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineClassFactory2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineClassFactory2(nativePtr);
        /// <summary>
        /// <p>Creates a media keys object based on the specified key system.</p>
        /// </summary>
        /// <param name = "keySystem"><dd> <p>The media key system.</p> </dd></param>
        /// <param name = "defaultCdmStorePath"><dd> <p>Points to the default file location for the  store Content Decryption Module (CDM) data.</p> </dd></param>
        /// <param name = "inprivateCdmStorePath"><dd> <p>Points to a the inprivate location for the  store Content Decryption Module (CDM) data. Specifying this path allows the CDM to comply with the application?s privacy policy by putting personal information in the file location indicated by this path.</p> </dd></param>
        /// <param name = "keysOut"><dd> <p>Receives the media keys.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn449732</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineClassFactory2::CreateMediaKeys2([In] wchar_t* keySystem,[In] wchar_t* defaultCdmStorePath,[In, Optional] wchar_t* inprivateCdmStorePath,[Out] IMFMediaKeys** ppKeys)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineClassFactory2::CreateMediaKeys2</unmanaged-short>
        public unsafe void CreateMediaKeys2(System.String keySystem, System.String defaultCdmStorePath, System.String inprivateCdmStorePath, out SharpDX.MediaFoundation.MediaKeys keysOut)
        {
            System.IntPtr keysOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (char *inprivateCdmStorePath_ = inprivateCdmStorePath)
                fixed (char *defaultCdmStorePath_ = defaultCdmStorePath)
                    fixed (char *keySystem_ = keySystem)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)keySystem_, (void *)defaultCdmStorePath_, (void *)inprivateCdmStorePath_, &keysOut_, (*(void ***)this._nativePointer)[3]);
            if (keysOut_ != System.IntPtr.Zero)
                keysOut = new SharpDX.MediaFoundation.MediaKeys(keysOut_);
            else
                keysOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3787614f-65f7-4003-b673-ead8293a0e60")]
    public partial class MediaEngineClassFactory3 : SharpDX.ComObject
    {
        public MediaEngineClassFactory3(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineClassFactory3(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineClassFactory3(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "keySystem">No documentation.</param>
        /// <param name = "supportedConfigurationsArrayOut">No documentation.</param>
        /// <param name = "uSize">No documentation.</param>
        /// <param name = "keyAccessOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaEngineClassFactory3::CreateMediaKeySystemAccess([In] wchar_t* keySystem,[In, Buffer] IPropertyStore** ppSupportedConfigurationsArray,[In] unsigned int uSize,[Out] IMFMediaKeySystemAccess** ppKeyAccess)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineClassFactory3::CreateMediaKeySystemAccess</unmanaged-short>
        public unsafe void CreateMediaKeySystemAccess(System.String keySystem, SharpDX.ComObject[] supportedConfigurationsArrayOut, System.Int32 uSize, out SharpDX.MediaFoundation.MediaKeySystemAccess keyAccessOut)
        {
            System.IntPtr*supportedConfigurationsArrayOut_;
            supportedConfigurationsArrayOut_ = (System.IntPtr*)0;
            if (supportedConfigurationsArrayOut != null)
            {
                System.IntPtr*_supportedConfigurationsArrayOut = stackalloc System.IntPtr[supportedConfigurationsArrayOut.Length];
                supportedConfigurationsArrayOut_ = _supportedConfigurationsArrayOut;
            }

            System.IntPtr keyAccessOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            if (supportedConfigurationsArrayOut != null)
                for (int i = 0; i < supportedConfigurationsArrayOut.Length; ++i)
                    (supportedConfigurationsArrayOut_)[i] = SharpDX.CppObject.ToCallbackPtr<SharpDX.ComObject>(supportedConfigurationsArrayOut[i]);
            fixed (char *keySystem_ = keySystem)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)keySystem_, (void *)supportedConfigurationsArrayOut_, uSize, &keyAccessOut_, (*(void ***)this._nativePointer)[3]);
            if (keyAccessOut_ != System.IntPtr.Zero)
                keyAccessOut = new SharpDX.MediaFoundation.MediaKeySystemAccess(keyAccessOut_);
            else
                keyAccessOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "keySystem">No documentation.</param>
        /// <param name = "supportedConfigurationsArrayOut">No documentation.</param>
        /// <param name = "uSize">No documentation.</param>
        /// <param name = "keyAccessOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaEngineClassFactory3::CreateMediaKeySystemAccess([In] wchar_t* keySystem,[In, Buffer] IPropertyStore** ppSupportedConfigurationsArray,[In] unsigned int uSize,[Out] IMFMediaKeySystemAccess** ppKeyAccess)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineClassFactory3::CreateMediaKeySystemAccess</unmanaged-short>
        public unsafe void CreateMediaKeySystemAccess(System.String keySystem, SharpDX.ComArray<SharpDX.ComObject> supportedConfigurationsArrayOut, System.Int32 uSize, out SharpDX.MediaFoundation.MediaKeySystemAccess keyAccessOut)
        {
            System.IntPtr keyAccessOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (char *keySystem_ = keySystem)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)keySystem_, (void *)(supportedConfigurationsArrayOut?.NativePointer ?? System.IntPtr.Zero), uSize, &keyAccessOut_, (*(void ***)this._nativePointer)[3]);
            if (keyAccessOut_ != System.IntPtr.Zero)
                keyAccessOut = new SharpDX.MediaFoundation.MediaKeySystemAccess(keyAccessOut_);
            else
                keyAccessOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "keySystem">No documentation.</param>
        /// <param name = "supportedConfigurationsArrayOut">No documentation.</param>
        /// <param name = "uSize">No documentation.</param>
        /// <param name = "keyAccessOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaEngineClassFactory3::CreateMediaKeySystemAccess([In] wchar_t* keySystem,[In, Buffer] IPropertyStore** ppSupportedConfigurationsArray,[In] unsigned int uSize,[Out] IMFMediaKeySystemAccess** ppKeyAccess)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineClassFactory3::CreateMediaKeySystemAccess</unmanaged-short>
        private unsafe void CreateMediaKeySystemAccess(System.IntPtr keySystem, System.IntPtr supportedConfigurationsArrayOut, System.Int32 uSize, System.IntPtr keyAccessOut)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)keySystem, (void *)supportedConfigurationsArrayOut, uSize, (void *)keyAccessOut, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("c56156c6-ea5b-48a5-9df8-fbe035d0929e")]
    public partial class MediaEngineClassFactoryEx : SharpDX.MediaFoundation.MediaEngineClassFactory
    {
        public MediaEngineClassFactoryEx(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineClassFactoryEx(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineClassFactoryEx(nativePtr);
        /// <summary>
        /// <p>Creates an instance of <strong><see cref = "SharpDX.MediaFoundation.MediaSourceExtension"/></strong>.</p>
        /// </summary>
        /// <param name = "dwFlags">No documentation.</param>
        /// <param name = "attrRef">No documentation.</param>
        /// <param name = "mSEOut">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280691</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineClassFactoryEx::CreateMediaSourceExtension([In] DWORD dwFlags,[In] IMFAttributes* pAttr,[Out] IMFMediaSourceExtension** ppMSE)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineClassFactoryEx::CreateMediaSourceExtension</unmanaged-short>
        public unsafe void CreateMediaSourceExtension(System.Int32 dwFlags, SharpDX.MediaFoundation.MediaAttributes attrRef, out SharpDX.MediaFoundation.MediaSourceExtension mSEOut)
        {
            System.IntPtr attrRef_ = System.IntPtr.Zero;
            System.IntPtr mSEOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            attrRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(attrRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwFlags, (void *)attrRef_, &mSEOut_, (*(void ***)this._nativePointer)[6]);
            if (mSEOut_ != System.IntPtr.Zero)
                mSEOut = new SharpDX.MediaFoundation.MediaSourceExtension(mSEOut_);
            else
                mSEOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Creates a media keys object based on the specified key system.</p>
        /// </summary>
        /// <param name = "keySystem"><dd> <p>The media keys system.</p> </dd></param>
        /// <param name = "cdmStorePath"><dd> <p>Points to a location to store Content Decryption Module (CDM) data which might be locked by multiple process and so might be incompatible with store app suspension.</p> </dd></param>
        /// <param name = "keysOut"><dd> <p>The media keys.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> Checks if <em>keySystem</em> is a supported key system and creates the related Content Decryption Module (CDM).
        /// </p>
        /// </remarks>
        /// <doc-id>dn280690</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineClassFactoryEx::CreateMediaKeys([In] wchar_t* keySystem,[In, Optional] wchar_t* cdmStorePath,[Out] IMFMediaKeys** ppKeys)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineClassFactoryEx::CreateMediaKeys</unmanaged-short>
        public unsafe void CreateMediaKeys(System.String keySystem, System.String cdmStorePath, out SharpDX.MediaFoundation.MediaKeys keysOut)
        {
            System.IntPtr keysOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (char *cdmStorePath_ = cdmStorePath)
                fixed (char *keySystem_ = keySystem)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)keySystem_, (void *)cdmStorePath_, &keysOut_, (*(void ***)this._nativePointer)[7]);
            if (keysOut_ != System.IntPtr.Zero)
                keysOut = new SharpDX.MediaFoundation.MediaKeys(keysOut_);
            else
                keysOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a value that indicates if the specified key system supports the specified media type.</p>
        /// </summary>
        /// <param name = "type"><dd> <p>The MIME type to check support for.</p> </dd></param>
        /// <param name = "keySystem"><dd> <p>The key system to check support for.</p> </dd></param>
        /// <param name = "isSupported"><dd> <p><strong>true</strong> if type is supported by <em>keySystem</em>; otherwise, <strong>false.</strong></p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280692</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineClassFactoryEx::IsTypeSupported([In, Optional] wchar_t* type,[In] wchar_t* keySystem,[Out] BOOL* isSupported)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineClassFactoryEx::IsTypeSupported</unmanaged-short>
        public unsafe void IsTypeSupported(System.String type, System.String keySystem, out SharpDX.Mathematics.Interop.RawBool isSupported)
        {
            isSupported = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *isSupported_ = &isSupported)
                fixed (char *keySystem_ = keySystem)
                    fixed (char *type_ = type)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)type_, (void *)keySystem_, isSupported_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("50dc93e4-ba4f-4275-ae66-83e836e57469")]
    public partial class MediaEngineEME : SharpDX.ComObject
    {
        public MediaEngineEME(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineEME(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineEME(nativePtr);
        /// <summary>
        /// <p>Gets the media keys object associated with the media engine or <strong>null</strong> if there is not a media keys object.</p>
        /// </summary>
        /// <doc-id>dn280694</doc-id>
        /// <unmanaged>get_Keys</unmanaged>
        /// <unmanaged-short>get_Keys</unmanaged-short>
        public SharpDX.MediaFoundation.MediaKeys Keys
        {
            get
            {
                GetKeys(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Sets the media keys object to use with the media engine.</p>
        /// </summary>
        /// <doc-id>dn280695</doc-id>
        /// <unmanaged>SetMediaKeys</unmanaged>
        /// <unmanaged-short>SetMediaKeys</unmanaged-short>
        public SharpDX.MediaFoundation.MediaKeys MediaKeys
        {
            set => SetMediaKeys(value);
        }

        /// <summary>
        /// <p>Gets the media keys object associated with the media engine or <strong>null</strong> if there is not a media keys object.</p>
        /// </summary>
        /// <param name = "keys"><dd> <p>The media keys object associated with the media engine or <strong>null</strong> if there is not a media keys object.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280694</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEME::get_Keys([Out, Optional] IMFMediaKeys** keys)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEME::get_Keys</unmanaged-short>
        internal unsafe void GetKeys(out SharpDX.MediaFoundation.MediaKeys keys)
        {
            System.IntPtr keys_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &keys_, (*(void ***)this._nativePointer)[3]);
            if (keys_ != System.IntPtr.Zero)
                keys = new SharpDX.MediaFoundation.MediaKeys(keys_);
            else
                keys = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the media keys object to use with the media engine.</p>
        /// </summary>
        /// <param name = "keys"><dd> <p>The media keys.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280695</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEME::SetMediaKeys([In, Optional] IMFMediaKeys* keys)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEME::SetMediaKeys</unmanaged-short>
        internal unsafe void SetMediaKeys(SharpDX.MediaFoundation.MediaKeys keys)
        {
            System.IntPtr keys_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            keys_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaKeys>(keys);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)keys_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("9e184d15-cdb7-4f86-b49e-566689f4a601")]
    public partial class MediaEngineEMENotify : SharpDX.ComObject
    {
        public MediaEngineEMENotify(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineEMENotify(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineEMENotify(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bInitDataRef">No documentation.</param>
        /// <param name = "cb">No documentation.</param>
        /// <param name = "bstrInitDataType">No documentation.</param>
        /// <unmanaged>void IMFMediaEngineEMENotify::Encrypted([In, Buffer, Optional] const unsigned char* pbInitData,[In] DWORD cb,[In] wchar_t* bstrInitDataType)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEMENotify::Encrypted</unmanaged-short>
        public unsafe void Encrypted(System.Byte[] bInitDataRef, System.Int32 cb, System.String bstrInitDataType)
        {
            fixed (char *bstrInitDataType_ = bstrInitDataType)
                fixed (void *bInitDataRef_ = bInitDataRef)
                    SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, bInitDataRef_, cb, (void *)bstrInitDataType_, (*(void ***)this._nativePointer)[3]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>void IMFMediaEngineEMENotify::WaitingForKey()</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEMENotify::WaitingForKey</unmanaged-short>
        public unsafe void WaitingForKey()
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[4]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("83015ead-b1e6-40d0-a98a-37145ffe1ad1")]
    public partial class MediaEngineEx : SharpDX.MediaFoundation.MediaEngine
    {
        public MediaEngineEx(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineEx(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineEx(nativePtr);
        /// <summary>
        /// <p>Gets or sets the audio balance. </p>
        /// </summary>
        /// <doc-id>hh447934</doc-id>
        /// <unmanaged>GetBalance / SetBalance</unmanaged>
        /// <unmanaged-short>GetBalance</unmanaged-short>
        public System.Double Balance
        {
            get => GetBalance();
            set => SetBalance(value);
        }

        /// <summary>
        /// <p>Gets various flags that describe the media resource.</p>
        /// </summary>
        /// <doc-id>hh447939</doc-id>
        /// <unmanaged>GetResourceCharacteristics</unmanaged>
        /// <unmanaged-short>GetResourceCharacteristics</unmanaged-short>
        public SharpDX.MediaFoundation.ResourceCharacteristics ResourceCharacteristics
        {
            get
            {
                GetResourceCharacteristics(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the number of streams in the media resource.</p>
        /// </summary>
        /// <doc-id>hh447937</doc-id>
        /// <unmanaged>GetNumberOfStreams</unmanaged>
        /// <unmanaged-short>GetNumberOfStreams</unmanaged-short>
        public System.Int32 NumberOfStreams
        {
            get
            {
                GetNumberOfStreams(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Queries whether the media resource contains protected content. </p>
        /// </summary>
        /// <doc-id>hh447950</doc-id>
        /// <unmanaged>IsProtected</unmanaged>
        /// <unmanaged-short>IsProtected</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsProtected
        {
            get
            {
                IsProtected_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets or sets the time of the next timeline marker, if any.</p>
        /// </summary>
        /// <doc-id>hh447945</doc-id>
        /// <unmanaged>GetTimelineMarkerTimer / SetTimelineMarkerTimer</unmanaged>
        /// <unmanaged-short>GetTimelineMarkerTimer</unmanaged-short>
        public System.Double TimelineMarkerTimer
        {
            get
            {
                GetTimelineMarkerTimer(out var __output__);
                return __output__;
            }

            set => SetTimelineMarkerTimer(value);
        }

        /// <summary>
        /// <p>Queries whether the media resource contains stereoscopic 3D video.</p>
        /// </summary>
        /// <doc-id>hh447951</doc-id>
        /// <unmanaged>IsStereo3D</unmanaged>
        /// <unmanaged-short>IsStereo3D</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsStereo3D
        {
            get => IsStereo3D_();
        }

        /// <summary>
        /// <p>For stereoscopic 3D video, gets the layout of the two views within a video frame.</p>
        /// </summary>
        /// <doc-id>hh447941</doc-id>
        /// <unmanaged>GetStereo3DFramePackingMode / SetStereo3DFramePackingMode</unmanaged>
        /// <unmanaged-short>GetStereo3DFramePackingMode</unmanaged-short>
        public SharpDX.MediaFoundation.MediaEngineS3DPackingMode Stereo3DFramePackingMode
        {
            get
            {
                GetStereo3DFramePackingMode(out var __output__);
                return __output__;
            }

            set => SetStereo3DFramePackingMode(value);
        }

        /// <summary>
        /// <p>For stereoscopic 3D video, queries how the Media Engine renders the 3D video content.</p>
        /// </summary>
        /// <doc-id>hh447942</doc-id>
        /// <unmanaged>GetStereo3DRenderMode / SetStereo3DRenderMode</unmanaged>
        /// <unmanaged-short>GetStereo3DRenderMode</unmanaged-short>
        public SharpDX.MediaFoundation.Video3DOutputType Stereo3DRenderMode
        {
            get
            {
                GetStereo3DRenderMode(out var __output__);
                return __output__;
            }

            set => SetStereo3DRenderMode(value);
        }

        /// <summary>
        /// <p>Gets a handle to the windowless swap chain.</p>
        /// </summary>
        /// <remarks>
        /// <p>To enable windowless swap-chain mode, call <strong>IMFMediaEngineEx::EnableWindowlessSwapchainMode</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447946</doc-id>
        /// <unmanaged>GetVideoSwapchainHandle</unmanaged>
        /// <unmanaged-short>GetVideoSwapchainHandle</unmanaged-short>
        public System.IntPtr VideoSwapchainHandle
        {
            get
            {
                GetVideoSwapchainHandle(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets or sets the audio stream category used for the next call to <strong>SetSource</strong> or <strong>Load</strong>. </p>
        /// </summary>
        /// <remarks>
        /// <p>For information on audio stream categories, see <strong><see cref = "SharpDX.Multimedia.AudioStreamCategory"/> enumeration</strong>.</p>
        /// </remarks>
        /// <doc-id>jj128310</doc-id>
        /// <unmanaged>GetAudioStreamCategory / SetAudioStreamCategory</unmanaged>
        /// <unmanaged-short>GetAudioStreamCategory</unmanaged-short>
        public System.Int32 AudioStreamCategory
        {
            get
            {
                GetAudioStreamCategory(out var __output__);
                return __output__;
            }

            set => SetAudioStreamCategory(value);
        }

        /// <summary>
        /// <p>Gets or sets the audio device endpoint role used for the next  call to <strong>SetSource</strong> or <strong>Load</strong>. </p>
        /// </summary>
        /// <remarks>
        /// <p>For information on audio endpoint roles, see <strong>ERole  enumeration</strong>.</p>
        /// </remarks>
        /// <doc-id>jj128309</doc-id>
        /// <unmanaged>GetAudioEndpointRole / SetAudioEndpointRole</unmanaged>
        /// <unmanaged-short>GetAudioEndpointRole</unmanaged-short>
        public System.Int32 AudioEndpointRole
        {
            get
            {
                GetAudioEndpointRole(out var __output__);
                return __output__;
            }

            set => SetAudioEndpointRole(value);
        }

        /// <summary>
        /// <p>Gets or sets the real time mode used for the next call to <strong>SetSource</strong> or <strong>Load</strong>. </p>
        /// </summary>
        /// <doc-id>jj128311</doc-id>
        /// <unmanaged>GetRealTimeMode / SetRealTimeMode</unmanaged>
        /// <unmanaged-short>GetRealTimeMode</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool RealTimeMode
        {
            get
            {
                GetRealTimeMode(out var __output__);
                return __output__;
            }

            set => SetRealTimeMode(value);
        }

        /// <summary>
        /// <p>Opens a media resource from a byte stream.</p>
        /// </summary>
        /// <param name = "byteStreamRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.IByteStream"/></strong> interface of the byte stream.</p> </dd></param>
        /// <param name = "uRLRef"><dd> <p>The URL of the byte stream.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447956</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::SetSourceFromByteStream([In] IMFByteStream* pByteStream,[In] wchar_t* pURL)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::SetSourceFromByteStream</unmanaged-short>
        public unsafe void SetSourceFromByteStream(SharpDX.MediaFoundation.IByteStream byteStreamRef, System.IntPtr uRLRef)
        {
            System.IntPtr byteStreamRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            byteStreamRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IByteStream>(byteStreamRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)byteStreamRef_, (void *)uRLRef, (*(void ***)this._nativePointer)[45]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a playback statistic from the Media Engine.</p>
        /// </summary>
        /// <param name = "statisticID"><dd> <p>A member of the <strong><see cref = "SharpDX.MediaFoundation.MediaEngineStatistic"/></strong> enumeration that identifies the statistic to get.</p> </dd></param>
        /// <param name = "statisticRef"><dd> <p>A reference to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that receives the statistic. The data type and meaning of this value depends on the value of <em>StatisticID</em>. The caller must free the <strong><see cref = "SharpDX.Win32.Variant"/></strong> by calling <strong>PropVariantClear</strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447940</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::GetStatistics([In] MF_MEDIA_ENGINE_STATISTIC StatisticID,[Out] PROPVARIANT* pStatistic)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::GetStatistics</unmanaged-short>
        public unsafe void GetStatistics(SharpDX.MediaFoundation.MediaEngineStatistic statisticID, out SharpDX.Win32.Variant statisticRef)
        {
            statisticRef = default (SharpDX.Win32.Variant);
            SharpDX.Result __result__;
            fixed (void *statisticRef_ = &statisticRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)statisticID), statisticRef_, (*(void ***)this._nativePointer)[46]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Updates the source rectangle, destination rectangle, and border color for the video.</p>
        /// </summary>
        /// <param name = "srcRef"><dd> <p>A reference to an <strong><see cref = "SharpDX.MediaFoundation.VideoNormalizedRect"/></strong> structure that specifies the source rectangle. The source rectangle defines the area of the video frame that is displayed. If this parameter is <strong><c>null</c></strong>, the entire video frame is displayed.</p> </dd></param>
        /// <param name = "dstRef"><dd> <p>A reference to a <strong><see cref = "SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure that specifies the destination rectangle. The destination rectangle defines the area of the window or DirectComposition visual where the video is drawn.</p> </dd></param>
        /// <param name = "borderClrRef"><dd> <p>A reference to an <strong><see cref = "SharpDX.Mathematics.Interop.RawColorBGRA"/></strong> structure that specifies the border color. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>In rendering mode, call this method to reposition the video, update the border color, or repaint the video frame. If all of the parameters are <strong><c>null</c></strong>, the method repaints the most recent video frame.</p><p>In frame-server mode, this method has no effect.</p><p>See <strong>Video Processor MFT</strong> for info regarding source and destination rectangles in the <strong>Video Processor MFT</strong>.   </p>
        /// </remarks>
        /// <doc-id>hh447961</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::UpdateVideoStream([In, Optional] const MFVideoNormalizedRect* pSrc,[In, Optional] const RECT* pDst,[In, Optional] const MFARGB* pBorderClr)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::UpdateVideoStream</unmanaged-short>
        public unsafe void UpdateVideoStream(SharpDX.MediaFoundation.VideoNormalizedRect? srcRef, SharpDX.Mathematics.Interop.RawRectangle? dstRef, SharpDX.Mathematics.Interop.RawColorBGRA? borderClrRef)
        {
            SharpDX.MediaFoundation.VideoNormalizedRect srcRef_;
            SharpDX.Mathematics.Interop.RawRectangle dstRef_;
            SharpDX.Mathematics.Interop.RawColorBGRA borderClrRef_;
            SharpDX.Result __result__;
            if (srcRef != null)
                srcRef_ = srcRef.Value;
            if (dstRef != null)
                dstRef_ = dstRef.Value;
            if (borderClrRef != null)
                borderClrRef_ = borderClrRef.Value;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, srcRef == null ? (void *)0 : &srcRef_, dstRef == null ? (void *)0 : &dstRef_, borderClrRef == null ? (void *)0 : &borderClrRef_, (*(void ***)this._nativePointer)[47]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the audio balance. </p>
        /// </summary>
        /// <returns><p>Returns the balance. The value can be any number in the following range (inclusive). </p><table> <tr><th>Return value</th><th>Description</th></tr> <tr><td> <dl> <dt>-1</dt> </dl> </td><td> <p>The left channel is at full volume; the right channel is silent.</p> </td></tr> <tr><td> <dl> <dt>1</dt> </dl> </td><td> <p>The right channel is at full volume; the left channel is silent.</p> </td></tr> </table><p>?</p><p>If the value is zero, the left and right channels are at equal volumes. The default value is zero. </p></returns>
        /// <doc-id>hh447934</doc-id>
        /// <unmanaged>double IMFMediaEngineEx::GetBalance()</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::GetBalance</unmanaged-short>
        internal unsafe System.Double GetBalance()
        {
            System.Double __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCalldouble(this._nativePointer, (*(void ***)this._nativePointer)[48]);
            return __result__;
        }

        /// <summary>
        /// <p>Sets the audio balance.</p>
        /// </summary>
        /// <param name = "balance"><dd> <p>The audio balance. The value can be any number in the following range (inclusive). </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>-1</dt> </dl> </td><td> <p>The left channel is at full volume; the right channel is silent.</p> </td></tr> <tr><td> <dl> <dt>1</dt> </dl> </td><td> <p>The right channel is at full volume; the left channel is silent.</p> </td></tr> </table> <p>?</p> <p>If the value is zero, the left and right channels are at equal volumes. The default value is zero. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>When the audio balance changes, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_BALANCECHANGE</strong> event. See <strong>IMFMediaEventNotify::EventNotify</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447954</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::SetBalance([In] double balance)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::SetBalance</unmanaged-short>
        internal unsafe void SetBalance(System.Double balance)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, balance, (*(void ***)this._nativePointer)[49]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries whether the Media Engine can play at a specified playback rate.</p>
        /// </summary>
        /// <param name = "rate"><dd> <p>The requested playback rate.</p> </dd></param>
        /// <returns><p>Returns <strong>TRUE</strong> if the playback rate is supported, or <strong><see cref = "SharpDX.Result.False"/></strong> otherwise.</p></returns>
        /// <remarks>
        /// <p>Playback rates are expressed as a ratio of the current rate to the normal rate. For example, 1.0 is normal playback speed, 0.5 is half speed, and 2.0 is 2? speed. Positive values mean forward playback, and negative values mean reverse playback.</p><p>The results of this method can vary depending on the media resource that is currently loaded. Some media formats might support faster playback rates than others. Also, some formats might not support reverse play.</p>
        /// </remarks>
        /// <doc-id>hh447949</doc-id>
        /// <unmanaged>BOOL IMFMediaEngineEx::IsPlaybackRateSupported([In] double rate)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::IsPlaybackRateSupported</unmanaged-short>
        public unsafe SharpDX.Mathematics.Interop.RawBool IsPlaybackRateSupported(System.Double rate)
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, rate, (*(void ***)this._nativePointer)[50]);
            return __result__;
        }

        /// <summary>
        /// <p>Steps forward or backward one frame.</p>
        /// </summary>
        /// <param name = "forward"><dd> <p>Specify <strong>TRUE</strong> to step forward or <strong><see cref = "SharpDX.Result.False"/></strong> to step backward.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The frame-step direction is independent of the current playback direction.</p><p>This method completes asynchronously. When the operation completes, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_FRAMESTEPCOMPLETED</strong> event and enters the paused state.</p>
        /// </remarks>
        /// <doc-id>hh447933</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::FrameStep([In] BOOL Forward)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::FrameStep</unmanaged-short>
        public unsafe void FrameStep(SharpDX.Mathematics.Interop.RawBool forward)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, forward, (*(void ***)this._nativePointer)[51]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets various flags that describe the media resource.</p>
        /// </summary>
        /// <param name = "characteristicsRef"><dd> <p>Receives a bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.MediaSourceCharacteristics"/> enumeration</strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447939</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::GetResourceCharacteristics([Out] DWORD* pCharacteristics)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::GetResourceCharacteristics</unmanaged-short>
        internal unsafe void GetResourceCharacteristics(out SharpDX.MediaFoundation.ResourceCharacteristics characteristicsRef)
        {
            SharpDX.Result __result__;
            fixed (void *characteristicsRef_ = &characteristicsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, characteristicsRef_, (*(void ***)this._nativePointer)[52]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a presentation attribute from the media resource.</p>
        /// </summary>
        /// <param name = "guidMFAttribute"><dd> <p>The attribute to query. For a list of presentation attributes, see Presentation Descriptor Attributes.</p> </dd></param>
        /// <param name = "vValueRef"><dd> <p>A reference to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that receives the value. The method fills the <strong><see cref = "SharpDX.Win32.Variant"/></strong> with a copy of the stored value. The caller must free the <strong><see cref = "SharpDX.Win32.Variant"/></strong> by calling <strong>PropVariantClear</strong>. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447938</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::GetPresentationAttribute([In] const GUID&amp; guidMFAttribute,[Out] PROPVARIANT* pvValue)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::GetPresentationAttribute</unmanaged-short>
        public unsafe void GetPresentationAttribute(System.Guid guidMFAttribute, out SharpDX.Win32.Variant vValueRef)
        {
            vValueRef = default (SharpDX.Win32.Variant);
            SharpDX.Result __result__;
            fixed (void *vValueRef_ = &vValueRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidMFAttribute, vValueRef_, (*(void ***)this._nativePointer)[53]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the number of streams in the media resource.</p>
        /// </summary>
        /// <param name = "dwStreamCountRef"><dd> <p>Receives the number of streams.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447937</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::GetNumberOfStreams([Out] DWORD* pdwStreamCount)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::GetNumberOfStreams</unmanaged-short>
        internal unsafe void GetNumberOfStreams(out System.Int32 dwStreamCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwStreamCountRef_ = &dwStreamCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamCountRef_, (*(void ***)this._nativePointer)[54]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a stream-level attribute from the media resource.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of the stream. To get the number of streams, call <strong>IMFMediaEngineEx::GetNumberOfStreams</strong>.</p> </dd></param>
        /// <param name = "guidMFAttribute"><dd> <p>The attribute to query. Possible values are listed in the following topics:</p> <ul> <li> Stream Descriptor Attributes </li> <li> Media Type Attributes </li> </ul> </dd></param>
        /// <param name = "vValueRef"><dd> <p>A reference to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that receives the value. The method fills the <strong><see cref = "SharpDX.Win32.Variant"/></strong> with a copy of the stored value. Call <strong>PropVariantClear</strong> to free the memory allocated by the method. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447943</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::GetStreamAttribute([In] DWORD dwStreamIndex,[In] const GUID&amp; guidMFAttribute,[Out] PROPVARIANT* pvValue)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::GetStreamAttribute</unmanaged-short>
        public unsafe void GetStreamAttribute(System.Int32 dwStreamIndex, System.Guid guidMFAttribute, out SharpDX.Win32.Variant vValueRef)
        {
            vValueRef = default (SharpDX.Win32.Variant);
            SharpDX.Result __result__;
            fixed (void *vValueRef_ = &vValueRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, &guidMFAttribute, vValueRef_, (*(void ***)this._nativePointer)[55]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries whether a stream is selected to play.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of the stream. To get the number of streams, call <strong>IMFMediaEngineEx::GetNumberOfStreams</strong>.</p> </dd></param>
        /// <param name = "enabledRef"><dd> <p>Receives a Boolean value.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><strong>TRUE</strong></strong></dt> </dl> </td><td> <p>The stream is selected. During playback, this stream will play.</p> </td></tr> <tr><td><dl> <dt><strong><strong><see cref = "SharpDX.Result.False"/></strong></strong></dt> </dl> </td><td> <p>The stream is not selected. During playback, this stream will not play.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447944</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::GetStreamSelection([In] DWORD dwStreamIndex,[Out] BOOL* pEnabled)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::GetStreamSelection</unmanaged-short>
        public unsafe void GetStreamSelection(System.Int32 dwStreamIndex, out SharpDX.Mathematics.Interop.RawBool enabledRef)
        {
            enabledRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *enabledRef_ = &enabledRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, enabledRef_, (*(void ***)this._nativePointer)[56]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Selects or deselects a stream for playback. </p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of the stream. To get the number of streams, call <strong>IMFMediaEngineEx::GetNumberOfStreams</strong>.</p> </dd></param>
        /// <param name = "enabled"><dd> <p>Specifies whether to select or deselect the stream.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><strong>TRUE</strong></strong></dt> </dl> </td><td> <p>The stream is selected. During playback, this stream will play.</p> </td></tr> <tr><td><dl> <dt><strong><strong><see cref = "SharpDX.Result.False"/></strong></strong></dt> </dl> </td><td> <p>The stream is not selected. During playback, this stream will not play.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447959</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::SetStreamSelection([In] DWORD dwStreamIndex,[In] BOOL Enabled)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::SetStreamSelection</unmanaged-short>
        public unsafe void SetStreamSelection(System.Int32 dwStreamIndex, SharpDX.Mathematics.Interop.RawBool enabled)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, dwStreamIndex, enabled, (*(void ***)this._nativePointer)[57]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Applies the stream selections from previous calls to <strong>SetStreamSelection</strong>.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>jj151917</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::ApplyStreamSelections()</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::ApplyStreamSelections</unmanaged-short>
        public unsafe void ApplyStreamSelections()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[58]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries whether the media resource contains protected content. </p>
        /// </summary>
        /// <param name = "protectedRef"><dd> <p>Receives the value <strong>TRUE</strong> if the media resource contains protected content, or <strong><see cref = "SharpDX.Result.False"/></strong> otherwise.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447950</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::IsProtected([Out] BOOL* pProtected)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::IsProtected</unmanaged-short>
        internal unsafe void IsProtected_(out SharpDX.Mathematics.Interop.RawBool protectedRef)
        {
            protectedRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *protectedRef_ = &protectedRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, protectedRef_, (*(void ***)this._nativePointer)[59]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Inserts a video effect.</p>
        /// </summary>
        /// <param name = "effectRef"><dd> <p>One of the following: </p> <ul> <li>A reference to the <strong><see cref = "SharpDX.MediaFoundation.Transform"/></strong> interface of a Media Foundation transform (MFT) that implements the video effect.</li> <li>A reference to the <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> interface of an activation object. The activation object must create an MFT for the video effect.</li> </ul> </dd></param>
        /// <param name = "fOptional"><dd> <p>Specifies whether the effect is optional.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><strong>TRUE</strong></strong></dt> </dl> </td><td> <p>The effect is optional. If the Media Engine cannot add the effect, it ignores the effect and  continues playback.</p> </td></tr> <tr><td><dl> <dt><strong><strong><see cref = "SharpDX.Result.False"/></strong></strong></dt> </dl> </td><td> <p>The effect is required. If the Media Engine object cannot add the effect, a playback error occurs.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The maximum number of video effects was reached.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The effect is applied when the next media resource is loaded.</p>
        /// </remarks>
        /// <doc-id>hh447948</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::InsertVideoEffect([In] IUnknown* pEffect,[In] BOOL fOptional)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::InsertVideoEffect</unmanaged-short>
        public unsafe void InsertVideoEffect(SharpDX.IUnknown effectRef, SharpDX.Mathematics.Interop.RawBool fOptional)
        {
            System.IntPtr effectRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            effectRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(effectRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)effectRef_, fOptional, (*(void ***)this._nativePointer)[60]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Inserts an audio effect.</p>
        /// </summary>
        /// <param name = "effectRef"><dd> <p>One of the following: </p> <ul> <li>A reference to the <strong><see cref = "SharpDX.MediaFoundation.Transform"/></strong> interface of a Media Foundation transform (MFT) that implements the audio effect.</li> <li>A reference to the <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> interface of an activation object. The activation object must create an MFT for the audio effect.</li> </ul> </dd></param>
        /// <param name = "fOptional"><dd> <p>Specifies whether the effect is optional.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><strong>TRUE</strong></strong></dt> </dl> </td><td> <p>The effect is optional. If the Media Engine cannot add the effect, it ignores the effect and  continues playback.</p> </td></tr> <tr><td><dl> <dt><strong><strong><see cref = "SharpDX.Result.False"/></strong></strong></dt> </dl> </td><td> <p>The effect is required. If the Media Engine object cannot add the effect, a playback error occurs.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The maximum number of audio effects was reached.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The effect is applied when the next media resource is loaded.</p>
        /// </remarks>
        /// <doc-id>hh447947</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::InsertAudioEffect([In] IUnknown* pEffect,[In] BOOL fOptional)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::InsertAudioEffect</unmanaged-short>
        public unsafe void InsertAudioEffect(SharpDX.IUnknown effectRef, SharpDX.Mathematics.Interop.RawBool fOptional)
        {
            System.IntPtr effectRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            effectRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(effectRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)effectRef_, fOptional, (*(void ***)this._nativePointer)[61]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Removes all audio and video effects.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> Call this method to remove all of the effects that were added with the <strong>InsertAudioEffect</strong> and <strong>InsertVideoEffect</strong> methods. </p>
        /// </remarks>
        /// <doc-id>hh447952</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::RemoveAllEffects()</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::RemoveAllEffects</unmanaged-short>
        public unsafe void RemoveAllEffects()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[62]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Specifies a presentation time when the Media Engine will send a marker event.</p>
        /// </summary>
        /// <param name = "timeToFire"><dd> <p>The presentation time for the marker event, in seconds.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>When playback reaches the time specified by <em>timeToFire</em>, the Media Engine sends an <strong>MF_MEDIA_ENGINE_EVENT_TIMELINE_MARKER</strong> event through the <strong>IMFMediaEngineNotify::EventNotify</strong> method. Calling this method cancels any previous marker that is still pending. </p><p>If the application seeks past the marker point, the Media Engine cancels the marker and does not send the event.</p><p>During  forward playback, set <em>timeToFire</em> to a value greater than the current playback position. During reverse playback, set <em>timeToFire</em> to a value less than the playback position.</p><p>To cancel a marker, call <strong>IMFMediaEngineEx::CancelTimelineMarkerTimer</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447960</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::SetTimelineMarkerTimer([In] double timeToFire)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::SetTimelineMarkerTimer</unmanaged-short>
        internal unsafe void SetTimelineMarkerTimer(System.Double timeToFire)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, timeToFire, (*(void ***)this._nativePointer)[63]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the time of the next timeline marker, if any.</p>
        /// </summary>
        /// <param name = "timeToFireRef"><dd> <p>Receives the marker time, in seconds. If no marker is set, this parameter receives the value <strong>NaN</strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447945</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::GetTimelineMarkerTimer([Out] double* pTimeToFire)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::GetTimelineMarkerTimer</unmanaged-short>
        internal unsafe void GetTimelineMarkerTimer(out System.Double timeToFireRef)
        {
            SharpDX.Result __result__;
            fixed (void *timeToFireRef_ = &timeToFireRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, timeToFireRef_, (*(void ***)this._nativePointer)[64]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Cancels the next pending timeline marker.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Call this method to cancel the <strong>IMFMediaEngineEx::SetTimelineMarkerTimer</strong> method.</p>
        /// </remarks>
        /// <doc-id>hh447929</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::CancelTimelineMarkerTimer()</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::CancelTimelineMarkerTimer</unmanaged-short>
        public unsafe void CancelTimelineMarkerTimer()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[65]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries whether the media resource contains stereoscopic 3D video.</p>
        /// </summary>
        /// <returns><p>Returns <strong>TRUE</strong> if the media resource contains 3D video, or <strong><see cref = "SharpDX.Result.False"/></strong> otherwise.</p></returns>
        /// <doc-id>hh447951</doc-id>
        /// <unmanaged>BOOL IMFMediaEngineEx::IsStereo3D()</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::IsStereo3D</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsStereo3D_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[66]);
            return __result__;
        }

        /// <summary>
        /// <p>For stereoscopic 3D video, gets the layout of the two views within a video frame.</p>
        /// </summary>
        /// <param name = "ackModeRef"><dd> <p>Receives a member of the <strong><see cref = "SharpDX.MediaFoundation.MediaEngineS3DPackingMode"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447941</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::GetStereo3DFramePackingMode([Out] MF_MEDIA_ENGINE_S3D_PACKING_MODE* packMode)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::GetStereo3DFramePackingMode</unmanaged-short>
        internal unsafe void GetStereo3DFramePackingMode(out SharpDX.MediaFoundation.MediaEngineS3DPackingMode ackModeRef)
        {
            SharpDX.Result __result__;
            fixed (void *ackModeRef_ = &ackModeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, ackModeRef_, (*(void ***)this._nativePointer)[67]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>For stereoscopic 3D video, sets the layout of the two views within a video frame.</p>
        /// </summary>
        /// <param name = "packMode"><dd> <p>A member of the <strong><see cref = "SharpDX.MediaFoundation.MediaEngineS3DPackingMode"/></strong> enumeration that specifies the layout. The two views can be arranged side-by-side, or top-to-bottom.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447957</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::SetStereo3DFramePackingMode([In] MF_MEDIA_ENGINE_S3D_PACKING_MODE packMode)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::SetStereo3DFramePackingMode</unmanaged-short>
        internal unsafe void SetStereo3DFramePackingMode(SharpDX.MediaFoundation.MediaEngineS3DPackingMode packMode)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)packMode), (*(void ***)this._nativePointer)[68]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>For stereoscopic 3D video, queries how the Media Engine renders the 3D video content.</p>
        /// </summary>
        /// <param name = "outputType"><dd> <p>Receives a member of the <strong><see cref = "SharpDX.MediaFoundation.Video3DOutputType"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447942</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::GetStereo3DRenderMode([Out] MF3DVideoOutputType* outputType)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::GetStereo3DRenderMode</unmanaged-short>
        internal unsafe void GetStereo3DRenderMode(out SharpDX.MediaFoundation.Video3DOutputType outputType)
        {
            SharpDX.Result __result__;
            fixed (void *outputType_ = &outputType)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, outputType_, (*(void ***)this._nativePointer)[69]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>For stereoscopic 3D video, specifies how the Media Engine renders the 3D video content.</p>
        /// </summary>
        /// <param name = "outputType"><dd> <p>A member of the <strong><see cref = "SharpDX.MediaFoundation.Video3DOutputType"/></strong> enumeration that specifies the 3D video rendering mode.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447958</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::SetStereo3DRenderMode([In] MF3DVideoOutputType outputType)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::SetStereo3DRenderMode</unmanaged-short>
        internal unsafe void SetStereo3DRenderMode(SharpDX.MediaFoundation.Video3DOutputType outputType)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)outputType), (*(void ***)this._nativePointer)[70]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Enables or disables windowless swap-chain mode.</p>
        /// </summary>
        /// <param name = "fEnable"><dd> <p>If <strong>TRUE</strong>, windowless swap-chain mode is enabled. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>In windowless swap-chain mode, the Media Engine creates a windowless swap chain and presents video frames to the swap chain. To render the video, call <strong>IMFMediaEngineEx::GetVideoSwapchainHandle</strong> to get a handle to the swap chain, and then associate the handle with a Microsoft DirectComposition visual.  </p>
        /// </remarks>
        /// <doc-id>hh447932</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::EnableWindowlessSwapchainMode([In] BOOL fEnable)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::EnableWindowlessSwapchainMode</unmanaged-short>
        public unsafe void EnableWindowlessSwapchainMode(SharpDX.Mathematics.Interop.RawBool fEnable)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, fEnable, (*(void ***)this._nativePointer)[71]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a handle to the windowless swap chain.</p>
        /// </summary>
        /// <param name = "hSwapchainRef"><dd> <p>Receives a handle to the swap chain.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>To enable windowless swap-chain mode, call <strong>IMFMediaEngineEx::EnableWindowlessSwapchainMode</strong>.</p>
        /// </remarks>
        /// <doc-id>hh447946</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::GetVideoSwapchainHandle([Out] void** phSwapchain)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::GetVideoSwapchainHandle</unmanaged-short>
        internal unsafe void GetVideoSwapchainHandle(out System.IntPtr hSwapchainRef)
        {
            SharpDX.Result __result__;
            fixed (void *hSwapchainRef_ = &hSwapchainRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, hSwapchainRef_, (*(void ***)this._nativePointer)[72]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Enables or disables mirroring of the video.</p>
        /// </summary>
        /// <param name = "fEnable"><dd> <p>If <strong>TRUE</strong>, the video is mirrored horizontally. Otherwise, the video is displayed normally.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447931</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::EnableHorizontalMirrorMode([In] BOOL fEnable)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::EnableHorizontalMirrorMode</unmanaged-short>
        public unsafe void EnableHorizontalMirrorMode(SharpDX.Mathematics.Interop.RawBool fEnable)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, fEnable, (*(void ***)this._nativePointer)[73]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the audio stream category used for the next call to <strong>SetSource</strong> or <strong>Load</strong>. </p>
        /// </summary>
        /// <param name = "categoryRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>For information on audio stream categories, see <strong><see cref = "SharpDX.Multimedia.AudioStreamCategory"/> enumeration</strong>.</p>
        /// </remarks>
        /// <doc-id>jj128310</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::GetAudioStreamCategory([Out] unsigned int* pCategory)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::GetAudioStreamCategory</unmanaged-short>
        internal unsafe void GetAudioStreamCategory(out System.Int32 categoryRef)
        {
            SharpDX.Result __result__;
            fixed (void *categoryRef_ = &categoryRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, categoryRef_, (*(void ***)this._nativePointer)[74]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the audio stream category for the next call to  <strong>SetSource</strong> or <strong>Load</strong>. </p>
        /// </summary>
        /// <param name = "category">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>For information on audio stream categories, see <strong><see cref = "SharpDX.Multimedia.AudioStreamCategory"/> enumeration</strong>.</p>
        /// </remarks>
        /// <doc-id>jj128313</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::SetAudioStreamCategory([In] unsigned int category)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::SetAudioStreamCategory</unmanaged-short>
        internal unsafe void SetAudioStreamCategory(System.Int32 category)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, category, (*(void ***)this._nativePointer)[75]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the audio device endpoint role used for the next  call to <strong>SetSource</strong> or <strong>Load</strong>. </p>
        /// </summary>
        /// <param name = "roleRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>For information on audio endpoint roles, see <strong>ERole  enumeration</strong>.</p>
        /// </remarks>
        /// <doc-id>jj128309</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::GetAudioEndpointRole([Out] unsigned int* pRole)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::GetAudioEndpointRole</unmanaged-short>
        internal unsafe void GetAudioEndpointRole(out System.Int32 roleRef)
        {
            SharpDX.Result __result__;
            fixed (void *roleRef_ = &roleRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, roleRef_, (*(void ***)this._nativePointer)[76]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the audio device endpoint used for the next call to <strong>SetSource</strong> or <strong>Load</strong>. </p>
        /// </summary>
        /// <param name = "role">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>For information on audio endpoint roles, see <strong>ERole  enumeration</strong>.</p>
        /// </remarks>
        /// <doc-id>jj128312</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::SetAudioEndpointRole([In] unsigned int role)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::SetAudioEndpointRole</unmanaged-short>
        internal unsafe void SetAudioEndpointRole(System.Int32 role)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, role, (*(void ***)this._nativePointer)[77]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the real time mode used for the next call to <strong>SetSource</strong> or <strong>Load</strong>. </p>
        /// </summary>
        /// <param name = "fEnabledRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>jj128311</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::GetRealTimeMode([Out] BOOL* pfEnabled)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::GetRealTimeMode</unmanaged-short>
        internal unsafe void GetRealTimeMode(out SharpDX.Mathematics.Interop.RawBool fEnabledRef)
        {
            fEnabledRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fEnabledRef_ = &fEnabledRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fEnabledRef_, (*(void ***)this._nativePointer)[78]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the real time mode used for the next call to  <strong>SetSource</strong> or <strong>Load</strong>. </p>
        /// </summary>
        /// <param name = "fEnable">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>jj128315</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::SetRealTimeMode([In] BOOL fEnable)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::SetRealTimeMode</unmanaged-short>
        internal unsafe void SetRealTimeMode(SharpDX.Mathematics.Interop.RawBool fEnable)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, fEnable, (*(void ***)this._nativePointer)[79]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Seeks to a new playback position using the  specified <strong><see cref = "SharpDX.MediaFoundation.MediaEngineSeekMode"/></strong>.</p>
        /// </summary>
        /// <param name = "seekTime">No documentation.</param>
        /// <param name = "seekMode">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>jj128314</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::SetCurrentTimeEx([In] double seekTime,[In] MF_MEDIA_ENGINE_SEEK_MODE seekMode)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::SetCurrentTimeEx</unmanaged-short>
        public unsafe void SetCurrentTimeEx(System.Double seekTime, SharpDX.MediaFoundation.MediaEngineSeekMode seekMode)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, seekTime, unchecked ((System.Int32)seekMode), (*(void ***)this._nativePointer)[80]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Enables or disables the time update timer.</p>
        /// </summary>
        /// <param name = "fEnableTimer"><dd> <p>If <strong>TRUE</strong>, the update timer is enabled. Otherwise, the timer is disabled.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>jj128308</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineEx::EnableTimeUpdateTimer([In] BOOL fEnableTimer)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineEx::EnableTimeUpdateTimer</unmanaged-short>
        public unsafe void EnableTimeUpdateTimer(SharpDX.Mathematics.Interop.RawBool fEnableTimer)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, fEnableTimer, (*(void ***)this._nativePointer)[81]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2f69d622-20b5-41e9-afdf-89ced1dda04e")]
    public partial class MediaEngineExtension : SharpDX.ComObject
    {
        public MediaEngineExtension(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineExtension(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineExtension(nativePtr);
        /// <summary>
        /// <p>Queries whether the object can load a specified type of media resource.</p>
        /// </summary>
        /// <param name = "audioOnly"><dd> <p>If <strong>TRUE</strong>, the Media Engine is set to audio-only mode. Otherwise, the Media Engine is set to audio-video mode.</p> </dd></param>
        /// <param name = "mimeType"><dd> <p>A string that contains a MIME type with an optional codecs parameter, as defined in RFC 4281.</p> </dd></param>
        /// <param name = "answerRef"><dd> <p>Receives a member of the <strong><see cref = "SharpDX.MediaFoundation.MediaEngineCanPlay"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Implement this method if your Media Engine extension supports one or more MIME types.</p>
        /// </remarks>
        /// <doc-id>hh447927</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineExtension::CanPlayType([In] BOOL AudioOnly,[In] wchar_t* MimeType,[Out] MF_MEDIA_ENGINE_CANPLAY* pAnswer)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineExtension::CanPlayType</unmanaged-short>
        public unsafe void CanPlayType(SharpDX.Mathematics.Interop.RawBool audioOnly, System.String mimeType, out SharpDX.MediaFoundation.MediaEngineCanPlay answerRef)
        {
            SharpDX.Result __result__;
            fixed (void *answerRef_ = &answerRef)
                fixed (char *mimeType_ = mimeType)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, audioOnly, (void *)mimeType_, answerRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Begins an asynchronous request to create either a byte stream or a media source.</p>
        /// </summary>
        /// <param name = "bstrURL"><dd> <p>The URL of the media resource.</p> </dd></param>
        /// <param name = "byteStreamRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.IByteStream"/></strong> interface.</p> <p>If the <em>type</em> parameter equals  <strong>MF_OBJECT_BYTESTREAM</strong>, this parameter is <strong><c>null</c></strong>. </p> <p>If <em>type</em> equals <strong>MF_OBJECT_MEDIASOURCE</strong>, this parameter either contains a reference to a byte stream or is <strong><c>null</c></strong>. See Remarks for more information.</p> </dd></param>
        /// <param name = "type"><dd> <p>A member of the <strong><see cref = "SharpDX.MediaFoundation.ObjectType"/></strong> enumeration that specifies which type of object to create.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>MF_OBJECT_BYTESTREAM</strong></dt> </dl> </td><td> <p>Create a byte stream. The byte stream must support the <strong><see cref = "SharpDX.MediaFoundation.IByteStream"/></strong> interface.</p> </td></tr> <tr><td><dl> <dt><strong>MF_OBJECT_MEDIASOURCE</strong></dt> </dl> </td><td> <p>Create a media source. The media source must support the <strong><see cref = "SharpDX.MediaFoundation.MediaSource"/></strong> interface.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "iUnknownCancelCookieOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface.  This reference can be used to cancel the asynchronous operation, by passing the reference to the <strong>IMFMediaEngineExtension::CancelObjectCreation</strong> method. </p> <p>The caller must release the interface. This parameter can be <c>null</c>.</p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface. This interface is used to signal the completion of the asynchronous operation.</p> </dd></param>
        /// <param name = "unkStateRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of an object impemented by the caller. You can use this object to hold state information for the callback. The object is returned to the caller when the callback is invoked. This parameter can be <strong><c>null</c></strong>. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method requests the object to create either a byte stream or a media source, depending on the value of the <em>type</em> parameter:</p><ul> <li>If <em>type</em> is <strong>MF_OBJECT_BYTESTREAM</strong>, the method creates a byte stream for the URL that is specified in <em>bstrURL</em>. In this case, the <em>pByteStream</em> parameter is <strong><c>null</c></strong>. </li> <li>If <em>type</em> is <strong>MF_OBJECT_MEDIASOURCE</strong>, the method creates a media source, using the byte stream that is specified in the <em>pByteStream</em> parameter. Note that <em>pByteStream</em> can also be <strong><c>null</c></strong> in this case.</li> </ul><p>The method is performed asynchronously. The Media Engine calls the <strong>IMFMediaEngineExtension::EndCreateObject</strong> method to complete the operation.</p>
        /// </remarks>
        /// <doc-id>hh447925</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineExtension::BeginCreateObject([In] wchar_t* bstrURL,[In, Optional] IMFByteStream* pByteStream,[In] MF_OBJECT_TYPE type,[Out] IUnknown** ppIUnknownCancelCookie,[In] IMFAsyncCallback* pCallback,[In, Optional] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineExtension::BeginCreateObject</unmanaged-short>
        public unsafe void BeginCreateObject(System.String bstrURL, SharpDX.MediaFoundation.IByteStream byteStreamRef, SharpDX.MediaFoundation.ObjectType type, out SharpDX.IUnknown iUnknownCancelCookieOut, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown unkStateRef)
        {
            System.IntPtr byteStreamRef_ = System.IntPtr.Zero;
            System.IntPtr iUnknownCancelCookieOut_ = System.IntPtr.Zero;
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            byteStreamRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IByteStream>(byteStreamRef);
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            fixed (char *bstrURL_ = bstrURL)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bstrURL_, (void *)byteStreamRef_, unchecked ((System.Int32)type), &iUnknownCancelCookieOut_, (void *)callbackRef_, (void *)unkStateRef_, (*(void ***)this._nativePointer)[4]);
            if (iUnknownCancelCookieOut_ != System.IntPtr.Zero)
                iUnknownCancelCookieOut = new SharpDX.ComObject(iUnknownCancelCookieOut_);
            else
                iUnknownCancelCookieOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Cancels the current request to create an object.</p>
        /// </summary>
        /// <param name = "iUnknownCancelCookieRef"><dd> <p>The reference that was returned in the the <em>ppIUnknownCancelCookie</em> parameter of the <strong>IMFMediaEngineExtension::BeginCreateObject</strong> method. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method attempts to cancel a previous call to <strong>BeginCreateObject</strong>. Because that method is asynchronous, however, it might complete before the operation can be canceled.</p>
        /// </remarks>
        /// <doc-id>hh447926</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineExtension::CancelObjectCreation([In] IUnknown* pIUnknownCancelCookie)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineExtension::CancelObjectCreation</unmanaged-short>
        public unsafe void CancelObjectCreation(SharpDX.IUnknown iUnknownCancelCookieRef)
        {
            System.IntPtr iUnknownCancelCookieRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iUnknownCancelCookieRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(iUnknownCancelCookieRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iUnknownCancelCookieRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Completes an asynchronous request to create a byte stream or media source.</p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface.</p> </dd></param>
        /// <param name = "objectOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of the byte stream or media source. The caller must release the interface</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The Media Engine calls this method to complete the <strong>IMFMediaEngineExtension::BeginCreateObject</strong> method.</p>
        /// </remarks>
        /// <doc-id>hh447928</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineExtension::EndCreateObject([In] IMFAsyncResult* pResult,[Out] IUnknown** ppObject)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineExtension::EndCreateObject</unmanaged-short>
        public unsafe void EndCreateObject(SharpDX.MediaFoundation.AsyncResult resultRef, out SharpDX.IUnknown objectOut)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            System.IntPtr objectOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, &objectOut_, (*(void ***)this._nativePointer)[6]);
            if (objectOut_ != System.IntPtr.Zero)
                objectOut = new SharpDX.ComObject(objectOut_);
            else
                objectOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("46a30204-a696-4b18-8804-246b8f031bb1")]
    public partial class MediaEngineNeedKeyNotify : SharpDX.ComObject
    {
        public MediaEngineNeedKeyNotify(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineNeedKeyNotify(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineNeedKeyNotify(nativePtr);
        /// <summary>
        /// <p>Notifies the application that a key or keys are needed along with any initialization data.</p>
        /// </summary>
        /// <param name = "initData"><dd> <p>The initialization data.</p> </dd></param>
        /// <param name = "cb"><dd> <p>The count in bytes of <em>initData</em>.</p> </dd></param>
        /// <doc-id>dn280697</doc-id>
        /// <unmanaged>void IMFMediaEngineNeedKeyNotify::NeedKey([In, Buffer, Optional] const unsigned char* initData,[In] DWORD cb)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineNeedKeyNotify::NeedKey</unmanaged-short>
        public unsafe void NeedKey(System.Byte[] initData, System.Int32 cb)
        {
            fixed (void *initData_ = initData)
                SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, initData_, cb, (*(void ***)this._nativePointer)[3]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("fee7c112-e776-42b5-9bbf-0048524e2bd5")]
    internal partial interface MediaEngineNotify : SharpDX.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("765763e6-6c01-4b01-bb0f-b829f60ed28c")]
    public partial class MediaEngineOPMInfo : SharpDX.ComObject
    {
        public MediaEngineOPMInfo(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineOPMInfo(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineOPMInfo(nativePtr);
        /// <summary>
        /// <p>Gets status information about the   Output Protection Manager (OPM).</p>
        /// </summary>
        /// <param name = "statusRef">No documentation.</param>
        /// <param name = "constrictedRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded</p> </td></tr> <tr><td> <dl> <dt><strong>INVALIDARG</strong></dt> </dl> </td><td> <p>If any of the parameters are <strong><c>null</c></strong>.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>dn280699</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineOPMInfo::GetOPMInfo([Out] MF_MEDIA_ENGINE_OPM_STATUS* pStatus,[Out] BOOL* pConstricted)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineOPMInfo::GetOPMInfo</unmanaged-short>
        public unsafe void GetOPMInfo(out SharpDX.MediaFoundation.MediaEngineOpmStatus statusRef, out SharpDX.Mathematics.Interop.RawBool constrictedRef)
        {
            constrictedRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *constrictedRef_ = &constrictedRef)
                fixed (void *statusRef_ = &statusRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, statusRef_, constrictedRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("9f8021e8-9c8c-487e-bb5c-79aa4779938c")]
    public partial class MediaEngineProtectedContent : SharpDX.ComObject
    {
        public MediaEngineProtectedContent(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineProtectedContent(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineProtectedContent(nativePtr);
        /// <summary>
        /// <p>Gets the content protections that must be applied in frame-server mode.</p>
        /// </summary>
        /// <doc-id>hh447965</doc-id>
        /// <unmanaged>GetRequiredProtections</unmanaged>
        /// <unmanaged-short>GetRequiredProtections</unmanaged-short>
        public System.Int32 RequiredProtections
        {
            get
            {
                GetRequiredProtections(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Specifies the window that should receive output link protections.</p>
        /// </summary>
        /// <remarks>
        /// <p>In frame-server mode, call this method to specify the destination window for protected video content. The Media Engine uses this window to set link protections, using the Output Protection Manager (OPM).</p>
        /// </remarks>
        /// <doc-id>hh447968</doc-id>
        /// <unmanaged>SetOPMWindow</unmanaged>
        /// <unmanaged-short>SetOPMWindow</unmanaged-short>
        public System.IntPtr OPMWindow
        {
            set => SetOPMWindow(value);
        }

        /// <summary>
        /// <p>Sets the content protection manager (CPM).</p>
        /// </summary>
        /// <remarks>
        /// <p>The Media Engine uses the CPM to handle events related to protected content, such as license acquisition.</p>
        /// </remarks>
        /// <doc-id>hh447967</doc-id>
        /// <unmanaged>SetContentProtectionManager</unmanaged>
        /// <unmanaged-short>SetContentProtectionManager</unmanaged-short>
        internal System.IntPtr ContentProtectionManager
        {
            set => SetContentProtectionManager(value);
        }

        /// <summary>
        /// <p>Enables the Media Engine to access protected content while in frame-server mode.</p>
        /// </summary>
        /// <param name = "unkDeviceContextRef"><dd> <p>A reference to the Direct3D?11 device content. The Media Engine queries this reference for the <strong><see cref = "SharpDX.Direct3D11.VideoContext"/></strong> interface. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>In frame-server mode, this method enables the Media Engine to share protected content with the Direct3D?11 device.</p>
        /// </remarks>
        /// <doc-id>hh447969</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineProtectedContent::ShareResources([In] IUnknown* pUnkDeviceContext)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineProtectedContent::ShareResources</unmanaged-short>
        public unsafe void ShareResources(SharpDX.IUnknown unkDeviceContextRef)
        {
            System.IntPtr unkDeviceContextRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            unkDeviceContextRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkDeviceContextRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)unkDeviceContextRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the content protections that must be applied in frame-server mode.</p>
        /// </summary>
        /// <param name = "frameProtectionFlagsRef"><dd> <p>Receives a bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.MediaEngineFrameProtectionFlags"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447965</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineProtectedContent::GetRequiredProtections([Out] DWORD* pFrameProtectionFlags)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineProtectedContent::GetRequiredProtections</unmanaged-short>
        internal unsafe void GetRequiredProtections(out System.Int32 frameProtectionFlagsRef)
        {
            SharpDX.Result __result__;
            fixed (void *frameProtectionFlagsRef_ = &frameProtectionFlagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, frameProtectionFlagsRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Specifies the window that should receive output link protections.</p>
        /// </summary>
        /// <param name = "hwnd"><dd> <p>A handle to the window.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>In frame-server mode, call this method to specify the destination window for protected video content. The Media Engine uses this window to set link protections, using the Output Protection Manager (OPM).</p>
        /// </remarks>
        /// <doc-id>hh447968</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineProtectedContent::SetOPMWindow([In] HWND hwnd)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineProtectedContent::SetOPMWindow</unmanaged-short>
        internal unsafe void SetOPMWindow(System.IntPtr hwnd)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hwnd, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Copies a protected video frame to a DXGI surface.</p>
        /// </summary>
        /// <param name = "dstSurfRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of the destination surface.</p> </dd></param>
        /// <param name = "srcRef"><dd> <p>A reference to an <strong><see cref = "SharpDX.MediaFoundation.VideoNormalizedRect"/></strong> structure that specifies the source rectangle.</p> </dd></param>
        /// <param name = "dstRef"><dd> <p>A reference to a <strong><see cref = "SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure that specifies the destination rectangle.</p> </dd></param>
        /// <param name = "borderClrRef"><dd> <p>A reference to an <strong><see cref = "SharpDX.Mathematics.Interop.RawColorBGRA"/></strong> structure that specifies the border color. </p> </dd></param>
        /// <param name = "frameProtectionFlagsRef"><dd> <p>Receives a bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.MediaEngineFrameProtectionFlags"/></strong> enumeration. These flags indicate which content protections the application must apply before presenting the surface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>For protected content, call this method instead of the <strong>IMFMediaEngine::TransferVideoFrame</strong> method.</p>
        /// </remarks>
        /// <doc-id>hh447970</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineProtectedContent::TransferVideoFrame([In] IUnknown* pDstSurf,[In, Optional] const MFVideoNormalizedRect* pSrc,[In] const RECT* pDst,[In, Optional] const MFARGB* pBorderClr,[Out] DWORD* pFrameProtectionFlags)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineProtectedContent::TransferVideoFrame</unmanaged-short>
        public unsafe void TransferVideoFrame(SharpDX.IUnknown dstSurfRef, SharpDX.MediaFoundation.VideoNormalizedRect? srcRef, SharpDX.Mathematics.Interop.RawRectangle dstRef, SharpDX.Mathematics.Interop.RawColorBGRA? borderClrRef, out System.Int32 frameProtectionFlagsRef)
        {
            System.IntPtr dstSurfRef_ = System.IntPtr.Zero;
            SharpDX.MediaFoundation.VideoNormalizedRect srcRef_;
            SharpDX.Mathematics.Interop.RawColorBGRA borderClrRef_;
            SharpDX.Result __result__;
            dstSurfRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(dstSurfRef);
            if (srcRef != null)
                srcRef_ = srcRef.Value;
            if (borderClrRef != null)
                borderClrRef_ = borderClrRef.Value;
            fixed (void *frameProtectionFlagsRef_ = &frameProtectionFlagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)dstSurfRef_, srcRef == null ? (void *)0 : &srcRef_, &dstRef, borderClrRef == null ? (void *)0 : &borderClrRef_, frameProtectionFlagsRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the content protection manager (CPM).</p>
        /// </summary>
        /// <param name = "cPMRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.ContentProtectionManager"/></strong> interface, implemented by the caller.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The Media Engine uses the CPM to handle events related to protected content, such as license acquisition.</p>
        /// </remarks>
        /// <doc-id>hh447967</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineProtectedContent::SetContentProtectionManager([In, Optional] IMFContentProtectionManager* pCPM)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineProtectedContent::SetContentProtectionManager</unmanaged-short>
        internal unsafe void SetContentProtectionManager(System.IntPtr cPMRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)cPMRef, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the application's certificate.</p>
        /// </summary>
        /// <param name = "bBlobRef"><dd> <p>A reference to a buffer that contains the certificate in X.509 format, followed by the application identifier signed with a SHA-256 signature using the private key from the certificate.</p> </dd></param>
        /// <param name = "cbBlob"><dd> <p>The size of the <em>pbBlob</em> buffer, in bytes.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Call this method to access protected video content in frame-server mode.</p>
        /// </remarks>
        /// <doc-id>hh447966</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineProtectedContent::SetApplicationCertificate([In, Buffer] const unsigned char* pbBlob,[In] DWORD cbBlob)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineProtectedContent::SetApplicationCertificate</unmanaged-short>
        public unsafe void SetApplicationCertificate(System.Byte[] bBlobRef, System.Int32 cbBlob)
        {
            SharpDX.Result __result__;
            fixed (void *bBlobRef_ = bBlobRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bBlobRef_, cbBlob, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7a5e5354-b114-4c72-b991-3131d75032ea")]
    public partial class MediaEngineSrcElements : SharpDX.ComObject
    {
        public MediaEngineSrcElements(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineSrcElements(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineSrcElements(nativePtr);
        /// <summary>
        /// <p>Gets the number of source elements in the list.</p>
        /// </summary>
        /// <doc-id>hh447973</doc-id>
        /// <unmanaged>GetLength</unmanaged>
        /// <unmanaged-short>GetLength</unmanaged-short>
        public System.Int32 Length
        {
            get => GetLength();
        }

        /// <summary>
        /// <p>Gets the number of source elements in the list.</p>
        /// </summary>
        /// <returns><p>Returns the number of source elements.</p></returns>
        /// <doc-id>hh447973</doc-id>
        /// <unmanaged>DWORD IMFMediaEngineSrcElements::GetLength()</unmanaged>
        /// <unmanaged-short>IMFMediaEngineSrcElements::GetLength</unmanaged-short>
        internal unsafe System.Int32 GetLength()
        {
            System.Int32 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the URL of an element in the list.</p>
        /// </summary>
        /// <param name = "index"><dd> <p>The zero-based index of the source element. To get the number of source elements, call <strong>IMFMediaEngineSrcElements::GetLength</strong>.</p> </dd></param>
        /// <param name = "uRLRef"><dd> <p>Receives a <strong>BSTR</strong> that contains the URL of the source element. The caller must free the  <strong>BSTR</strong> by calling <strong>SysFreeString</strong>. If no URL is set, this parameter receives the value <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447976</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineSrcElements::GetURL([In] DWORD index,[Out] wchar_t** pURL)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineSrcElements::GetURL</unmanaged-short>
        public unsafe void GetURL(System.Int32 index, System.IntPtr uRLRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, index, (void *)uRLRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the MIME type of an element in the list.</p>
        /// </summary>
        /// <param name = "index"><dd> <p>The zero-based index of the source element. To get the number of source elements, call <strong>IMFMediaEngineSrcElements::GetLength</strong>.</p> </dd></param>
        /// <param name = "typeRef"><dd> <p>Receives a <strong>BSTR</strong> that contains the MIME type. The caller must free the  <strong>BSTR</strong> by calling <strong>SysFreeString</strong>. If no MIME type is set, this parameter receives the value <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447975</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineSrcElements::GetType([In] DWORD index,[Out] wchar_t** pType)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineSrcElements::GetType</unmanaged-short>
        public unsafe void GetTypeInfo(System.Int32 index, System.IntPtr typeRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, index, (void *)typeRef, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the intended media type of an element in the list.</p>
        /// </summary>
        /// <param name = "index"><dd> <p>The zero-based index of the source element. To get the number of source elements, call <strong>IMFMediaEngineSrcElements::GetLength</strong>.</p> </dd></param>
        /// <param name = "mediaRef"><dd> <p>Receives a <strong>BSTR</strong> that contains a media-query string. The caller must free the  <strong>BSTR</strong> by calling <strong>SysFreeString</strong>. If no media type is set, this parameter receives the value <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The string returned in <em>pMedia</em> should be a media-query string that conforms to the W3C <em>Media Queries</em> specification.</p>
        /// </remarks>
        /// <doc-id>hh447974</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineSrcElements::GetMedia([In] DWORD index,[Out] wchar_t** pMedia)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineSrcElements::GetMedia</unmanaged-short>
        public unsafe void GetMedia(System.Int32 index, System.IntPtr mediaRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, index, (void *)mediaRef, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Adds a source element to the end of the list.</p>
        /// </summary>
        /// <param name = "uRLRef"><dd> <p>The URL of the source element, or <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "typeRef"><dd> <p>The MIME type of the source element, or <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "mediaRef"><dd> <p>A media-query string that specifies the intended media type, or <strong><c>null</c></strong>. If specified, the string should conform to the W3C <em>Media Queries</em> specification.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Any of the parameters to this method can be <strong><c>null</c></strong>.</p><p>This method allocates copies of the <strong>BSTR</strong>s that are passed in.</p>
        /// </remarks>
        /// <doc-id>hh447972</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineSrcElements::AddElement([In, Optional] wchar_t* pURL,[In, Optional] wchar_t* pType,[In, Optional] wchar_t* pMedia)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineSrcElements::AddElement</unmanaged-short>
        public unsafe void AddElement(System.String uRLRef, System.String typeRef, System.String mediaRef)
        {
            SharpDX.Result __result__;
            fixed (char *mediaRef_ = mediaRef)
                fixed (char *typeRef_ = typeRef)
                    fixed (char *uRLRef_ = uRLRef)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)uRLRef_, (void *)typeRef_, (void *)mediaRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Removes all of the source elements from the list.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh447977</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineSrcElements::RemoveAllElements()</unmanaged>
        /// <unmanaged-short>IMFMediaEngineSrcElements::RemoveAllElements</unmanaged-short>
        public unsafe void RemoveAllElements()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("654a6bb3-e1a3-424a-9908-53a43a0dfda0")]
    public partial class MediaEngineSrcElementsEx : SharpDX.MediaFoundation.MediaEngineSrcElements
    {
        public MediaEngineSrcElementsEx(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineSrcElementsEx(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineSrcElementsEx(nativePtr);
        /// <summary>
        /// <p>Provides an enhanced version of <strong>IMFMediaEngineSrcElements::AddElement</strong> to add the key system intended to be used with content to an element.</p>
        /// </summary>
        /// <param name = "uRLRef">No documentation.</param>
        /// <param name = "typeRef">No documentation.</param>
        /// <param name = "mediaRef">No documentation.</param>
        /// <param name = "keySystem">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280701</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineSrcElementsEx::AddElementEx([In, Optional] wchar_t* pURL,[In, Optional] wchar_t* pType,[In, Optional] wchar_t* pMedia,[In, Optional] wchar_t* keySystem)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineSrcElementsEx::AddElementEx</unmanaged-short>
        public unsafe void AddElementEx(System.String uRLRef, System.String typeRef, System.String mediaRef, System.String keySystem)
        {
            SharpDX.Result __result__;
            fixed (char *keySystem_ = keySystem)
                fixed (char *mediaRef_ = mediaRef)
                    fixed (char *typeRef_ = typeRef)
                        fixed (char *uRLRef_ = uRLRef)
                            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)uRLRef_, (void *)typeRef_, (void *)mediaRef_, (void *)keySystem_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the key system for the given source element index.</p>
        /// </summary>
        /// <param name = "index"><dd> <p>The source element index.</p> </dd></param>
        /// <param name = "typeRef"><dd> <p>The MIME type of the source element.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280702</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineSrcElementsEx::GetKeySystem([In] DWORD index,[Out, Optional] wchar_t** pType)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineSrcElementsEx::GetKeySystem</unmanaged-short>
        public unsafe void GetKeySystem(System.Int32 index, System.IntPtr typeRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, index, (void *)typeRef, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a724b056-1b2e-4642-a6f3-db9420c52908")]
    public partial class MediaEngineSupportsSourceTransfer : SharpDX.ComObject
    {
        public MediaEngineSupportsSourceTransfer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineSupportsSourceTransfer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineSupportsSourceTransfer(nativePtr);
        /// <summary>
        /// <p>Specifies wether or not the source should be transferred.</p>
        /// </summary>
        /// <param name = "fShouldTransferRef"><dd> <p><strong>true</strong> if the source should be transferred; otherwise, <strong>false</strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280706</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineSupportsSourceTransfer::ShouldTransferSource([Out] BOOL* pfShouldTransfer)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineSupportsSourceTransfer::ShouldTransferSource</unmanaged-short>
        public unsafe void ShouldTransferSource(out SharpDX.Mathematics.Interop.RawBool fShouldTransferRef)
        {
            fShouldTransferRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fShouldTransferRef_ = &fShouldTransferRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fShouldTransferRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Detaches the media source.</p>
        /// </summary>
        /// <param name = "byteStreamOut"><dd> <p>Receives the byte stream.</p> </dd></param>
        /// <param name = "mediaSourceOut"><dd> <p>Receives the media source.</p> </dd></param>
        /// <param name = "mSEOut"><dd> <p>Receives the media source extension.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280705</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineSupportsSourceTransfer::DetachMediaSource([Out] IMFByteStream** ppByteStream,[Out] IMFMediaSource** ppMediaSource,[Out] IMFMediaSourceExtension** ppMSE)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineSupportsSourceTransfer::DetachMediaSource</unmanaged-short>
        public unsafe void DetachMediaSource(out SharpDX.MediaFoundation.IByteStream byteStreamOut, out SharpDX.MediaFoundation.MediaSource mediaSourceOut, out SharpDX.MediaFoundation.MediaSourceExtension mSEOut)
        {
            System.IntPtr byteStreamOut_ = System.IntPtr.Zero;
            System.IntPtr mediaSourceOut_ = System.IntPtr.Zero;
            System.IntPtr mSEOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &byteStreamOut_, &mediaSourceOut_, &mSEOut_, (*(void ***)this._nativePointer)[4]);
            if (byteStreamOut_ != System.IntPtr.Zero)
                byteStreamOut = new SharpDX.MediaFoundation.ByteStream(byteStreamOut_);
            else
                byteStreamOut = null;
            if (mediaSourceOut_ != System.IntPtr.Zero)
                mediaSourceOut = new SharpDX.MediaFoundation.MediaSource(mediaSourceOut_);
            else
                mediaSourceOut = null;
            if (mSEOut_ != System.IntPtr.Zero)
                mSEOut = new SharpDX.MediaFoundation.MediaSourceExtension(mSEOut_);
            else
                mSEOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Attaches the media source.</p>
        /// </summary>
        /// <param name = "byteStreamRef"><dd> <p>Specifies the byte stream. </p> </dd></param>
        /// <param name = "mediaSourceRef"><dd> <p>Specifies the media source.</p> </dd></param>
        /// <param name = "mSERef"><dd> <p>Specifies the media source extension.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280704</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineSupportsSourceTransfer::AttachMediaSource([In, Optional] IMFByteStream* pByteStream,[In] IMFMediaSource* pMediaSource,[In, Optional] IMFMediaSourceExtension* pMSE)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineSupportsSourceTransfer::AttachMediaSource</unmanaged-short>
        public unsafe void AttachMediaSource(SharpDX.MediaFoundation.IByteStream byteStreamRef, SharpDX.MediaFoundation.MediaSource mediaSourceRef, SharpDX.MediaFoundation.MediaSourceExtension mSERef)
        {
            System.IntPtr byteStreamRef_ = System.IntPtr.Zero;
            System.IntPtr mediaSourceRef_ = System.IntPtr.Zero;
            System.IntPtr mSERef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            byteStreamRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IByteStream>(byteStreamRef);
            mediaSourceRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaSource>(mediaSourceRef);
            mSERef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaSourceExtension>(mSERef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)byteStreamRef_, (void *)mediaSourceRef_, (void *)mSERef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("24230452-fe54-40cc-94f3-fcc394c340d6")]
    public partial class MediaEngineTransferSource : SharpDX.ComObject
    {
        public MediaEngineTransferSource(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineTransferSource(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineTransferSource(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "destination">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaEngineTransferSource::TransferSourceToMediaEngine([In] IMFMediaEngine* destination)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineTransferSource::TransferSourceToMediaEngine</unmanaged-short>
        public unsafe void TransferSourceToMediaEngine(SharpDX.MediaFoundation.MediaEngine destination)
        {
            System.IntPtr destination_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            destination_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaEngine>(destination);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)destination_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ba2743a1-07e0-48ef-84b6-9a2ed023ca6c")]
    public partial class MediaEngineWebSupport : SharpDX.ComObject
    {
        public MediaEngineWebSupport(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEngineWebSupport(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEngineWebSupport(nativePtr);
        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets a value indicating if the connecting to Web audio should delay the page's load event.</p>
        /// </summary>
        /// <returns><p>True if connection to Web audio should delay the page's load event; otherwise, false.</p></returns>
        /// <doc-id>mt668769</doc-id>
        /// <unmanaged>BOOL IMFMediaEngineWebSupport::ShouldDelayTheLoadEvent()</unmanaged>
        /// <unmanaged-short>IMFMediaEngineWebSupport::ShouldDelayTheLoadEvent</unmanaged-short>
        public unsafe SharpDX.Mathematics.Interop.RawBool ShouldDelayTheLoadEvent()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Connects web audio to Media Engine using the specified sample rate.</p>
        /// </summary>
        /// <param name = "dwSampleRate"><dd> <p>The sample rate of the web audio.</p> </dd></param>
        /// <param name = "sourceProviderOut"><dd> <p>The sample rate of the web audio.</p> </dd></param>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> on successful completion.</p></returns>
        /// <doc-id>mt668767</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineWebSupport::ConnectWebAudio([In] DWORD dwSampleRate,[Out] IAudioSourceProvider** ppSourceProvider)</unmanaged>
        /// <unmanaged-short>IMFMediaEngineWebSupport::ConnectWebAudio</unmanaged-short>
        public unsafe void ConnectWebAudio(System.Int32 dwSampleRate, out SharpDX.MediaFoundation.IAudioSourceProvider sourceProviderOut)
        {
            System.IntPtr sourceProviderOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwSampleRate, &sourceProviderOut_, (*(void ***)this._nativePointer)[4]);
            if (sourceProviderOut_ != System.IntPtr.Zero)
                sourceProviderOut = new SharpDX.MediaFoundation.IAudioSourceProvider(sourceProviderOut_);
            else
                sourceProviderOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Disconnects web audio from the Media Engine </p>
        /// </summary>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> on successful completion.</p></returns>
        /// <doc-id>mt668768</doc-id>
        /// <unmanaged>HRESULT IMFMediaEngineWebSupport::DisconnectWebAudio()</unmanaged>
        /// <unmanaged-short>IMFMediaEngineWebSupport::DisconnectWebAudio</unmanaged-short>
        public unsafe void DisconnectWebAudio()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("fc0e10d2-ab2a-4501-a951-06bb1075184c")]
    public partial class MediaError : SharpDX.ComObject
    {
        public MediaError(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaError(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaError(nativePtr);
        /// <summary>
        /// <p>Gets or sets the extended error code.</p>
        /// </summary>
        /// <doc-id>hh448024</doc-id>
        /// <unmanaged>GetExtendedErrorCode / SetExtendedErrorCode</unmanaged>
        /// <unmanaged-short>GetExtendedErrorCode</unmanaged-short>
        public SharpDX.Result ExtendedErrorCode
        {
            get => GetExtendedErrorCode();
            set => SetExtendedErrorCode(value);
        }

        /// <summary>
        /// <p>Gets the error code.</p>
        /// </summary>
        /// <returns><p>Returns a value from the <strong><see cref = "SharpDX.MediaFoundation.MediaEngineErr"/></strong> enumeration.</p></returns>
        /// <doc-id>hh448023</doc-id>
        /// <unmanaged>unsigned short IMFMediaError::GetErrorCode()</unmanaged>
        /// <unmanaged-short>IMFMediaError::GetErrorCode</unmanaged-short>
        public unsafe System.Int16 GetErrorCode()
        {
            System.Int16 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallshort(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the extended error code.</p>
        /// </summary>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value that gives additional information about the last error.</p></returns>
        /// <doc-id>hh448024</doc-id>
        /// <unmanaged>HRESULT IMFMediaError::GetExtendedErrorCode()</unmanaged>
        /// <unmanaged-short>IMFMediaError::GetExtendedErrorCode</unmanaged-short>
        internal unsafe SharpDX.Result GetExtendedErrorCode()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }

        /// <summary>
        /// <p>Sets the error code.</p>
        /// </summary>
        /// <param name = "error"><dd> <p>The error code, specified as an <strong><see cref = "SharpDX.MediaFoundation.MediaEngineErr"/></strong> value.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh448025</doc-id>
        /// <unmanaged>HRESULT IMFMediaError::SetErrorCode([In] MF_MEDIA_ENGINE_ERR error)</unmanaged>
        /// <unmanaged-short>IMFMediaError::SetErrorCode</unmanaged-short>
        public unsafe void SetErrorCode(SharpDX.MediaFoundation.MediaEngineErr error)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)error), (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the extended error code.</p>
        /// </summary>
        /// <param name = "error"><dd> <p>An <strong><see cref = "SharpDX.Result"/></strong> value that gives additional information about the last error.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh448026</doc-id>
        /// <unmanaged>HRESULT IMFMediaError::SetExtendedErrorCode([In] HRESULT error)</unmanaged>
        /// <unmanaged-short>IMFMediaError::SetExtendedErrorCode</unmanaged-short>
        internal unsafe void SetExtendedErrorCode(SharpDX.Result error)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, error, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("DF598932-F10C-4E39-BBA2-C308F101DAA3")]
    public partial class MediaEvent : SharpDX.MediaFoundation.MediaAttributes
    {
        public MediaEvent(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEvent(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEvent(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the event type. The event type indicates what happened to trigger the event. It also defines the meaning of the event value.</p>
        /// </summary>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms702255</doc-id>
        /// <unmanaged>GetType</unmanaged>
        /// <unmanaged-short>GetType</unmanaged-short>
        public SharpDX.MediaFoundation.MediaEventTypes TypeInfo
        {
            get
            {
                GetTypeInfo(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the extended type of the event.</p>
        /// </summary>
        /// <remarks>
        /// <p>To define a custom event, create a new extended-type <see cref = "System.Guid"/> and send an MEExtendedType event with that <see cref = "System.Guid"/>.</p><p>Some standard Media Foundation events also use the extended type to differentiate between types of event data.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms697235</doc-id>
        /// <unmanaged>GetExtendedType</unmanaged>
        /// <unmanaged-short>GetExtendedType</unmanaged-short>
        public System.Guid ExtendedType
        {
            get
            {
                GetExtendedType(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves an <strong><see cref = "SharpDX.Result"/></strong> that specifies the event status.</p>
        /// </summary>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms704650</doc-id>
        /// <unmanaged>GetStatus</unmanaged>
        /// <unmanaged-short>GetStatus</unmanaged-short>
        public SharpDX.Result Status
        {
            get
            {
                GetStatus(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the value associated with the event, if any. The value is retrieved as a <strong><see cref = "SharpDX.Win32.Variant"/></strong> structure. The actual data type and the meaning of the value depend on the event.</p>
        /// </summary>
        /// <remarks>
        /// <p>Before calling this method, call <strong>PropVariantInit</strong> to initialize the <strong><see cref = "SharpDX.Win32.Variant"/></strong> structure. After the method returns, call <strong>PropVariantClear</strong> to free the memory that was allocated for the <strong><see cref = "SharpDX.Win32.Variant"/></strong> data.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms693864</doc-id>
        /// <unmanaged>GetValue</unmanaged>
        /// <unmanaged-short>GetValue</unmanaged-short>
        public SharpDX.Win32.Variant Value
        {
            get
            {
                GetValue(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the event type. The event type indicates what happened to trigger the event. It also defines the meaning of the event value.</p>
        /// </summary>
        /// <param name = "metRef"><dd> <p>Receives the event type. For a list of event types, see Media Foundation Events.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms702255</doc-id>
        /// <unmanaged>HRESULT IMFMediaEvent::GetType([Out] DWORD* pmet)</unmanaged>
        /// <unmanaged-short>IMFMediaEvent::GetType</unmanaged-short>
        internal unsafe void GetTypeInfo(out SharpDX.MediaFoundation.MediaEventTypes metRef)
        {
            SharpDX.Result __result__;
            fixed (void *metRef_ = &metRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, metRef_, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the extended type of the event.</p>
        /// </summary>
        /// <param name = "guidExtendedTypeRef"><dd> <p>Receives a <strong><see cref = "System.Guid"/></strong> that identifies the extended type.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To define a custom event, create a new extended-type <see cref = "System.Guid"/> and send an MEExtendedType event with that <see cref = "System.Guid"/>.</p><p>Some standard Media Foundation events also use the extended type to differentiate between types of event data.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms697235</doc-id>
        /// <unmanaged>HRESULT IMFMediaEvent::GetExtendedType([Out] GUID* pguidExtendedType)</unmanaged>
        /// <unmanaged-short>IMFMediaEvent::GetExtendedType</unmanaged-short>
        internal unsafe void GetExtendedType(out System.Guid guidExtendedTypeRef)
        {
            guidExtendedTypeRef = default (System.Guid);
            SharpDX.Result __result__;
            fixed (void *guidExtendedTypeRef_ = &guidExtendedTypeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, guidExtendedTypeRef_, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves an <strong><see cref = "SharpDX.Result"/></strong> that specifies the event status.</p>
        /// </summary>
        /// <param name = "hrStatusRef"><dd> <p>Receives the event status. If the operation that generated the event was successful, the value is a success code. A failure code means that an error condition triggered the event.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms704650</doc-id>
        /// <unmanaged>HRESULT IMFMediaEvent::GetStatus([Out] HRESULT* phrStatus)</unmanaged>
        /// <unmanaged-short>IMFMediaEvent::GetStatus</unmanaged-short>
        internal unsafe void GetStatus(out SharpDX.Result hrStatusRef)
        {
            hrStatusRef = default (SharpDX.Result);
            SharpDX.Result __result__;
            fixed (void *hrStatusRef_ = &hrStatusRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, hrStatusRef_, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the value associated with the event, if any. The value is retrieved as a <strong><see cref = "SharpDX.Win32.Variant"/></strong> structure. The actual data type and the meaning of the value depend on the event.</p>
        /// </summary>
        /// <param name = "vValueRef"><dd> <p>Pointer to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> structure. The method fills this structure with the data.</p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Before calling this method, call <strong>PropVariantInit</strong> to initialize the <strong><see cref = "SharpDX.Win32.Variant"/></strong> structure. After the method returns, call <strong>PropVariantClear</strong> to free the memory that was allocated for the <strong><see cref = "SharpDX.Win32.Variant"/></strong> data.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms693864</doc-id>
        /// <unmanaged>HRESULT IMFMediaEvent::GetValue([Out] PROPVARIANT* pvValue)</unmanaged>
        /// <unmanaged-short>IMFMediaEvent::GetValue</unmanaged-short>
        internal unsafe void GetValue(out SharpDX.Win32.Variant vValueRef)
        {
            vValueRef = default (SharpDX.Win32.Variant);
            SharpDX.Result __result__;
            fixed (void *vValueRef_ = &vValueRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, vValueRef_, (*(void ***)this._nativePointer)[36]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2CD0BD52-BCD5-4B89-B62C-EADC0C031E7D")]
    public partial class MediaEventGenerator : SharpDX.ComObject
    {
        public MediaEventGenerator(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEventGenerator(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEventGenerator(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the next event in the queue. This method is synchronous.</p>
        /// </summary>
        /// <param name = "dwFlags"><dd> <p>Specifies one of the following values.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>0</strong></dt> </dl> </td><td> <p>The method blocks until the event generator queues an event.</p> </td></tr> <tr><td><dl> <dt><strong>MF_EVENT_FLAG_NO_WAIT</strong></dt> </dl> </td><td> <p>The method returns immediately.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "eventOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaEvent"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><c>null</c> reference argument.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "MultipleSubScribers"/></strong></dt> </dl> </td><td> <p>There is a pending request.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoEventsAvailable"/></strong></dt> </dl> </td><td> <p>There are no events in the queue.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The object was shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method executes synchronously.</p><p>If the queue already contains an event, the method returns <see cref = "SharpDX.Result.Ok"/> immediately. If the queue does not contain an event, the behavior depends on the value of <em>dwFlags</em>:</p><ul> <li> <p>If <em>dwFlags</em> is 0, the method blocks indefinitely until a new event is queued, or until the event generator is shut down.</p> </li> <li> <p>If <em>dwFlags</em> is MF_EVENT_FLAG_NO_WAIT, the method fails immediately with the return code <see cref = "NoEventsAvailable"/>.</p> </li> </ul><p>This method returns <see cref = "MultipleSubScribers"/> if you previously called <strong>IMFMediaEventGenerator::BeginGetEvent</strong> and have not yet called <strong>IMFMediaEventGenerator::EndGetEvent</strong>.</p>
        /// </remarks>
        /// <doc-id>ms704754</doc-id>
        /// <unmanaged>HRESULT IMFMediaEventGenerator::GetEvent([In] DWORD dwFlags,[Out] IMFMediaEvent** ppEvent)</unmanaged>
        /// <unmanaged-short>IMFMediaEventGenerator::GetEvent</unmanaged-short>
        internal unsafe void GetEvent(System.Int32 dwFlags, out SharpDX.MediaFoundation.MediaEvent eventOut)
        {
            System.IntPtr eventOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwFlags, &eventOut_, (*(void ***)this._nativePointer)[3]);
            if (eventOut_ != System.IntPtr.Zero)
                eventOut = new SharpDX.MediaFoundation.MediaEvent(eventOut_);
            else
                eventOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Begins an asynchronous request for the next event in the queue.</p>
        /// </summary>
        /// <param name = "callbackRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The client must implement this interface.</p> </dd></param>
        /// <param name = "unkStateRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><strong><c>null</c></strong> reference argument.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "MultipleBegin"/></strong></dt> </dl> </td><td> <p>There is a pending request with the same callback reference and a different state object.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "MultipleSubScribers"/></strong></dt> </dl> </td><td> <p>There is a pending request with a different callback reference.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The object was shut down.</p> </td></tr> <tr><td> <dl> <dt><strong>MF_S_MULTIPLE_BEGIN</strong></dt> </dl> </td><td> <p>There is a pending request with the same callback reference and state object.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>When a new event is available, the event generator calls the <strong>IMFAsyncCallback::Invoke</strong> method. The <strong>Invoke</strong> method should call <strong>IMFMediaEventGenerator::EndGetEvent</strong> to get a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaEvent"/></strong> interface, and use that interface to examine the event.</p><p>Do not call <strong>BeginGetEvent</strong> a second time before calling <strong>EndGetEvent</strong>. While the first call is still pending, additional calls to the same object will fail. Also, the <strong>IMFMediaEventGenerator::GetEvent</strong> method fails if an asynchronous request is still pending.</p>
        /// </remarks>
        /// <doc-id>ms701637</doc-id>
        /// <unmanaged>HRESULT IMFMediaEventGenerator::BeginGetEvent([In] IMFAsyncCallback* pCallback,[In] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFMediaEventGenerator::BeginGetEvent</unmanaged-short>
        public unsafe void BeginGetEvent(SharpDX.MediaFoundation.IAsyncCallback callbackRef, System.IntPtr unkStateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)callbackRef_, (void *)unkStateRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Completes an asynchronous request for the next event in the queue.</p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the <strong>Invoke</strong> method.</p> </dd></param>
        /// <returns><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaEvent"/></strong> interface. The caller must release the interface.</p> </dd></returns>
        /// <remarks>
        /// <p>Call this method from inside your application's <strong>IMFAsyncCallback::Invoke</strong> method. For example code, see <strong>IMFMediaEventGenerator::BeginGetEvent</strong>.</p>
        /// </remarks>
        /// <doc-id>ms698866</doc-id>
        /// <unmanaged>HRESULT IMFMediaEventGenerator::EndGetEvent([In] IMFAsyncResult* pResult,[Out] IMFMediaEvent** ppEvent)</unmanaged>
        /// <unmanaged-short>IMFMediaEventGenerator::EndGetEvent</unmanaged-short>
        public unsafe SharpDX.MediaFoundation.MediaEvent EndGetEvent(SharpDX.MediaFoundation.AsyncResult resultRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.MediaFoundation.MediaEvent eventOut;
            System.IntPtr eventOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, &eventOut_, (*(void ***)this._nativePointer)[5]);
            if (eventOut_ != System.IntPtr.Zero)
                eventOut = new SharpDX.MediaFoundation.MediaEvent(eventOut_);
            else
                eventOut = null;
            __result__.CheckError();
            return eventOut;
        }

        /// <summary>
        /// <p> </p><p>Puts a new event in the object's queue.</p>
        /// </summary>
        /// <param name = "met"><dd> <p>Specifies the event type. The event type is returned by the event's <strong>IMFMediaEvent::GetType</strong> method. For a list of event types, see Media Foundation Events.</p> </dd></param>
        /// <param name = "guidExtendedType"><dd> <p>The extended type. If the event does not have an extended type, use the value GUID_NULL. The extended type is returned by the event's <strong>IMFMediaEvent::GetExtendedType</strong> method.</p> </dd></param>
        /// <param name = "hrStatus"><dd> <p>A success or failure code indicating the status of the event. This value is returned by the event's <strong>IMFMediaEvent::GetStatus</strong> method.</p> </dd></param>
        /// <param name = "vValueRef"><dd> <p>Pointer to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that contains the event value. This parameter can be <strong><c>null</c></strong>. This value is returned by the event's <strong>IMFMediaEvent::GetValue</strong> method.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The object was shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms696255</doc-id>
        /// <unmanaged>HRESULT IMFMediaEventGenerator::QueueEvent([In] DWORD met,[In] const GUID&amp; guidExtendedType,[In] HRESULT hrStatus,[In, Optional] const PROPVARIANT* pvValue)</unmanaged>
        /// <unmanaged-short>IMFMediaEventGenerator::QueueEvent</unmanaged-short>
        public unsafe void QueueEvent(System.Int32 met, System.Guid guidExtendedType, SharpDX.Result hrStatus, SharpDX.Win32.Variant? vValueRef)
        {
            SharpDX.Win32.Variant vValueRef_;
            SharpDX.Result __result__;
            if (vValueRef != null)
                vValueRef_ = vValueRef.Value;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, met, &guidExtendedType, hrStatus, vValueRef == null ? (void *)0 : &vValueRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("36f846fc-2256-48b6-b58e-e2b638316581")]
    public partial class MediaEventQueue : SharpDX.ComObject
    {
        public MediaEventQueue(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaEventQueue(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaEventQueue(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the next event in the queue. This method is synchronous.</p><p>Call this method inside your implementation of <strong>IMFMediaEventGenerator::GetEvent</strong>. Pass the parameters from that method directly to this method.</p>
        /// </summary>
        /// <param name = "dwFlags">No documentation.</param>
        /// <param name = "eventOut">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms702270</doc-id>
        /// <unmanaged>HRESULT IMFMediaEventQueue::GetEvent([In] DWORD dwFlags,[Out] IMFMediaEvent** ppEvent)</unmanaged>
        /// <unmanaged-short>IMFMediaEventQueue::GetEvent</unmanaged-short>
        public unsafe void GetEvent(System.Int32 dwFlags, out SharpDX.MediaFoundation.MediaEvent eventOut)
        {
            System.IntPtr eventOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwFlags, &eventOut_, (*(void ***)this._nativePointer)[3]);
            if (eventOut_ != System.IntPtr.Zero)
                eventOut = new SharpDX.MediaFoundation.MediaEvent(eventOut_);
            else
                eventOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Begins an asynchronous request for the next event in the queue.</p><p>Call this method inside your implementation of <strong>IMFMediaEventGenerator::BeginGetEvent</strong>. Pass the parameters from that method directly to this method.</p>
        /// </summary>
        /// <param name = "callbackRef">No documentation.</param>
        /// <param name = "unkStateRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms696998</doc-id>
        /// <unmanaged>HRESULT IMFMediaEventQueue::BeginGetEvent([In] IMFAsyncCallback* pCallback,[In] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFMediaEventQueue::BeginGetEvent</unmanaged-short>
        public unsafe void BeginGetEvent(SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown unkStateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)callbackRef_, (void *)unkStateRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Completes an asynchronous request for the next event in the queue.</p><p>Call this method inside your implementation of <strong>IMFMediaEventGenerator::EndGetEvent</strong>. Pass the parameters from that method directly to this method.</p>
        /// </summary>
        /// <param name = "resultRef">No documentation.</param>
        /// <param name = "eventOut">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms702986</doc-id>
        /// <unmanaged>HRESULT IMFMediaEventQueue::EndGetEvent([In] IMFAsyncResult* pResult,[Out] IMFMediaEvent** ppEvent)</unmanaged>
        /// <unmanaged-short>IMFMediaEventQueue::EndGetEvent</unmanaged-short>
        public unsafe void EndGetEvent(SharpDX.MediaFoundation.AsyncResult resultRef, out SharpDX.MediaFoundation.MediaEvent eventOut)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            System.IntPtr eventOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, &eventOut_, (*(void ***)this._nativePointer)[5]);
            if (eventOut_ != System.IntPtr.Zero)
                eventOut = new SharpDX.MediaFoundation.MediaEvent(eventOut_);
            else
                eventOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Puts an event in the queue.</p>
        /// </summary>
        /// <param name = "eventRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaEvent"/></strong> interface of the event to be put in the queue.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method when your component needs to raise an event that contains attributes. To create the event object, call <strong>MFCreateMediaEvent</strong>. Add attributes to the event by using methods from the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface. (The <strong><see cref = "SharpDX.MediaFoundation.MediaEvent"/></strong> interface inherits <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong>.)</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms704792</doc-id>
        /// <unmanaged>HRESULT IMFMediaEventQueue::QueueEvent([In] IMFMediaEvent* pEvent)</unmanaged>
        /// <unmanaged-short>IMFMediaEventQueue::QueueEvent</unmanaged-short>
        public unsafe void QueueEvent(SharpDX.MediaFoundation.MediaEvent eventRef)
        {
            System.IntPtr eventRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            eventRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaEvent>(eventRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)eventRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Creates an event, sets a <strong><see cref = "SharpDX.Win32.Variant"/></strong> as the event data, and puts the event in the queue.</p><p>Call this method inside your implementation of <strong>IMFMediaEventGenerator::QueueEvent</strong>. Pass the parameters from that method directly to this method.</p><p>You can also call this method when your component needs to raise an event that does not contain attributes. If the event data is an <strong><see cref = "SharpDX.IUnknown"/></strong> reference, you can use <strong>IMFMediaEventQueue::QueueEventParamUnk</strong>. If the event contains attributes, use <strong>IMFMediaEventQueue::QueueEvent</strong> instead.</p>
        /// </summary>
        /// <param name = "met">No documentation.</param>
        /// <param name = "guidExtendedType">No documentation.</param>
        /// <param name = "hrStatus">No documentation.</param>
        /// <param name = "vValueRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms704641</doc-id>
        /// <unmanaged>HRESULT IMFMediaEventQueue::QueueEventParamVar([In] DWORD met,[In] const GUID&amp; guidExtendedType,[In] HRESULT hrStatus,[In] const PROPVARIANT* pvValue)</unmanaged>
        /// <unmanaged-short>IMFMediaEventQueue::QueueEventParamVar</unmanaged-short>
        public unsafe void QueueEventParamVar(System.Int32 met, System.Guid guidExtendedType, SharpDX.Result hrStatus, SharpDX.Win32.Variant vValueRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, met, &guidExtendedType, hrStatus, &vValueRef, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Creates an event, sets an <strong><see cref = "SharpDX.IUnknown"/></strong> reference as the event data, and puts the event in the queue.</p>
        /// </summary>
        /// <param name = "met"><dd> <p>Specifies the event type of the event to be added to the queue. The event type is returned by the event's <strong>IMFMediaEvent::GetType</strong> method. For a list of event types, see Media Foundation Events.</p> </dd></param>
        /// <param name = "guidExtendedType"><dd> <p>The extended type of the event. If the event does not have an extended type, use the value GUID_NULL. The extended type is returned by the event's <strong>IMFMediaEvent::GetExtendedType</strong> method.</p> </dd></param>
        /// <param name = "hrStatus"><dd> <p>A success or failure code indicating the status of the event. This value is returned by the event's <strong>IMFMediaEvent::GetStatus</strong> method.</p> </dd></param>
        /// <param name = "unkRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface. The method sets this reference as the event value. The reference is returned by the event's <strong>IMFMediaEvent::GetValue</strong> method.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method when your component needs to raise an event that contains an <strong><see cref = "SharpDX.IUnknown"/></strong> reference value and no attributes. If the event contains attributes, use <strong>IMFMediaEventQueue::QueueEvent</strong> instead.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms704686</doc-id>
        /// <unmanaged>HRESULT IMFMediaEventQueue::QueueEventParamUnk([In] DWORD met,[In] const GUID&amp; guidExtendedType,[In] HRESULT hrStatus,[In] IUnknown* pUnk)</unmanaged>
        /// <unmanaged-short>IMFMediaEventQueue::QueueEventParamUnk</unmanaged-short>
        public unsafe void QueueEventParamUnk(System.Int32 met, System.Guid guidExtendedType, SharpDX.Result hrStatus, SharpDX.IUnknown unkRef)
        {
            System.IntPtr unkRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            unkRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, met, &guidExtendedType, hrStatus, (void *)unkRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Shuts down the event queue.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method when your component shuts down. After this method is called, all <strong><see cref = "SharpDX.MediaFoundation.MediaEventQueue"/></strong> methods return <strong><see cref = "Shutdown"/></strong>.</p><p>This method removes all of the events from the queue.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms698923</doc-id>
        /// <unmanaged>HRESULT IMFMediaEventQueue::Shutdown()</unmanaged>
        /// <unmanaged-short>IMFMediaEventQueue::Shutdown</unmanaged-short>
        public unsafe void Shutdown()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5cb31c05-61ff-418f-afda-caaf41421a38")]
    public partial class MediaKeys : SharpDX.ComObject
    {
        public MediaKeys(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaKeys(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaKeys(nativePtr);
        /// <summary>
        /// <p>Gets the suspend notify interface of the Content Decryption Module (CDM).</p>
        /// </summary>
        /// <doc-id>dn280723</doc-id>
        /// <unmanaged>GetSuspendNotify</unmanaged>
        /// <unmanaged-short>GetSuspendNotify</unmanaged-short>
        public SharpDX.MediaFoundation.CdmSuspendNotify SuspendNotify
        {
            get
            {
                GetSuspendNotify(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Creates a media key session object using the specified initialization data and custom data.
        /// .
        /// </p>
        /// </summary>
        /// <param name = "mimeType"><dd> <p>The MIME type of the media container used for the content.</p> </dd></param>
        /// <param name = "initData"><dd> <p>The initialization data for the key system. </p> </dd></param>
        /// <param name = "cb"><dd> <p>The count in bytes of <em>initData</em>.</p> </dd></param>
        /// <param name = "customData"><dd> <p>Custom data sent to the key system.</p> </dd></param>
        /// <param name = "cbCustomData"><dd> <p>The count in bytes of <em>cbCustomData</em>.</p> </dd></param>
        /// <param name = "notify"><dd> <p>notify</p> </dd></param>
        /// <param name = "sessionOut"><dd> <p>The media key session.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280722</doc-id>
        /// <unmanaged>HRESULT IMFMediaKeys::CreateSession([In, Optional] wchar_t* mimeType,[In, Buffer, Optional] const unsigned char* initData,[In, Optional] DWORD cb,[In, Buffer, Optional] const unsigned char* customData,[In] DWORD cbCustomData,[In] IMFMediaKeySessionNotify* notify,[Out] IMFMediaKeySession** ppSession)</unmanaged>
        /// <unmanaged-short>IMFMediaKeys::CreateSession</unmanaged-short>
        public unsafe void CreateSession(System.String mimeType, System.Byte[] initData, System.Int32 cb, System.Byte[] customData, System.Int32 cbCustomData, SharpDX.MediaFoundation.MediaKeySessionNotify notify, out SharpDX.MediaFoundation.MediaKeySession sessionOut)
        {
            System.IntPtr notify_ = System.IntPtr.Zero;
            System.IntPtr sessionOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            notify_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaKeySessionNotify>(notify);
            fixed (void *customData_ = customData)
                fixed (void *initData_ = initData)
                    fixed (char *mimeType_ = mimeType)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)mimeType_, initData_, cb, customData_, cbCustomData, (void *)notify_, &sessionOut_, (*(void ***)this._nativePointer)[3]);
            if (sessionOut_ != System.IntPtr.Zero)
                sessionOut = new SharpDX.MediaFoundation.MediaKeySession(sessionOut_);
            else
                sessionOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the key system string the <strong><see cref = "SharpDX.MediaFoundation.MediaKeys"/></strong> object was created with.</p>
        /// </summary>
        /// <param name = "keySystem">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280724</doc-id>
        /// <unmanaged>HRESULT IMFMediaKeys::get_KeySystem([Out] wchar_t** keySystem)</unmanaged>
        /// <unmanaged-short>IMFMediaKeys::get_KeySystem</unmanaged-short>
        public unsafe void GetKeySystem(System.IntPtr keySystem)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)keySystem, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p></p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p><strong>Shutdown</strong> should be called by the application before final release.  The Content Decryption Module (CDM) reference and any other resources is released at this point.  However, related sessions are not freed or closed.</p>
        /// </remarks>
        /// <doc-id>dn280725</doc-id>
        /// <unmanaged>HRESULT IMFMediaKeys::Shutdown()</unmanaged>
        /// <unmanaged-short>IMFMediaKeys::Shutdown</unmanaged-short>
        public unsafe void Shutdown()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the suspend notify interface of the Content Decryption Module (CDM).</p>
        /// </summary>
        /// <param name = "notify"><dd> <p>The suspend notify interface of the Content Decryption Module (CDM).</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280723</doc-id>
        /// <unmanaged>HRESULT IMFMediaKeys::GetSuspendNotify([Out] IMFCdmSuspendNotify** notify)</unmanaged>
        /// <unmanaged-short>IMFMediaKeys::GetSuspendNotify</unmanaged-short>
        internal unsafe void GetSuspendNotify(out SharpDX.MediaFoundation.CdmSuspendNotify notify)
        {
            System.IntPtr notify_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &notify_, (*(void ***)this._nativePointer)[6]);
            if (notify_ != System.IntPtr.Zero)
                notify = new SharpDX.MediaFoundation.CdmSuspendNotify(notify_);
            else
                notify = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("45892507-ad66-4de2-83a2-acbb13cd8d43")]
    public partial class MediaKeys2 : SharpDX.MediaFoundation.MediaKeys
    {
        public MediaKeys2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaKeys2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaKeys2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "eSessionType">No documentation.</param>
        /// <param name = "mFMediaKeySessionNotify2Ref">No documentation.</param>
        /// <param name = "sessionOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaKeys2::CreateSession2([In] MF_MEDIAKEYSESSION_TYPE eSessionType,[In] IMFMediaKeySessionNotify2* pMFMediaKeySessionNotify2,[Out] IMFMediaKeySession2** ppSession)</unmanaged>
        /// <unmanaged-short>IMFMediaKeys2::CreateSession2</unmanaged-short>
        public unsafe void CreateSession2(SharpDX.MediaFoundation.MediaKeysessionType eSessionType, SharpDX.MediaFoundation.MediaKeySessionNotify2 mFMediaKeySessionNotify2Ref, out SharpDX.MediaFoundation.MediaKeySession2 sessionOut)
        {
            System.IntPtr mFMediaKeySessionNotify2Ref_ = System.IntPtr.Zero;
            System.IntPtr sessionOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mFMediaKeySessionNotify2Ref_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaKeySessionNotify2>(mFMediaKeySessionNotify2Ref);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)eSessionType), (void *)mFMediaKeySessionNotify2Ref_, &sessionOut_, (*(void ***)this._nativePointer)[7]);
            if (sessionOut_ != System.IntPtr.Zero)
                sessionOut = new SharpDX.MediaFoundation.MediaKeySession2(sessionOut_);
            else
                sessionOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bServerCertificateRef">No documentation.</param>
        /// <param name = "cb">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaKeys2::SetServerCertificate([In, Buffer, Optional] const unsigned char* pbServerCertificate,[In] DWORD cb)</unmanaged>
        /// <unmanaged-short>IMFMediaKeys2::SetServerCertificate</unmanaged-short>
        public unsafe void SetServerCertificate(System.Byte[] bServerCertificateRef, System.Int32 cb)
        {
            SharpDX.Result __result__;
            fixed (void *bServerCertificateRef_ = bServerCertificateRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bServerCertificateRef_, cb, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "systemCode">No documentation.</param>
        /// <param name = "code">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaKeys2::GetDOMException([In] HRESULT systemCode,[Out] HRESULT* code)</unmanaged>
        /// <unmanaged-short>IMFMediaKeys2::GetDOMException</unmanaged-short>
        public unsafe void GetDOMException(SharpDX.Result systemCode, out SharpDX.Result code)
        {
            code = default (SharpDX.Result);
            SharpDX.Result __result__;
            fixed (void *code_ = &code)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, systemCode, code_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("24fa67d5-d1d0-4dc5-995c-c0efdc191fb5")]
    public partial class MediaKeySession : SharpDX.ComObject
    {
        public MediaKeySession(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaKeySession(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaKeySession(nativePtr);
        /// <summary>
        /// <p>Gets the error state associated with the media key session.</p>
        /// </summary>
        /// <param name = "code"><dd> <p>The error code.</p> </dd></param>
        /// <param name = "systemCode"><dd> <p>Platform specific error information.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280718</doc-id>
        /// <unmanaged>HRESULT IMFMediaKeySession::GetError([Out] unsigned short* code,[Out] DWORD* systemCode)</unmanaged>
        /// <unmanaged-short>IMFMediaKeySession::GetError</unmanaged-short>
        public unsafe void GetError(out System.Int16 code, out System.Int32 systemCode)
        {
            SharpDX.Result __result__;
            fixed (void *systemCode_ = &systemCode)
                fixed (void *code_ = &code)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, code_, systemCode_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the name of the  key system name the media keys object was created with.</p>
        /// </summary>
        /// <param name = "keySystem"><dd> <p>The name of the key system.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280719</doc-id>
        /// <unmanaged>HRESULT IMFMediaKeySession::get_KeySystem([Out] wchar_t** keySystem)</unmanaged>
        /// <unmanaged-short>IMFMediaKeySession::get_KeySystem</unmanaged-short>
        public unsafe void GetKeySystem(System.IntPtr keySystem)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)keySystem, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a unique session id created for this session.</p>
        /// </summary>
        /// <param name = "sessionId"><dd> <p>The media key session id.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280720</doc-id>
        /// <unmanaged>HRESULT IMFMediaKeySession::get_SessionId([Out] wchar_t** sessionId)</unmanaged>
        /// <unmanaged-short>IMFMediaKeySession::get_SessionId</unmanaged-short>
        public unsafe void GetSessionId(System.IntPtr sessionId)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)sessionId, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Passes in a key value with any associated data required by the Content Decryption Module for the given key system.</p>
        /// </summary>
        /// <param name = "key"><dd></dd></param>
        /// <param name = "cb"><dd> <p>The count in bytes of <em>key</em>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280721</doc-id>
        /// <unmanaged>HRESULT IMFMediaKeySession::Update([In, Buffer] const unsigned char* key,[In] DWORD cb)</unmanaged>
        /// <unmanaged-short>IMFMediaKeySession::Update</unmanaged-short>
        public unsafe void Update(System.Byte[] key, System.Int32 cb)
        {
            SharpDX.Result __result__;
            fixed (void *key_ = key)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, key_, cb, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Closes the media key session and must be called before the key session is released.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280717</doc-id>
        /// <unmanaged>HRESULT IMFMediaKeySession::Close()</unmanaged>
        /// <unmanaged-short>IMFMediaKeySession::Close</unmanaged-short>
        public unsafe void Close()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("e9707e05-6d55-4636-b185-3de21210bd75")]
    public partial class MediaKeySession2 : SharpDX.MediaFoundation.MediaKeySession
    {
        public MediaKeySession2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaKeySession2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaKeySession2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>get_Expiration</unmanaged>
        /// <unmanaged-short>get_Expiration</unmanaged-short>
        public System.Double Expiration
        {
            get
            {
                GetExpiration(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "keyStatusesArrayRef">No documentation.</param>
        /// <param name = "uSizeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaKeySession2::get_KeyStatuses([Out, Buffer] MFMediaKeyStatus** pKeyStatusesArray,[Out] unsigned int* puSize)</unmanaged>
        /// <unmanaged-short>IMFMediaKeySession2::get_KeyStatuses</unmanaged-short>
        public unsafe void GetKeyStatuses(SharpDX.MediaFoundation.MediaKeyStatus[] keyStatusesArrayRef, out System.Int32 uSizeRef)
        {
            SharpDX.Result __result__;
            fixed (void *uSizeRef_ = &uSizeRef)
                fixed (void *keyStatusesArrayRef_ = keyStatusesArrayRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, keyStatusesArrayRef_, uSizeRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bstrSessionId">No documentation.</param>
        /// <param name = "fLoadedRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaKeySession2::Load([In] wchar_t* bstrSessionId,[Out] BOOL* pfLoaded)</unmanaged>
        /// <unmanaged-short>IMFMediaKeySession2::Load</unmanaged-short>
        public unsafe void Load(System.String bstrSessionId, out SharpDX.Mathematics.Interop.RawBool fLoadedRef)
        {
            fLoadedRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fLoadedRef_ = &fLoadedRef)
                fixed (char *bstrSessionId_ = bstrSessionId)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bstrSessionId_, fLoadedRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "initDataType">No documentation.</param>
        /// <param name = "bInitDataRef">No documentation.</param>
        /// <param name = "cb">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaKeySession2::GenerateRequest([In] wchar_t* initDataType,[In, Buffer] const unsigned char* pbInitData,[In] DWORD cb)</unmanaged>
        /// <unmanaged-short>IMFMediaKeySession2::GenerateRequest</unmanaged-short>
        public unsafe void GenerateRequest(System.String initDataType, System.Byte[] bInitDataRef, System.Int32 cb)
        {
            SharpDX.Result __result__;
            fixed (void *bInitDataRef_ = bInitDataRef)
                fixed (char *initDataType_ = initDataType)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)initDataType_, bInitDataRef_, cb, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dblExpiration">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaKeySession2::get_Expiration([Out] double* dblExpiration)</unmanaged>
        /// <unmanaged-short>IMFMediaKeySession2::get_Expiration</unmanaged-short>
        internal unsafe void GetExpiration(out System.Double dblExpiration)
        {
            SharpDX.Result __result__;
            fixed (void *dblExpiration_ = &dblExpiration)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dblExpiration_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaKeySession2::Remove()</unmanaged>
        /// <unmanaged-short>IMFMediaKeySession2::Remove</unmanaged-short>
        public unsafe void Remove()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaKeySession2::Shutdown()</unmanaged>
        /// <unmanaged-short>IMFMediaKeySession2::Shutdown</unmanaged-short>
        public unsafe void Shutdown()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("6a0083f9-8947-4c1d-9ce0-cdee22b23135")]
    public partial class MediaKeySessionNotify : SharpDX.ComObject
    {
        public MediaKeySessionNotify(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaKeySessionNotify(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaKeySessionNotify(nativePtr);
        /// <summary>
        /// <p>Passes information to the application so it can initiate a key acquisition.</p>
        /// </summary>
        /// <param name = "destinationURL"><dd> <p>The URL to send the message to.</p> </dd></param>
        /// <param name = "message"><dd> <p>The message to send to the application.</p> </dd></param>
        /// <param name = "cb"><dd> <p>The length in bytes of <em>message</em>.</p> </dd></param>
        /// <doc-id>dn280716</doc-id>
        /// <unmanaged>void IMFMediaKeySessionNotify::KeyMessage([In, Optional] wchar_t* destinationURL,[In, Buffer] const unsigned char* message,[In] DWORD cb)</unmanaged>
        /// <unmanaged-short>IMFMediaKeySessionNotify::KeyMessage</unmanaged-short>
        public unsafe void KeyMessage(System.String destinationURL, System.Byte[] message, System.Int32 cb)
        {
            fixed (void *message_ = message)
                fixed (char *destinationURL_ = destinationURL)
                    SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)destinationURL_, message_, cb, (*(void ***)this._nativePointer)[3]);
        }

        /// <summary>
        /// <p>Notifies the application that the key has been added.  </p>
        /// </summary>
        /// <remarks>
        /// <p><strong>KeyAdded</strong> can also be called if the keys requested for the session have already been acquired.</p>
        /// </remarks>
        /// <doc-id>dn280714</doc-id>
        /// <unmanaged>void IMFMediaKeySessionNotify::KeyAdded()</unmanaged>
        /// <unmanaged-short>IMFMediaKeySessionNotify::KeyAdded</unmanaged-short>
        public unsafe void KeyAdded()
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// <p>Notifies the application that an error occurred while processing the key.</p>
        /// </summary>
        /// <param name = "code"><dd></dd></param>
        /// <param name = "systemCode"><dd></dd></param>
        /// <doc-id>dn280715</doc-id>
        /// <unmanaged>void IMFMediaKeySessionNotify::KeyError([In] unsigned short code,[In] DWORD systemCode)</unmanaged>
        /// <unmanaged-short>IMFMediaKeySessionNotify::KeyError</unmanaged-short>
        public unsafe void KeyError(System.Int16 code, System.Int32 systemCode)
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, code, systemCode, (*(void ***)this._nativePointer)[5]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("c3a9e92a-da88-46b0-a110-6cf953026cb9")]
    public partial class MediaKeySessionNotify2 : SharpDX.MediaFoundation.MediaKeySessionNotify
    {
        public MediaKeySessionNotify2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaKeySessionNotify2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaKeySessionNotify2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "eMessageType">No documentation.</param>
        /// <param name = "destinationURL">No documentation.</param>
        /// <param name = "bMessageRef">No documentation.</param>
        /// <param name = "cbMessage">No documentation.</param>
        /// <unmanaged>void IMFMediaKeySessionNotify2::KeyMessage2([In] MF_MEDIAKEYSESSION_MESSAGETYPE eMessageType,[In, Optional] wchar_t* destinationURL,[In, Buffer] const unsigned char* pbMessage,[In] DWORD cbMessage)</unmanaged>
        /// <unmanaged-short>IMFMediaKeySessionNotify2::KeyMessage2</unmanaged-short>
        public unsafe void KeyMessage2(SharpDX.MediaFoundation.MediaKeysessionMessagetype eMessageType, System.String destinationURL, System.Byte[] bMessageRef, System.Int32 cbMessage)
        {
            fixed (void *bMessageRef_ = bMessageRef)
                fixed (char *destinationURL_ = destinationURL)
                    SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)eMessageType), (void *)destinationURL_, bMessageRef_, cbMessage, (*(void ***)this._nativePointer)[6]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>void IMFMediaKeySessionNotify2::KeyStatusChange()</unmanaged>
        /// <unmanaged-short>IMFMediaKeySessionNotify2::KeyStatusChange</unmanaged-short>
        public unsafe void KeyStatusChange()
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[7]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("aec63fda-7a97-4944-b35c-6c6df8085cc3")]
    public partial class MediaKeySystemAccess : SharpDX.ComObject
    {
        public MediaKeySystemAccess(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaKeySystemAccess(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaKeySystemAccess(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>get_SupportedConfiguration</unmanaged>
        /// <unmanaged-short>get_SupportedConfiguration</unmanaged-short>
        public SharpDX.ComObject SupportedConfiguration
        {
            get
            {
                GetSupportedConfiguration(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cdmCustomConfigRef">No documentation.</param>
        /// <param name = "keysOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaKeySystemAccess::CreateMediaKeys([In, Optional] IPropertyStore* pCdmCustomConfig,[Out] IMFMediaKeys2** ppKeys)</unmanaged>
        /// <unmanaged-short>IMFMediaKeySystemAccess::CreateMediaKeys</unmanaged-short>
        public unsafe void CreateMediaKeys(SharpDX.ComObject cdmCustomConfigRef, out SharpDX.MediaFoundation.MediaKeys2 keysOut)
        {
            System.IntPtr cdmCustomConfigRef_ = System.IntPtr.Zero;
            System.IntPtr keysOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            cdmCustomConfigRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.ComObject>(cdmCustomConfigRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)cdmCustomConfigRef_, &keysOut_, (*(void ***)this._nativePointer)[3]);
            if (keysOut_ != System.IntPtr.Zero)
                keysOut = new SharpDX.MediaFoundation.MediaKeys2(keysOut_);
            else
                keysOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "supportedConfigurationOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaKeySystemAccess::get_SupportedConfiguration([Out] IPropertyStore** ppSupportedConfiguration)</unmanaged>
        /// <unmanaged-short>IMFMediaKeySystemAccess::get_SupportedConfiguration</unmanaged-short>
        internal unsafe void GetSupportedConfiguration(out SharpDX.ComObject supportedConfigurationOut)
        {
            System.IntPtr supportedConfigurationOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &supportedConfigurationOut_, (*(void ***)this._nativePointer)[4]);
            if (supportedConfigurationOut_ != System.IntPtr.Zero)
                supportedConfigurationOut = new SharpDX.ComObject(supportedConfigurationOut_);
            else
                supportedConfigurationOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "keySystemRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaKeySystemAccess::get_KeySystem([Out] wchar_t** pKeySystem)</unmanaged>
        /// <unmanaged-short>IMFMediaKeySystemAccess::get_KeySystem</unmanaged-short>
        public unsafe void GetKeySystem(System.IntPtr keySystemRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)keySystemRef, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("90377834-21D0-4dee-8214-BA2E3E6C1127")]
    public partial class MediaSession : SharpDX.MediaFoundation.MediaEventGenerator
    {
        public MediaSession(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaSession(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaSession(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the Media Session's presentation clock.</p>
        /// </summary>
        /// <remarks>
        /// <p>The application can query the returned <strong><see cref = "SharpDX.MediaFoundation.Clock"/></strong> reference for the <strong><see cref = "SharpDX.MediaFoundation.PresentationClock"/></strong> interface. However, the application should not use this interface to control the state of the presentation clock. Instead, the application should always call the transport control methods on the Media Session's <strong><see cref = "SharpDX.MediaFoundation.MediaSession"/></strong> interface, such as <strong>Start</strong>, <strong>Stop</strong>, and <strong>Pause</strong>.</p>
        /// </remarks>
        /// <doc-id>bb970342</doc-id>
        /// <unmanaged>GetClock</unmanaged>
        /// <unmanaged-short>GetClock</unmanaged-short>
        public SharpDX.MediaFoundation.Clock Clock
        {
            get
            {
                GetClock(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the capabilities of the Media Session, based on the current presentation.</p>
        /// </summary>
        /// <doc-id>ms696229</doc-id>
        /// <unmanaged>GetSessionCapabilities</unmanaged>
        /// <unmanaged-short>GetSessionCapabilities</unmanaged-short>
        public System.Int32 SessionCapabilities
        {
            get
            {
                GetSessionCapabilities(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Sets a topology on the Media Session. </p>
        /// </summary>
        /// <param name = "dwSetTopologyFlags"><dd> <p> Bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.SessionSetTopologyFlags"/></strong> enumeration. </p> </dd></param>
        /// <param name = "topologyRef"><dd> <p> Pointer to the topology object's <strong><see cref = "SharpDX.MediaFoundation.Topology"/></strong> interface. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p> The operation cannot be performed in the Media Session's current state. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p> The Media Session has been shut down. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TopoInvalidTimeAttributes"/></strong></dt> </dl> </td><td> <p>The topology has invalid values for one or more of the following attributes:</p> <ul> <li> <strong><see cref = "Mediastart"/></strong> </li> <li> <strong><see cref = "Mediastop"/></strong> </li> <li> <strong><see cref = "ProjectStart"/></strong> </li> <li> <strong><see cref = "ProjectStop"/></strong> </li> </ul> </td></tr> <tr><td> <dl> <dt><strong>NS_E_DRM_DEBUGGING_NOT_ALLOWED</strong></dt> </dl> </td><td> <p> Protected content cannot be played while debugging. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> If <em>pTopology</em> is a full topology, set the <strong>MFSESSION_SETTOPOLOGY_NORESOLUTION</strong> flag in the <em>dwSetTopologyFlags</em> parameter. Otherwise, the topology is assumed to be a partial topology. The Media Session uses the topology loader to resolve a partial topology into a full topology.</p><p>If the Media Session is currently paused or stopped, the <strong>SetTopology</strong> method does not take effect until the next call to <strong>IMFMediaSession::Start</strong>.</p><p>If the Media Session is currently running, or on the next call to <strong>Start</strong>, the <strong>SetTopology</strong> method does the following:</p><ul> <li>If the <strong>MFSESSION_SETTOPOLOGY_IMMEDIATE</strong> flag is set in <em>dwSetTopologyFlags</em>, the Media Session ends the current presentation immediately, clears all pending topologies, and uses <em>pTopology</em> to start a new presentation.</li> <li>Otherwise, the Media Session queues <em>pTopology</em> and starts the new presentation when the current presentation has completed. If there is no current presentation, the new presentation starts immediately.</li> <li>Starting in Windows?7, you can also specify the <strong>MFSESSION_SETTOPOLOGY_CLEAR_CURRENT</strong> flag to clear the current topology but leave any other pending topologies on the queue.</li> </ul><p> This method is asynchronous. If the method returns <see cref = "SharpDX.Result.Ok"/>, the Media Session sends an MESessionTopologySet event when the operation completes. If the Media Session is currently paused to stopped, the Media Session does not send the MESessionTopologySet event until the next call to <strong>IMFMediaSession::Start</strong> </p>
        /// </remarks>
        /// <doc-id>ms704785</doc-id>
        /// <unmanaged>HRESULT IMFMediaSession::SetTopology([In] DWORD dwSetTopologyFlags,[In, Optional] IMFTopology* pTopology)</unmanaged>
        /// <unmanaged-short>IMFMediaSession::SetTopology</unmanaged-short>
        public unsafe void SetTopology(SharpDX.MediaFoundation.SessionSetTopologyFlags dwSetTopologyFlags, SharpDX.MediaFoundation.Topology topologyRef)
        {
            System.IntPtr topologyRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            topologyRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Topology>(topologyRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)dwSetTopologyFlags), (void *)topologyRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Clears all of the presentations that are queued for playback in the Media Session.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p> The operation cannot be performed in the Media Session's current state. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p> The Media Session has been shut down. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is asynchronous. When the operation completes, the Media Session sends an MESessionTopologiesCleared event.</p><p>This method does not clear the current topology; it only removes topologies that are placed in the queue, waiting for playback. To remove the current topology, call <strong>IMFMediaSession::SetTopology</strong> with the <strong>MFSESSION_SETTOPOLOGY_CLEAR_CURRENT</strong> flag.</p>
        /// </remarks>
        /// <doc-id>ms705648</doc-id>
        /// <unmanaged>HRESULT IMFMediaSession::ClearTopologies()</unmanaged>
        /// <unmanaged-short>IMFMediaSession::ClearTopologies</unmanaged-short>
        public unsafe void ClearTopologies()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Starts the Media Session. </p>
        /// </summary>
        /// <param name = "guidTimeFormatRef"><dd> <p>Pointer to a <see cref = "System.Guid"/> that specifies the time format for the <em>pvarStartPosition</em> parameter. This parameter can be <strong><c>null</c></strong>. The value <strong><c>null</c></strong> is equivalent to passing in <strong>GUID_NULL</strong>.</p> <p>The following time format GUIDs are defined:</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>GUID_NULL</strong></dt> </dl> </td><td> <p>Presentation time. The <em>pvarStartPosition</em> parameter must have one of the following <strong><see cref = "SharpDX.Win32.Variant"/></strong> types.</p> <ul> <li><strong>VT_I8</strong>: The <em>pvarStartPosition</em> parameter contains the starting position in 100-nanosecond units, relative to the start of the presentation.</li> <li><strong>VT_EMPTY</strong>: Playback starts from the current position.</li> </ul> <p>All media sources support this time format.</p> </td></tr> <tr><td><dl> <dt><strong>MF_TIME_FORMAT_SEGMENT_OFFSET</strong></dt> </dl> </td><td> <p>Segment offset. This time format is supported by the Sequencer Source. The starting time is an offset within a segment.</p> <p>Call the <strong>MFCreateSequencerSegmentOffset</strong> function to create the <strong><see cref = "SharpDX.Win32.Variant"/></strong> value for the <em>pvarStartPosition</em> parameter.</p> </td></tr> <tr><td><dl> <dt><strong>MF_TIME_FORMAT_ENTRY_RELATIVE</strong></dt> </dl> </td><td> <strong>Note</strong>??Requires Windows?7 or later. ? <p>Skip to a playlist entry. The <em>pvarStartPosition</em> parameter specifies the index of the playlist entry, relative to the current entry. For example, the value 2 skips forward two entries. To skip backward, pass a negative value. The <strong><see cref = "SharpDX.Win32.Variant"/></strong> type is <strong>VT_I4</strong>.</p> <p>If a media source supports this time format, the <strong>IMFMediaSource::GetCharacteristics</strong> method returns one or both of the following flags:</p> <ul> <li><strong>MFMEDIASOURCE_CAN_SKIPFORWARD</strong></li> <li><strong>MFMEDIASOURCE_CAN_SKIPBACKWARD</strong></li> </ul> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "varStartPositionRef"><dd> <p> Pointer to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that specifies the starting position for playback. The meaning and data type of this parameter are indicated by the <em>pguidTimeFormat</em> parameter. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p> The operation cannot be performed in the Media Session's current state. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p> The Media Session has been shut down. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>When this method is called, the Media Session starts the presentation clock and begins to process media samples.</p><p>This method is asynchronous. When the method completes, the Media Session sends an MESessionStarted event.</p>
        /// </remarks>
        /// <doc-id>ms694908</doc-id>
        /// <unmanaged>HRESULT IMFMediaSession::Start([In, Optional] const GUID* pguidTimeFormat,[In, Optional] const PROPVARIANT* pvarStartPosition)</unmanaged>
        /// <unmanaged-short>IMFMediaSession::Start</unmanaged-short>
        public unsafe void Start(System.Guid? guidTimeFormatRef, SharpDX.Win32.Variant? varStartPositionRef)
        {
            System.Guid guidTimeFormatRef_;
            SharpDX.Win32.Variant varStartPositionRef_;
            SharpDX.Result __result__;
            if (guidTimeFormatRef != null)
                guidTimeFormatRef_ = guidTimeFormatRef.Value;
            if (varStartPositionRef != null)
                varStartPositionRef_ = varStartPositionRef.Value;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, guidTimeFormatRef == null ? (void *)0 : &guidTimeFormatRef_, varStartPositionRef == null ? (void *)0 : &varStartPositionRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Pauses the Media Session.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The operation cannot be performed in the Media Session's current state.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The Media Session has been shut down.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SessionPausewhilestopped"/></strong></dt> </dl> </td><td> <p>The Media Session cannot pause while stopped.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method pauses the presentation clock.</p><p>This method is asynchronous. When the operation completes, the Media Session sends an MESessionPaused event.</p><p>This method fails if the Media Session is stopped.</p>
        /// </remarks>
        /// <doc-id>ms705650</doc-id>
        /// <unmanaged>HRESULT IMFMediaSession::Pause()</unmanaged>
        /// <unmanaged-short>IMFMediaSession::Pause</unmanaged-short>
        public unsafe void Pause()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Stops the Media Session.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The operation cannot be performed in the Media Session's current state.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The Media Session has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is asynchronous. When the operation completes, the Media Session sends an MESessionStopped event.</p>
        /// </remarks>
        /// <doc-id>ms701607</doc-id>
        /// <unmanaged>HRESULT IMFMediaSession::Stop()</unmanaged>
        /// <unmanaged-short>IMFMediaSession::Stop</unmanaged-short>
        public unsafe void Stop()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Closes the Media Session and releases all of the resources it is using.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The Media Session has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is asynchronous. When the operation completes, the Media Session sends an MESessionClosed event.</p><p>After the <strong>Close</strong> method is called, the only valid methods on the Media Session are the following:</p><ul> <li> <p> <strong>IMFMediaSession::GetClock</strong> </p> </li> <li> <p> <strong>IMFMediaSession::GetFullTopology</strong> </p> </li> <li> <p> <strong>IMFMediaSession::GetSessionCapabilities</strong> </p> </li> <li> <p> <strong>IMFMediaSession::Shutdown</strong> </p> </li> </ul><p>All other methods return <see cref = "InvalidRequest"/>, or else queue an event with that error code.</p>
        /// </remarks>
        /// <doc-id>ms698928</doc-id>
        /// <unmanaged>HRESULT IMFMediaSession::Close()</unmanaged>
        /// <unmanaged-short>IMFMediaSession::Close</unmanaged-short>
        public unsafe void Close()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Shuts down the Media Session and releases all the resources used by the Media Session.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method when you are done using the Media Session, before the final call to <strong>IUnknown::Release</strong>. Otherwise, your application will leak memory.</p><p>After this method is called, other <strong><see cref = "SharpDX.MediaFoundation.MediaSession"/></strong> methods return <see cref = "Shutdown"/>.</p>
        /// </remarks>
        /// <doc-id>ms697318</doc-id>
        /// <unmanaged>HRESULT IMFMediaSession::Shutdown()</unmanaged>
        /// <unmanaged-short>IMFMediaSession::Shutdown</unmanaged-short>
        public unsafe void Shutdown()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the Media Session's presentation clock.</p>
        /// </summary>
        /// <param name = "clockOut"><dd> <p>Receives a reference to the presentation clock's <strong><see cref = "SharpDX.MediaFoundation.Clock"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_UNEXPECTED</strong></dt> </dl> </td><td> <p>The Media Session does not have a presentation clock.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The Media Session has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The application can query the returned <strong><see cref = "SharpDX.MediaFoundation.Clock"/></strong> reference for the <strong><see cref = "SharpDX.MediaFoundation.PresentationClock"/></strong> interface. However, the application should not use this interface to control the state of the presentation clock. Instead, the application should always call the transport control methods on the Media Session's <strong><see cref = "SharpDX.MediaFoundation.MediaSession"/></strong> interface, such as <strong>Start</strong>, <strong>Stop</strong>, and <strong>Pause</strong>.</p>
        /// </remarks>
        /// <doc-id>bb970342</doc-id>
        /// <unmanaged>HRESULT IMFMediaSession::GetClock([Out] IMFClock** ppClock)</unmanaged>
        /// <unmanaged-short>IMFMediaSession::GetClock</unmanaged-short>
        internal unsafe void GetClock(out SharpDX.MediaFoundation.Clock clockOut)
        {
            System.IntPtr clockOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &clockOut_, (*(void ***)this._nativePointer)[14]);
            if (clockOut_ != System.IntPtr.Zero)
                clockOut = new SharpDX.MediaFoundation.Clock(clockOut_);
            else
                clockOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the capabilities of the Media Session, based on the current presentation.</p>
        /// </summary>
        /// <param name = "dwCapsRef"><dd> <p>Receives a bitwise <strong>OR</strong> of zero or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>MFSESSIONCAP_PAUSE</strong></dt> </dl> </td><td> <p>The Media Session can be paused.</p> </td></tr> <tr><td><dl> <dt><strong>MFSESSIONCAP_RATE_FORWARD</strong></dt> </dl> </td><td> <p>The Media Session supports forward playback at rates faster than 1.0.</p> </td></tr> <tr><td><dl> <dt><strong>MFSESSIONCAP_RATE_REVERSE</strong></dt> </dl> </td><td> <p>The Media Session supports reverse playback.</p> </td></tr> <tr><td><dl> <dt><strong>MFSESSIONCAP_SEEK</strong></dt> </dl> </td><td> <p>The Media Session can be seeked.</p> </td></tr> <tr><td><dl> <dt><strong>MFSESSIONCAP_START</strong></dt> </dl> </td><td> <p>The Media Session can be started.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p><c>null</c> reference argument.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The Media Session has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms696229</doc-id>
        /// <unmanaged>HRESULT IMFMediaSession::GetSessionCapabilities([Out] DWORD* pdwCaps)</unmanaged>
        /// <unmanaged-short>IMFMediaSession::GetSessionCapabilities</unmanaged-short>
        internal unsafe void GetSessionCapabilities(out System.Int32 dwCapsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwCapsRef_ = &dwCapsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwCapsRef_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets a topology from the Media Session.</p><p>This method can get the current topology or a queued topology.</p>
        /// </summary>
        /// <param name = "dwGetFullTopologyFlags"><dd> <p> Bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.SessionGetFullTopologyFlags"/></strong> enumeration. </p> </dd></param>
        /// <param name = "topoId"><dd> <p>The identifier of the topology. This parameter is ignored if the <em>dwGetFullTopologyFlags</em> parameter contains the <strong>MFSESSION_GETFULLTOPOLOGY_CURRENT</strong> flag. To get the identifier of a topology, call <strong>IMFTopology::GetTopologyID</strong>. </p> </dd></param>
        /// <param name = "fullTopologyOut"><dd> <p> Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.Topology"/></strong> interface of the topology. The caller must release the interface. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p> The Media Session has been shut down. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> If the <strong>MFSESSION_GETFULLTOPOLOGY_CURRENT</strong> flag is specified in the <em>dwGetFullTopologyFlags</em> parameter, the method returns the topology for the current presentation. Otherwise, the method searches all of the queued topologies for one that matches the identifier given in the <em>TopoId</em> parameter. </p><p> This method can be used to retrieve the topology for the current presentation or any pending presentations. It cannot be used to retrieve a topology that has already ended. </p><p> The topology returned in <em>ppFullTopo</em> is a full topology, not a partial topology. </p>
        /// </remarks>
        /// <doc-id>bb970422</doc-id>
        /// <unmanaged>HRESULT IMFMediaSession::GetFullTopology([In] DWORD dwGetFullTopologyFlags,[In] unsigned longlong TopoId,[Out] IMFTopology** ppFullTopology)</unmanaged>
        /// <unmanaged-short>IMFMediaSession::GetFullTopology</unmanaged-short>
        public unsafe void GetFullTopology(System.Int32 dwGetFullTopologyFlags, System.Int64 topoId, out SharpDX.MediaFoundation.Topology fullTopologyOut)
        {
            System.IntPtr fullTopologyOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwGetFullTopologyFlags, topoId, &fullTopologyOut_, (*(void ***)this._nativePointer)[16]);
            if (fullTopologyOut_ != System.IntPtr.Zero)
                fullTopologyOut = new SharpDX.MediaFoundation.Topology(fullTopologyOut_);
            else
                fullTopologyOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("6ef2a660-47c0-4666-b13d-cbb717f2fa2c")]
    public partial class MediaSink : SharpDX.ComObject
    {
        public MediaSink(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaSink(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaSink(nativePtr);
        /// <summary>
        /// <p> </p><p>Gets the characteristics of the media sink.</p>
        /// </summary>
        /// <remarks>
        /// <p> The characteristics of a media sink are fixed throughout the life time of the sink. </p>
        /// </remarks>
        /// <doc-id>ms701973</doc-id>
        /// <unmanaged>GetCharacteristics</unmanaged>
        /// <unmanaged-short>GetCharacteristics</unmanaged-short>
        public System.Int32 Characteristics
        {
            get
            {
                GetCharacteristics(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Gets the number of stream sinks on this media sink.</p>
        /// </summary>
        /// <doc-id>ms703020</doc-id>
        /// <unmanaged>GetStreamSinkCount</unmanaged>
        /// <unmanaged-short>GetStreamSinkCount</unmanaged-short>
        public System.Int32 StreamSinkCount
        {
            get
            {
                GetStreamSinkCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Gets the presentation clock that was set on the media sink.</p>
        /// </summary>
        /// <doc-id>ms705665</doc-id>
        /// <unmanaged>GetPresentationClock / SetPresentationClock</unmanaged>
        /// <unmanaged-short>GetPresentationClock</unmanaged-short>
        public SharpDX.MediaFoundation.PresentationClock PresentationClock
        {
            get
            {
                GetPresentationClock(out var __output__);
                return __output__;
            }

            set => SetPresentationClock(value);
        }

        /// <summary>
        /// <p> </p><p>Gets the characteristics of the media sink.</p>
        /// </summary>
        /// <param name = "dwCharacteristicsRef"><dd> <p> Receives a bitwise <strong>OR</strong> of zero or more flags. The following flags are defined: </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><strong>MEDIASINK_FIXED_STREAMS</strong></strong></dt> <dt>0x00000001</dt> </dl> </td><td> <p> The media sink has a fixed number of streams. It does not support the <strong>IMFMediaSink::AddStreamSink</strong> and <strong>IMFMediaSink::RemoveStreamSink</strong> methods. This flag is a hint to the application. </p> </td></tr> <tr><td><dl> <dt><strong><strong>MEDIASINK_CANNOT_MATCH_CLOCK</strong></strong></dt> <dt>0x00000002</dt> </dl> </td><td> <p>The media sink cannot match rates with an external clock.</p> <p>For best results, this media sink should be used as the time source for the presentation clock. If any other time source is used, the media sink cannot match rates with the clock, with poor results (for example, glitching).</p> <p>This flag should be used sparingly, because it limits how the pipeline can be configured.</p> <p>For more information about the presentation clock, see Presentation Clock.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MEDIASINK_RATELESS</strong></strong></dt> <dt>0x00000004</dt> </dl> </td><td> <p>The media sink is rateless. It consumes samples as quickly as possible, and does not synchronize itself to a presentation clock.</p> <p>Most archiving sinks are rateless.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MEDIASINK_CLOCK_REQUIRED</strong></strong></dt> <dt>0x00000008</dt> </dl> </td><td> <p>The media sink requires a presentation clock. The presentation clock is set by calling the media sink's <strong>IMFMediaSink::SetPresentationClock</strong> method.</p> <p>This flag is obsolete, because all media sinks must support the <strong>SetPresentationClock</strong> method, even if the media sink ignores the clock (as in a rateless media sink).</p> </td></tr> <tr><td><dl> <dt><strong><strong>MEDIASINK_CAN_PREROLL</strong></strong></dt> <dt>0x00000010</dt> </dl> </td><td> <p> The media sink can accept preroll samples before the presentation clock starts. The media sink exposes the <strong><see cref = "SharpDX.MediaFoundation.MediaSinkPreroll"/></strong> interface. </p> </td></tr> <tr><td><dl> <dt><strong><strong>MEDIASINK_REQUIRE_REFERENCE_MEDIATYPE</strong></strong></dt> <dt>0x00000020</dt> </dl> </td><td> <p>The first stream sink (index 0) is a reference stream. The reference stream must have a media type before the media types can be set on the other stream sinks.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p> The media sink's <strong>Shutdown</strong> method has been called. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> The characteristics of a media sink are fixed throughout the life time of the sink. </p>
        /// </remarks>
        /// <doc-id>ms701973</doc-id>
        /// <unmanaged>HRESULT IMFMediaSink::GetCharacteristics([Out] DWORD* pdwCharacteristics)</unmanaged>
        /// <unmanaged-short>IMFMediaSink::GetCharacteristics</unmanaged-short>
        internal unsafe void GetCharacteristics(out System.Int32 dwCharacteristicsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwCharacteristicsRef_ = &dwCharacteristicsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwCharacteristicsRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Adds a new stream sink to the media sink.</p>
        /// </summary>
        /// <param name = "dwStreamSinkIdentifier"><dd> <p>Identifier for the new stream. The value is arbitrary but must be unique.</p> </dd></param>
        /// <param name = "mediaTypeRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface, specifying the media type for the stream. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "streamSinkOut"><dd> <p>Receives a reference to the new stream sink's <strong><see cref = "SharpDX.MediaFoundation.StreamSink"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>The specified stream identifier is not valid.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media sink's <strong>Shutdown</strong> method has been called.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "StreamsInkExists"/></strong></dt> </dl> </td><td> <p>There is already a stream sink with the same stream identifier.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "StreamsInksFixed"/></strong></dt> </dl> </td><td> <p>This media sink has a fixed set of stream sinks. New stream sinks cannot be added.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Not all media sinks support this method. If the media sink does not support this method, the <strong>IMFMediaSink::GetCharacteristics</strong> method returns the MEDIASINK_FIXED_STREAMS flag.</p><p>If <em>pMediaType</em> is <strong><c>null</c></strong>, use the <strong><see cref = "SharpDX.MediaFoundation.MediaTypeHandler"/></strong> interface to set the media type. Call <strong>IMFStreamSink::GetMediaTypeHandler</strong> to get a reference to the interface.</p>
        /// </remarks>
        /// <doc-id>ms694890</doc-id>
        /// <unmanaged>HRESULT IMFMediaSink::AddStreamSink([In] DWORD dwStreamSinkIdentifier,[In, Optional] IMFMediaType* pMediaType,[Out] IMFStreamSink** ppStreamSink)</unmanaged>
        /// <unmanaged-short>IMFMediaSink::AddStreamSink</unmanaged-short>
        public unsafe void AddStreamSink(System.Int32 dwStreamSinkIdentifier, SharpDX.MediaFoundation.MediaType mediaTypeRef, out SharpDX.MediaFoundation.StreamSink streamSinkOut)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            System.IntPtr streamSinkOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(mediaTypeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamSinkIdentifier, (void *)mediaTypeRef_, &streamSinkOut_, (*(void ***)this._nativePointer)[4]);
            if (streamSinkOut_ != System.IntPtr.Zero)
                streamSinkOut = new SharpDX.MediaFoundation.StreamSink(streamSinkOut_);
            else
                streamSinkOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Removes a stream sink from the media sink.</p>
        /// </summary>
        /// <param name = "dwStreamSinkIdentifier"><dd> <p>Identifier of the stream to remove. The stream identifier is defined when you call <strong>IMFMediaSink::AddStreamSink</strong> to add the stream sink.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>This particular stream sink cannot be removed.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>The stream number is not valid.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotInitializeD"/></strong></dt> </dl> </td><td> <p>The media sink has not been initialized.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media sink's <strong>Shutdown</strong> method has been called.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "StreamsInksFixed"/></strong></dt> </dl> </td><td> <p>This media sink has a fixed set of stream sinks. Stream sinks cannot be removed.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>After this method is called, the corresponding stream sink object is no longer valid. The <strong>IMFMediaSink::GetStreamSinkByIndex</strong> and <strong>IMFMediaSink::GetStreamSinkById</strong> methods will no longer return that stream sink. You can re-use the stream identifier if you add another stream (by calling <strong>AddStreamSink</strong>).</p><p>Not all media sinks support this method. If the media sink does not support this method, the <strong>IMFMediaSink::GetCharacteristics</strong> method returns the MEDIASINK_FIXED_STREAMS flag.</p><p>In some cases, the media sink supports this method but does not allow every stream sink to be removed. (For example, it might not allow stream 0 to be removed.)</p>
        /// </remarks>
        /// <doc-id>ms705627</doc-id>
        /// <unmanaged>HRESULT IMFMediaSink::RemoveStreamSink([In] DWORD dwStreamSinkIdentifier)</unmanaged>
        /// <unmanaged-short>IMFMediaSink::RemoveStreamSink</unmanaged-short>
        public unsafe void RemoveStreamSink(System.Int32 dwStreamSinkIdentifier)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamSinkIdentifier, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Gets the number of stream sinks on this media sink.</p>
        /// </summary>
        /// <param name = "cStreamSinkCountRef"><dd> <p>Receives the number of stream sinks.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media sink's <strong>Shutdown</strong> method has been called.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms703020</doc-id>
        /// <unmanaged>HRESULT IMFMediaSink::GetStreamSinkCount([Out] DWORD* pcStreamSinkCount)</unmanaged>
        /// <unmanaged-short>IMFMediaSink::GetStreamSinkCount</unmanaged-short>
        internal unsafe void GetStreamSinkCount(out System.Int32 cStreamSinkCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *cStreamSinkCountRef_ = &cStreamSinkCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cStreamSinkCountRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Gets a stream sink, specified by index.</p>
        /// </summary>
        /// <param name = "dwIndex"><dd> <p>Zero-based index of the stream. To get the number of streams, call <strong>IMFMediaSink::GetStreamSinkCount</strong>.</p> </dd></param>
        /// <param name = "streamSinkOut"><dd> <p>Receives a reference to the stream's <strong><see cref = "SharpDX.MediaFoundation.StreamSink"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidIndex"/></strong></dt> </dl> </td><td> <p>Invalid index.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media sink's <strong>Shutdown</strong> method has been called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Enumerating stream sinks is not a thread-safe operation, because stream sinks can be added or removed between calls to this method.</p>
        /// </remarks>
        /// <doc-id>ms693512</doc-id>
        /// <unmanaged>HRESULT IMFMediaSink::GetStreamSinkByIndex([In] DWORD dwIndex,[Out] IMFStreamSink** ppStreamSink)</unmanaged>
        /// <unmanaged-short>IMFMediaSink::GetStreamSinkByIndex</unmanaged-short>
        public unsafe void GetStreamSinkByIndex(System.Int32 dwIndex, out SharpDX.MediaFoundation.StreamSink streamSinkOut)
        {
            System.IntPtr streamSinkOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwIndex, &streamSinkOut_, (*(void ***)this._nativePointer)[7]);
            if (streamSinkOut_ != System.IntPtr.Zero)
                streamSinkOut = new SharpDX.MediaFoundation.StreamSink(streamSinkOut_);
            else
                streamSinkOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Gets a stream sink, specified by stream identifier.</p>
        /// </summary>
        /// <param name = "dwStreamSinkIdentifier"><dd> <p>Stream identifier of the stream sink.</p> </dd></param>
        /// <param name = "streamSinkOut"><dd> <p>Receives a reference to the stream's <strong><see cref = "SharpDX.MediaFoundation.StreamSink"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>The stream identifier is not valid.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media sink's <strong>Shutdown</strong> method has been called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If you add a stream sink by calling the <strong>IMFMediaSink::AddStreamSink</strong> method, the stream identifier is specified in the <em>dwStreamSinkIdentifier</em> parameter of that method. If the media sink has a fixed set of streams, the media sink assigns the stream identifiers.</p><p>To enumerate the streams by index number instead of stream identifier, call <strong>IMFMediaSink::GetStreamSinkByIndex</strong>.</p>
        /// </remarks>
        /// <doc-id>ms695360</doc-id>
        /// <unmanaged>HRESULT IMFMediaSink::GetStreamSinkById([In] DWORD dwStreamSinkIdentifier,[Out] IMFStreamSink** ppStreamSink)</unmanaged>
        /// <unmanaged-short>IMFMediaSink::GetStreamSinkById</unmanaged-short>
        public unsafe void GetStreamSinkById(System.Int32 dwStreamSinkIdentifier, out SharpDX.MediaFoundation.StreamSink streamSinkOut)
        {
            System.IntPtr streamSinkOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamSinkIdentifier, &streamSinkOut_, (*(void ***)this._nativePointer)[8]);
            if (streamSinkOut_ != System.IntPtr.Zero)
                streamSinkOut = new SharpDX.MediaFoundation.StreamSink(streamSinkOut_);
            else
                streamSinkOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the presentation clock on the media sink.</p>
        /// </summary>
        /// <param name = "presentationClockRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.PresentationClock"/></strong> interface of the presentation clock, or <strong><c>null</c></strong>. If the value is <strong><c>null</c></strong>, the media sink stops listening to the presentaton clock that was previously set, if any.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ClockNoTimeSource"/></strong></dt> </dl> </td><td> <p>The presentation clock does not have a time source. Call <strong>SetTimeSource</strong> on the presentation clock.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media sink's <strong>Shutdown</strong> method has been called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>During streaming, the media sink attempts to match rates with the presentation clock. Ideally, the media sink presents samples at the correct time according to the presentation clock and does not fall behind. Rateless media sinks are an exception to this rule, as they consume samples as quickly as possible and ignore the clock. If the sink is rateless, the <strong>IMFMediaSink::GetCharacteristics</strong> method returns the MEDIASINK_RATELESS flag.</p><p>The presentation clock must have a time source. Before calling this method, call <strong>IMFPresentationClock::SetTimeSource</strong> on the presentation clock to set the presentation time source. Some media sinks provide time sources; therefore, the media sink might be the time source for its own presentation clock. Regardless of what object provides the time source, however, the media sink must attempt to match rates with the clock specified in <em>pPresentationClock</em>. If a media sink cannot match rates with an external time source, the media sink's <strong>IMFMediaSink::GetCharacteristics</strong> method retrieves the MEDIASINK_CANNOT_MATCH_CLOCK flag. In this case, <strong>SetPresentationClock</strong> will still succeed, but the results will not be optimal. The sink might not render samples quickly enough to match rates with the presentation clock.</p><p>If <em>pPresentationClock</em> is non-<strong><c>null</c></strong>, the media sink must register for clock state notifications, by calling <strong>IMFPresentationClock::AddClockStateSink</strong> on the presentation clock. If the method is called again with a new presentation clock, or if <em>pPresentationClock</em> is <strong><c>null</c></strong>, the media sink must call <strong>IMFPresentationClock::RemoveClockStateSink</strong> to deregister itself from the previous clock.</p><p>All media sinks must support this method.</p>
        /// </remarks>
        /// <doc-id>ms700160</doc-id>
        /// <unmanaged>HRESULT IMFMediaSink::SetPresentationClock([In, Optional] IMFPresentationClock* pPresentationClock)</unmanaged>
        /// <unmanaged-short>IMFMediaSink::SetPresentationClock</unmanaged-short>
        internal unsafe void SetPresentationClock(SharpDX.MediaFoundation.PresentationClock presentationClockRef)
        {
            System.IntPtr presentationClockRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            presentationClockRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.PresentationClock>(presentationClockRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)presentationClockRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Gets the presentation clock that was set on the media sink.</p>
        /// </summary>
        /// <param name = "presentationClockOut"><dd> <p>Receives a reference to the presentation clock's <strong><see cref = "SharpDX.MediaFoundation.PresentationClock"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoClock"/></strong></dt> </dl> </td><td> <p>No clock has been set. To set the presentation clock, call <strong>IMFMediaSink::SetPresentationClock</strong>.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media sink's <strong>Shutdown</strong> method has been called.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms705665</doc-id>
        /// <unmanaged>HRESULT IMFMediaSink::GetPresentationClock([Out] IMFPresentationClock** ppPresentationClock)</unmanaged>
        /// <unmanaged-short>IMFMediaSink::GetPresentationClock</unmanaged-short>
        internal unsafe void GetPresentationClock(out SharpDX.MediaFoundation.PresentationClock presentationClockOut)
        {
            System.IntPtr presentationClockOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &presentationClockOut_, (*(void ***)this._nativePointer)[10]);
            if (presentationClockOut_ != System.IntPtr.Zero)
                presentationClockOut = new SharpDX.MediaFoundation.PresentationClock(presentationClockOut_);
            else
                presentationClockOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Shuts down the media sink and releases the resources it is using.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media sink was shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the application creates the media sink, it is responsible for calling <strong>Shutdown</strong> to avoid memory or resource leaks. In most applications, however, the application creates an activation object for the media sink, and the Media Session uses that object to create the media sink. In that case, the Media Session ? not the application ? shuts down the media sink. (For more information, see Activation Objects.)</p><p>After this method returns, all methods on the media sink return <see cref = "Shutdown"/>,  except for <strong><see cref = "SharpDX.IUnknown"/></strong> methods and <strong><see cref = "SharpDX.MediaFoundation.MediaEventGenerator"/></strong> methods. The sink will not raise any events after this method is called.</p>
        /// </remarks>
        /// <doc-id>ms702084</doc-id>
        /// <unmanaged>HRESULT IMFMediaSink::Shutdown()</unmanaged>
        /// <unmanaged-short>IMFMediaSink::Shutdown</unmanaged-short>
        public unsafe void Shutdown()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5dfd4b2a-7674-4110-a4e6-8a68fd5f3688")]
    public partial class MediaSinkPreroll : SharpDX.ComObject
    {
        public MediaSinkPreroll(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaSinkPreroll(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaSinkPreroll(nativePtr);
        /// <summary>
        /// <p> Notifies the media sink that the presentation clock is about to start. </p>
        /// </summary>
        /// <param name = "hnsUpcomingStartTime"><dd> <p> The upcoming start time for the presentation clock, in 100-nanosecond units. This time is the same value that will be given to the <strong>IMFPresentationClock::Start</strong> method when the presentation clock is started. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> After this method is called, the media sink sends any number of MEStreamSinkRequestSample events to request samples, until is has enough preroll data. When it has enough preroll data, the media sink sends an MEStreamSinkPrerolled event. This event signals that the client can start the presentation clock. </p><p> During preroll, the media sink can prepare the samples that it receives, so that they are ready to be rendered. It does not actually render any samples until the clock starts. </p>
        /// </remarks>
        /// <doc-id>ms703799</doc-id>
        /// <unmanaged>HRESULT IMFMediaSinkPreroll::NotifyPreroll([In] longlong hnsUpcomingStartTime)</unmanaged>
        /// <unmanaged-short>IMFMediaSinkPreroll::NotifyPreroll</unmanaged-short>
        public unsafe void NotifyPreroll(System.Int64 hnsUpcomingStartTime)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, hnsUpcomingStartTime, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("279a808d-aec7-40c8-9c6b-a6b492c78a66")]
    public partial class MediaSource : SharpDX.MediaFoundation.MediaEventGenerator
    {
        public MediaSource(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaSource(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaSource(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the characteristics of the media source.</p>
        /// </summary>
        /// <remarks>
        /// <p>The characteristics of a media source can change at any time. If this happens, the source sends an MESourceCharacteristicsChanged event.</p>
        /// </remarks>
        /// <doc-id>ms703148</doc-id>
        /// <unmanaged>GetCharacteristics</unmanaged>
        /// <unmanaged-short>GetCharacteristics</unmanaged-short>
        public System.Int32 Characteristics
        {
            get
            {
                GetCharacteristics(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the characteristics of the media source.</p>
        /// </summary>
        /// <param name = "dwCharacteristicsRef"><dd> <p>Receives a bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.MediaSourceCharacteristics"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media source's <strong>Shutdown</strong> method has been called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The characteristics of a media source can change at any time. If this happens, the source sends an MESourceCharacteristicsChanged event.</p>
        /// </remarks>
        /// <doc-id>ms703148</doc-id>
        /// <unmanaged>HRESULT IMFMediaSource::GetCharacteristics([Out] DWORD* pdwCharacteristics)</unmanaged>
        /// <unmanaged-short>IMFMediaSource::GetCharacteristics</unmanaged-short>
        internal unsafe void GetCharacteristics(out System.Int32 dwCharacteristicsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwCharacteristicsRef_ = &dwCharacteristicsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwCharacteristicsRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves a copy of the media source's presentation descriptor. Applications use the presentation descriptor to select streams and to get information about the source content.</p>
        /// </summary>
        /// <param name = "presentationDescriptorOut"><dd> <p>Receives a reference to the presentation descriptor's <strong><see cref = "SharpDX.MediaFoundation.PresentationDescriptor"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media source's <strong>Shutdown</strong> method has been called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The presentation descriptor contains the media source's default settings for the presentation. The application can change these settings by selecting or deselecting streams, or by changing the media type on a stream. Do not modify the presentation descriptor unless the source is stopped. The changes take affect when the source's <strong>IMFMediaSource::Start</strong> method is called.</p>
        /// </remarks>
        /// <doc-id>ms702261</doc-id>
        /// <unmanaged>HRESULT IMFMediaSource::CreatePresentationDescriptor([Out] IMFPresentationDescriptor** ppPresentationDescriptor)</unmanaged>
        /// <unmanaged-short>IMFMediaSource::CreatePresentationDescriptor</unmanaged-short>
        public unsafe void CreatePresentationDescriptor(out SharpDX.MediaFoundation.PresentationDescriptor presentationDescriptorOut)
        {
            System.IntPtr presentationDescriptorOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &presentationDescriptorOut_, (*(void ***)this._nativePointer)[8]);
            if (presentationDescriptorOut_ != System.IntPtr.Zero)
                presentationDescriptorOut = new SharpDX.MediaFoundation.PresentationDescriptor(presentationDescriptorOut_);
            else
                presentationDescriptorOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Starts, seeks, or restarts the media source by specifying where to start playback.</p>
        /// </summary>
        /// <param name = "presentationDescriptorRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.PresentationDescriptor"/></strong> interface of the media source's presentation descriptor. To get the presentation descriptor, call <strong>IMFMediaSource::CreatePresentationDescriptor</strong>. You can modify the presentation descriptor before calling <strong>Start</strong>, to select or deselect streams or change the media types. </p> </dd></param>
        /// <param name = "guidTimeFormatRef"><dd> <p> Pointer to a <see cref = "System.Guid"/> that specifies the time format. The time format defines the units for the <em>pvarStartPosition</em> parameter. If the value <em></em> is <strong>GUID_NULL</strong>, the time format is 100-nanosecond units. Some media sources might support additional time format GUIDs. This parameter can be <strong><c>null</c></strong>. If the value is <strong><c>null</c></strong>, it is equalivent to <strong>GUID_NULL</strong>. </p> </dd></param>
        /// <param name = "varStartPositionRef"><dd> <p> Specifies where to start playback. The units of this parameter are indicated by the time format given in <em>pguidTimeFormat</em>. If the time format is <strong>GUID_NULL</strong>, the variant type must be <strong>VT_I8</strong> or <strong>VT_EMPTY</strong>. Use <strong>VT_I8</strong> to specify a new starting position, in 100-nanosecond units. Use <strong>VT_EMPTY</strong> to start from the current position. Other time formats might use other <strong><see cref = "SharpDX.Win32.Variant"/></strong> types. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "AsfOufOfRange"/></strong></dt> </dl> </td><td> <p> The start position is past the end of the presentation (ASF media source). </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "HwMftFailedStartStreaming"/></strong></dt> </dl> </td><td> <p>A hardware device was unable to start streaming. This error code can be returned by a media source that represents a hardware device, such as a camera. For example, if the camera is already being used by another application, the method might return this error code.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p> The start request is not valid. For example, the start position is past the end of the presentation. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p> The media source's <strong>Shutdown</strong> method has been called. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedTimeFormat"/></strong></dt> </dl> </td><td> <p> The media source does not support the time format specified in <em>pguidTimeFormat</em>. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is asynchronous. If the operation succeeds, the media source sends the following events:</p><ul> <li> For each new stream, the source sends an MENewStream event. This event is sent for the first <strong>Start</strong> call in which the stream appears. The event data is a reference to the stream's <strong><see cref = "SharpDX.MediaFoundation.MediaStream"/></strong> interface. </li> <li> For each <em>updated</em> stream, the source sends an MEUpdatedStream event. A stream is updated if the stream already existed when <strong>Start</strong> was called (for example, if the application seeks during playback). The event data is a reference to the stream's <strong><see cref = "SharpDX.MediaFoundation.MediaStream"/></strong> interface. </li> <li> If the previous state was stopped, the source sends an MESourceStarted event. </li> <li> If the previous state was started or paused and the starting position is the current position (<strong>VT_EMPTY</strong>), the source sends an MESourceStarted event. </li> <li> If the previous state was started or paused, and a new starting position is specified, the source sends an MESourceSeeked event. </li> <li> If the source sends an MESourceStarted event, each media stream sends an MEStreamStarted event. If the source sends an MESourceSeeked event, each stream sends an MEStreamSeeked event. </li> </ul><p> If the start operation fails asynchronously (after the method returns <strong><see cref = "SharpDX.Result.Ok"/></strong>), the media source sends an MESourceStarted event that contains a failure code, without sending any of the other events listed here. If the method fails synchronously (returns an error code), no events are raised. </p><p> A call to <strong>Start</strong> results in a <em>seek</em> if the previous state was started or paused, and the new starting position is not <strong>VT_EMPTY</strong>. Not every media source can seek. If a media source can seek, the <strong>IMFMediaSource::GetCharacteristics</strong> method returns the <strong>MFMEDIASOURCE_CAN_SEEK</strong> flag. </p><p> Events from the media source are not synchronized with events from the media streams. If you seek a media source, therefore, you can still receive samples from the earlier position after getting the MESourceSeeked event. If you need to synchronize the operations, wait for the stream event, MEStreamSeeked, which marks the exact point in the stream where the seek occurs. </p>
        /// </remarks>
        /// <doc-id>ms694101</doc-id>
        /// <unmanaged>HRESULT IMFMediaSource::Start([In, Optional] IMFPresentationDescriptor* pPresentationDescriptor,[In, Optional] const GUID* pguidTimeFormat,[In, Optional] const PROPVARIANT* pvarStartPosition)</unmanaged>
        /// <unmanaged-short>IMFMediaSource::Start</unmanaged-short>
        public unsafe void Start(SharpDX.MediaFoundation.PresentationDescriptor presentationDescriptorRef, System.Guid? guidTimeFormatRef, SharpDX.Win32.Variant? varStartPositionRef)
        {
            System.IntPtr presentationDescriptorRef_ = System.IntPtr.Zero;
            System.Guid guidTimeFormatRef_;
            SharpDX.Win32.Variant varStartPositionRef_;
            SharpDX.Result __result__;
            presentationDescriptorRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.PresentationDescriptor>(presentationDescriptorRef);
            if (guidTimeFormatRef != null)
                guidTimeFormatRef_ = guidTimeFormatRef.Value;
            if (varStartPositionRef != null)
                varStartPositionRef_ = varStartPositionRef.Value;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)presentationDescriptorRef_, guidTimeFormatRef == null ? (void *)0 : &guidTimeFormatRef_, varStartPositionRef == null ? (void *)0 : &varStartPositionRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Stops all active streams in the media source.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media source's <strong>Shutdown</strong> method has been called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is asynchronous. When the operation completes, the media source sends and MESourceStopped event, and every active stream sends an MEStreamStopped event. If the method returns a failure code, no events are raised.</p><p>When a media source is stopped, its current position reverts to zero. After that, if the <strong>Start</strong> method is called with VT_EMPTY for the starting position, playback starts from the beginning of the presentation.</p><p>While the source is stopped, no streams produce data.</p>
        /// </remarks>
        /// <doc-id>ms702045</doc-id>
        /// <unmanaged>HRESULT IMFMediaSource::Stop()</unmanaged>
        /// <unmanaged-short>IMFMediaSource::Stop</unmanaged-short>
        public unsafe void Stop()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Pauses all active streams in the media source.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStateTransition"/></strong></dt> </dl> </td><td> <p>Invalid state transition. The media source must be in the started state.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media source's <strong>Shutdown</strong> method has been called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is asynchronous. When the operation completes, the media source sends and MESourcePaused event, and every active stream sends an MEStreamPaused event. If the method returns a failure code, no events are raised.</p><p>The media source must be in the started state. The method fails if the media source is paused or stopped.</p><p>While the source is paused, calls to <strong>IMFMediaStream::RequestSample</strong> succeed, but the streams will not deliver any samples until after the source is started again. Note that the source's event queue is not serialized with the stream event queues, so the client might receive some samples after the MESourcePaused event, due to multi-threading issues. But the client will not receive any samples from a stream after the MEStreamPaused event.</p><p>Not every media source can pause. If a media source can pause, the <strong>IMFMediaSource::GetCharacteristics</strong> method returns the MFMEDIASOURCE_CAN_PAUSE flag.</p>
        /// </remarks>
        /// <doc-id>ms694275</doc-id>
        /// <unmanaged>HRESULT IMFMediaSource::Pause()</unmanaged>
        /// <unmanaged-short>IMFMediaSource::Pause</unmanaged-short>
        public unsafe void Pause()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Shuts down the media source and releases the resources it is using.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the application creates the media source, either directly or through the source resolver, the application is responsible for calling <strong>Shutdown</strong> to avoid memory or resource leaks.</p><p>After this method is called, methods on the media source and all of its media streams return <see cref = "Shutdown"/> (except for <strong><see cref = "SharpDX.IUnknown"/></strong> methods).</p>
        /// </remarks>
        /// <doc-id>ms703110</doc-id>
        /// <unmanaged>HRESULT IMFMediaSource::Shutdown()</unmanaged>
        /// <unmanaged-short>IMFMediaSource::Shutdown</unmanaged-short>
        public unsafe void Shutdown()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("FBB03414-D13B-4786-8319-5AC51FC0A136")]
    public partial class MediaSource2 : SharpDX.MediaFoundation.MediaSourceEx
    {
        public MediaSource2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaSource2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaSource2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwStreamID">No documentation.</param>
        /// <param name = "mediaTypeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaSource2::SetMediaType([In] DWORD dwStreamID,[In] IMFMediaType* pMediaType)</unmanaged>
        /// <unmanaged-short>IMFMediaSource2::SetMediaType</unmanaged-short>
        public unsafe void SetMediaType(System.Int32 dwStreamID, SharpDX.MediaFoundation.MediaType mediaTypeRef)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(mediaTypeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamID, (void *)mediaTypeRef_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3C9B2EB9-86D5-4514-A394-F56664F9F0D8")]
    public partial class MediaSourceEx : SharpDX.MediaFoundation.MediaSource
    {
        public MediaSourceEx(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaSourceEx(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaSourceEx(nativePtr);
        /// <summary>
        /// <p>Gets an attribute store for the media source.</p>
        /// </summary>
        /// <remarks>
        /// <p>Use the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> reference to get or set attributes that apply to the entire source. For stream-level attributes, use the <strong>IMFMediaSourceEx::GetStreamAttributes</strong> method instead.</p>
        /// </remarks>
        /// <doc-id>hh448030</doc-id>
        /// <unmanaged>GetSourceAttributes</unmanaged>
        /// <unmanaged-short>GetSourceAttributes</unmanaged-short>
        public SharpDX.MediaFoundation.MediaAttributes SourceAttributes
        {
            get
            {
                GetSourceAttributes(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Sets a reference to the Microsoft DirectX Graphics Infrastructure (DXGI) Device Manager on the media source.</p>
        /// </summary>
        /// <doc-id>hh448032</doc-id>
        /// <unmanaged>SetD3DManager</unmanaged>
        /// <unmanaged-short>SetD3DManager</unmanaged-short>
        public SharpDX.IUnknown D3DManager
        {
            set => SetD3DManager(value);
        }

        /// <summary>
        /// <p>Gets an attribute store for the media source.</p>
        /// </summary>
        /// <param name = "attributesOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p>The media source does not support source-level attributes.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Use the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> reference to get or set attributes that apply to the entire source. For stream-level attributes, use the <strong>IMFMediaSourceEx::GetStreamAttributes</strong> method instead.</p>
        /// </remarks>
        /// <doc-id>hh448030</doc-id>
        /// <unmanaged>HRESULT IMFMediaSourceEx::GetSourceAttributes([Out] IMFAttributes** ppAttributes)</unmanaged>
        /// <unmanaged-short>IMFMediaSourceEx::GetSourceAttributes</unmanaged-short>
        internal unsafe void GetSourceAttributes(out SharpDX.MediaFoundation.MediaAttributes attributesOut)
        {
            System.IntPtr attributesOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &attributesOut_, (*(void ***)this._nativePointer)[13]);
            if (attributesOut_ != System.IntPtr.Zero)
                attributesOut = new SharpDX.MediaFoundation.MediaAttributes(attributesOut_);
            else
                attributesOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets an attribute store for a stream on the media source.</p>
        /// </summary>
        /// <param name = "dwStreamIdentifier"><dd> <p>The identifier of the stream. To get the identifier, call <strong>IMFStreamDescriptor::GetStreamIdentifier</strong> on the stream descriptor.</p> </dd></param>
        /// <param name = "attributesOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p>The media source does not support stream-level attributes.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>Invalid stream identifier.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Use the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> reference to get or set attributes that apply to the specified stream. For attributes that apply to the entire source, use the <strong>IMFMediaSourceEx::GetSourceAttributes</strong> method instead.</p>
        /// </remarks>
        /// <doc-id>hh448031</doc-id>
        /// <unmanaged>HRESULT IMFMediaSourceEx::GetStreamAttributes([In] DWORD dwStreamIdentifier,[Out] IMFAttributes** ppAttributes)</unmanaged>
        /// <unmanaged-short>IMFMediaSourceEx::GetStreamAttributes</unmanaged-short>
        public unsafe void GetStreamAttributes(System.Int32 dwStreamIdentifier, out SharpDX.MediaFoundation.MediaAttributes attributesOut)
        {
            System.IntPtr attributesOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIdentifier, &attributesOut_, (*(void ***)this._nativePointer)[14]);
            if (attributesOut_ != System.IntPtr.Zero)
                attributesOut = new SharpDX.MediaFoundation.MediaAttributes(attributesOut_);
            else
                attributesOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets a reference to the Microsoft DirectX Graphics Infrastructure (DXGI) Device Manager on the media source.</p>
        /// </summary>
        /// <param name = "managerRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of the DXGI Manager. The media source should query this reference for the <strong><see cref = "SharpDX.MediaFoundation.DXGIDeviceManager"/></strong> interface.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p>The media source does not support source-level attributes.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>hh448032</doc-id>
        /// <unmanaged>HRESULT IMFMediaSourceEx::SetD3DManager([In, Optional] IUnknown* pManager)</unmanaged>
        /// <unmanaged-short>IMFMediaSourceEx::SetD3DManager</unmanaged-short>
        internal unsafe void SetD3DManager(SharpDX.IUnknown managerRef)
        {
            System.IntPtr managerRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            managerRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(managerRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)managerRef_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("e467b94e-a713-4562-a802-816a42e9008a")]
    public partial class MediaSourceExtension : SharpDX.ComObject
    {
        public MediaSourceExtension(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaSourceExtension(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaSourceExtension(nativePtr);
        /// <summary>
        /// <p>Gets the collection of source buffers associated with this media source.</p>
        /// </summary>
        /// <doc-id>dn280736</doc-id>
        /// <unmanaged>GetSourceBuffers</unmanaged>
        /// <unmanaged-short>GetSourceBuffers</unmanaged-short>
        public SharpDX.MediaFoundation.SourceBufferList SourceBuffers
        {
            get => GetSourceBuffers();
        }

        /// <summary>
        /// <p>Gets the source buffers that are actively supplying media data to the media source.</p>
        /// </summary>
        /// <doc-id>dn280732</doc-id>
        /// <unmanaged>GetActiveSourceBuffers</unmanaged>
        /// <unmanaged-short>GetActiveSourceBuffers</unmanaged-short>
        public SharpDX.MediaFoundation.SourceBufferList ActiveSourceBuffers
        {
            get => GetActiveSourceBuffers();
        }

        /// <summary>
        /// <p>Gets the ready state of the media source.</p>
        /// </summary>
        /// <doc-id>dn280734</doc-id>
        /// <unmanaged>GetReadyState</unmanaged>
        /// <unmanaged-short>GetReadyState</unmanaged-short>
        public SharpDX.MediaFoundation.MultisampledEReady ReadyState
        {
            get => GetReadyState();
        }

        /// <summary>
        /// <p>Gets or sets the duration of the media source in 100-nanosecond units.</p>
        /// </summary>
        /// <doc-id>dn280733</doc-id>
        /// <unmanaged>GetDuration / SetDuration</unmanaged>
        /// <unmanaged-short>GetDuration</unmanaged-short>
        public System.Double Duration
        {
            get => GetDuration();
            set => SetDuration(value);
        }

        /// <summary>
        /// <p>Indicate that the end of the media stream has been reached. </p>
        /// </summary>
        /// <doc-id>dn280740</doc-id>
        /// <unmanaged>SetEndOfStream</unmanaged>
        /// <unmanaged-short>SetEndOfStream</unmanaged-short>
        public SharpDX.MediaFoundation.MultisampledEError EndOfStream
        {
            set => SetEndOfStream(value);
        }

        /// <summary>
        /// <p>Gets the collection of source buffers associated with this media source.</p>
        /// </summary>
        /// <returns><p>The collection of source buffers.</p></returns>
        /// <doc-id>dn280736</doc-id>
        /// <unmanaged>IMFSourceBufferList* IMFMediaSourceExtension::GetSourceBuffers()</unmanaged>
        /// <unmanaged-short>IMFMediaSourceExtension::GetSourceBuffers</unmanaged-short>
        internal unsafe SharpDX.MediaFoundation.SourceBufferList GetSourceBuffers()
        {
            SharpDX.MediaFoundation.SourceBufferList __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.MediaFoundation.SourceBufferList(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Gets the source buffers that are actively supplying media data to the media source.</p>
        /// </summary>
        /// <returns><p>The list of active source buffers.</p></returns>
        /// <doc-id>dn280732</doc-id>
        /// <unmanaged>IMFSourceBufferList* IMFMediaSourceExtension::GetActiveSourceBuffers()</unmanaged>
        /// <unmanaged-short>IMFMediaSourceExtension::GetActiveSourceBuffers</unmanaged-short>
        internal unsafe SharpDX.MediaFoundation.SourceBufferList GetActiveSourceBuffers()
        {
            SharpDX.MediaFoundation.SourceBufferList __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.MediaFoundation.SourceBufferList(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Gets the ready state of the media source.</p>
        /// </summary>
        /// <returns><p>The ready state of the media source.</p></returns>
        /// <doc-id>dn280734</doc-id>
        /// <unmanaged>MF_MSE_READY IMFMediaSourceExtension::GetReadyState()</unmanaged>
        /// <unmanaged-short>IMFMediaSourceExtension::GetReadyState</unmanaged-short>
        internal unsafe SharpDX.MediaFoundation.MultisampledEReady GetReadyState()
        {
            SharpDX.MediaFoundation.MultisampledEReady __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMediaFoundationMultisampledEReady(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the duration of the media source in 100-nanosecond units.</p>
        /// </summary>
        /// <returns><p>The duration of the media source in 100-nanosecond units. </p></returns>
        /// <doc-id>dn280733</doc-id>
        /// <unmanaged>double IMFMediaSourceExtension::GetDuration()</unmanaged>
        /// <unmanaged-short>IMFMediaSourceExtension::GetDuration</unmanaged-short>
        internal unsafe System.Double GetDuration()
        {
            System.Double __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCalldouble(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }

        /// <summary>
        /// <p>Sets the duration of the media source in 100-nanosecond units.</p>
        /// </summary>
        /// <param name = "duration"><dd> <p>The duration of the media source in 100-nanosecond units.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280739</doc-id>
        /// <unmanaged>HRESULT IMFMediaSourceExtension::SetDuration([In] double duration)</unmanaged>
        /// <unmanaged-short>IMFMediaSourceExtension::SetDuration</unmanaged-short>
        internal unsafe void SetDuration(System.Double duration)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, duration, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Adds a <strong><see cref = "SharpDX.MediaFoundation.SourceBuffer"/></strong> to the collection of buffers associated with the <strong><see cref = "SharpDX.MediaFoundation.MediaSourceExtension"/></strong>.</p>
        /// </summary>
        /// <param name = "type">No documentation.</param>
        /// <param name = "notifyRef">No documentation.</param>
        /// <param name = "sourceBufferOut">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280731</doc-id>
        /// <unmanaged>HRESULT IMFMediaSourceExtension::AddSourceBuffer([In] wchar_t* type,[In] IMFSourceBufferNotify* pNotify,[Out] IMFSourceBuffer** ppSourceBuffer)</unmanaged>
        /// <unmanaged-short>IMFMediaSourceExtension::AddSourceBuffer</unmanaged-short>
        public unsafe void AddSourceBuffer(System.String type, SharpDX.MediaFoundation.SourceBufferNotify notifyRef, out SharpDX.MediaFoundation.SourceBuffer sourceBufferOut)
        {
            System.IntPtr notifyRef_ = System.IntPtr.Zero;
            System.IntPtr sourceBufferOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            notifyRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.SourceBufferNotify>(notifyRef);
            fixed (char *type_ = type)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)type_, (void *)notifyRef_, &sourceBufferOut_, (*(void ***)this._nativePointer)[8]);
            if (sourceBufferOut_ != System.IntPtr.Zero)
                sourceBufferOut = new SharpDX.MediaFoundation.SourceBuffer(sourceBufferOut_);
            else
                sourceBufferOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Removes the specified source buffer from the collection of source buffers managed by the <strong><see cref = "SharpDX.MediaFoundation.MediaSourceExtension"/></strong> object.</p>
        /// </summary>
        /// <param name = "sourceBufferRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280738</doc-id>
        /// <unmanaged>HRESULT IMFMediaSourceExtension::RemoveSourceBuffer([In] IMFSourceBuffer* pSourceBuffer)</unmanaged>
        /// <unmanaged-short>IMFMediaSourceExtension::RemoveSourceBuffer</unmanaged-short>
        public unsafe void RemoveSourceBuffer(SharpDX.MediaFoundation.SourceBuffer sourceBufferRef)
        {
            System.IntPtr sourceBufferRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            sourceBufferRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.SourceBuffer>(sourceBufferRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)sourceBufferRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Indicate that the end of the media stream has been reached. </p>
        /// </summary>
        /// <param name = "error"><dd> <p>Used to pass error information.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280740</doc-id>
        /// <unmanaged>HRESULT IMFMediaSourceExtension::SetEndOfStream([In] MF_MSE_ERROR error)</unmanaged>
        /// <unmanaged-short>IMFMediaSourceExtension::SetEndOfStream</unmanaged-short>
        internal unsafe void SetEndOfStream(SharpDX.MediaFoundation.MultisampledEError error)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)error), (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a value that indicates if the specified MIME type is supported by the media source.</p>
        /// </summary>
        /// <param name = "type"><dd> <p>The media type to check support for.</p> </dd></param>
        /// <returns><p><strong>true</strong> if the media type is supported; otherwise, <strong>false</strong>.</p></returns>
        /// <doc-id>dn280737</doc-id>
        /// <unmanaged>BOOL IMFMediaSourceExtension::IsTypeSupported([In] wchar_t* type)</unmanaged>
        /// <unmanaged-short>IMFMediaSourceExtension::IsTypeSupported</unmanaged-short>
        public unsafe SharpDX.Mathematics.Interop.RawBool IsTypeSupported(System.String type)
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            fixed (char *type_ = type)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (void *)type_, (*(void ***)this._nativePointer)[11]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the <strong><see cref = "SharpDX.MediaFoundation.SourceBuffer"/></strong> at the specified index in the collection of buffers.</p>
        /// </summary>
        /// <param name = "dwStreamIndex">No documentation.</param>
        /// <returns><p>The source buffer.</p></returns>
        /// <doc-id>dn280735</doc-id>
        /// <unmanaged>IMFSourceBuffer* IMFMediaSourceExtension::GetSourceBuffer([In] DWORD dwStreamIndex)</unmanaged>
        /// <unmanaged-short>IMFMediaSourceExtension::GetSourceBuffer</unmanaged-short>
        public unsafe SharpDX.MediaFoundation.SourceBuffer GetSourceBuffer(System.Int32 dwStreamIndex)
        {
            SharpDX.MediaFoundation.SourceBuffer __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, dwStreamIndex, (*(void ***)this._nativePointer)[12]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.MediaFoundation.SourceBuffer(__result__native);
            else
                __result__ = null;
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5D1ABFD6-450A-4D92-9EFC-D6B6CBC1F4DA")]
    public partial class MediaSourceExtensionLiveSeekableRange : SharpDX.ComObject
    {
        public MediaSourceExtensionLiveSeekableRange(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaSourceExtensionLiveSeekableRange(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaSourceExtensionLiveSeekableRange(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "start">No documentation.</param>
        /// <param name = "end">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaSourceExtensionLiveSeekableRange::SetLiveSeekableRange([In] double start,[In] double end)</unmanaged>
        /// <unmanaged-short>IMFMediaSourceExtensionLiveSeekableRange::SetLiveSeekableRange</unmanaged-short>
        public unsafe void SetLiveSeekableRange(System.Double start, System.Double end)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, start, end, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaSourceExtensionLiveSeekableRange::ClearLiveSeekableRange()</unmanaged>
        /// <unmanaged-short>IMFMediaSourceExtensionLiveSeekableRange::ClearLiveSeekableRange</unmanaged-short>
        public unsafe void ClearLiveSeekableRange()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a7901327-05dd-4469-a7b7-0e01979e361d")]
    public partial class MediaSourceExtensionNotify : SharpDX.ComObject
    {
        public MediaSourceExtensionNotify(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaSourceExtensionNotify(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaSourceExtensionNotify(nativePtr);
        /// <summary>
        /// <p>Used to indicate that the  media source has opened.</p>
        /// </summary>
        /// <doc-id>dn280730</doc-id>
        /// <unmanaged>void IMFMediaSourceExtensionNotify::OnSourceOpen()</unmanaged>
        /// <unmanaged-short>IMFMediaSourceExtensionNotify::OnSourceOpen</unmanaged-short>
        public unsafe void OnSourceOpen()
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[3]);
        }

        /// <summary>
        /// <p>Used to indicate that the media source has ended.</p>
        /// </summary>
        /// <doc-id>dn280729</doc-id>
        /// <unmanaged>void IMFMediaSourceExtensionNotify::OnSourceEnded()</unmanaged>
        /// <unmanaged-short>IMFMediaSourceExtensionNotify::OnSourceEnded</unmanaged-short>
        public unsafe void OnSourceEnded()
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// <p>Used to indicate that the media source has closed.</p>
        /// </summary>
        /// <doc-id>dn280728</doc-id>
        /// <unmanaged>void IMFMediaSourceExtensionNotify::OnSourceClose()</unmanaged>
        /// <unmanaged-short>IMFMediaSourceExtensionNotify::OnSourceClose</unmanaged-short>
        public unsafe void OnSourceClose()
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[5]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("0E1D600a-C9F3-442d-8C51-A42D2D49452F")]
    public partial class MediaSourcePresentationProvider : SharpDX.ComObject
    {
        public MediaSourcePresentationProvider(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaSourcePresentationProvider(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaSourcePresentationProvider(nativePtr);
        /// <summary>
        /// <p> </p><p>Notifies the source when playback has reached the end of a segment. For timelines, this corresponds to reaching a mark-out point.</p>
        /// </summary>
        /// <param name = "presentationDescriptorRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.PresentationDescriptor"/></strong> interface of the presentation descriptor for the segment that has ended.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms705639</doc-id>
        /// <unmanaged>HRESULT IMFMediaSourcePresentationProvider::ForceEndOfPresentation([In, Optional] IMFPresentationDescriptor* pPresentationDescriptor)</unmanaged>
        /// <unmanaged-short>IMFMediaSourcePresentationProvider::ForceEndOfPresentation</unmanaged-short>
        public unsafe void ForceEndOfPresentation(SharpDX.MediaFoundation.PresentationDescriptor presentationDescriptorRef)
        {
            System.IntPtr presentationDescriptorRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            presentationDescriptorRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.PresentationDescriptor>(presentationDescriptorRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)presentationDescriptorRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("0E1D6009-C9F3-442d-8C51-A42D2D49452F")]
    public partial class MediaSourceTopologyProvider : SharpDX.ComObject
    {
        public MediaSourceTopologyProvider(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaSourceTopologyProvider(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaSourceTopologyProvider(nativePtr);
        /// <summary>
        /// <p> </p><p>Returns a topology for a media source that builds an internal topology.</p>
        /// </summary>
        /// <param name = "presentationDescriptorRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.PresentationDescriptor"/></strong> interface of the media source's presentation descriptor. To get this reference, either call <strong>IMFMediaSource::CreatePresentationDescriptor</strong> on the media source, or get the reference from the MENewPresentation event.</p> </dd></param>
        /// <param name = "topologyOut"><dd> <p>Receives a reference to the topology's <strong><see cref = "SharpDX.MediaFoundation.Topology"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid argument. For example, a <strong><c>null</c></strong> input parameter, or the presentation descriptor is not valid.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970383</doc-id>
        /// <unmanaged>HRESULT IMFMediaSourceTopologyProvider::GetMediaSourceTopology([In, Optional] IMFPresentationDescriptor* pPresentationDescriptor,[Out] IMFTopology** ppTopology)</unmanaged>
        /// <unmanaged-short>IMFMediaSourceTopologyProvider::GetMediaSourceTopology</unmanaged-short>
        public unsafe void GetMediaSourceTopology(SharpDX.MediaFoundation.PresentationDescriptor presentationDescriptorRef, out SharpDX.MediaFoundation.Topology topologyOut)
        {
            System.IntPtr presentationDescriptorRef_ = System.IntPtr.Zero;
            System.IntPtr topologyOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            presentationDescriptorRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.PresentationDescriptor>(presentationDescriptorRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)presentationDescriptorRef_, &topologyOut_, (*(void ***)this._nativePointer)[3]);
            if (topologyOut_ != System.IntPtr.Zero)
                topologyOut = new SharpDX.MediaFoundation.Topology(topologyOut_);
            else
                topologyOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("D182108F-4EC6-443f-AA42-A71106EC825F")]
    public partial class MediaStream : SharpDX.MediaFoundation.MediaEventGenerator
    {
        public MediaStream(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaStream(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaStream(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves a reference to the media source that created this media stream.</p>
        /// </summary>
        /// <doc-id>ms705668</doc-id>
        /// <unmanaged>GetMediaSource</unmanaged>
        /// <unmanaged-short>GetMediaSource</unmanaged-short>
        public SharpDX.MediaFoundation.MediaSource MediaSource
        {
            get
            {
                GetMediaSource(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves a stream descriptor for this media stream.</p>
        /// </summary>
        /// <remarks>
        /// <p>Do not modify the stream descriptor. To change the presentation, call <strong>IMFMediaSource::CreatePresentationDescriptor</strong> and modify the presentation descriptor.</p>
        /// </remarks>
        /// <doc-id>ms697244</doc-id>
        /// <unmanaged>GetStreamDescriptor</unmanaged>
        /// <unmanaged-short>GetStreamDescriptor</unmanaged-short>
        public SharpDX.MediaFoundation.StreamDescriptor StreamDescriptor
        {
            get
            {
                GetStreamDescriptor(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves a reference to the media source that created this media stream.</p>
        /// </summary>
        /// <param name = "mediaSourceOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaSource"/></strong> interface of the media source. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media source's <strong>Shutdown</strong> method has been called.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms705668</doc-id>
        /// <unmanaged>HRESULT IMFMediaStream::GetMediaSource([Out] IMFMediaSource** ppMediaSource)</unmanaged>
        /// <unmanaged-short>IMFMediaStream::GetMediaSource</unmanaged-short>
        internal unsafe void GetMediaSource(out SharpDX.MediaFoundation.MediaSource mediaSourceOut)
        {
            System.IntPtr mediaSourceOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &mediaSourceOut_, (*(void ***)this._nativePointer)[7]);
            if (mediaSourceOut_ != System.IntPtr.Zero)
                mediaSourceOut = new SharpDX.MediaFoundation.MediaSource(mediaSourceOut_);
            else
                mediaSourceOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves a stream descriptor for this media stream.</p>
        /// </summary>
        /// <param name = "streamDescriptorOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.StreamDescriptor"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media source's <strong>Shutdown</strong> method has been called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Do not modify the stream descriptor. To change the presentation, call <strong>IMFMediaSource::CreatePresentationDescriptor</strong> and modify the presentation descriptor.</p>
        /// </remarks>
        /// <doc-id>ms697244</doc-id>
        /// <unmanaged>HRESULT IMFMediaStream::GetStreamDescriptor([Out] IMFStreamDescriptor** ppStreamDescriptor)</unmanaged>
        /// <unmanaged-short>IMFMediaStream::GetStreamDescriptor</unmanaged-short>
        internal unsafe void GetStreamDescriptor(out SharpDX.MediaFoundation.StreamDescriptor streamDescriptorOut)
        {
            System.IntPtr streamDescriptorOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &streamDescriptorOut_, (*(void ***)this._nativePointer)[8]);
            if (streamDescriptorOut_ != System.IntPtr.Zero)
                streamDescriptorOut = new SharpDX.MediaFoundation.StreamDescriptor(streamDescriptorOut_);
            else
                streamDescriptorOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Requests a sample from the media source. </p>
        /// </summary>
        /// <param name = "tokenRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface to an object that is used as a token for the request. The caller must implement this object. This parameter can be <strong><c>null</c></strong>. See Remarks.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "EndOfStream"/></strong></dt> </dl> </td><td> <p> The end of the stream was reached. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "MediaSourceWrongState"/></strong></dt> </dl> </td><td> <p> The media source is stopped.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p> The source's <strong>Shutdown</strong> method has been called. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If <em>pToken</em> is not <strong><c>null</c></strong>, the media stream calls <strong>AddRef</strong> on <em>pToken</em> and places the token in a first-in, first-out queue.</p><p>When the next sample is available, the media stream stream does the following:</p><ol> <li> Pulls the first token from the queue. </li> <li> Sets the <strong><see cref = "Token"/></strong> attribute on the media sample. The attribute data is a reference to the token object. </li> <li> Sends an MEMediaSample event. The event data is a reference to the media sample's <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> interface. </li> <li> Calls <strong>Release</strong> on the token. </li> </ol><p>If the media stream cannot fulfill the caller's request for a sample, it simply releases the token object and skips steps 2 and 3.</p><p>The caller should monitor the reference count on the request token. If the media stream sends an MEMediaSample event, get the <strong><see cref = "Token"/></strong> attribute from the sample and match the attribute value against the token. If the token's reference count falls to zero and you did not receive an MEMediaSample event, it means that the request was dropped.</p><p>Because the Media Foundation pipeline is multithreaded, the source's <strong>RequestSample</strong> method might get called after the source has stopped. If the media source is stopped, the method should return <strong><see cref = "MediaSourceWrongState"/></strong>. The pipeline does not treat this return code as an error condition. If the source returns any other error code, the pipeline treats it as fatal error and halts the session.</p><strong>Note</strong>??Earlier versions of the documentation listed the wrong error code for this case.?<p>If the media source is paused, the method succeeds, but the stream does not deliver the sample until the source is started again.</p><p>If a media source enounters an error asynchronously while processing data, it should signal the error in one of the following ways (but not both):</p><ul> <li>Return an error code from the next <strong>RequestSample</strong> call.</li> <li>Send an MEError event.</li> </ul>
        /// </remarks>
        /// <doc-id>ms696240</doc-id>
        /// <unmanaged>HRESULT IMFMediaStream::RequestSample([In] IUnknown* pToken)</unmanaged>
        /// <unmanaged-short>IMFMediaStream::RequestSample</unmanaged-short>
        public unsafe void RequestSample(SharpDX.IUnknown tokenRef)
        {
            System.IntPtr tokenRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            tokenRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(tokenRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)tokenRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("C5BC37D6-75C7-46A1-A132-81B5F723C20F")]
    public partial class MediaStream2 : SharpDX.MediaFoundation.MediaStream
    {
        public MediaStream2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaStream2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaStream2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStreamState / SetStreamState</unmanaged>
        /// <unmanaged-short>GetStreamState</unmanaged-short>
        public SharpDX.MediaFoundation.StreamState StreamState
        {
            get
            {
                GetStreamState(out var __output__);
                return __output__;
            }

            set => SetStreamState(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "value">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaStream2::SetStreamState([In] MF_STREAM_STATE value)</unmanaged>
        /// <unmanaged-short>IMFMediaStream2::SetStreamState</unmanaged-short>
        internal unsafe void SetStreamState(SharpDX.MediaFoundation.StreamState value)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)value), (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "value">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMediaStream2::GetStreamState([Out] MF_STREAM_STATE* value)</unmanaged>
        /// <unmanaged-short>IMFMediaStream2::GetStreamState</unmanaged-short>
        internal unsafe void GetStreamState(out SharpDX.MediaFoundation.StreamState value)
        {
            SharpDX.Result __result__;
            fixed (void *value_ = &value)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, value_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("380b9af9-a85b-4e78-a2af-ea5ce645c6b4")]
    public partial class MediaStreamSourceSampleRequest : SharpDX.ComObject
    {
        public MediaStreamSourceSampleRequest(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaStreamSourceSampleRequest(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaStreamSourceSampleRequest(nativePtr);
        /// <summary>
        /// <p>Sets the sample for the media stream source.</p>
        /// </summary>
        /// <doc-id>dn280742</doc-id>
        /// <unmanaged>SetSample</unmanaged>
        /// <unmanaged-short>SetSample</unmanaged-short>
        public SharpDX.MediaFoundation.Sample Sample
        {
            set => SetSample(value);
        }

        /// <summary>
        /// <p>Sets the sample for the media stream source.</p>
        /// </summary>
        /// <param name = "value"><dd> <p>The sample for the media stream source.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn280742</doc-id>
        /// <unmanaged>HRESULT IMFMediaStreamSourceSampleRequest::SetSample([In, Optional] IMFSample* value)</unmanaged>
        /// <unmanaged-short>IMFMediaStreamSourceSampleRequest::SetSample</unmanaged-short>
        internal unsafe void SetSample(SharpDX.MediaFoundation.Sample value)
        {
            System.IntPtr value_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            value_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Sample>(value);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)value_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("db71a2fc-078a-414e-9df9-8c2531b0aa6c")]
    public partial class MediaTimeRange : SharpDX.ComObject
    {
        public MediaTimeRange(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaTimeRange(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaTimeRange(nativePtr);
        /// <summary>
        /// <p>Gets the number of time ranges contained in the object.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method corresponds to the <strong>TimeRanges.length</strong> attribute in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh448038</doc-id>
        /// <unmanaged>GetLength</unmanaged>
        /// <unmanaged-short>GetLength</unmanaged-short>
        public System.Int32 Length
        {
            get => GetLength();
        }

        /// <summary>
        /// <p>Gets the number of time ranges contained in the object.</p>
        /// </summary>
        /// <returns><p>Returns the number of time ranges.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>TimeRanges.length</strong> attribute in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh448038</doc-id>
        /// <unmanaged>DWORD IMFMediaTimeRange::GetLength()</unmanaged>
        /// <unmanaged-short>IMFMediaTimeRange::GetLength</unmanaged-short>
        internal unsafe System.Int32 GetLength()
        {
            System.Int32 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the start time for a specified time range.</p>
        /// </summary>
        /// <param name = "index"><dd> <p>The zero-based index of the time range to query. To get the  number of time ranges, call <strong>IMFMediaTimeRange::GetLength</strong>.</p> </dd></param>
        /// <param name = "startRef"><dd> <p>Receives the start time, in seconds.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>TimeRanges.start</strong> method in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh448039</doc-id>
        /// <unmanaged>HRESULT IMFMediaTimeRange::GetStart([In] DWORD index,[Out] double* pStart)</unmanaged>
        /// <unmanaged-short>IMFMediaTimeRange::GetStart</unmanaged-short>
        public unsafe void GetStart(System.Int32 index, out System.Double startRef)
        {
            SharpDX.Result __result__;
            fixed (void *startRef_ = &startRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, index, startRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the end time for a specified time range.</p>
        /// </summary>
        /// <param name = "index"><dd> <p>The zero-based index of the time range to query. To get the  number of time ranges, call <strong>IMFMediaTimeRange::GetLength</strong>.</p> </dd></param>
        /// <param name = "endRef"><dd> <p>Receives the end time, in seconds.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method corresponds to the <strong>TimeRanges.end</strong> method in HTML5.</p>
        /// </remarks>
        /// <doc-id>hh448037</doc-id>
        /// <unmanaged>HRESULT IMFMediaTimeRange::GetEnd([In] DWORD index,[Out] double* pEnd)</unmanaged>
        /// <unmanaged-short>IMFMediaTimeRange::GetEnd</unmanaged-short>
        public unsafe void GetEnd(System.Int32 index, out System.Double endRef)
        {
            SharpDX.Result __result__;
            fixed (void *endRef_ = &endRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, index, endRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries whether a specified time falls within any of the time ranges.</p>
        /// </summary>
        /// <param name = "time"><dd> <p>The time, in seconds.</p> </dd></param>
        /// <returns><p>Returns <strong>TRUE</strong> if any time range contained in this object spans the value of the <em>time</em> parameter. Otherwise, returns <strong><see cref = "SharpDX.Result.False"/></strong>.</p></returns>
        /// <remarks>
        /// <p>This method returns <strong>TRUE</strong> if the following condition holds for any time range in the list:</p><dl> <dd>(<em>start</em> &lt;= <em>time</em>) &amp; &amp; (<em>time</em> &lt;= <em>end</em>)</dd> </dl>
        /// </remarks>
        /// <doc-id>hh448036</doc-id>
        /// <unmanaged>BOOL IMFMediaTimeRange::ContainsTime([In] double time)</unmanaged>
        /// <unmanaged-short>IMFMediaTimeRange::ContainsTime</unmanaged-short>
        public unsafe SharpDX.Mathematics.Interop.RawBool ContainsTime(System.Double time)
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, time, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }

        /// <summary>
        /// <p>Adds a new range to the list of time ranges.</p>
        /// </summary>
        /// <param name = "startTime"><dd> <p>The start time, in seconds.</p> </dd></param>
        /// <param name = "endTime"><dd> <p>The end time, in seconds.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>If the new range intersects a range already in the list, the two ranges are combined. Otherwise, the new range is added to the list.</p>
        /// </remarks>
        /// <doc-id>hh448034</doc-id>
        /// <unmanaged>HRESULT IMFMediaTimeRange::AddRange([In] double startTime,[In] double endTime)</unmanaged>
        /// <unmanaged-short>IMFMediaTimeRange::AddRange</unmanaged-short>
        public unsafe void AddRange(System.Double startTime, System.Double endTime)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, startTime, endTime, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Clears the list of time ranges.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh448035</doc-id>
        /// <unmanaged>HRESULT IMFMediaTimeRange::Clear()</unmanaged>
        /// <unmanaged-short>IMFMediaTimeRange::Clear</unmanaged-short>
        public unsafe void Clear()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("44ae0fa8-ea31-4109-8d2e-4cae4997c555")]
    public partial class MediaType : SharpDX.MediaFoundation.MediaAttributes
    {
        public MediaType(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaType(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaType(nativePtr);
        /// <summary>
        /// <p>Gets the major type of the format. </p>
        /// </summary>
        /// <remarks>
        /// <p> This method is equivalent to getting the <strong><see cref = "MajorType"/></strong> attribute from the media type. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms701588</doc-id>
        /// <unmanaged>GetMajorType</unmanaged>
        /// <unmanaged-short>GetMajorType</unmanaged-short>
        public System.Guid MajorType
        {
            get
            {
                GetMajorType(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Queries whether the media type is a temporally compressed format. Temporal compression uses information from previously decoded samples when decompressing the current sample.</p>
        /// </summary>
        /// <remarks>
        /// <p> This method returns <strong><see cref = "SharpDX.Result.False"/></strong> in <em>pfCompressed</em> if the media type's <strong><see cref = "AllSamplesIndependent"/></strong> attribute is <strong>TRUE</strong>. If the <strong><see cref = "AllSamplesIndependent"/></strong> attribute is <strong><see cref = "SharpDX.Result.False"/></strong> or not set, the method returns <strong>TRUE</strong>. </p><p> If the method returns <strong>TRUE</strong> in <em>pfCompressed</em>, it is a hint that the format has temporal compression applied to it. If the method returns <strong><see cref = "SharpDX.Result.False"/></strong>, the format does not use temporal compression, although it might use intra-frame compression. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms703821</doc-id>
        /// <unmanaged>IsCompressedFormat</unmanaged>
        /// <unmanaged-short>IsCompressedFormat</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsCompressedFormat
        {
            get
            {
                IsCompressedFormat_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the major type of the format. </p>
        /// </summary>
        /// <param name = "guidMajorTypeRef"><dd> <p>Receives the major type <strong><see cref = "System.Guid"/></strong>. The major type describes the broad category of the format, such as audio or video. For a list of possible values, see Major Media Types. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Attributenotfound"/></strong></dt> </dl> </td><td> <p> The major type is not set. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> This method is equivalent to getting the <strong><see cref = "MajorType"/></strong> attribute from the media type. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms701588</doc-id>
        /// <unmanaged>HRESULT IMFMediaType::GetMajorType([Out] GUID* pguidMajorType)</unmanaged>
        /// <unmanaged-short>IMFMediaType::GetMajorType</unmanaged-short>
        internal unsafe void GetMajorType(out System.Guid guidMajorTypeRef)
        {
            guidMajorTypeRef = default (System.Guid);
            SharpDX.Result __result__;
            fixed (void *guidMajorTypeRef_ = &guidMajorTypeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, guidMajorTypeRef_, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Queries whether the media type is a temporally compressed format. Temporal compression uses information from previously decoded samples when decompressing the current sample.</p>
        /// </summary>
        /// <param name = "fCompressedRef"><dd> <p>Receives a Boolean value. The value is <strong>TRUE</strong> if the format uses temporal compression, or <strong><see cref = "SharpDX.Result.False"/></strong> if the format does not use temporal compression.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> This method returns <strong><see cref = "SharpDX.Result.False"/></strong> in <em>pfCompressed</em> if the media type's <strong><see cref = "AllSamplesIndependent"/></strong> attribute is <strong>TRUE</strong>. If the <strong><see cref = "AllSamplesIndependent"/></strong> attribute is <strong><see cref = "SharpDX.Result.False"/></strong> or not set, the method returns <strong>TRUE</strong>. </p><p> If the method returns <strong>TRUE</strong> in <em>pfCompressed</em>, it is a hint that the format has temporal compression applied to it. If the method returns <strong><see cref = "SharpDX.Result.False"/></strong>, the format does not use temporal compression, although it might use intra-frame compression. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms703821</doc-id>
        /// <unmanaged>HRESULT IMFMediaType::IsCompressedFormat([Out] BOOL* pfCompressed)</unmanaged>
        /// <unmanaged-short>IMFMediaType::IsCompressedFormat</unmanaged-short>
        internal unsafe void IsCompressedFormat_(out SharpDX.Mathematics.Interop.RawBool fCompressedRef)
        {
            fCompressedRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fCompressedRef_ = &fCompressedRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fCompressedRef_, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Compares two media types and determines whether they are identical. If they are not identical, the method indicates how the two formats differ. </p>
        /// </summary>
        /// <param name = "iMediaTypeRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of the media type to compare.</p> </dd></param>
        /// <param name = "dwFlagsRef"><dd> <p>Receives a bitwise <strong>OR</strong> of zero or more flags, indicating the degree of similarity between the two media types. The following flags are defined.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>MF_MEDIATYPE_EQUAL_MAJOR_TYPES</strong></dt> <dt>0x00000001</dt> </dl> </td><td> <p>The major types are the same. The major type is specified by the <strong><see cref = "MajorType"/></strong> attribute.</p> </td></tr> <tr><td><dl> <dt><strong>MF_MEDIATYPE_EQUAL_FORMAT_TYPES</strong></dt> <dt>0x00000002</dt> </dl> </td><td> <p>The subtypes are the same, or neither media type has a subtype. The subtype is specified by the <strong><see cref = "Subtype"/></strong> attribute.</p> </td></tr> <tr><td><dl> <dt><strong>MF_MEDIATYPE_EQUAL_FORMAT_DATA</strong></dt> <dt>0x00000004</dt> </dl> </td><td> <p>The attributes in one of the media types are a  subset of the attributes in the other, and the values of these attributes match, excluding the value of the <strong><see cref = "UserData"/></strong>, <see cref = "FrameRateRangeMin"/>,  and <see cref = "FrameRateRangeMax"/> attributes.</p> <p>Specifically, the method takes the media type with the smaller number of attributes and checks whether each attribute from that type is present in the other media type and has the same value (not including <strong><see cref = "UserData"/></strong>, <see cref = "FrameRateRangeMin"/>,  and <see cref = "FrameRateRangeMax"/>). </p> <p>To perform other comparisons, use the <strong>IMFAttributes::Compare</strong> method. For example, the <strong>Compare</strong> method can test for identical attributes, or test the intersection of the two attribute sets. For more information, see <strong><see cref = "SharpDX.MediaFoundation.AttributesMatchType"/></strong>.</p> </td></tr> <tr><td><dl> <dt><strong>MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA</strong></dt> <dt>0x00000008</dt> </dl> </td><td> <p>The user data is identical, or neither media type contains user data. User data is specified by the <strong><see cref = "UserData"/></strong> attribute.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong>S_FALSE</strong></dt> </dl> </td><td> <p> The types are not equal. Examine the <em>pdwFlags</em> parameter to determine how the types differ. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The types are equal. </p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p> One or both media types are invalid. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> Both of the media types must have a major type, or the method returns <strong>E_INVALIDARG</strong>. </p><p> If the method succeeds and all of the comparison flags are set in <em>pdwFlags</em>, the return value is <strong><see cref = "SharpDX.Result.Ok"/></strong>. If the method succeeds but one or more comparison flags are not set, the method returns <strong>S_FALSE</strong>. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms696980</doc-id>
        /// <unmanaged>HRESULT IMFMediaType::IsEqual([In, Optional] IMFMediaType* pIMediaType,[Out] DWORD* pdwFlags)</unmanaged>
        /// <unmanaged-short>IMFMediaType::IsEqual</unmanaged-short>
        public unsafe void IsEqual(SharpDX.MediaFoundation.MediaType iMediaTypeRef, out System.Int32 dwFlagsRef)
        {
            System.IntPtr iMediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iMediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(iMediaTypeRef);
            fixed (void *dwFlagsRef_ = &dwFlagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iMediaTypeRef_, dwFlagsRef_, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves an alternative representation of the media type. Currently only the DirectShow <strong><see cref = "SharpDX.Win32.Unsupported.AMMediaType"/></strong> structure is supported.</p>
        /// </summary>
        /// <param name = "guidRepresentation"><dd> <p> <see cref = "System.Guid"/> that specifies the representation to retrieve. The following values are defined. </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>AM_MEDIA_TYPE_REPRESENTATION</strong></dt> </dl> </td><td> <p> Convert the media type to a DirectShow <strong><see cref = "SharpDX.Win32.Unsupported.AMMediaType"/></strong> structure. The method selects the most appropriate format structure (<strong>pbFormat</strong>). </p> </td></tr> <tr><td><dl> <dt><strong>FORMAT_MFVideoFormat</strong></dt> </dl> </td><td> <p> Convert the media type to a DirectShow <strong><see cref = "SharpDX.Win32.Unsupported.AMMediaType"/></strong> structure with an <strong><see cref = "SharpDX.MediaFoundation.VideoFormat"/></strong> format structure. </p> </td></tr> <tr><td><dl> <dt><strong>FORMAT_VideoInfo</strong></dt> </dl> </td><td> <p> Convert the media type to a DirectShow <strong><see cref = "SharpDX.Win32.Unsupported.AMMediaType"/></strong> structure with a <strong><see cref = "SharpDX.Win32.Unsupported.VideoInfoHeader"/></strong> format structure. </p> </td></tr> <tr><td><dl> <dt><strong>FORMAT_VideoInfo2</strong></dt> </dl> </td><td> <p> Convert the media type to a DirectShow <strong><see cref = "SharpDX.Win32.Unsupported.AMMediaType"/></strong> structure with a <strong><see cref = "SharpDX.MediaFoundation.VideoInformationHeader2"/></strong> format structure. </p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "vRepresentationOut"><dd> <p> Receives a reference to a structure that contains the representation. The method allocates the memory for the structure. The caller must release the memory by calling <strong>IMFMediaType::FreeRepresentation</strong>. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Attributenotfound"/></strong></dt> </dl> </td><td> <p> The details of the media type do not match the requested representation. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidMediaType"/></strong></dt> </dl> </td><td> <p> The media type is not valid. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedRepresentation"/></strong></dt> </dl> </td><td> <p> The media type does not support the requested representation. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> If you request a specific format structure in the <em>guidRepresentation</em> parameter, such as <strong><see cref = "SharpDX.Win32.Unsupported.VideoInfoHeader"/></strong>, you might lose some of the format information. </p><p> You can also use the <strong>MFInitAMMediaTypeFromMFMediaType</strong> function to convert a Media Foundation media type into a DirectShow media type. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms695248</doc-id>
        /// <unmanaged>HRESULT IMFMediaType::GetRepresentation([In] GUID guidRepresentation,[Out] void** ppvRepresentation)</unmanaged>
        /// <unmanaged-short>IMFMediaType::GetRepresentation</unmanaged-short>
        public unsafe void GetRepresentation(System.Guid guidRepresentation, out System.IntPtr vRepresentationOut)
        {
            SharpDX.Result __result__;
            fixed (void *vRepresentationOut_ = &vRepresentationOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, guidRepresentation, vRepresentationOut_, (*(void ***)this._nativePointer)[36]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves an alternative representation of the media type. Currently only the DirectShow <strong><see cref = "SharpDX.Win32.Unsupported.AMMediaType"/></strong> structure is supported.</p>
        /// </summary>
        /// <param name = "guidRepresentation"><dd> <p> <see cref = "System.Guid"/> that specifies the representation to retrieve. The following values are defined. </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>AM_MEDIA_TYPE_REPRESENTATION</strong></dt> </dl> </td><td> <p> Convert the media type to a DirectShow <strong><see cref = "SharpDX.Win32.Unsupported.AMMediaType"/></strong> structure. The method selects the most appropriate format structure (<strong>pbFormat</strong>). </p> </td></tr> <tr><td><dl> <dt><strong>FORMAT_MFVideoFormat</strong></dt> </dl> </td><td> <p> Convert the media type to a DirectShow <strong><see cref = "SharpDX.Win32.Unsupported.AMMediaType"/></strong> structure with an <strong><see cref = "SharpDX.MediaFoundation.VideoFormat"/></strong> format structure. </p> </td></tr> <tr><td><dl> <dt><strong>FORMAT_VideoInfo</strong></dt> </dl> </td><td> <p> Convert the media type to a DirectShow <strong><see cref = "SharpDX.Win32.Unsupported.AMMediaType"/></strong> structure with a <strong><see cref = "SharpDX.Win32.Unsupported.VideoInfoHeader"/></strong> format structure. </p> </td></tr> <tr><td><dl> <dt><strong>FORMAT_VideoInfo2</strong></dt> </dl> </td><td> <p> Convert the media type to a DirectShow <strong><see cref = "SharpDX.Win32.Unsupported.AMMediaType"/></strong> structure with a <strong><see cref = "SharpDX.MediaFoundation.VideoInformationHeader2"/></strong> format structure. </p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "vRepresentationRef"><dd> <p> Receives a reference to a structure that contains the representation. The method allocates the memory for the structure. The caller must release the memory by calling <strong>IMFMediaType::FreeRepresentation</strong>. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Attributenotfound"/></strong></dt> </dl> </td><td> <p> The details of the media type do not match the requested representation. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidMediaType"/></strong></dt> </dl> </td><td> <p> The media type is not valid. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedRepresentation"/></strong></dt> </dl> </td><td> <p> The media type does not support the requested representation. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> If you request a specific format structure in the <em>guidRepresentation</em> parameter, such as <strong><see cref = "SharpDX.Win32.Unsupported.VideoInfoHeader"/></strong>, you might lose some of the format information. </p><p> You can also use the <strong>MFInitAMMediaTypeFromMFMediaType</strong> function to convert a Media Foundation media type into a DirectShow media type. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms695248</doc-id>
        /// <unmanaged>HRESULT IMFMediaType::FreeRepresentation([In] GUID guidRepresentation,[In] void* pvRepresentation)</unmanaged>
        /// <unmanaged-short>IMFMediaType::FreeRepresentation</unmanaged-short>
        public unsafe void FreeRepresentation(System.Guid guidRepresentation, System.IntPtr vRepresentationRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, guidRepresentation, (void *)vRepresentationRef, (*(void ***)this._nativePointer)[37]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("e93dcf6c-4b07-4e1e-8123-aa16ed6eadf5")]
    public partial class MediaTypeHandler : SharpDX.ComObject
    {
        public MediaTypeHandler(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MediaTypeHandler(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MediaTypeHandler(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the number of media types in the object's list of supported media types.</p>
        /// </summary>
        /// <remarks>
        /// <p> To get the supported media types, call <strong>IMFMediaTypeHandler::GetMediaTypeByIndex</strong>. </p><p> For a media source, the media type handler for each stream must contain at least one supported media type. For media sinks, the media type handler for each stream might contain zero media types. In that case, the application must provide the media type. To test whether a particular media type is supported, call <strong>IMFMediaTypeHandler::IsMediaTypeSupported</strong>. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970517</doc-id>
        /// <unmanaged>GetMediaTypeCount</unmanaged>
        /// <unmanaged-short>GetMediaTypeCount</unmanaged-short>
        public System.Int32 MediaTypeCount
        {
            get
            {
                GetMediaTypeCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the current media type of the object.</p>
        /// </summary>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970492</doc-id>
        /// <unmanaged>GetCurrentMediaType / SetCurrentMediaType</unmanaged>
        /// <unmanaged-short>GetCurrentMediaType</unmanaged-short>
        public SharpDX.MediaFoundation.MediaType CurrentMediaType
        {
            get
            {
                GetCurrentMediaType(out var __output__);
                return __output__;
            }

            set => SetCurrentMediaType(value);
        }

        /// <summary>
        /// <p>Gets the major media type of the object. </p>
        /// </summary>
        /// <remarks>
        /// <p>The major type identifies what kind of data is in the stream, such as audio or video. To get the specific details of the format, call <strong>IMFMediaTypeHandler::GetCurrentMediaType</strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970337</doc-id>
        /// <unmanaged>GetMajorType</unmanaged>
        /// <unmanaged-short>GetMajorType</unmanaged-short>
        public System.Guid MajorType
        {
            get
            {
                GetMajorType(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Queries whether the object supports a specified media type.</p>
        /// </summary>
        /// <param name = "mediaTypeRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of the media type to check. </p> </dd></param>
        /// <param name = "mediaTypeOut"><dd> <p> Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of the closest matching media type, or receives the value <strong><c>null</c></strong>. If non-<strong><c>null</c></strong>, the caller must release the interface. This parameter can be <strong><c>null</c></strong>. See Remarks. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidMediaType"/></strong></dt> </dl> </td><td> <p> The object does not support this media type. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> If the object supports the media type given in <em>pMediaType</em>, the method returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. For a media source, it means the source can generate data that conforms to that media type. For a media sink, it means the sink can receive data that conforms to that media type. If the object does not support the media type, the method fails. </p><p> The <em>ppMediaType</em> parameter is optional. If the method fails, the object might use <em>ppMediaType</em> to return a media type that the object does support, and which closely matches the one given in <em>pMediaType</em>. The method is not guaranteed to return a media type in <em>ppMediaType</em>. If no type is returned, this parameter receives a <strong><c>null</c></strong> reference. If the method succeeds, this parameter receives a <strong><c>null</c></strong> reference. If the caller sets <em>ppMediaType</em> to <strong><c>null</c></strong>, this parameter is ignored. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with SP2 and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970559</doc-id>
        /// <unmanaged>HRESULT IMFMediaTypeHandler::IsMediaTypeSupported([In] IMFMediaType* pMediaType,[Out, Optional] IMFMediaType** ppMediaType)</unmanaged>
        /// <unmanaged-short>IMFMediaTypeHandler::IsMediaTypeSupported</unmanaged-short>
        public unsafe void IsMediaTypeSupported(SharpDX.MediaFoundation.MediaType mediaTypeRef, out SharpDX.MediaFoundation.MediaType mediaTypeOut)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            System.IntPtr mediaTypeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(mediaTypeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)mediaTypeRef_, &mediaTypeOut_, (*(void ***)this._nativePointer)[3]);
            if (mediaTypeOut_ != System.IntPtr.Zero)
                mediaTypeOut = new SharpDX.MediaFoundation.MediaType(mediaTypeOut_);
            else
                mediaTypeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of media types in the object's list of supported media types.</p>
        /// </summary>
        /// <param name = "dwTypeCountRef"><dd> <p>Receives the number of media types in the list.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> To get the supported media types, call <strong>IMFMediaTypeHandler::GetMediaTypeByIndex</strong>. </p><p> For a media source, the media type handler for each stream must contain at least one supported media type. For media sinks, the media type handler for each stream might contain zero media types. In that case, the application must provide the media type. To test whether a particular media type is supported, call <strong>IMFMediaTypeHandler::IsMediaTypeSupported</strong>. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970517</doc-id>
        /// <unmanaged>HRESULT IMFMediaTypeHandler::GetMediaTypeCount([Out] DWORD* pdwTypeCount)</unmanaged>
        /// <unmanaged-short>IMFMediaTypeHandler::GetMediaTypeCount</unmanaged-short>
        internal unsafe void GetMediaTypeCount(out System.Int32 dwTypeCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwTypeCountRef_ = &dwTypeCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwTypeCountRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves a media type from the object's list of supported media types.</p>
        /// </summary>
        /// <param name = "dwIndex"><dd> <p> Zero-based index of the media type to retrieve. To get the number of media types in the list, call <strong>IMFMediaTypeHandler::GetMediaTypeCount</strong>. </p> </dd></param>
        /// <param name = "typeOut"><dd> <p> Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoMoreTypes"/></strong></dt> </dl> </td><td> <p> The <em>dwIndex</em> parameter is out of range. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Media types are returned in the approximate order of preference. The list of supported types is not guaranteed to be complete. To test whether a particular media type is supported, call <strong>IMFMediaTypeHandler::IsMediaTypeSupported</strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970473</doc-id>
        /// <unmanaged>HRESULT IMFMediaTypeHandler::GetMediaTypeByIndex([In] DWORD dwIndex,[Out] IMFMediaType** ppType)</unmanaged>
        /// <unmanaged-short>IMFMediaTypeHandler::GetMediaTypeByIndex</unmanaged-short>
        public unsafe void GetMediaTypeByIndex(System.Int32 dwIndex, out SharpDX.MediaFoundation.MediaType typeOut)
        {
            System.IntPtr typeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwIndex, &typeOut_, (*(void ***)this._nativePointer)[5]);
            if (typeOut_ != System.IntPtr.Zero)
                typeOut = new SharpDX.MediaFoundation.MediaType(typeOut_);
            else
                typeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the object's media type.</p>
        /// </summary>
        /// <param name = "mediaTypeRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of the new media type.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p> Invalid request. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>For media sources, setting the media type means the source will generate data that conforms to that media type. For media sinks, setting the media type means the sink can receive data that conforms to that media type.</p><p>Any implementation of this method should check whether <em>pMediaType</em> differs from the object's current media type. If the types are identical, the method should return <see cref = "SharpDX.Result.Ok"/> but avoid releasing and recreating resources unnecessarily. If the types are not identical, the method should validate the new type.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970432</doc-id>
        /// <unmanaged>HRESULT IMFMediaTypeHandler::SetCurrentMediaType([In] IMFMediaType* pMediaType)</unmanaged>
        /// <unmanaged-short>IMFMediaTypeHandler::SetCurrentMediaType</unmanaged-short>
        internal unsafe void SetCurrentMediaType(SharpDX.MediaFoundation.MediaType mediaTypeRef)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(mediaTypeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)mediaTypeRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the current media type of the object.</p>
        /// </summary>
        /// <param name = "mediaTypeOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotInitializeD"/></strong></dt> </dl> </td><td> <p> No media type is set. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970492</doc-id>
        /// <unmanaged>HRESULT IMFMediaTypeHandler::GetCurrentMediaType([Out] IMFMediaType** ppMediaType)</unmanaged>
        /// <unmanaged-short>IMFMediaTypeHandler::GetCurrentMediaType</unmanaged-short>
        internal unsafe void GetCurrentMediaType(out SharpDX.MediaFoundation.MediaType mediaTypeOut)
        {
            System.IntPtr mediaTypeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &mediaTypeOut_, (*(void ***)this._nativePointer)[7]);
            if (mediaTypeOut_ != System.IntPtr.Zero)
                mediaTypeOut = new SharpDX.MediaFoundation.MediaType(mediaTypeOut_);
            else
                mediaTypeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the major media type of the object. </p>
        /// </summary>
        /// <param name = "guidMajorTypeRef"><dd> <p>Receives a <see cref = "System.Guid"/> that identifies the major type. For a list of possible values, see Major Media Types. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The major type identifies what kind of data is in the stream, such as audio or video. To get the specific details of the format, call <strong>IMFMediaTypeHandler::GetCurrentMediaType</strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>bb970337</doc-id>
        /// <unmanaged>HRESULT IMFMediaTypeHandler::GetMajorType([Out] GUID* pguidMajorType)</unmanaged>
        /// <unmanaged-short>IMFMediaTypeHandler::GetMajorType</unmanaged-short>
        internal unsafe void GetMajorType(out System.Guid guidMajorTypeRef)
        {
            guidMajorTypeRef = default (System.Guid);
            SharpDX.Result __result__;
            fixed (void *guidMajorTypeRef_ = &guidMajorTypeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, guidMajorTypeRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("F88CFB8C-EF16-4991-B450-CB8C69E51704")]
    public partial class Metadata : SharpDX.ComObject
    {
        public Metadata(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Metadata(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Metadata(nativePtr);
        /// <summary>
        /// <p> Gets a list of the languages in which metadata is available.</p>
        /// </summary>
        /// <remarks>
        /// <p> For more information about language tags, see RFC 1766, "Tags for the Identification of Languages". </p><p> To set the current language, call <strong>IMFMetadata::SetLanguage</strong>. </p>
        /// </remarks>
        /// <doc-id>ms698736</doc-id>
        /// <unmanaged>GetAllLanguages</unmanaged>
        /// <unmanaged-short>GetAllLanguages</unmanaged-short>
        public SharpDX.Win32.Variant AllLanguages
        {
            get
            {
                GetAllLanguages(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Gets a list of all the metadata property names on this object.</p>
        /// </summary>
        /// <doc-id>ms704581</doc-id>
        /// <unmanaged>GetAllPropertyNames</unmanaged>
        /// <unmanaged-short>GetAllPropertyNames</unmanaged-short>
        public SharpDX.Win32.Variant AllPropertyNames
        {
            get
            {
                GetAllPropertyNames(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Sets the language for setting and retrieving metadata. </p>
        /// </summary>
        /// <param name = "wszRFC1766Ref"><dd> <p>Pointer to a null-terminated string containing an RFC 1766-compliant language tag.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>For more information about language tags, see RFC 1766, "Tags for the Identification of Languages".</p>
        /// </remarks>
        /// <doc-id>ms703982</doc-id>
        /// <unmanaged>HRESULT IMFMetadata::SetLanguage([In] const wchar_t* pwszRFC1766)</unmanaged>
        /// <unmanaged-short>IMFMetadata::SetLanguage</unmanaged-short>
        public unsafe void SetLanguage(System.String wszRFC1766Ref)
        {
            SharpDX.Result __result__;
            fixed (char *wszRFC1766Ref_ = wszRFC1766Ref)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszRFC1766Ref_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the current language setting.</p>
        /// </summary>
        /// <param name = "wszRFC1766Out"><dd> <p> Receives a reference to a null-terminated string containing an RFC 1766-compliant language tag. The caller must release the string by calling <strong>CoTaskMemFree</strong>. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p>The metadata provider does not support multiple languages.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p> No language was set. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>For more information about language tags, see RFC 1766, "Tags for the Identification of Languages."</p><p>The <strong>IMFMetadata::SetLanguage</strong> and <strong>IMFMetadata::GetProperty</strong> methods set and get metadata for the current language setting.</p>
        /// </remarks>
        /// <doc-id>ms698978</doc-id>
        /// <unmanaged>HRESULT IMFMetadata::GetLanguage([Out] wchar_t** ppwszRFC1766)</unmanaged>
        /// <unmanaged-short>IMFMetadata::GetLanguage</unmanaged-short>
        public unsafe void GetLanguage(System.IntPtr wszRFC1766Out)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszRFC1766Out, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets a list of the languages in which metadata is available.</p>
        /// </summary>
        /// <param name = "vLanguagesOut"><dd> <p> A reference to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that receives the list of languages. The list is returned as an array of null-terminated wide-character strings. Each string in the array is an RFC 1766-compliant language tag. </p> <p>The returned <strong><see cref = "SharpDX.Win32.Variant"/></strong> type is VT_VECTOR | VT_LPWSTR. The list might be empty, if no language tags are present. The caller must free the <strong><see cref = "SharpDX.Win32.Variant"/></strong> by calling <strong>PropVariantClear</strong>. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> For more information about language tags, see RFC 1766, "Tags for the Identification of Languages". </p><p> To set the current language, call <strong>IMFMetadata::SetLanguage</strong>. </p>
        /// </remarks>
        /// <doc-id>ms698736</doc-id>
        /// <unmanaged>HRESULT IMFMetadata::GetAllLanguages([Out] PROPVARIANT* ppvLanguages)</unmanaged>
        /// <unmanaged-short>IMFMetadata::GetAllLanguages</unmanaged-short>
        internal unsafe void GetAllLanguages(out SharpDX.Win32.Variant vLanguagesOut)
        {
            vLanguagesOut = default (SharpDX.Win32.Variant);
            SharpDX.Result __result__;
            fixed (void *vLanguagesOut_ = &vLanguagesOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, vLanguagesOut_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Sets the value of a metadata property. </p>
        /// </summary>
        /// <param name = "wszNameRef"><dd> <p>Pointer to a null-terminated string containing the name of the property.</p> </dd></param>
        /// <param name = "vValueOut"><dd> <p>Pointer to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that contains the value of the property. For multivalued properties, use a <strong><see cref = "SharpDX.Win32.Variant"/></strong> with a VT_VECTOR type.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>ms696972</doc-id>
        /// <unmanaged>HRESULT IMFMetadata::SetProperty([In] const wchar_t* pwszName,[In] const PROPVARIANT* ppvValue)</unmanaged>
        /// <unmanaged-short>IMFMetadata::SetProperty</unmanaged-short>
        public unsafe void SetProperty(System.String wszNameRef, SharpDX.Win32.Variant vValueOut)
        {
            SharpDX.Result __result__;
            fixed (char *wszNameRef_ = wszNameRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszNameRef_, &vValueOut, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the value of a metadata property.</p>
        /// </summary>
        /// <param name = "wszNameRef"><dd> <p> A reference to a null-terminated string that containings the name of the property. To get the list of property names, call <strong>IMFMetadata::GetAllPropertyNames</strong>.</p> </dd></param>
        /// <param name = "vValueOut"><dd> <p> Pointer to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that receives the value of the property. The <strong><see cref = "SharpDX.Win32.Variant"/></strong> type depends on the property. For multivalued properties, the <strong><see cref = "SharpDX.Win32.Variant"/></strong> is a <strong>VT_VECTOR</strong> type. The caller must free the <strong><see cref = "SharpDX.Win32.Variant"/></strong> by calling <strong>PropVariantClear</strong>. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "PropertyNotFound"/></strong></dt> </dl> </td><td> <p> The requested property was not found. </p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms694844</doc-id>
        /// <unmanaged>HRESULT IMFMetadata::GetProperty([In] const wchar_t* pwszName,[Out] PROPVARIANT* ppvValue)</unmanaged>
        /// <unmanaged-short>IMFMetadata::GetProperty</unmanaged-short>
        public unsafe void GetProperty(System.String wszNameRef, out SharpDX.Win32.Variant vValueOut)
        {
            vValueOut = default (SharpDX.Win32.Variant);
            SharpDX.Result __result__;
            fixed (void *vValueOut_ = &vValueOut)
                fixed (char *wszNameRef_ = wszNameRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszNameRef_, vValueOut_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Deletes a metadata property.</p>
        /// </summary>
        /// <param name = "wszNameRef"><dd> <p>Pointer to a null-terminated string containing the name of the property.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "PropertyNotFound"/></strong></dt> </dl> </td><td> <p> The property was not found. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>For a media source, deleting a property from the metadata collection does not change the original content.</p>
        /// </remarks>
        /// <doc-id>ms699021</doc-id>
        /// <unmanaged>HRESULT IMFMetadata::DeleteProperty([In] const wchar_t* pwszName)</unmanaged>
        /// <unmanaged-short>IMFMetadata::DeleteProperty</unmanaged-short>
        public unsafe void DeleteProperty(System.String wszNameRef)
        {
            SharpDX.Result __result__;
            fixed (char *wszNameRef_ = wszNameRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszNameRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets a list of all the metadata property names on this object.</p>
        /// </summary>
        /// <param name = "vNamesOut"><dd> <p>Pointer to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that receives an array of null-terminated wide-character strings. If no properties are available, the <strong><see cref = "SharpDX.Win32.Variant"/></strong> type is VT_EMPTY. Otherwise, the <strong><see cref = "SharpDX.Win32.Variant"/></strong> type is VT_VECTOR | VT_LPWSTR. The caller must free the <strong><see cref = "SharpDX.Win32.Variant"/></strong> by calling <strong>PropVariantClear</strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>ms704581</doc-id>
        /// <unmanaged>HRESULT IMFMetadata::GetAllPropertyNames([Out] PROPVARIANT* ppvNames)</unmanaged>
        /// <unmanaged-short>IMFMetadata::GetAllPropertyNames</unmanaged-short>
        internal unsafe void GetAllPropertyNames(out SharpDX.Win32.Variant vNamesOut)
        {
            vNamesOut = default (SharpDX.Win32.Variant);
            SharpDX.Result __result__;
            fixed (void *vNamesOut_ = &vNamesOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, vNamesOut_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("56181D2D-E221-4adb-B1C8-3CEE6A53F76F")]
    public partial class MetadataProvider : SharpDX.ComObject
    {
        public MetadataProvider(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MetadataProvider(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MetadataProvider(nativePtr);
        /// <summary>
        /// <p> Gets a collection of metadata, either for an entire presentation, or for one stream in the presentation.</p>
        /// </summary>
        /// <param name = "presentationDescriptorRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.PresentationDescriptor"/></strong> interface of the media source's presentation descriptor. </p> </dd></param>
        /// <param name = "dwStreamIdentifier"><dd> <p> If this parameter is zero, the method retrieves metadata that applies to the entire presentation. Otherwise, this <em></em> parameter specifies a stream identifier, and the method retrieves metadata for that stream. To get the stream identifier for a stream, call <strong>IMFStreamDescriptor::GetStreamIdentifier</strong>. </p> </dd></param>
        /// <param name = "dwFlags"><dd> <p> Reserved. Must be zero. </p> </dd></param>
        /// <param name = "mFMetadataOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.Metadata"/></strong> interface. Use this interface to access the metadata. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "PropertyNotFound"/></strong></dt> </dl> </td><td> <p>No metadata is available for the requested stream or presentation.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms694097</doc-id>
        /// <unmanaged>HRESULT IMFMetadataProvider::GetMFMetadata([In, Optional] IMFPresentationDescriptor* pPresentationDescriptor,[In] DWORD dwStreamIdentifier,[In] DWORD dwFlags,[Out] IMFMetadata** ppMFMetadata)</unmanaged>
        /// <unmanaged-short>IMFMetadataProvider::GetMFMetadata</unmanaged-short>
        public unsafe void GetMFMetadata(SharpDX.MediaFoundation.PresentationDescriptor presentationDescriptorRef, System.Int32 dwStreamIdentifier, System.Int32 dwFlags, out SharpDX.MediaFoundation.Metadata mFMetadataOut)
        {
            System.IntPtr presentationDescriptorRef_ = System.IntPtr.Zero;
            System.IntPtr mFMetadataOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            presentationDescriptorRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.PresentationDescriptor>(presentationDescriptorRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)presentationDescriptorRef_, dwStreamIdentifier, dwFlags, &mFMetadataOut_, (*(void ***)this._nativePointer)[3]);
            if (mFMetadataOut_ != System.IntPtr.Zero)
                mFMetadataOut = new SharpDX.MediaFoundation.Metadata(mFMetadataOut_);
            else
                mFMetadataOut = null;
            __result__.CheckError();
        }
    }

    public partial class Mfasyncresult : SharpDX.MediaFoundation.AsyncResult
    {
        public Mfasyncresult(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Mfasyncresult(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Mfasyncresult(nativePtr);
    }

    [System.Runtime.InteropServices.GuidAttribute("CE8BD576-E440-43B3-BE34-1E53F565F7E8")]
    public partial class MuxStreamAttributesManager : SharpDX.ComObject
    {
        public MuxStreamAttributesManager(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MuxStreamAttributesManager(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MuxStreamAttributesManager(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStreamCount</unmanaged>
        /// <unmanaged-short>GetStreamCount</unmanaged-short>
        public System.Int32 StreamCount
        {
            get
            {
                GetStreamCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwMuxStreamCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMuxStreamAttributesManager::GetStreamCount([Out] DWORD* pdwMuxStreamCount)</unmanaged>
        /// <unmanaged-short>IMFMuxStreamAttributesManager::GetStreamCount</unmanaged-short>
        internal unsafe void GetStreamCount(out System.Int32 dwMuxStreamCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwMuxStreamCountRef_ = &dwMuxStreamCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwMuxStreamCountRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> for the substream with the specified index.</p>
        /// </summary>
        /// <param name = "dwMuxStreamIndex">No documentation.</param>
        /// <param name = "streamAttributesOut">No documentation.</param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p> Invalid argument. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> The stream specified substream index is invalid. Call <strong>GetStreamCount</strong> to get the number of substreams managed by the multiplexed media source.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>mt797928</doc-id>
        /// <unmanaged>HRESULT IMFMuxStreamAttributesManager::GetAttributes([In] DWORD dwMuxStreamIndex,[Out] IMFAttributes** ppStreamAttributes)</unmanaged>
        /// <unmanaged-short>IMFMuxStreamAttributesManager::GetAttributes</unmanaged-short>
        public unsafe void GetAttributes(System.Int32 dwMuxStreamIndex, out SharpDX.MediaFoundation.MediaAttributes streamAttributesOut)
        {
            System.IntPtr streamAttributesOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwMuxStreamIndex, &streamAttributesOut_, (*(void ***)this._nativePointer)[4]);
            if (streamAttributesOut_ != System.IntPtr.Zero)
                streamAttributesOut = new SharpDX.MediaFoundation.MediaAttributes(streamAttributesOut_);
            else
                streamAttributesOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("505A2C72-42F7-4690-AEAB-8F513D0FFDB8")]
    public partial class MuxStreamMediaTypeManager : SharpDX.ComObject
    {
        public MuxStreamMediaTypeManager(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MuxStreamMediaTypeManager(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MuxStreamMediaTypeManager(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStreamCount</unmanaged>
        /// <unmanaged-short>GetStreamCount</unmanaged-short>
        public System.Int32 StreamCount
        {
            get
            {
                GetStreamCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStreamConfigurationCount</unmanaged>
        /// <unmanaged-short>GetStreamConfigurationCount</unmanaged-short>
        public System.Int32 StreamConfigurationCount
        {
            get
            {
                GetStreamConfigurationCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwMuxStreamCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMuxStreamMediaTypeManager::GetStreamCount([Out] DWORD* pdwMuxStreamCount)</unmanaged>
        /// <unmanaged-short>IMFMuxStreamMediaTypeManager::GetStreamCount</unmanaged-short>
        internal unsafe void GetStreamCount(out System.Int32 dwMuxStreamCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwMuxStreamCountRef_ = &dwMuxStreamCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwMuxStreamCountRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwMuxStreamIndex">No documentation.</param>
        /// <param name = "mediaTypeOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMuxStreamMediaTypeManager::GetMediaType([In] DWORD dwMuxStreamIndex,[Out] IMFMediaType** ppMediaType)</unmanaged>
        /// <unmanaged-short>IMFMuxStreamMediaTypeManager::GetMediaType</unmanaged-short>
        public unsafe void GetMediaType(System.Int32 dwMuxStreamIndex, out SharpDX.MediaFoundation.MediaType mediaTypeOut)
        {
            System.IntPtr mediaTypeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwMuxStreamIndex, &mediaTypeOut_, (*(void ***)this._nativePointer)[4]);
            if (mediaTypeOut_ != System.IntPtr.Zero)
                mediaTypeOut = new SharpDX.MediaFoundation.MediaType(mediaTypeOut_);
            else
                mediaTypeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMuxStreamMediaTypeManager::GetStreamConfigurationCount([Out] DWORD* pdwCount)</unmanaged>
        /// <unmanaged-short>IMFMuxStreamMediaTypeManager::GetStreamConfigurationCount</unmanaged-short>
        internal unsafe void GetStreamConfigurationCount(out System.Int32 dwCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwCountRef_ = &dwCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwCountRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ullStreamMask">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMuxStreamMediaTypeManager::AddStreamConfiguration([In] unsigned longlong ullStreamMask)</unmanaged>
        /// <unmanaged-short>IMFMuxStreamMediaTypeManager::AddStreamConfiguration</unmanaged-short>
        public unsafe void AddStreamConfiguration(System.Int64 ullStreamMask)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, ullStreamMask, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ullStreamMask">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMuxStreamMediaTypeManager::RemoveStreamConfiguration([In] unsigned longlong ullStreamMask)</unmanaged>
        /// <unmanaged-short>IMFMuxStreamMediaTypeManager::RemoveStreamConfiguration</unmanaged-short>
        public unsafe void RemoveStreamConfiguration(System.Int64 ullStreamMask)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, ullStreamMask, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ulIndex">No documentation.</param>
        /// <param name = "ullStreamMaskRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMuxStreamMediaTypeManager::GetStreamConfiguration([In] DWORD ulIndex,[Out] unsigned longlong* pullStreamMask)</unmanaged>
        /// <unmanaged-short>IMFMuxStreamMediaTypeManager::GetStreamConfiguration</unmanaged-short>
        public unsafe void GetStreamConfiguration(System.Int32 ulIndex, out System.Int64 ullStreamMaskRef)
        {
            SharpDX.Result __result__;
            fixed (void *ullStreamMaskRef_ = &ullStreamMaskRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, ulIndex, ullStreamMaskRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("74ABBC19-B1CC-4E41-BB8B-9D9B86A8F6CA")]
    public partial class MuxStreamSampleManager : SharpDX.ComObject
    {
        public MuxStreamSampleManager(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MuxStreamSampleManager(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MuxStreamSampleManager(nativePtr);
        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Provides the ability to retrieve <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> objects for individual substreams within the output of a multiplexed media source.</p>
        /// </summary>
        /// <doc-id>mt797937</doc-id>
        /// <unmanaged>GetStreamCount</unmanaged>
        /// <unmanaged-short>GetStreamCount</unmanaged-short>
        public System.Int32 StreamCount
        {
            get
            {
                GetStreamCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStreamConfiguration</unmanaged>
        /// <unmanaged-short>GetStreamConfiguration</unmanaged-short>
        public System.Int64 StreamConfiguration
        {
            get => GetStreamConfiguration();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Provides the ability to retrieve <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> objects for individual substreams within the output of a multiplexed media source.</p>
        /// </summary>
        /// <param name = "dwMuxStreamCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <doc-id>mt797937</doc-id>
        /// <unmanaged>HRESULT IMFMuxStreamSampleManager::GetStreamCount([Out] DWORD* pdwMuxStreamCount)</unmanaged>
        /// <unmanaged-short>IMFMuxStreamSampleManager::GetStreamCount</unmanaged-short>
        internal unsafe void GetStreamCount(out System.Int32 dwMuxStreamCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwMuxStreamCountRef_ = &dwMuxStreamCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwMuxStreamCountRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwMuxStreamIndex">No documentation.</param>
        /// <param name = "sampleOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFMuxStreamSampleManager::GetSample([In] DWORD dwMuxStreamIndex,[Out] IMFSample** ppSample)</unmanaged>
        /// <unmanaged-short>IMFMuxStreamSampleManager::GetSample</unmanaged-short>
        public unsafe void GetSample(System.Int32 dwMuxStreamIndex, out SharpDX.MediaFoundation.Sample sampleOut)
        {
            System.IntPtr sampleOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwMuxStreamIndex, &sampleOut_, (*(void ***)this._nativePointer)[4]);
            if (sampleOut_ != System.IntPtr.Zero)
                sampleOut = new SharpDX.MediaFoundation.Sample(sampleOut_);
            else
                sampleOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned longlong IMFMuxStreamSampleManager::GetStreamConfiguration()</unmanaged>
        /// <unmanaged-short>IMFMuxStreamSampleManager::GetStreamConfiguration</unmanaged-short>
        internal unsafe System.Int64 GetStreamConfiguration()
        {
            System.Int64 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCalllong(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5b87ef6a-7ed8-434f-ba0e-184fac1628d1")]
    public partial class NetCredential : SharpDX.ComObject
    {
        public NetCredential(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator NetCredential(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new NetCredential(nativePtr);
        /// <summary>
        /// <p> </p><p>Sets the user name.</p>
        /// </summary>
        /// <param name = "bDataRef"><dd> <p>Pointer to a buffer that contains the user name. If <em>fDataIsEncrypted</em> is <strong><see cref = "SharpDX.Result.False"/></strong>, the buffer is a wide-character string. Otherwise, the buffer contains encrypted data.</p> </dd></param>
        /// <param name = "cbData"><dd> <p>Size of <em>pbData</em>, in bytes. If <em>fDataIsEncrypted</em> is <strong><see cref = "SharpDX.Result.False"/></strong>, the size includes the terminating null character.</p> </dd></param>
        /// <param name = "fDataIsEncrypted"><dd> <p>If <strong>TRUE</strong>, the user name is encrypted. Otherwise, the user name is not encrypted.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms693551</doc-id>
        /// <unmanaged>HRESULT IMFNetCredential::SetUser([In, Buffer] unsigned char* pbData,[In] DWORD cbData,[In] BOOL fDataIsEncrypted)</unmanaged>
        /// <unmanaged-short>IMFNetCredential::SetUser</unmanaged-short>
        public unsafe void SetUser(System.Byte[] bDataRef, System.Int32 cbData, SharpDX.Mathematics.Interop.RawBool fDataIsEncrypted)
        {
            SharpDX.Result __result__;
            fixed (void *bDataRef_ = bDataRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, bDataRef_, cbData, fDataIsEncrypted, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the password.</p>
        /// </summary>
        /// <param name = "bDataRef"><dd> <p>Pointer to a buffer that contains the password. If <em>fDataIsEncrypted</em> is <strong><see cref = "SharpDX.Result.False"/></strong>, the buffer is a wide-character string. Otherwise, the buffer contains encrypted data.</p> </dd></param>
        /// <param name = "cbData"><dd> <p>Size of <em>pbData</em>, in bytes. If <em>fDataIsEncrypted</em> is <strong><see cref = "SharpDX.Result.False"/></strong>, the size includes the terminating null character.</p> </dd></param>
        /// <param name = "fDataIsEncrypted"><dd> <p>If <strong>TRUE</strong>, the password is encrypted. Otherwise, the password is not encrypted.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms699838</doc-id>
        /// <unmanaged>HRESULT IMFNetCredential::SetPassword([In, Buffer] unsigned char* pbData,[In] DWORD cbData,[In] BOOL fDataIsEncrypted)</unmanaged>
        /// <unmanaged-short>IMFNetCredential::SetPassword</unmanaged-short>
        public unsafe void SetPassword(System.Byte[] bDataRef, System.Int32 cbData, SharpDX.Mathematics.Interop.RawBool fDataIsEncrypted)
        {
            SharpDX.Result __result__;
            fixed (void *bDataRef_ = bDataRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, bDataRef_, cbData, fDataIsEncrypted, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the user name.</p>
        /// </summary>
        /// <param name = "bDataRef"><dd> <p>Pointer to a buffer that receives the user name. To find the required buffer size, set this parameter to <strong><c>null</c></strong>. If <em>fEncryptData</em> is <strong><see cref = "SharpDX.Result.False"/></strong>, the buffer contains a wide-character string. Otherwise, the buffer contains encrypted data.</p> </dd></param>
        /// <param name = "cbDataRef"><dd> <p>On input, specifies the size of the <em>pbData</em> buffer, in bytes. On output, receives the required buffer size. If <em>fEncryptData</em> is <strong><see cref = "SharpDX.Result.False"/></strong>, the size includes the terminating null character.</p> </dd></param>
        /// <param name = "fEncryptData"><dd> <p>If <strong>TRUE</strong>, the method returns an encrypted string. Otherwise, the method returns an unencrypted string.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the user name is not available, the method might succeed and set *<em>pcbData</em> to zero.</p>
        /// </remarks>
        /// <doc-id>ms694290</doc-id>
        /// <unmanaged>HRESULT IMFNetCredential::GetUser([Out, Buffer, Optional] unsigned char* pbData,[InOut] DWORD* pcbData,[In] BOOL fEncryptData)</unmanaged>
        /// <unmanaged-short>IMFNetCredential::GetUser</unmanaged-short>
        public unsafe void GetUser(System.Byte[] bDataRef, ref System.Int32 cbDataRef, SharpDX.Mathematics.Interop.RawBool fEncryptData)
        {
            SharpDX.Result __result__;
            fixed (void *cbDataRef_ = &cbDataRef)
                fixed (void *bDataRef_ = bDataRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, bDataRef_, cbDataRef_, fEncryptData, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the password.</p>
        /// </summary>
        /// <param name = "bDataRef"><dd> <p>Pointer to a buffer that receives the password. To find the required buffer size, set this parameter to <strong><c>null</c></strong>. If <em>fEncryptData</em> is <strong><see cref = "SharpDX.Result.False"/></strong>, the buffer contains a wide-character string. Otherwise, the buffer contains encrypted data.</p> </dd></param>
        /// <param name = "cbDataRef"><dd> <p>On input, specifies the size of the <em>pbData</em> buffer, in bytes. On output, receives the required buffer size. If <em>fEncryptData</em> is <strong><see cref = "SharpDX.Result.False"/></strong>, the size includes the terminating null character.</p> </dd></param>
        /// <param name = "fEncryptData"><dd> <p>If <strong>TRUE</strong>, the method returns an encrypted string. Otherwise, the method returns an unencrypted string.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the password is not available, the method might succeed and set *<em>pcbData</em> to zero.</p>
        /// </remarks>
        /// <doc-id>ms702055</doc-id>
        /// <unmanaged>HRESULT IMFNetCredential::GetPassword([Out, Buffer, Optional] unsigned char* pbData,[InOut] DWORD* pcbData,[In] BOOL fEncryptData)</unmanaged>
        /// <unmanaged-short>IMFNetCredential::GetPassword</unmanaged-short>
        public unsafe void GetPassword(System.Byte[] bDataRef, ref System.Int32 cbDataRef, SharpDX.Mathematics.Interop.RawBool fEncryptData)
        {
            SharpDX.Result __result__;
            fixed (void *cbDataRef_ = &cbDataRef)
                fixed (void *bDataRef_ = bDataRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, bDataRef_, cbDataRef_, fEncryptData, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Queries whether logged-on credentials should be used.</p>
        /// </summary>
        /// <param name = "fLoggedOnUserRef"><dd> <p>Receives a Boolean value. If logged-on credentials should be used, the value is <strong>TRUE</strong>. Otherwise, the value is <strong><see cref = "SharpDX.Result.False"/></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms698960</doc-id>
        /// <unmanaged>HRESULT IMFNetCredential::LoggedOnUser([Out] BOOL* pfLoggedOnUser)</unmanaged>
        /// <unmanaged-short>IMFNetCredential::LoggedOnUser</unmanaged-short>
        public unsafe void LoggedOnUser(out SharpDX.Mathematics.Interop.RawBool fLoggedOnUserRef)
        {
            fLoggedOnUserRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fLoggedOnUserRef_ = &fLoggedOnUserRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fLoggedOnUserRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5b87ef6c-7ed8-434f-ba0e-184fac1628d1")]
    public partial class NetCredentialCache : SharpDX.ComObject
    {
        public NetCredentialCache(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator NetCredentialCache(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new NetCredentialCache(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the credential object for the specified URL.</p>
        /// </summary>
        /// <param name = "szUrlRef"><dd> <p>A null-terminated wide-character string containing the URL for which the credential is needed.</p> </dd></param>
        /// <param name = "szRealmRef"><dd> <p>A null-terminated wide-character string containing the realm for the authentication.</p> </dd></param>
        /// <param name = "dwAuthenticationFlags"><dd> <p>Bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.NetAuthenticationFlags"/></strong> enumeration.</p> </dd></param>
        /// <param name = "credOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.NetCredential"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <param name = "dwRequirementsFlagsRef"><dd> <p>Receives a bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.NetCredentialRequirements"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms699842</doc-id>
        /// <unmanaged>HRESULT IMFNetCredentialCache::GetCredential([In] const wchar_t* pszUrl,[In] const wchar_t* pszRealm,[In] DWORD dwAuthenticationFlags,[Out] IMFNetCredential** ppCred,[Out] DWORD* pdwRequirementsFlags)</unmanaged>
        /// <unmanaged-short>IMFNetCredentialCache::GetCredential</unmanaged-short>
        public unsafe void GetCredential(System.String szUrlRef, System.String szRealmRef, System.Int32 dwAuthenticationFlags, out SharpDX.MediaFoundation.NetCredential credOut, out System.Int32 dwRequirementsFlagsRef)
        {
            System.IntPtr credOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (void *dwRequirementsFlagsRef_ = &dwRequirementsFlagsRef)
                fixed (char *szRealmRef_ = szRealmRef)
                    fixed (char *szUrlRef_ = szUrlRef)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szUrlRef_, (void *)szRealmRef_, dwAuthenticationFlags, &credOut_, dwRequirementsFlagsRef_, (*(void ***)this._nativePointer)[3]);
            if (credOut_ != System.IntPtr.Zero)
                credOut = new SharpDX.MediaFoundation.NetCredential(credOut_);
            else
                credOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Reports whether the credential object provided successfully passed the authentication challenge.</p>
        /// </summary>
        /// <param name = "credRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.NetCredential"/></strong> interface.</p> </dd></param>
        /// <param name = "fGood"><dd> <p><strong>TRUE</strong> if the credential object succeeded in the authentication challenge; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is called by the network source into the credential manager.</p>
        /// </remarks>
        /// <doc-id>ms704649</doc-id>
        /// <unmanaged>HRESULT IMFNetCredentialCache::SetGood([In] IMFNetCredential* pCred,[In] BOOL fGood)</unmanaged>
        /// <unmanaged-short>IMFNetCredentialCache::SetGood</unmanaged-short>
        public unsafe void SetGood(SharpDX.MediaFoundation.NetCredential credRef, SharpDX.Mathematics.Interop.RawBool fGood)
        {
            System.IntPtr credRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            credRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.NetCredential>(credRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)credRef_, fGood, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Specifies how user credentials are stored.</p>
        /// </summary>
        /// <param name = "credRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.NetCredential"/></strong> interface. Obtain this reference by calling <strong>IMFNetCredentialCache::GetCredential</strong>.</p> </dd></param>
        /// <param name = "dwOptionsFlags"><dd> <p>Bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.NetCredentialOptions"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If no flags are specified, the credentials are cached in memory. This method can be implemented by the credential manager and called by the network source.</p>
        /// </remarks>
        /// <doc-id>ms693547</doc-id>
        /// <unmanaged>HRESULT IMFNetCredentialCache::SetUserOptions([In] IMFNetCredential* pCred,[In] DWORD dwOptionsFlags)</unmanaged>
        /// <unmanaged-short>IMFNetCredentialCache::SetUserOptions</unmanaged-short>
        public unsafe void SetUserOptions(SharpDX.MediaFoundation.NetCredential credRef, System.Int32 dwOptionsFlags)
        {
            System.IntPtr credRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            credRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.NetCredential>(credRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)credRef_, dwOptionsFlags, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5b87ef6b-7ed8-434f-ba0e-184fac1628d1")]
    public partial class NetCredentialManager : SharpDX.ComObject
    {
        public NetCredentialManager(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator NetCredentialManager(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new NetCredentialManager(nativePtr);
        /// <summary>
        /// <p> </p><p>Begins an asynchronous request to retrieve the user's credentials.</p>
        /// </summary>
        /// <param name = "paramRef"><dd> <p>Pointer to an <strong><see cref = "SharpDX.MediaFoundation.NetCredentialManagerGetParam"/></strong> structure.</p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface.</p> </dd></param>
        /// <param name = "stateRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. The object is returned to the caller when the callback is invoked.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms705663</doc-id>
        /// <unmanaged>HRESULT IMFNetCredentialManager::BeginGetCredentials([In] MFNetCredentialManagerGetParam* pParam,[In] IMFAsyncCallback* pCallback,[In] IUnknown* pState)</unmanaged>
        /// <unmanaged-short>IMFNetCredentialManager::BeginGetCredentials</unmanaged-short>
        public unsafe void BeginGetCredentials(ref SharpDX.MediaFoundation.NetCredentialManagerGetParam paramRef, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown stateRef)
        {
            SharpDX.MediaFoundation.NetCredentialManagerGetParam.__Native paramRef_ = default (SharpDX.MediaFoundation.NetCredentialManagerGetParam.__Native);
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr stateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            paramRef.__MarshalTo(ref paramRef_);
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            stateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(stateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &paramRef_, (void *)callbackRef_, (void *)stateRef_, (*(void ***)this._nativePointer)[3]);
            paramRef.__MarshalFree(ref paramRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Completes an asynchronous request to retrieve the user's credentials.</p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>Pointer to an <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface that contains the asynchronous result.</p> </dd></param>
        /// <param name = "credOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.NetCredential"/></strong> interface, which is used to retrieve the credentials. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms701589</doc-id>
        /// <unmanaged>HRESULT IMFNetCredentialManager::EndGetCredentials([In] IMFAsyncResult* pResult,[Out] IMFNetCredential** ppCred)</unmanaged>
        /// <unmanaged-short>IMFNetCredentialManager::EndGetCredentials</unmanaged-short>
        public unsafe void EndGetCredentials(SharpDX.MediaFoundation.AsyncResult resultRef, out SharpDX.MediaFoundation.NetCredential credOut)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            System.IntPtr credOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, &credOut_, (*(void ***)this._nativePointer)[4]);
            if (credOut_ != System.IntPtr.Zero)
                credOut = new SharpDX.MediaFoundation.NetCredential(credOut_);
            else
                credOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Specifies whether the user's credentials succeeded in the authentication challenge. The network source calls this method to informs the application whether the user's credentials were authenticated.</p>
        /// </summary>
        /// <param name = "credRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.NetCredential"/></strong> interface.</p> </dd></param>
        /// <param name = "fGood"><dd> <p>Boolean value. The value is <strong>TRUE</strong> if the credentials succeeded in the authentication challenge. Otherwise, the value is <strong><see cref = "SharpDX.Result.False"/></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms705614</doc-id>
        /// <unmanaged>HRESULT IMFNetCredentialManager::SetGood([In] IMFNetCredential* pCred,[In] BOOL fGood)</unmanaged>
        /// <unmanaged-short>IMFNetCredentialManager::SetGood</unmanaged-short>
        public unsafe void SetGood(SharpDX.MediaFoundation.NetCredential credRef, SharpDX.Mathematics.Interop.RawBool fGood)
        {
            System.IntPtr credRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            credRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.NetCredential>(credRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)credRef_, fGood, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("bc2b7d44-a72d-49d5-8376-1480dee58b22")]
    public partial class NetCrossOriginSupport : SharpDX.ComObject
    {
        public NetCrossOriginSupport(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator NetCrossOriginSupport(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new NetCrossOriginSupport(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetCrossOriginPolicy</unmanaged>
        /// <unmanaged-short>GetCrossOriginPolicy</unmanaged-short>
        public SharpDX.MediaFoundation.CrossOriginPolicy CrossOriginPolicy
        {
            get
            {
                GetCrossOriginPolicy(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "policyRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFNetCrossOriginSupport::GetCrossOriginPolicy([Out] MF_CROSS_ORIGIN_POLICY* pPolicy)</unmanaged>
        /// <unmanaged-short>IMFNetCrossOriginSupport::GetCrossOriginPolicy</unmanaged-short>
        internal unsafe void GetCrossOriginPolicy(out SharpDX.MediaFoundation.CrossOriginPolicy policyRef)
        {
            SharpDX.Result __result__;
            fixed (void *policyRef_ = &policyRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, policyRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "wszSourceOrigin">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFNetCrossOriginSupport::GetSourceOrigin([Out] wchar_t** wszSourceOrigin)</unmanaged>
        /// <unmanaged-short>IMFNetCrossOriginSupport::GetSourceOrigin</unmanaged-short>
        public unsafe void GetSourceOrigin(System.IntPtr wszSourceOrigin)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszSourceOrigin, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "wszURL">No documentation.</param>
        /// <param name = "fIsSameOriginRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFNetCrossOriginSupport::IsSameOrigin([In] const wchar_t* wszURL,[Out] BOOL* pfIsSameOrigin)</unmanaged>
        /// <unmanaged-short>IMFNetCrossOriginSupport::IsSameOrigin</unmanaged-short>
        public unsafe void IsSameOrigin(System.String wszURL, out SharpDX.Mathematics.Interop.RawBool fIsSameOriginRef)
        {
            fIsSameOriginRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fIsSameOriginRef_ = &fIsSameOriginRef)
                fixed (char *wszURL_ = wszURL)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszURL_, fIsSameOriginRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("e9cd0383-a268-4bb4-82de-658d53574d41")]
    public partial class NetProxyLocator : SharpDX.ComObject
    {
        public NetProxyLocator(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator NetProxyLocator(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new NetProxyLocator(nativePtr);
        /// <summary>
        /// <p> </p><p>Initializes the proxy locator object.</p>
        /// </summary>
        /// <param name = "szHostRef"><dd> <p>Null-terminated wide-character string containing the hostname of the destination server.</p> </dd></param>
        /// <param name = "szUrlRef"><dd> <p>Null-terminated wide-character string containing the destination URL.</p> </dd></param>
        /// <param name = "fReserved"><dd> <p>Reserved. Set to <strong><see cref = "SharpDX.Result.False"/></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697016</doc-id>
        /// <unmanaged>HRESULT IMFNetProxyLocator::FindFirstProxy([In] const wchar_t* pszHost,[In] const wchar_t* pszUrl,[In] BOOL fReserved)</unmanaged>
        /// <unmanaged-short>IMFNetProxyLocator::FindFirstProxy</unmanaged-short>
        public unsafe void FindFirstProxy(System.String szHostRef, System.String szUrlRef, SharpDX.Mathematics.Interop.RawBool fReserved)
        {
            SharpDX.Result __result__;
            fixed (char *szUrlRef_ = szUrlRef)
                fixed (char *szHostRef_ = szHostRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)szHostRef_, (void *)szUrlRef_, fReserved, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Determines the next proxy to use.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>S_FALSE</strong></dt> </dl> </td><td> <p>There are no more proxy objects.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms700807</doc-id>
        /// <unmanaged>HRESULT IMFNetProxyLocator::FindNextProxy()</unmanaged>
        /// <unmanaged-short>IMFNetProxyLocator::FindNextProxy</unmanaged-short>
        public unsafe void FindNextProxy()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Keeps a record of the success or failure of using the current proxy.</p>
        /// </summary>
        /// <param name = "hrOp"><dd> <p><strong><see cref = "SharpDX.Result"/></strong> specifying the result of using the current proxy for connection.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms696180</doc-id>
        /// <unmanaged>HRESULT IMFNetProxyLocator::RegisterProxyResult([In] HRESULT hrOp)</unmanaged>
        /// <unmanaged-short>IMFNetProxyLocator::RegisterProxyResult</unmanaged-short>
        public unsafe void RegisterProxyResult(SharpDX.Result hrOp)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, hrOp, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the current proxy information including hostname and port.</p>
        /// </summary>
        /// <param name = "szStrRef"><dd> <p>Pointer to a buffer that receives a null-terminated string containing the proxy hostname and port. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "cchStrRef"><dd> <p>On input, specifies the number of elements in the <em>pszStr</em> array. On output, receives the required size of the buffer.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOT_SUFFICIENT_BUFFER</strong></dt> </dl> </td><td> <p>The buffer specified in <em>pszStr</em> is too small.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697327</doc-id>
        /// <unmanaged>HRESULT IMFNetProxyLocator::GetCurrentProxy([Out, Buffer, Optional] wchar_t* pszStr,[In] DWORD* pcchStr)</unmanaged>
        /// <unmanaged-short>IMFNetProxyLocator::GetCurrentProxy</unmanaged-short>
        public unsafe void GetCurrentProxy(System.IntPtr szStrRef, System.Int32 cchStrRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szStrRef, &cchStrRef, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Creates a new instance of the default proxy locator.</p>
        /// </summary>
        /// <param name = "proxyLocatorOut"><dd> <p>Receives a reference to the new proxy locator object's <strong><see cref = "SharpDX.MediaFoundation.NetProxyLocator"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697210</doc-id>
        /// <unmanaged>HRESULT IMFNetProxyLocator::Clone([In] IMFNetProxyLocator** ppProxyLocator)</unmanaged>
        /// <unmanaged-short>IMFNetProxyLocator::Clone</unmanaged-short>
        public unsafe void Clone(out SharpDX.MediaFoundation.NetProxyLocator proxyLocatorOut)
        {
            System.IntPtr proxyLocatorOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &proxyLocatorOut_, (*(void ***)this._nativePointer)[7]);
            if (proxyLocatorOut_ != System.IntPtr.Zero)
                proxyLocatorOut = new SharpDX.MediaFoundation.NetProxyLocator(proxyLocatorOut_);
            else
                proxyLocatorOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("e9cd0384-a268-4bb4-82de-658d53574d41")]
    public partial class NetProxyLocatorFactory : SharpDX.ComObject
    {
        public NetProxyLocatorFactory(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator NetProxyLocatorFactory(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new NetProxyLocatorFactory(nativePtr);
        /// <summary>
        /// <p> </p><p>Creates an <strong><see cref = "SharpDX.MediaFoundation.NetProxyLocator"/></strong> interface proxy locator object based on the protocol name.</p>
        /// </summary>
        /// <param name = "szProtocolRef">No documentation.</param>
        /// <param name = "proxyLocatorOut">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms694154</doc-id>
        /// <unmanaged>HRESULT IMFNetProxyLocatorFactory::CreateProxyLocator([In] const wchar_t* pszProtocol,[Out] IMFNetProxyLocator** ppProxyLocator)</unmanaged>
        /// <unmanaged-short>IMFNetProxyLocatorFactory::CreateProxyLocator</unmanaged-short>
        public unsafe void CreateProxyLocator(System.String szProtocolRef, out SharpDX.MediaFoundation.NetProxyLocator proxyLocatorOut)
        {
            System.IntPtr proxyLocatorOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (char *szProtocolRef_ = szProtocolRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szProtocolRef_, &proxyLocatorOut_, (*(void ***)this._nativePointer)[3]);
            if (proxyLocatorOut_ != System.IntPtr.Zero)
                proxyLocatorOut = new SharpDX.MediaFoundation.NetProxyLocator(proxyLocatorOut_);
            else
                proxyLocatorOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("091878a3-bf11-4a5c-bc9f-33995b06ef2d")]
    public partial class NetResourceFilter : SharpDX.ComObject
    {
        public NetResourceFilter(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator NetResourceFilter(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new NetResourceFilter(nativePtr);
        /// <summary>
        /// <p>Called when the byte stream redirects to a URL.</p>
        /// </summary>
        /// <param name = "szUrlRef"><dd> <p>The URL to which the connection has been redirected.</p> </dd></param>
        /// <param name = "vbCancelRef"><dd> <p>To cancel the redirection, set this parameter to <strong>VARIANT_TRUE</strong>. To allow the redirection, set this parameter to <strong>VARIANT_FALSE</strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh448041</doc-id>
        /// <unmanaged>HRESULT IMFNetResourceFilter::OnRedirect([In] const wchar_t* pszUrl,[Out] short* pvbCancel)</unmanaged>
        /// <unmanaged-short>IMFNetResourceFilter::OnRedirect</unmanaged-short>
        public unsafe void OnRedirect(System.String szUrlRef, out System.Int16 vbCancelRef)
        {
            SharpDX.Result __result__;
            fixed (void *vbCancelRef_ = &vbCancelRef)
                fixed (char *szUrlRef_ = szUrlRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szUrlRef_, vbCancelRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Called when the byte stream requests a URL.</p>
        /// </summary>
        /// <param name = "szUrlRef"><dd> <p>The URL that the byte stream is requesting.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh448042</doc-id>
        /// <unmanaged>HRESULT IMFNetResourceFilter::OnSendingRequest([In] const wchar_t* pszUrl)</unmanaged>
        /// <unmanaged-short>IMFNetResourceFilter::OnSendingRequest</unmanaged-short>
        public unsafe void OnSendingRequest(System.String szUrlRef)
        {
            SharpDX.Result __result__;
            fixed (char *szUrlRef_ = szUrlRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szUrlRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7BE19E73-C9BF-468a-AC5A-A5E8653BEC87")]
    public partial class NetSchemeHandlerConfig : SharpDX.ComObject
    {
        public NetSchemeHandlerConfig(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator NetSchemeHandlerConfig(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new NetSchemeHandlerConfig(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the number of protocols supported by the network scheme plug-in.</p>
        /// </summary>
        /// <doc-id>ms701625</doc-id>
        /// <unmanaged>GetNumberOfSupportedProtocols</unmanaged>
        /// <unmanaged-short>GetNumberOfSupportedProtocols</unmanaged-short>
        public System.Int32 NumberOfSupportedProtocols
        {
            get
            {
                GetNumberOfSupportedProtocols(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of protocols supported by the network scheme plug-in.</p>
        /// </summary>
        /// <param name = "cProtocolsRef"><dd> <p>Receives the number of protocols.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms701625</doc-id>
        /// <unmanaged>HRESULT IMFNetSchemeHandlerConfig::GetNumberOfSupportedProtocols([Out] ULONG* pcProtocols)</unmanaged>
        /// <unmanaged-short>IMFNetSchemeHandlerConfig::GetNumberOfSupportedProtocols</unmanaged-short>
        internal unsafe void GetNumberOfSupportedProtocols(out System.Int32 cProtocolsRef)
        {
            SharpDX.Result __result__;
            fixed (void *cProtocolsRef_ = &cProtocolsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cProtocolsRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves a supported protocol by index</p>
        /// </summary>
        /// <param name = "nProtocolIndex"><dd> <p>Zero-based index of the protocol to retrieve. To get the number of supported protocols, call <strong>IMFNetSchemeHandlerConfig::GetNumberOfSupportedProtocols</strong>.</p> </dd></param>
        /// <param name = "nProtocolTypeRef"><dd> <p>Receives a member of the <strong><see cref = "SharpDX.MediaFoundation.NetsourceProtocolType"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>The value passed in the <em>nProtocolIndex</em> parameter was greater than the total number of supported protocols, returned by <strong>GetNumberOfSupportedProtocols</strong>.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697058</doc-id>
        /// <unmanaged>HRESULT IMFNetSchemeHandlerConfig::GetSupportedProtocolType([In] ULONG nProtocolIndex,[Out] MFNETSOURCE_PROTOCOL_TYPE* pnProtocolType)</unmanaged>
        /// <unmanaged-short>IMFNetSchemeHandlerConfig::GetSupportedProtocolType</unmanaged-short>
        public unsafe void GetSupportedProtocolType(System.Int32 nProtocolIndex, out SharpDX.MediaFoundation.NetsourceProtocolType nProtocolTypeRef)
        {
            SharpDX.Result __result__;
            fixed (void *nProtocolTypeRef_ = &nProtocolTypeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, nProtocolIndex, nProtocolTypeRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Not implemented in this release.</p>
        /// </summary>
        /// <returns><p>This method returns <see cref = "SharpDX.Result.Ok"/>.</p></returns>
        /// <doc-id>ms705604</doc-id>
        /// <unmanaged>HRESULT IMFNetSchemeHandlerConfig::ResetProtocolRolloverSettings()</unmanaged>
        /// <unmanaged-short>IMFNetSchemeHandlerConfig::ResetProtocolRolloverSettings</unmanaged-short>
        public unsafe void ResetProtocolRolloverSettings()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("09EF5BE3-C8A7-469e-8B70-73BF25BB193F")]
    public partial class ObjectReferenceStream : SharpDX.ComObject
    {
        public ObjectReferenceStream(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ObjectReferenceStream(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ObjectReferenceStream(nativePtr);
        /// <summary>
        /// <p> </p><p>Stores the data needed to marshal an interface across a process boundary.</p>
        /// </summary>
        /// <param name = "riid"><dd> <p>Interface identifier of the interface to marshal.</p> </dd></param>
        /// <param name = "unkRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms698988</doc-id>
        /// <unmanaged>HRESULT IMFObjectReferenceStream::SaveReference([In] const GUID&amp; riid,[In] IUnknown* pUnk)</unmanaged>
        /// <unmanaged-short>IMFObjectReferenceStream::SaveReference</unmanaged-short>
        public unsafe void SaveReference(System.Guid riid, SharpDX.IUnknown unkRef)
        {
            System.IntPtr unkRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            unkRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &riid, (void *)unkRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Marshals an interface from data stored in the stream.</p>
        /// </summary>
        /// <param name = "riid"><dd> <p>Interface identifier of the interface to marshal.</p> </dd></param>
        /// <param name = "vOut"><dd> <p>Receives a reference to the requested interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms705636</doc-id>
        /// <unmanaged>HRESULT IMFObjectReferenceStream::LoadReference([In] const GUID&amp; riid,[In] void** ppv)</unmanaged>
        /// <unmanaged-short>IMFObjectReferenceStream::LoadReference</unmanaged-short>
        public unsafe void LoadReference(System.Guid riid, System.IntPtr vOut)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &riid, (void *)vOut, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7F00F10A-DAED-41AF-AB26-5FDFA4DFBA3C")]
    public partial class OutputPolicy : SharpDX.MediaFoundation.MediaAttributes
    {
        public OutputPolicy(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator OutputPolicy(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new OutputPolicy(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieives a <see cref = "System.Guid"/> identifying the input trust authority (ITA) that created this output policy object.</p>
        /// </summary>
        /// <remarks>
        /// <p>All of the policy objects and output schemas from the same ITA should return the same originator identifier (including dynamic policy changes). This value enables the OTA to distinguish policies that originate from different ITAs, so that the OTA can update dynamic policies correctly.</p>
        /// </remarks>
        /// <doc-id>bb970379</doc-id>
        /// <unmanaged>GetOriginatorID</unmanaged>
        /// <unmanaged-short>GetOriginatorID</unmanaged-short>
        public System.Guid OriginatorID
        {
            get
            {
                GetOriginatorID(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the minimum version of the global revocation list (GRL) that must be enforced by the protected environment for this policy.</p>
        /// </summary>
        /// <doc-id>bb970389</doc-id>
        /// <unmanaged>GetMinimumGRLVersion</unmanaged>
        /// <unmanaged-short>GetMinimumGRLVersion</unmanaged-short>
        public System.Int32 MinimumGRLVersion
        {
            get
            {
                GetMinimumGRLVersion(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Retrieves a list of the output protection systems that the output trust authority (OTA) must enforce, along with configuration data for each protection system. </p>
        /// </summary>
        /// <param name = "dwAttributes"><dd> <p> Describes the output that is represented by the OTA calling this method. This value is a bitwise OR of zero or more of the following flags. </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>MFOUTPUTATTRIBUTE_BUS</strong></dt> </dl> </td><td> <p> Hardware bus. </p> </td></tr> <tr><td><dl> <dt><strong>MFOUTPUTATTRIBUTE_COMPRESSED</strong></dt> </dl> </td><td> <p> The output sends compressed data. If this flag is absent, the output sends uncompressed data. </p> </td></tr> <tr><td><dl> <dt><strong>MFOUTPUTATTRIBUTE_BUSIMPLEMENTATION</strong></dt> </dl> </td><td> <p> Reserved. Do not use. </p> </td></tr> <tr><td><dl> <dt><strong>MFOUTPUTATTRIBUTE_DIGITAL</strong></dt> </dl> </td><td> <p> The output sends a digital signal. If this flag is absent, the output sends an analog signal. </p> </td></tr> <tr><td><dl> <dt><strong>MFOUTPUTATTRIBUTE_NONSTANDARDIMPLEMENTATION</strong></dt> </dl> </td><td> <p> Reserved. Do not use. </p> </td></tr> <tr><td><dl> <dt><strong>MFOUTPUTATTRIBUTE_SOFTWARE</strong></dt> </dl> </td><td> <p> Reserved. Do not use. </p> </td></tr> <tr><td><dl> <dt><strong>MFOUTPUTATTRIBUTE_VIDEO</strong></dt> </dl> </td><td> <p> The output sends video data. If this flag is absent, the output sends audio data. </p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "guidOutputSubType"><dd> <p> Indicates a specific family of output connectors that is represented by the OTA calling this method. Possible values include the following. </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_AGP</strong></dt> </dl> </td><td> <p> AGP bus. </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_COMPONENT</strong></dt> </dl> </td><td> <p> Component video. </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_COMPOSITE</strong></dt> </dl> </td><td> <p> Composite video. </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_D_JPN</strong></dt> </dl> </td><td> <p> Japanese D connector. (Connector conforming to the EIAJ RC-5237 standard.) </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_DISPLAYPORT_EMBEDDED</strong></dt> </dl> </td><td> <p> Embedded DisplayPort connector. </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_DISPLAYPORT_EXTERNAL</strong></dt> </dl> </td><td> <p> External DisplayPort connector. </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_DVI</strong></dt> </dl> </td><td> <p> Digital video interface (DVI) connector. </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_HDMI</strong></dt> </dl> </td><td> <p> High-definition multimedia interface (HDMI) connector. </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_LVDS</strong></dt> </dl> </td><td> <p> Low voltage differential signaling (LVDS) connector.</p> <p>A connector using the LVDS interface to connect internally to a display device. The connection between the graphics adapter and the display device is permanent and not accessible to the user. Applications should not enable High-Bandwidth Digital Content Protection (HDCP) for this connector.</p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_PCI</strong></dt> </dl> </td><td> <p> PCI bus. </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_PCI_Express</strong></dt> </dl> </td><td> <p> PCI Express bus. </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_PCIX</strong></dt> </dl> </td><td> <p> PCI-X bus. </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_SDI</strong></dt> </dl> </td><td> <p> Audio data sent over a connector via S/PDIF. </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_SPDIF</strong></dt> </dl> </td><td> <p> Serial digital interface connector. </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_SVIDEO</strong></dt> </dl> </td><td> <p> S-Video connector. </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_UDI_EMBEDDED</strong></dt> </dl> </td><td> <p> Embedded Unified Display Interface (UDI). </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_UDI_EXTERNAL</strong></dt> </dl> </td><td> <p> External UDI. </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_UNKNOWN</strong></dt> </dl> </td><td> <p> Unknown connector type. See Remarks. </p> </td></tr> <tr><td><dl> <dt><strong>MFCONNECTOR_VGA</strong></dt> </dl> </td><td> <p> VGA connector. </p> </td></tr> <tr><td><dl> <dt><strong> MFCONNECTOR_MIRACAST</strong></dt> </dl> </td><td> <p>Miracast wireless connector. </p> <p>Supported in Windows?8.1 and later.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "rgGuidProtectionSchemasSupported"><dd> <p> Pointer to an array of <see cref = "System.Guid"/> values that specify which output protection systems are supported by the OTA that is calling this method. </p> </dd></param>
        /// <param name = "cProtectionSchemasSupported"><dd> <p> Number of elements in the <em>rgGuidProtectionSchemasSupported</em> array. </p> </dd></param>
        /// <param name = "requiredProtectionSchemasOut"><dd> <p> Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.Collection"/></strong> interface of a collection object. The caller must release the interface. Each object in the collection is an <strong><see cref = "SharpDX.MediaFoundation.OutputSchema"/></strong> reference. Each <strong><see cref = "SharpDX.MediaFoundation.OutputSchema"/></strong> reference defines an output protection system that the OTA must enforce. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The video OTA returns  the <strong>MFCONNECTOR_UNKNOWN</strong> connector type unless the Direct3D device is in full-screen mode. (Direct3D windowed mode is not generally a secure video mode.) You can override this behavior by implementing a custom EVR presenter that implements the <strong><see cref = "SharpDX.MediaFoundation.TrustedVideoPlugin"/></strong> interface.</p>
        /// </remarks>
        /// <doc-id>bb970362</doc-id>
        /// <unmanaged>HRESULT IMFOutputPolicy::GenerateRequiredSchemas([In] DWORD dwAttributes,[In] GUID guidOutputSubType,[In] GUID* rgGuidProtectionSchemasSupported,[In] DWORD cProtectionSchemasSupported,[Out] IMFCollection** ppRequiredProtectionSchemas)</unmanaged>
        /// <unmanaged-short>IMFOutputPolicy::GenerateRequiredSchemas</unmanaged-short>
        public unsafe void GenerateRequiredSchemas(System.Int32 dwAttributes, System.Guid guidOutputSubType, System.Guid rgGuidProtectionSchemasSupported, System.Int32 cProtectionSchemasSupported, out SharpDX.MediaFoundation.Collection requiredProtectionSchemasOut)
        {
            System.IntPtr requiredProtectionSchemasOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwAttributes, guidOutputSubType, &rgGuidProtectionSchemasSupported, cProtectionSchemasSupported, &requiredProtectionSchemasOut_, (*(void ***)this._nativePointer)[33]);
            if (requiredProtectionSchemasOut_ != System.IntPtr.Zero)
                requiredProtectionSchemasOut = new SharpDX.MediaFoundation.Collection(requiredProtectionSchemasOut_);
            else
                requiredProtectionSchemasOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieives a <see cref = "System.Guid"/> identifying the input trust authority (ITA) that created this output policy object.</p>
        /// </summary>
        /// <param name = "guidOriginatorIDRef"><dd> <p>Receives a <see cref = "System.Guid"/> that identifies the originating ITA.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>All of the policy objects and output schemas from the same ITA should return the same originator identifier (including dynamic policy changes). This value enables the OTA to distinguish policies that originate from different ITAs, so that the OTA can update dynamic policies correctly.</p>
        /// </remarks>
        /// <doc-id>bb970379</doc-id>
        /// <unmanaged>HRESULT IMFOutputPolicy::GetOriginatorID([Out] GUID* pguidOriginatorID)</unmanaged>
        /// <unmanaged-short>IMFOutputPolicy::GetOriginatorID</unmanaged-short>
        internal unsafe void GetOriginatorID(out System.Guid guidOriginatorIDRef)
        {
            guidOriginatorIDRef = default (System.Guid);
            SharpDX.Result __result__;
            fixed (void *guidOriginatorIDRef_ = &guidOriginatorIDRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, guidOriginatorIDRef_, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the minimum version of the global revocation list (GRL) that must be enforced by the protected environment for this policy.</p>
        /// </summary>
        /// <param name = "dwMinimumGRLVersionRef"><dd> <p>Receives the minimum GRL version.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970389</doc-id>
        /// <unmanaged>HRESULT IMFOutputPolicy::GetMinimumGRLVersion([Out] DWORD* pdwMinimumGRLVersion)</unmanaged>
        /// <unmanaged-short>IMFOutputPolicy::GetMinimumGRLVersion</unmanaged-short>
        internal unsafe void GetMinimumGRLVersion(out System.Int32 dwMinimumGRLVersionRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwMinimumGRLVersionRef_ = &dwMinimumGRLVersionRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwMinimumGRLVersionRef_, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7BE0FC5B-ABD9-44FB-A5C8-F50136E71599")]
    public partial class OutputSchema : SharpDX.MediaFoundation.MediaAttributes
    {
        public OutputSchema(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator OutputSchema(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new OutputSchema(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the output protection system that is represented by this object. Output protection systems are identified by <see cref = "System.Guid"/> value.</p>
        /// </summary>
        /// <doc-id>bb970414</doc-id>
        /// <unmanaged>GetSchemaType</unmanaged>
        /// <unmanaged-short>GetSchemaType</unmanaged-short>
        public System.Guid SchemaType
        {
            get
            {
                GetSchemaType(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Returns configuration data for the output protection system. The configuration data is used to enable or disable the protection system, and to set the protection levels.</p>
        /// </summary>
        /// <doc-id>bb970364</doc-id>
        /// <unmanaged>GetConfigurationData</unmanaged>
        /// <unmanaged-short>GetConfigurationData</unmanaged-short>
        public System.Int32 ConfigurationData
        {
            get
            {
                GetConfigurationData(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves a <see cref = "System.Guid"/> identifying the input trust authority (ITA) that generated this output schema object.</p>
        /// </summary>
        /// <remarks>
        /// <p>All of the policy objects and output schemas from the same ITA should return the same originator identifier (including dynamic policy changes). This value enables the OTA to distinguish policies that originate from different ITAs, so that the OTA can update dynamic policies correctly.</p>
        /// </remarks>
        /// <doc-id>bb970483</doc-id>
        /// <unmanaged>GetOriginatorID</unmanaged>
        /// <unmanaged-short>GetOriginatorID</unmanaged-short>
        public System.Guid OriginatorID
        {
            get
            {
                GetOriginatorID(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the output protection system that is represented by this object. Output protection systems are identified by <see cref = "System.Guid"/> value.</p>
        /// </summary>
        /// <param name = "guidSchemaTypeRef"><dd> <p>Receives the <see cref = "System.Guid"/> that identifies the output protection system.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970414</doc-id>
        /// <unmanaged>HRESULT IMFOutputSchema::GetSchemaType([Out] GUID* pguidSchemaType)</unmanaged>
        /// <unmanaged-short>IMFOutputSchema::GetSchemaType</unmanaged-short>
        internal unsafe void GetSchemaType(out System.Guid guidSchemaTypeRef)
        {
            guidSchemaTypeRef = default (System.Guid);
            SharpDX.Result __result__;
            fixed (void *guidSchemaTypeRef_ = &guidSchemaTypeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, guidSchemaTypeRef_, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Returns configuration data for the output protection system. The configuration data is used to enable or disable the protection system, and to set the protection levels.</p>
        /// </summary>
        /// <param name = "dwValRef"><dd> <p>Receives the configuration data. The meaning of this data depends on the output protection system.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970364</doc-id>
        /// <unmanaged>HRESULT IMFOutputSchema::GetConfigurationData([Out] DWORD* pdwVal)</unmanaged>
        /// <unmanaged-short>IMFOutputSchema::GetConfigurationData</unmanaged-short>
        internal unsafe void GetConfigurationData(out System.Int32 dwValRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwValRef_ = &dwValRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwValRef_, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves a <see cref = "System.Guid"/> identifying the input trust authority (ITA) that generated this output schema object.</p>
        /// </summary>
        /// <param name = "guidOriginatorIDRef"><dd> <p>Receives a <see cref = "System.Guid"/> that identifies the originating ITA.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>All of the policy objects and output schemas from the same ITA should return the same originator identifier (including dynamic policy changes). This value enables the OTA to distinguish policies that originate from different ITAs, so that the OTA can update dynamic policies correctly.</p>
        /// </remarks>
        /// <doc-id>bb970483</doc-id>
        /// <unmanaged>HRESULT IMFOutputSchema::GetOriginatorID([Out] GUID* pguidOriginatorID)</unmanaged>
        /// <unmanaged-short>IMFOutputSchema::GetOriginatorID</unmanaged-short>
        internal unsafe void GetOriginatorID(out System.Guid guidOriginatorIDRef)
        {
            guidOriginatorIDRef = default (System.Guid);
            SharpDX.Result __result__;
            fixed (void *guidOriginatorIDRef_ = &guidOriginatorIDRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, guidOriginatorIDRef_, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("D19F8E94-B126-4446-890C-5DCB7AD71453")]
    public partial class OutputTrustAuthority : SharpDX.ComObject
    {
        public OutputTrustAuthority(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator OutputTrustAuthority(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new OutputTrustAuthority(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the action that is performed by this output trust authority (OTA).</p>
        /// </summary>
        /// <doc-id>bb970410</doc-id>
        /// <unmanaged>GetAction</unmanaged>
        /// <unmanaged-short>GetAction</unmanaged-short>
        public SharpDX.MediaFoundation.PolicymanagerAction Action
        {
            get
            {
                GetAction(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the action that is performed by this output trust authority (OTA).</p>
        /// </summary>
        /// <param name = "actionRef"><dd> <p>Receives a member of the <see cref = "SharpDX.MediaFoundation.PolicymanagerAction"/> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970410</doc-id>
        /// <unmanaged>HRESULT IMFOutputTrustAuthority::GetAction([Out] MFPOLICYMANAGER_ACTION* pAction)</unmanaged>
        /// <unmanaged-short>IMFOutputTrustAuthority::GetAction</unmanaged-short>
        internal unsafe void GetAction(out SharpDX.MediaFoundation.PolicymanagerAction actionRef)
        {
            SharpDX.Result __result__;
            fixed (void *actionRef_ = &actionRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, actionRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Sets one or more policy objects on the output trust authority (OTA). </p>
        /// </summary>
        /// <param name = "policyOut"><dd> <p>The address of  an array of <strong><see cref = "SharpDX.MediaFoundation.OutputPolicy"/></strong> references. </p> </dd></param>
        /// <param name = "nPolicy"><dd> <p> The number of elements in the <em>ppPolicy</em> array. </p> </dd></param>
        /// <param name = "bTicketOut"><dd> <p> Receives either a reference to a buffer allocated by the OTA, or the value <strong><c>null</c></strong>. If this parameter receives a non-<strong><c>null</c></strong> value, the caller must release the buffer by calling <strong>CoTaskMemFree</strong>. </p> <strong>Note</strong>??Currently this parameter is reserved. An OTA should set the reference to <strong><c>null</c></strong>. ? </dd></param>
        /// <param name = "cbTicketRef"><dd> <p> Receives the size of the <em>ppbTicket</em> buffer, in bytes. If <em>ppbTicket</em> receives the value <strong><c>null</c></strong>, <em>pcbTicket</em> receives the value zero.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>MF_S_WAIT_FOR_POLICY_SET</strong></dt> </dl> </td><td> <p> The policy was negotiated successfully, but the OTA will enforce it asynchronously. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "PolicyUnsupported"/></strong></dt> </dl> </td><td> <p> The OTA does not support the requirements of this policy. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the method returns <strong>MF_S_WAIT_FOR_POLICY_SET</strong>, the OTA sends an MEPolicySet event when it enforces the policy.</p>
        /// </remarks>
        /// <doc-id>bb970572</doc-id>
        /// <unmanaged>HRESULT IMFOutputTrustAuthority::SetPolicy([In, Buffer, Optional] IMFOutputPolicy** ppPolicy,[In] DWORD nPolicy,[Out, Buffer, Optional] unsigned char** ppbTicket,[Out, Optional] DWORD* pcbTicket)</unmanaged>
        /// <unmanaged-short>IMFOutputTrustAuthority::SetPolicy</unmanaged-short>
        public unsafe void SetPolicy(SharpDX.MediaFoundation.OutputPolicy[] policyOut, System.Int32 nPolicy, System.Byte[] bTicketOut, out System.Int32 cbTicketRef)
        {
            System.IntPtr*policyOut_;
            policyOut_ = (System.IntPtr*)0;
            if (policyOut != null)
            {
                System.IntPtr*_policyOut = stackalloc System.IntPtr[policyOut.Length];
                policyOut_ = _policyOut;
            }

            SharpDX.Result __result__;
            if (policyOut != null)
                for (int i = 0; i < policyOut.Length; ++i)
                    (policyOut_)[i] = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.OutputPolicy>(policyOut[i]);
            fixed (void *cbTicketRef_ = &cbTicketRef)
                fixed (void *bTicketOut_ = bTicketOut)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)policyOut_, nPolicy, bTicketOut_, cbTicketRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Sets one or more policy objects on the output trust authority (OTA). </p>
        /// </summary>
        /// <param name = "policyOut"><dd> <p>The address of  an array of <strong><see cref = "SharpDX.MediaFoundation.OutputPolicy"/></strong> references. </p> </dd></param>
        /// <param name = "nPolicy"><dd> <p> The number of elements in the <em>ppPolicy</em> array. </p> </dd></param>
        /// <param name = "bTicketOut"><dd> <p> Receives either a reference to a buffer allocated by the OTA, or the value <strong><c>null</c></strong>. If this parameter receives a non-<strong><c>null</c></strong> value, the caller must release the buffer by calling <strong>CoTaskMemFree</strong>. </p> <strong>Note</strong>??Currently this parameter is reserved. An OTA should set the reference to <strong><c>null</c></strong>. ? </dd></param>
        /// <param name = "cbTicketRef"><dd> <p> Receives the size of the <em>ppbTicket</em> buffer, in bytes. If <em>ppbTicket</em> receives the value <strong><c>null</c></strong>, <em>pcbTicket</em> receives the value zero.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>MF_S_WAIT_FOR_POLICY_SET</strong></dt> </dl> </td><td> <p> The policy was negotiated successfully, but the OTA will enforce it asynchronously. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "PolicyUnsupported"/></strong></dt> </dl> </td><td> <p> The OTA does not support the requirements of this policy. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the method returns <strong>MF_S_WAIT_FOR_POLICY_SET</strong>, the OTA sends an MEPolicySet event when it enforces the policy.</p>
        /// </remarks>
        /// <doc-id>bb970572</doc-id>
        /// <unmanaged>HRESULT IMFOutputTrustAuthority::SetPolicy([In, Buffer, Optional] IMFOutputPolicy** ppPolicy,[In] DWORD nPolicy,[Out, Buffer, Optional] unsigned char** ppbTicket,[Out, Optional] DWORD* pcbTicket)</unmanaged>
        /// <unmanaged-short>IMFOutputTrustAuthority::SetPolicy</unmanaged-short>
        public unsafe void SetPolicy(SharpDX.ComArray<SharpDX.MediaFoundation.OutputPolicy> policyOut, System.Int32 nPolicy, System.Byte[] bTicketOut, out System.Int32 cbTicketRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbTicketRef_ = &cbTicketRef)
                fixed (void *bTicketOut_ = bTicketOut)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)(policyOut?.NativePointer ?? System.IntPtr.Zero), nPolicy, bTicketOut_, cbTicketRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Sets one or more policy objects on the output trust authority (OTA). </p>
        /// </summary>
        /// <param name = "policyOut"><dd> <p>The address of  an array of <strong><see cref = "SharpDX.MediaFoundation.OutputPolicy"/></strong> references. </p> </dd></param>
        /// <param name = "nPolicy"><dd> <p> The number of elements in the <em>ppPolicy</em> array. </p> </dd></param>
        /// <param name = "bTicketOut"><dd> <p> Receives either a reference to a buffer allocated by the OTA, or the value <strong><c>null</c></strong>. If this parameter receives a non-<strong><c>null</c></strong> value, the caller must release the buffer by calling <strong>CoTaskMemFree</strong>. </p> <strong>Note</strong>??Currently this parameter is reserved. An OTA should set the reference to <strong><c>null</c></strong>. ? </dd></param>
        /// <param name = "cbTicketRef"><dd> <p> Receives the size of the <em>ppbTicket</em> buffer, in bytes. If <em>ppbTicket</em> receives the value <strong><c>null</c></strong>, <em>pcbTicket</em> receives the value zero.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>MF_S_WAIT_FOR_POLICY_SET</strong></dt> </dl> </td><td> <p> The policy was negotiated successfully, but the OTA will enforce it asynchronously. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "PolicyUnsupported"/></strong></dt> </dl> </td><td> <p> The OTA does not support the requirements of this policy. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the method returns <strong>MF_S_WAIT_FOR_POLICY_SET</strong>, the OTA sends an MEPolicySet event when it enforces the policy.</p>
        /// </remarks>
        /// <doc-id>bb970572</doc-id>
        /// <unmanaged>HRESULT IMFOutputTrustAuthority::SetPolicy([In, Buffer, Optional] IMFOutputPolicy** ppPolicy,[In] DWORD nPolicy,[Out, Buffer, Optional] unsigned char** ppbTicket,[Out, Optional] DWORD* pcbTicket)</unmanaged>
        /// <unmanaged-short>IMFOutputTrustAuthority::SetPolicy</unmanaged-short>
        private unsafe void SetPolicy(System.IntPtr policyOut, System.Int32 nPolicy, System.IntPtr bTicketOut, System.IntPtr cbTicketRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)policyOut, nPolicy, (void *)bTicketOut, (void *)cbTicketRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5c6c44bf-1db6-435b-9249-e8cd10fdec96")]
    public partial class PluginControl : SharpDX.ComObject
    {
        public PluginControl(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PluginControl(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PluginControl(nativePtr);
        /// <summary>
        /// <p>Searches the preferred list for a class identifier (CLSID) that matches a specified key name.</p>
        /// </summary>
        /// <param name = "pluginType"><dd> <p>Member of the <strong><see cref = "SharpDX.MediaFoundation.PluginType"/></strong> enumeration, specifying the type of object.</p> </dd></param>
        /// <param name = "selector"><dd> <p>The key name to match. For more information about the format of key names, see the Remarks section of <strong><see cref = "SharpDX.MediaFoundation.PluginControl"/></strong>.</p> </dd></param>
        /// <param name = "clsid"><dd> <p>Receives a CLSID from the preferred list.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>E_INVALIDARG</strong></strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>HRESULT_FROM_WIN32(ERROR_NOT_FOUND)</strong></strong></dt> </dl> </td><td> <p>No CLSID matching this key was found.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>dd374304</doc-id>
        /// <unmanaged>HRESULT IMFPluginControl::GetPreferredClsid([In] DWORD pluginType,[In] const wchar_t* selector,[Out] GUID* clsid)</unmanaged>
        /// <unmanaged-short>IMFPluginControl::GetPreferredClsid</unmanaged-short>
        public unsafe void GetPreferredClsid(System.Int32 pluginType, System.String selector, out System.Guid clsid)
        {
            clsid = default (System.Guid);
            SharpDX.Result __result__;
            fixed (void *clsid_ = &clsid)
                fixed (char *selector_ = selector)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, pluginType, (void *)selector_, clsid_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a class identifier (CLSID) from the preferred list, specified by index value.</p>
        /// </summary>
        /// <param name = "pluginType"><dd> <p>Member of the <strong><see cref = "SharpDX.MediaFoundation.PluginType"/></strong> enumeration, specifying the type of object to enumerate.</p> </dd></param>
        /// <param name = "index"><dd> <p>The zero-based index of the CLSID to retrieve.</p> </dd></param>
        /// <param name = "selector"><dd> <p>Receives the key name associated with the CLSID. The caller must free the memory for the returned string by calling the <strong>CoTaskMemFree</strong> function. For more information about the format of key names, see the Remarks section of <strong><see cref = "SharpDX.MediaFoundation.PluginControl"/></strong>.</p> </dd></param>
        /// <param name = "clsid"><dd> <p>Receives the CLSID at the specified index.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>E_INVALIDARG</strong></strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>HRESULT_FROM_WIN32(ERROR_NO_MORE_ITEMS)</strong></strong></dt> </dl> </td><td> <p>The <em>index</em> parameter is out of range.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>dd374305</doc-id>
        /// <unmanaged>HRESULT IMFPluginControl::GetPreferredClsidByIndex([In] DWORD pluginType,[In] DWORD index,[Out] wchar_t** selector,[Out] GUID* clsid)</unmanaged>
        /// <unmanaged-short>IMFPluginControl::GetPreferredClsidByIndex</unmanaged-short>
        public unsafe void GetPreferredClsidByIndex(System.Int32 pluginType, System.Int32 index, System.IntPtr selector, out System.Guid clsid)
        {
            clsid = default (System.Guid);
            SharpDX.Result __result__;
            fixed (void *clsid_ = &clsid)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, pluginType, index, (void *)selector, clsid_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Adds a class identifier (CLSID) to the preferred list or removes a CLSID from the list.</p>
        /// </summary>
        /// <param name = "pluginType"><dd> <p>Member of the <strong><see cref = "SharpDX.MediaFoundation.PluginType"/></strong> enumeration, specifying the type of object.</p> </dd></param>
        /// <param name = "selector"><dd> <p>The key name for the CLSID. For more information about the format of key names, see the Remarks section of <strong><see cref = "SharpDX.MediaFoundation.PluginControl"/></strong>.</p> </dd></param>
        /// <param name = "clsid"><dd> <p>The CLSID to add to the list. If this parameter is <strong><c>null</c></strong>, the key/value entry specified by the <em>selector</em> parameter is removed from the list. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The preferred list is global to the caller's process. Calling this method does not affect the list in other process.</p>
        /// </remarks>
        /// <doc-id>dd374308</doc-id>
        /// <unmanaged>HRESULT IMFPluginControl::SetPreferredClsid([In] DWORD pluginType,[In] const wchar_t* selector,[In, Optional] const GUID* clsid)</unmanaged>
        /// <unmanaged-short>IMFPluginControl::SetPreferredClsid</unmanaged-short>
        public unsafe void SetPreferredClsid(System.Int32 pluginType, System.String selector, System.Guid? clsid)
        {
            System.Guid clsid_;
            SharpDX.Result __result__;
            if (clsid != null)
                clsid_ = clsid.Value;
            fixed (char *selector_ = selector)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, pluginType, (void *)selector_, clsid == null ? (void *)0 : &clsid_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries whether a class identifier (CLSID) appears in the blocked list.</p>
        /// </summary>
        /// <param name = "pluginType"><dd> <p>Member of the <strong><see cref = "SharpDX.MediaFoundation.PluginType"/></strong> enumeration, specifying the type of object for the query.</p> </dd></param>
        /// <param name = "clsid"><dd> <p>The CLSID to search for.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The specified CLSID appears in the blocked list.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>E_INVALIDARG</strong></strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>HRESULT_FROM_WIN32(ERROR_NOT_FOUND)</strong></strong></dt> </dl> </td><td> <p>The specified CLSID is not in the blocked list.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>dd374306</doc-id>
        /// <unmanaged>HRESULT IMFPluginControl::IsDisabled([In] DWORD pluginType,[In] const GUID&amp; clsid)</unmanaged>
        /// <unmanaged-short>IMFPluginControl::IsDisabled</unmanaged-short>
        public unsafe void IsDisabled(System.Int32 pluginType, System.Guid clsid)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, pluginType, &clsid, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a class identifier (CLSID) from the blocked list.</p>
        /// </summary>
        /// <param name = "pluginType"><dd> <p>Member of the <strong><see cref = "SharpDX.MediaFoundation.PluginType"/></strong> enumeration, specifying the type of object to enumerate.</p> </dd></param>
        /// <param name = "index"><dd> <p>The zero-based index of the CLSID to retrieve.</p> </dd></param>
        /// <param name = "clsid"><dd> <p>Receives the CLSID at the specified index.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>E_INVALIDARG</strong></strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>HRESULT_FROM_WIN32(ERROR_NO_MORE_ITEMS)</strong></strong></dt> </dl> </td><td> <p>The <em>index</em> parameter is out of range.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>dd374303</doc-id>
        /// <unmanaged>HRESULT IMFPluginControl::GetDisabledByIndex([In] DWORD pluginType,[In] DWORD index,[Out] GUID* clsid)</unmanaged>
        /// <unmanaged-short>IMFPluginControl::GetDisabledByIndex</unmanaged-short>
        public unsafe void GetDisabledByIndex(System.Int32 pluginType, System.Int32 index, out System.Guid clsid)
        {
            clsid = default (System.Guid);
            SharpDX.Result __result__;
            fixed (void *clsid_ = &clsid)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, pluginType, index, clsid_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Adds a class identifier (CLSID) to the blocked list, or removes a CLSID from the list.</p>
        /// </summary>
        /// <param name = "pluginType"><dd> <p>Member of the <strong><see cref = "SharpDX.MediaFoundation.PluginType"/></strong> enumeration, specifying the type of object.</p> </dd></param>
        /// <param name = "clsid"><dd> <p>The CLSID to add or remove.</p> </dd></param>
        /// <param name = "disabled"><dd> <p>Specifies whether to add or remove the CSLID. If the value is <strong>TRUE</strong>, the method adds the CLSID to the blocked list. Otherwise, the method removes it from the list.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>E_INVALIDARG</strong></strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> The blocked list is global to the caller's process. Calling this method does not affect the list in other processes. </p>
        /// </remarks>
        /// <doc-id>dd374307</doc-id>
        /// <unmanaged>HRESULT IMFPluginControl::SetDisabled([In] DWORD pluginType,[In] const GUID&amp; clsid,[In] BOOL disabled)</unmanaged>
        /// <unmanaged-short>IMFPluginControl::SetDisabled</unmanaged-short>
        public unsafe void SetDisabled(System.Int32 pluginType, System.Guid clsid, SharpDX.Mathematics.Interop.RawBool disabled)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, pluginType, &clsid, disabled, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("C6982083-3DDC-45CB-AF5E-0F7A8CE4DE77")]
    public partial class PluginControl2 : SharpDX.MediaFoundation.PluginControl
    {
        public PluginControl2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PluginControl2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PluginControl2(nativePtr);
        /// <summary>
        /// <p>Sets the policy for which media sources and transforms are enumerated.</p>
        /// </summary>
        /// <doc-id>hh448044</doc-id>
        /// <unmanaged>SetPolicy</unmanaged>
        /// <unmanaged-short>SetPolicy</unmanaged-short>
        public SharpDX.MediaFoundation.PluginControlPolicy Policy
        {
            set => SetPolicy(value);
        }

        /// <summary>
        /// <p>Sets the policy for which media sources and transforms are enumerated.</p>
        /// </summary>
        /// <param name = "policy"><dd> <p>A value from the <strong><see cref = "SharpDX.MediaFoundation.PluginControlPolicy"/></strong> enumeration that specifies the policy.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh448044</doc-id>
        /// <unmanaged>HRESULT IMFPluginControl2::SetPolicy([In] MF_PLUGIN_CONTROL_POLICY policy)</unmanaged>
        /// <unmanaged-short>IMFPluginControl2::SetPolicy</unmanaged-short>
        internal unsafe void SetPolicy(SharpDX.MediaFoundation.PluginControlPolicy policy)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)policy), (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("90EB3E6B-ECBF-45cc-B1DA-C6FE3EA70D57")]
    public partial class PMediaItem : SharpDX.ComObject
    {
        public PMediaItem(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PMediaItem(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PMediaItem(nativePtr);
        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets a reference to the MFPlay player object that created the media item.</p>
        /// </summary>
        /// <doc-id>dd374313</doc-id>
        /// <unmanaged>GetMediaPlayer</unmanaged>
        /// <unmanaged-short>GetMediaPlayer</unmanaged-short>
        public SharpDX.MediaFoundation.PMediaPlayer MediaPlayer
        {
            get
            {
                GetMediaPlayer(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the object that was used to create the media item.</p>
        /// </summary>
        /// <remarks>
        /// <p>The object reference is set if the application uses <strong>IMFPMediaPlayer::CreateMediaItemFromObject</strong> to create the media item. Otherwise, <strong>GetObject</strong> returns  MF_E_NOTFOUND.</p>
        /// </remarks>
        /// <doc-id>dd374315</doc-id>
        /// <unmanaged>GetObjectW</unmanaged>
        /// <unmanaged-short>GetObjectW</unmanaged-short>
        public SharpDX.IUnknown ObjectW
        {
            get
            {
                GetObjectW(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the application-defined value stored in the media item.</p>
        /// </summary>
        /// <remarks>
        /// <p>You can assign this value when you first create the media item, by specifying it in the <em>dwUserData</em> parameter of the <strong>IMFPMediaPlayer::CreateMediaItemFromURL</strong> or <strong>IMFPMediaPlayer::CreateMediaItemFromObject</strong> method. To update the value, call <strong>IMFPMediaItem::SetUserData</strong>.</p><p>This method can be called after the player object is shut down.</p>
        /// </remarks>
        /// <doc-id>dd374321</doc-id>
        /// <unmanaged>GetUserData / SetUserData</unmanaged>
        /// <unmanaged-short>GetUserData</unmanaged-short>
        public System.IntPtr UserData
        {
            get
            {
                GetUserData(out var __output__);
                return __output__;
            }

            set => SetUserData(value);
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Queries whether the media item contains protected content.</p><strong>Note</strong>??Currently <strong><see cref = "SharpDX.MediaFoundation.PMediaPlayer"/></strong> does not support playing protected content.?
        /// </summary>
        /// <doc-id>dd374324</doc-id>
        /// <unmanaged>IsProtected</unmanaged>
        /// <unmanaged-short>IsProtected</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsProtected
        {
            get
            {
                IsProtected_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the number of streams (audio, video, and other) in the media item.</p>
        /// </summary>
        /// <doc-id>dd374314</doc-id>
        /// <unmanaged>GetNumberOfStreams</unmanaged>
        /// <unmanaged-short>GetNumberOfStreams</unmanaged-short>
        public System.Int32 NumberOfStreams
        {
            get
            {
                GetNumberOfStreams(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets various flags that describe the media item.</p>
        /// </summary>
        /// <doc-id>dd374311</doc-id>
        /// <unmanaged>GetCharacteristics</unmanaged>
        /// <unmanaged-short>GetCharacteristics</unmanaged-short>
        public System.Int32 Characteristics
        {
            get
            {
                GetCharacteristics(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets a property store that contains metadata for the source, such as author or title.</p>
        /// </summary>
        /// <doc-id>dd798056</doc-id>
        /// <unmanaged>GetMetadata</unmanaged>
        /// <unmanaged-short>GetMetadata</unmanaged-short>
        public SharpDX.ComObject Metadata
        {
            get
            {
                GetMetadata(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets a reference to the MFPlay player object that created the media item.</p>
        /// </summary>
        /// <param name = "mediaPlayerOut">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd374313</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::GetMediaPlayer([Out] IMFPMediaPlayer** ppMediaPlayer)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::GetMediaPlayer</unmanaged-short>
        internal unsafe void GetMediaPlayer(out SharpDX.MediaFoundation.PMediaPlayer mediaPlayerOut)
        {
            System.IntPtr mediaPlayerOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &mediaPlayerOut_, (*(void ***)this._nativePointer)[3]);
            if (mediaPlayerOut_ != System.IntPtr.Zero)
                mediaPlayerOut = new SharpDX.MediaFoundation.PMediaPlayer(mediaPlayerOut_);
            else
                mediaPlayerOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the URL that was used to create the media item.</p>
        /// </summary>
        /// <param name = "wszURLOut">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>MF_E_NOTFOUND</strong></dt> </dl> </td><td> <p>No URL is associated with this media item.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The <strong>IMFPMediaPlayer::Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method applies when the application calls  <strong>IMFPMediaPlayer::CreateMediaItemFromURL</strong> to create a media item. If the application calls <strong>IMFPMediaPlayer::CreateMediaItemFromObject</strong> to create a media item, the  <strong>GetURL</strong> method for that media item returns  <strong>MF_E_NOTFOUND</strong>.</p>
        /// </remarks>
        /// <doc-id>dd374320</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::GetURL([Out] wchar_t** ppwszURL)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::GetURL</unmanaged-short>
        public unsafe void GetURL(System.IntPtr wszURLOut)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszURLOut, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the object that was used to create the media item.</p>
        /// </summary>
        /// <param name = "iUnknownOut">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>MF_E_NOTFOUND</strong></dt> </dl> </td><td> <p>The media item was created from a URL, not from an object.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The <strong>IMFPMediaPlayer::Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The object reference is set if the application uses <strong>IMFPMediaPlayer::CreateMediaItemFromObject</strong> to create the media item. Otherwise, <strong>GetObject</strong> returns  MF_E_NOTFOUND.</p>
        /// </remarks>
        /// <doc-id>dd374315</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::GetObjectW([Out] IUnknown** ppIUnknown)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::GetObjectW</unmanaged-short>
        internal unsafe void GetObjectW(out SharpDX.IUnknown iUnknownOut)
        {
            System.IntPtr iUnknownOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &iUnknownOut_, (*(void ***)this._nativePointer)[5]);
            if (iUnknownOut_ != System.IntPtr.Zero)
                iUnknownOut = new SharpDX.ComObject(iUnknownOut_);
            else
                iUnknownOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the application-defined value stored in the media item.</p>
        /// </summary>
        /// <param name = "dwUserDataRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>You can assign this value when you first create the media item, by specifying it in the <em>dwUserData</em> parameter of the <strong>IMFPMediaPlayer::CreateMediaItemFromURL</strong> or <strong>IMFPMediaPlayer::CreateMediaItemFromObject</strong> method. To update the value, call <strong>IMFPMediaItem::SetUserData</strong>.</p><p>This method can be called after the player object is shut down.</p>
        /// </remarks>
        /// <doc-id>dd374321</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::GetUserData([Out] ULONG_PTR* pdwUserData)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::GetUserData</unmanaged-short>
        internal unsafe void GetUserData(out System.IntPtr dwUserDataRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwUserDataRef_ = &dwUserDataRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwUserDataRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Stores an application-defined value in the media item.</p>
        /// </summary>
        /// <param name = "dwUserData">No documentation.</param>
        /// <returns><p>This method can return one of these values.</p></returns>
        /// <remarks>
        /// <p>This method can be called after the player object is shut down.</p>
        /// </remarks>
        /// <doc-id>dd374328</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::SetUserData([In] ULONG_PTR dwUserData)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::SetUserData</unmanaged-short>
        internal unsafe void SetUserData(System.IntPtr dwUserData)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)dwUserData, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the start and stop times for the media item.</p>
        /// </summary>
        /// <param name = "guidStartPositionTypeRef">No documentation.</param>
        /// <param name = "vStartValueRef">No documentation.</param>
        /// <param name = "guidStopPositionTypeRef">No documentation.</param>
        /// <param name = "vStopValueRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The <em>pguidStartPositionType</em> and <em>pguidStopPositionType</em> parameters receive the units of time that are used. Currently, the only supported value is <strong>MFP_POSITIONTYPE_100NS</strong>.</p><table> <tr><th>Value</th><th>Description</th></tr> <tr><td>MFP_POSITIONTYPE_100NS</td><td>100-nanosecond units. The time parameter (<em>pvStartValue</em> or <em>pvStopValue</em>) uses the following data type:<ul> <li>Variant type (<strong>vt</strong>): VT_I8</li> <li>Variant member: <strong>hVal</strong></li> </ul> </td></tr> </table><p>?</p>
        /// </remarks>
        /// <doc-id>dd374317</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::GetStartStopPosition([Out, Optional] GUID* pguidStartPositionType,[Out, Optional] PROPVARIANT* pvStartValue,[Out, Optional] GUID* pguidStopPositionType,[Out, Optional] PROPVARIANT* pvStopValue)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::GetStartStopPosition</unmanaged-short>
        public unsafe void GetStartStopPosition(out System.Guid guidStartPositionTypeRef, out SharpDX.Win32.Variant vStartValueRef, out System.Guid guidStopPositionTypeRef, out SharpDX.Win32.Variant vStopValueRef)
        {
            guidStartPositionTypeRef = default (System.Guid);
            vStartValueRef = default (SharpDX.Win32.Variant);
            guidStopPositionTypeRef = default (System.Guid);
            vStopValueRef = default (SharpDX.Win32.Variant);
            SharpDX.Result __result__;
            fixed (void *vStopValueRef_ = &vStopValueRef)
                fixed (void *guidStopPositionTypeRef_ = &guidStopPositionTypeRef)
                    fixed (void *vStartValueRef_ = &vStartValueRef)
                        fixed (void *guidStartPositionTypeRef_ = &guidStartPositionTypeRef)
                            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, guidStartPositionTypeRef_, vStartValueRef_, guidStopPositionTypeRef_, vStopValueRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Sets the start and stop time for the media item.</p>
        /// </summary>
        /// <param name = "guidStartPositionTypeRef">No documentation.</param>
        /// <param name = "vStartValueRef">No documentation.</param>
        /// <param name = "guidStopPositionTypeRef">No documentation.</param>
        /// <param name = "vStopValueRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "OutOfRange"/></strong></dt> </dl> </td><td> <p>Invalid start or stop time. Any of the following can cause this error:</p> <ul> <li>Time less than zero.</li> <li>Time greater than the total duration of the media item.</li> <li>Stop time less than start time.</li> </ul> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>By default, a media item plays from the beginning to the end of the file. This method adjusts the start time and/or  the stop time:</p><ul> <li>To set the start time, pass non-<strong><c>null</c></strong> values for <em>pguidStartPositionType</em> and <em>pvStartValue</em>.</li> <li>To set the stop time, pass non-<strong><c>null</c></strong> values for <em>pguidStopPositionType</em> and <em>pvStopValue</em>.</li> </ul><p>The <em>pguidStartPositionType</em> and <em>pguidStopPositionType</em> parameters give the units of time that are used. Currently, the only supported value is <strong>MFP_POSITIONTYPE_100NS</strong>.</p><table> <tr><th>Value</th><th>Description</th></tr> <tr><td><strong>MFP_POSITIONTYPE_100NS</strong></td><td>100-nanosecond units. The time parameter (<em>pvStartValue</em> or <em>pvStopValue</em>) uses the following data type:<ul> <li>Variant type (<strong>vt</strong>): <strong>VT_I8</strong></li> <li>Variant member: <strong>hVal</strong></li> </ul> <p>To clear a previously set time, use an empty <strong><see cref = "SharpDX.Win32.Variant"/></strong> (<strong>VT_EMPTY</strong>).</p> </td></tr> </table><p>?</p><p>The adjusted start and stop times are used the next time that <strong>IMFPMediaPlayer::SetMediaItem</strong> is called with this media item. If the media item is already set on the player, the change does not happen unless you call <strong>SetMediaItem</strong> again.</p>
        /// </remarks>
        /// <doc-id>dd374325</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::SetStartStopPosition([In, Optional] const GUID* pguidStartPositionType,[In, Optional] const PROPVARIANT* pvStartValue,[In, Optional] const GUID* pguidStopPositionType,[In, Optional] const PROPVARIANT* pvStopValue)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::SetStartStopPosition</unmanaged-short>
        public unsafe void SetStartStopPosition(System.Guid? guidStartPositionTypeRef, SharpDX.Win32.Variant? vStartValueRef, System.Guid? guidStopPositionTypeRef, SharpDX.Win32.Variant? vStopValueRef)
        {
            System.Guid guidStartPositionTypeRef_;
            SharpDX.Win32.Variant vStartValueRef_;
            System.Guid guidStopPositionTypeRef_;
            SharpDX.Win32.Variant vStopValueRef_;
            SharpDX.Result __result__;
            if (guidStartPositionTypeRef != null)
                guidStartPositionTypeRef_ = guidStartPositionTypeRef.Value;
            if (vStartValueRef != null)
                vStartValueRef_ = vStartValueRef.Value;
            if (guidStopPositionTypeRef != null)
                guidStopPositionTypeRef_ = guidStopPositionTypeRef.Value;
            if (vStopValueRef != null)
                vStopValueRef_ = vStopValueRef.Value;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, guidStartPositionTypeRef == null ? (void *)0 : &guidStartPositionTypeRef_, vStartValueRef == null ? (void *)0 : &vStartValueRef_, guidStopPositionTypeRef == null ? (void *)0 : &guidStopPositionTypeRef_, vStopValueRef == null ? (void *)0 : &vStopValueRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Queries whether the media item contains a video stream.</p>
        /// </summary>
        /// <param name = "fHasVideoRef">No documentation.</param>
        /// <param name = "fSelectedRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> To select or deselect streams before playback starts, call <strong>IMFPMediaItem::SetStreamSelection</strong>.</p>
        /// </remarks>
        /// <doc-id>dd374323</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::HasVideo([Out, Optional] BOOL* pfHasVideo,[Out, Optional] BOOL* pfSelected)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::HasVideo</unmanaged-short>
        public unsafe void HasVideo(out SharpDX.Mathematics.Interop.RawBool fHasVideoRef, out SharpDX.Mathematics.Interop.RawBool fSelectedRef)
        {
            fHasVideoRef = default (SharpDX.Mathematics.Interop.RawBool);
            fSelectedRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fSelectedRef_ = &fSelectedRef)
                fixed (void *fHasVideoRef_ = &fHasVideoRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fHasVideoRef_, fSelectedRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Queries whether the media item contains an audio stream.</p>
        /// </summary>
        /// <param name = "fHasAudioRef">No documentation.</param>
        /// <param name = "fSelectedRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> To select or deselect streams before playback starts, call <strong>IMFPMediaItem::SetStreamSelection</strong>.</p>
        /// </remarks>
        /// <doc-id>dd374322</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::HasAudio([Out, Optional] BOOL* pfHasAudio,[Out, Optional] BOOL* pfSelected)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::HasAudio</unmanaged-short>
        public unsafe void HasAudio(out SharpDX.Mathematics.Interop.RawBool fHasAudioRef, out SharpDX.Mathematics.Interop.RawBool fSelectedRef)
        {
            fHasAudioRef = default (SharpDX.Mathematics.Interop.RawBool);
            fSelectedRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fSelectedRef_ = &fSelectedRef)
                fixed (void *fHasAudioRef_ = &fHasAudioRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fHasAudioRef_, fSelectedRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Queries whether the media item contains protected content.</p><strong>Note</strong>??Currently <strong><see cref = "SharpDX.MediaFoundation.PMediaPlayer"/></strong> does not support playing protected content.?
        /// </summary>
        /// <param name = "fProtectedRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd374324</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::IsProtected([Out] BOOL* pfProtected)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::IsProtected</unmanaged-short>
        internal unsafe void IsProtected_(out SharpDX.Mathematics.Interop.RawBool fProtectedRef)
        {
            fProtectedRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fProtectedRef_ = &fProtectedRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fProtectedRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the duration of the media item.</p>
        /// </summary>
        /// <param name = "guidPositionType">No documentation.</param>
        /// <param name = "vDurationValueRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The method returns the total duration of the content, regardless of any values set through <strong>IMFPMediaItem::SetStartStopPosition</strong>.</p>
        /// </remarks>
        /// <doc-id>dd374312</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::GetDuration([In] const GUID&amp; guidPositionType,[Out] PROPVARIANT* pvDurationValue)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::GetDuration</unmanaged-short>
        public unsafe void GetDuration(System.Guid guidPositionType, out SharpDX.Win32.Variant vDurationValueRef)
        {
            vDurationValueRef = default (SharpDX.Win32.Variant);
            SharpDX.Result __result__;
            fixed (void *vDurationValueRef_ = &vDurationValueRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidPositionType, vDurationValueRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the number of streams (audio, video, and other) in the media item.</p>
        /// </summary>
        /// <param name = "dwStreamCountRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd374314</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::GetNumberOfStreams([Out] DWORD* pdwStreamCount)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::GetNumberOfStreams</unmanaged-short>
        internal unsafe void GetNumberOfStreams(out System.Int32 dwStreamCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwStreamCountRef_ = &dwStreamCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamCountRef_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Queries whether a stream is selected to play.</p>
        /// </summary>
        /// <param name = "dwStreamIndex">No documentation.</param>
        /// <param name = "fEnabledRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> To select or deselect a stream, call <strong>IMFPMediaItem::SetStreamSelection</strong>. </p>
        /// </remarks>
        /// <doc-id>dd374319</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::GetStreamSelection([In] DWORD dwStreamIndex,[Out] BOOL* pfEnabled)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::GetStreamSelection</unmanaged-short>
        public unsafe void GetStreamSelection(System.Int32 dwStreamIndex, out SharpDX.Mathematics.Interop.RawBool fEnabledRef)
        {
            fEnabledRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fEnabledRef_ = &fEnabledRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, fEnabledRef_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Selects or deselects a stream.</p>
        /// </summary>
        /// <param name = "dwStreamIndex">No documentation.</param>
        /// <param name = "fEnabled">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>You can use this method to change which streams are selected. The change goes into effect the next time that <strong>IMFPMediaPlayer::SetMediaItem</strong> is called with this media item. If the media item is already set on the player, the change does not happen unless you call <strong>SetMediaItem</strong> again with this media item.</p>
        /// </remarks>
        /// <doc-id>dd374326</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::SetStreamSelection([In] DWORD dwStreamIndex,[In] BOOL fEnabled)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::SetStreamSelection</unmanaged-short>
        public unsafe void SetStreamSelection(System.Int32 dwStreamIndex, SharpDX.Mathematics.Interop.RawBool fEnabled)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, dwStreamIndex, fEnabled, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Queries the media item for a stream attribute.</p>
        /// </summary>
        /// <param name = "dwStreamIndex">No documentation.</param>
        /// <param name = "guidMFAttribute">No documentation.</param>
        /// <param name = "vValueRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Stream attributes describe an individual stream (audio, video, or other) within the presentation. To get an attribute that applies to the entire presentation, call <strong>IMFPMediaItem::GetPresentationAttribute</strong>.</p>
        /// </remarks>
        /// <doc-id>dd374318</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::GetStreamAttribute([In] DWORD dwStreamIndex,[In] const GUID&amp; guidMFAttribute,[Out] PROPVARIANT* pvValue)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::GetStreamAttribute</unmanaged-short>
        public unsafe void GetStreamAttribute(System.Int32 dwStreamIndex, System.Guid guidMFAttribute, out SharpDX.Win32.Variant vValueRef)
        {
            vValueRef = default (SharpDX.Win32.Variant);
            SharpDX.Result __result__;
            fixed (void *vValueRef_ = &vValueRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, &guidMFAttribute, vValueRef_, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Queries the media item for a presentation attribute.</p>
        /// </summary>
        /// <param name = "guidMFAttribute">No documentation.</param>
        /// <param name = "vValueRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Presentation attributes describe the presentation as a whole. To get an attribute that applies to an individual stream within the presentation, call <strong>IMFPMediaItem::GetStreamAttribute</strong>.</p>
        /// </remarks>
        /// <doc-id>dd374316</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::GetPresentationAttribute([In] const GUID&amp; guidMFAttribute,[Out] PROPVARIANT* pvValue)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::GetPresentationAttribute</unmanaged-short>
        public unsafe void GetPresentationAttribute(System.Guid guidMFAttribute, out SharpDX.Win32.Variant vValueRef)
        {
            vValueRef = default (SharpDX.Win32.Variant);
            SharpDX.Result __result__;
            fixed (void *vValueRef_ = &vValueRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidMFAttribute, vValueRef_, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets various flags that describe the media item.</p>
        /// </summary>
        /// <param name = "characteristicsRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd374311</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::GetCharacteristics([Out] unsigned int* pCharacteristics)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::GetCharacteristics</unmanaged-short>
        internal unsafe void GetCharacteristics(out System.Int32 characteristicsRef)
        {
            SharpDX.Result __result__;
            fixed (void *characteristicsRef_ = &characteristicsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, characteristicsRef_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p> Sets a media sink for the media item. A <em>media sink</em> is an object that consumes the data from one or more streams. </p>
        /// </summary>
        /// <param name = "dwStreamIndex">No documentation.</param>
        /// <param name = "mediaSinkRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>By default, the MFPlay player object renders audio streams to the Streaming Audio Renderer (SAR) and video streams to the Enhanced Video Renderer (EVR). You can use the <strong>SetStreamSink</strong> method to provide a different media sink for an audio or video stream; or to support other stream types besides audio and video. You can also use it to configure the SAR or EVR before they are used.</p><p>Call this method before calling <strong>IMFPMediaPlayer::SetMediaItem</strong>. Calling this method after <strong>SetMediaItem</strong> has no effect, unless you stop playback and call <strong>SetMediaItem</strong> again.</p><p>To reset the media item to use the default media sink, set <em>pMediaSink</em> to <strong><c>null</c></strong>.</p>
        /// </remarks>
        /// <doc-id>dd374327</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::SetStreamSink([In] DWORD dwStreamIndex,[In, Optional] IUnknown* pMediaSink)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::SetStreamSink</unmanaged-short>
        public unsafe void SetStreamSink(System.Int32 dwStreamIndex, SharpDX.IUnknown mediaSinkRef)
        {
            System.IntPtr mediaSinkRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mediaSinkRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(mediaSinkRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (void *)mediaSinkRef_, (*(void ***)this._nativePointer)[20]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets a property store that contains metadata for the source, such as author or title.</p>
        /// </summary>
        /// <param name = "metadataStoreOut">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd798056</doc-id>
        /// <unmanaged>HRESULT IMFPMediaItem::GetMetadata([Out] IPropertyStore** ppMetadataStore)</unmanaged>
        /// <unmanaged-short>IMFPMediaItem::GetMetadata</unmanaged-short>
        internal unsafe void GetMetadata(out SharpDX.ComObject metadataStoreOut)
        {
            System.IntPtr metadataStoreOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &metadataStoreOut_, (*(void ***)this._nativePointer)[21]);
            if (metadataStoreOut_ != System.IntPtr.Zero)
                metadataStoreOut = new SharpDX.ComObject(metadataStoreOut_);
            else
                metadataStoreOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("A714590A-58AF-430a-85BF-44F5EC838D85")]
    public partial class PMediaPlayer : SharpDX.ComObject
    {
        public PMediaPlayer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PMediaPlayer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PMediaPlayer(nativePtr);
        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the current playback rate.</p>
        /// </summary>
        /// <doc-id>dd374346</doc-id>
        /// <unmanaged>GetRate / SetRate</unmanaged>
        /// <unmanaged-short>GetRate</unmanaged-short>
        public System.Single Rate
        {
            get
            {
                GetRate(out var __output__);
                return __output__;
            }

            set => SetRate(value);
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the current playback state of the MFPlay player object.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method can be called after the player object has been shut down.</p><p>Many of the <strong><see cref = "SharpDX.MediaFoundation.PMediaPlayer"/></strong> methods complete asynchronously. While an asynchronous operation is pending, the current state is not updated until the operation completes. When the operation completes, the application receives an event callback, and the new state is given in the <strong><see cref = "SharpDX.MediaFoundation.PEventHeader"/></strong> structure that is passed to the callback.</p>
        /// </remarks>
        /// <doc-id>dd374347</doc-id>
        /// <unmanaged>GetState</unmanaged>
        /// <unmanaged-short>GetState</unmanaged-short>
        public SharpDX.MediaFoundation.PMediaPlayerState State
        {
            get
            {
                GetState(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets a reference to the current media item.</p>
        /// </summary>
        /// <remarks>
        /// <p>The <strong>IMFPMediaPlayer::SetMediaItem</strong> method is asynchronous. Therefore, while <strong>SetMediaItem</strong> is pending, <strong>GetMediaItem</strong> will not return the media item that was just set. Instead, the application should implement <strong><see cref = "SharpDX.MediaFoundation.PMediaPlayerCallback"/></strong> interface and handle the <strong>MFP_EVENT_TYPE_MEDIAITEM_SET</strong> event. For more information, see Receiving Events From the Player.</p><p>The previous remark also applies to setting the media item in the <strong>MFPCreateMediaPlayer</strong> function.</p>
        /// </remarks>
        /// <doc-id>dd374342</doc-id>
        /// <unmanaged>GetMediaItem / SetMediaItem</unmanaged>
        /// <unmanaged-short>GetMediaItem</unmanaged-short>
        public SharpDX.MediaFoundation.PMediaItem MediaItem
        {
            get
            {
                GetMediaItem(out var __output__);
                return __output__;
            }

            set => SetMediaItem(value);
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the current audio volume.</p>
        /// </summary>
        /// <doc-id>dd374351</doc-id>
        /// <unmanaged>GetVolume / SetVolume</unmanaged>
        /// <unmanaged-short>GetVolume</unmanaged-short>
        public System.Single Volume
        {
            get
            {
                GetVolume(out var __output__);
                return __output__;
            }

            set => SetVolume(value);
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the current audio balance.</p>
        /// </summary>
        /// <doc-id>dd374338</doc-id>
        /// <unmanaged>GetBalance / SetBalance</unmanaged>
        /// <unmanaged-short>GetBalance</unmanaged-short>
        public System.Single Balance
        {
            get
            {
                GetBalance(out var __output__);
                return __output__;
            }

            set => SetBalance(value);
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Queries whether the audio is muted.</p>
        /// </summary>
        /// <doc-id>dd374343</doc-id>
        /// <unmanaged>GetMute / SetMute</unmanaged>
        /// <unmanaged-short>GetMute</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool Mute
        {
            get
            {
                GetMute(out var __output__);
                return __output__;
            }

            set => SetMute(value);
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the video source rectangle.</p>
        /// </summary>
        /// <doc-id>dd743246</doc-id>
        /// <unmanaged>GetVideoSourceRect / SetVideoSourceRect</unmanaged>
        /// <unmanaged-short>GetVideoSourceRect</unmanaged-short>
        public SharpDX.MediaFoundation.VideoNormalizedRect VideoSourceRect
        {
            get
            {
                GetVideoSourceRect(out var __output__);
                return __output__;
            }

            set => SetVideoSourceRect(value);
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the current aspect-ratio correction mode. This mode controls whether the aspect ratio of the video is preserved during playback.</p>
        /// </summary>
        /// <doc-id>dd374337</doc-id>
        /// <unmanaged>GetAspectRatioMode / SetAspectRatioMode</unmanaged>
        /// <unmanaged-short>GetAspectRatioMode</unmanaged-short>
        public System.Int32 AspectRatioMode
        {
            get
            {
                GetAspectRatioMode(out var __output__);
                return __output__;
            }

            set => SetAspectRatioMode(value);
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the window where the video is displayed.</p>
        /// </summary>
        /// <remarks>
        /// <p>The video window is specified when you first call <strong>MFPCreateMediaPlayer</strong> to create the MFPlay player object.</p>
        /// </remarks>
        /// <doc-id>dd374350</doc-id>
        /// <unmanaged>GetVideoWindow</unmanaged>
        /// <unmanaged-short>GetVideoWindow</unmanaged-short>
        public System.IntPtr VideoWindow
        {
            get
            {
                GetVideoWindow(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the current color of the video border. The border color is used to letterbox the video.</p>
        /// </summary>
        /// <doc-id>dd374339</doc-id>
        /// <unmanaged>GetBorderColor / SetBorderColor</unmanaged>
        /// <unmanaged-short>GetBorderColor</unmanaged-short>
        public System.Int32 BorderColor
        {
            get
            {
                GetBorderColor(out var __output__);
                return __output__;
            }

            set => SetBorderColor(value);
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Starts playback.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method completes asynchronously.  When the operation completes, the application's <strong>IMFPMediaPlayerCallback::OnMediaPlayerEvent</strong> callback method is invoked. The event type is <strong>MFP_EVENT_TYPE_PLAY</strong>.</p>
        /// </remarks>
        /// <doc-id>dd374354</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::Play()</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::Play</unmanaged-short>
        public unsafe void Play()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Pauses playback. While playback is paused, the most recent video frame is displayed, and audio is silent.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method completes asynchronously.  When the operation completes, the application's <strong>IMFPMediaPlayerCallback::OnMediaPlayerEvent</strong> callback method is invoked. The event type is <strong>MFP_EVENT_TYPE_PAUSE</strong>.</p>
        /// </remarks>
        /// <doc-id>dd374353</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::Pause()</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::Pause</unmanaged-short>
        public unsafe void Pause()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Stops playback.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method completes asynchronously.  When the operation completes, the application's <strong>IMFPMediaPlayerCallback::OnMediaPlayerEvent</strong> callback method is invoked. The event type is <strong>MFP_EVENT_TYPE_STOP</strong>.</p><p>The current media item is still valid. After playback stops, the playback position resets to the beginning of the current media item. </p>
        /// </remarks>
        /// <doc-id>dd374368</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::Stop()</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::Stop</unmanaged-short>
        public unsafe void Stop()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Steps forward one video frame.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>Cannot frame step. Reasons for this error code include:</p> <ul> <li>There is no media item queued for playback.</li> <li>The current media item does not contain video.</li> </ul> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedRate"/></strong></dt> </dl> </td><td> <p>The media source does not support frame stepping, or the current playback rate is negative.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> This method completes asynchronously.  When the operation completes, the application's <strong>IMFPMediaPlayerCallback::OnMediaPlayerEvent</strong> callback method is invoked. The event type is <strong>MFP_EVENT_TYPE_FRAME_STEP</strong>.</p><p>The player object does not support frame stepping during reverse playback (that is, while the playback rate is negative).</p>
        /// </remarks>
        /// <doc-id>dd374336</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::FrameStep()</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::FrameStep</unmanaged-short>
        public unsafe void FrameStep()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Sets the playback position.</p>
        /// </summary>
        /// <param name = "guidPositionType">No documentation.</param>
        /// <param name = "vPositionValueRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>E_INVALIDARG</strong></strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>HRESULT_FROM_WIN32( ERROR_SEEK )</strong></strong></dt> </dl> </td><td> <p>The value of <em>pvPositionValue</em> is not valid.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>No media item has been queued.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If you call this method while playback is stopped, the new position takes effect after playback resumes.</p><p>This method completes asynchronously. When the operation completes, the application's <strong>IMFPMediaPlayerCallback::OnMediaPlayerEvent</strong> callback method is invoked. The event type is <strong>MFP_EVENT_TYPE_POSITION_SET</strong>.</p><p>If playback was started before <strong>SetPosition</strong> is called, playback resumes at the new position. If playback was paused, the video is refreshed to display the current frame at the new position. </p><p>If you make two consecutive calls to <strong>SetPosition</strong> with <em>guidPositionType</em> equal to <strong>MFP_POSITIONTYPE_100NS</strong>, and the second call is made before the first call has completed, the second call supersedes the first. The status code for the superseded call is set to <strong>S_FALSE</strong> in the event data for that call. This behavior prevents excessive latency from repeated calls to <strong>SetPosition</strong>, as each call may force the media source to perform a relatively lengthy seek operation. </p>
        /// </remarks>
        /// <doc-id>dd374363</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::SetPosition([In] const GUID&amp; guidPositionType,[In] const PROPVARIANT* pvPositionValue)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::SetPosition</unmanaged-short>
        public unsafe void SetPosition(System.Guid guidPositionType, SharpDX.Win32.Variant vPositionValueRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidPositionType, &vPositionValueRef, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the current playback position.</p>
        /// </summary>
        /// <param name = "guidPositionType">No documentation.</param>
        /// <param name = "vPositionValueRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>E_INVALIDARG</strong></strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>No media item has been queued.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The playback position is calculated relative to the start time of the media item, which can be specified by calling <strong>IMFPMediaItem::SetStartStopPosition</strong>. For example, if you set the start time to 20 seconds and the source duration is 60 seconds, the range of values returned by <strong>GetPosition</strong> is 0?40 seconds.</p>
        /// </remarks>
        /// <doc-id>dd374345</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::GetPosition([In] const GUID&amp; guidPositionType,[Out] PROPVARIANT* pvPositionValue)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::GetPosition</unmanaged-short>
        public unsafe void GetPosition(System.Guid guidPositionType, out SharpDX.Win32.Variant vPositionValueRef)
        {
            vPositionValueRef = default (SharpDX.Win32.Variant);
            SharpDX.Result __result__;
            fixed (void *vPositionValueRef_ = &vPositionValueRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidPositionType, vPositionValueRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the playback duration of the current media item.</p>
        /// </summary>
        /// <param name = "guidPositionType">No documentation.</param>
        /// <param name = "vDurationValueRef">No documentation.</param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Attributenotfound"/></strong></dt> </dl> </td><td> <p>The media source does not have a duration. This error can occur with a live source, such as a video camera.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>There is no current media item.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method calculates the playback duration, taking into account the start and stop times for the media item. To set the start and stop times, call <strong>IMFPMediaItem::SetStartStopPosition</strong> on the media item. To get the actual duration of the underlying media file, regardless of start and stop times, call <strong>IMFPMediaItem::GetDuration</strong>.</p><p>For example, suppose that you load a 30-second audio file and set the start time equal to 2 seconds and stop time equal to 10 seconds. The <strong>IMFPMediaItem::GetDuration</strong> method will return 30 seconds, but the <strong>IMFPMediaPlayer::GetDuration</strong> method will return 8 seconds.</p>
        /// </remarks>
        /// <doc-id>dd374340</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::GetDuration([In] const GUID&amp; guidPositionType,[Out] PROPVARIANT* pvDurationValue)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::GetDuration</unmanaged-short>
        public unsafe void GetDuration(System.Guid guidPositionType, out SharpDX.Win32.Variant vDurationValueRef)
        {
            vDurationValueRef = default (SharpDX.Win32.Variant);
            SharpDX.Result __result__;
            fixed (void *vDurationValueRef_ = &vDurationValueRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidPositionType, vDurationValueRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Sets the playback rate.</p>
        /// </summary>
        /// <param name = "flRate">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "OutOfRange"/></strong></strong></dt> </dl> </td><td> <p>The <em>flRate</em> parameter is zero.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method completes asynchronously.  When the operation completes, the application's <strong>IMFPMediaPlayerCallback::OnMediaPlayerEvent</strong> callback method is invoked. The event type is <strong>MFP_EVENT_TYPE_RATE_SET</strong>.</p><p>The method sets the nearest supported rate, which will depend on the underlying media source. For example, if <em>flRate</em> is 50 and the source's maximum rate is 8? normal rate, the method will set the rate to 8.0.  The actual rate is indicated in the event data for the <strong>MFP_EVENT_TYPE_RATE_SET</strong> event.</p><p>To find the range of supported rates, call <strong>IMFPMediaPlayer::GetSupportedRates</strong>.</p><p>This method does not support playback rates of zero, although Media Foundation defines a meaning for zero rates in some other contexts.</p><p>The new rate applies only to the current media item. Setting a new media item resets the playback rate to 1.0.</p>
        /// </remarks>
        /// <doc-id>dd374364</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::SetRate([In] float flRate)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::SetRate</unmanaged-short>
        internal unsafe void SetRate(System.Single flRate)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, flRate, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the current playback rate.</p>
        /// </summary>
        /// <param name = "flRateRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd374346</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::GetRate([Out] float* pflRate)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::GetRate</unmanaged-short>
        internal unsafe void GetRate(out System.Single flRateRef)
        {
            SharpDX.Result __result__;
            fixed (void *flRateRef_ = &flRateRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, flRateRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the range of supported playback rates.</p>
        /// </summary>
        /// <param name = "fForwardDirection">No documentation.</param>
        /// <param name = "flSlowestRateRef">No documentation.</param>
        /// <param name = "flFastestRateRef">No documentation.</param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "UnsupportedRate"/></strong></strong></dt> </dl> </td><td> <p>The current media item does not support playback in the requested direction (either forward or reverse).</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Playback rates are expressed as a ratio of the current rate to the normal rate. For example, 1.0 indicates normal playback speed, 0.5 indicates half speed, and 2.0 indicates twice speed. Positive values indicate forward playback, and negative values indicate reverse playback.
        /// </p>
        /// </remarks>
        /// <doc-id>dd374348</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::GetSupportedRates([In] BOOL fForwardDirection,[Out] float* pflSlowestRate,[Out] float* pflFastestRate)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::GetSupportedRates</unmanaged-short>
        public unsafe void GetSupportedRates(SharpDX.Mathematics.Interop.RawBool fForwardDirection, out System.Single flSlowestRateRef, out System.Single flFastestRateRef)
        {
            SharpDX.Result __result__;
            fixed (void *flFastestRateRef_ = &flFastestRateRef)
                fixed (void *flSlowestRateRef_ = &flSlowestRateRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, fForwardDirection, flSlowestRateRef_, flFastestRateRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the current playback state of the MFPlay player object.</p>
        /// </summary>
        /// <param name = "eStateRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method can be called after the player object has been shut down.</p><p>Many of the <strong><see cref = "SharpDX.MediaFoundation.PMediaPlayer"/></strong> methods complete asynchronously. While an asynchronous operation is pending, the current state is not updated until the operation completes. When the operation completes, the application receives an event callback, and the new state is given in the <strong><see cref = "SharpDX.MediaFoundation.PEventHeader"/></strong> structure that is passed to the callback.</p>
        /// </remarks>
        /// <doc-id>dd374347</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::GetState([Out] MFP_MEDIAPLAYER_STATE* peState)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::GetState</unmanaged-short>
        internal unsafe void GetState(out SharpDX.MediaFoundation.PMediaPlayerState eStateRef)
        {
            SharpDX.Result __result__;
            fixed (void *eStateRef_ = &eStateRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, eStateRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Creates a media item from a URL.</p>
        /// </summary>
        /// <param name = "wszURLRef">No documentation.</param>
        /// <param name = "fSync">No documentation.</param>
        /// <param name = "dwUserData">No documentation.</param>
        /// <param name = "mediaItemOut">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>E_INVALIDARG</strong></strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>Invalid request. This error can occur when <em>fSync</em> is <strong><see cref = "SharpDX.Result.False"/></strong> and the application did not provide a callback interface. See Remarks.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "UnsupportedScheme"/></strong></strong></dt> </dl> </td><td> <p>Unsupported protocol. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method does not queue the media item for playback. To queue the item for playback, call <strong>IMFPMediaPlayer::SetMediaItem</strong>.</p><p>The <strong>CreateMediaItemFromURL</strong> method can be called either synchronously or asynchronously: </p><ul> <li>If <em>fSync</em> is <strong>TRUE</strong>, the method completes synchronously. The <strong><see cref = "SharpDX.MediaFoundation.PMediaItem"/></strong> reference is returned in the <em>ppMediaItem</em> parameter. </li> <li>If <em>fSync</em> is <strong><see cref = "SharpDX.Result.False"/></strong>, the method completes asynchronously. When the operation completes, the application's <strong>IMFPMediaPlayerCallback::OnMediaPlayerEvent</strong> callback method is invoked. The event type is <strong>MFP_EVENT_TYPE_MEDIAITEM_CREATED</strong>. The event data contains the <strong><see cref = "SharpDX.MediaFoundation.PMediaItem"/></strong> reference for the new media item.</li> </ul><p>The callback interface is set when you first call <strong>MFPCreateMediaPlayer</strong> to create the MFPlay player object. If you do not provide a callback interface, the <em>fSync</em> parameter must be <strong>TRUE</strong>. Otherwise, <strong>CreateMediaItemFromURL</strong> returns <strong><see cref = "InvalidRequest"/></strong>. </p><p>If you make multiple asynchronous calls to <strong>CreateMediaItemFromURL</strong>, they are not guaranteed to complete in the same order. Use the <em>dwUserData</em> parameter to match created media items with pending requests.</p><p>Currently, this method returns <strong><see cref = "UnsupportedScheme"/></strong> if the URL specifies any of the following protocols: rtsp*, mms*, or mcast. If you want to use the Media Foundation network source with MFPlay, first use the Source Resolver to create the source, and then call <strong>IMFPMediaPlayer::CreateMediaItemFromObject</strong>.</p>
        /// </remarks>
        /// <doc-id>dd374335</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::CreateMediaItemFromURL([In] const wchar_t* pwszURL,[In] BOOL fSync,[In] ULONG_PTR dwUserData,[Out, Optional] IMFPMediaItem** ppMediaItem)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::CreateMediaItemFromURL</unmanaged-short>
        public unsafe void CreateMediaItemFromURL(System.String wszURLRef, SharpDX.Mathematics.Interop.RawBool fSync, System.IntPtr dwUserData, out SharpDX.MediaFoundation.PMediaItem mediaItemOut)
        {
            System.IntPtr mediaItemOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (char *wszURLRef_ = wszURLRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)wszURLRef_, fSync, (void *)dwUserData, &mediaItemOut_, (*(void ***)this._nativePointer)[14]);
            if (mediaItemOut_ != System.IntPtr.Zero)
                mediaItemOut = new SharpDX.MediaFoundation.PMediaItem(mediaItemOut_);
            else
                mediaItemOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Creates a media item from an object.</p>
        /// </summary>
        /// <param name = "iUnknownObjRef">No documentation.</param>
        /// <param name = "fSync">No documentation.</param>
        /// <param name = "dwUserData">No documentation.</param>
        /// <param name = "mediaItemOut">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>E_INVALIDARG</strong></strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>Invalid request. This error can occur when <em>fSync</em> is <strong><see cref = "SharpDX.Result.False"/></strong> and the application did not provide a callback interface. See Remarks.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The <em>pIUnknownObj</em> parameter must specify one of the following:</p><ul> <li>A reference to a media source. Media sources expose the <strong><see cref = "SharpDX.MediaFoundation.MediaSource"/></strong> interface. It is the caller's responsibility to call <strong>IMFMediaSource::Shutdown</strong> on the media source.</li> <li>A reference to a byte stream. Byte streams expose the <strong><see cref = "SharpDX.MediaFoundation.IByteStream"/></strong> interface. Internally, the method calls the <strong>IMFSourceResolver::CreateObjectFromByteStream</strong> method to create a media source from the byte stream. Therefore, a byte-stream handler must be registered for the byte stream. For more information about byte-stream handlers, see Scheme Handlers and Byte-Stream Handlers. </li> </ul><p>This method does not queue the media item for playback. To queue the item for playback, call <strong>IMFPMediaPlayer::SetMediaItem</strong>.</p><p>The <strong>CreateMediaItemFromObject</strong> method can be called either synchronously or asynchronously: </p><ul> <li>If <em>fSync</em> is <strong>TRUE</strong>, the method completes synchronously. The <strong><see cref = "SharpDX.MediaFoundation.PMediaItem"/></strong> reference is returned in the <em>ppMediaItem</em> parameter. </li> <li>If <em>fSync</em> is <strong><see cref = "SharpDX.Result.False"/></strong>, the method completes asynchronously. When the operation completes, the application's <strong>IMFPMediaPlayerCallback::OnMediaPlayerEvent</strong> callback method is invoked. The event type is <strong>MFP_EVENT_TYPE_MEDIAITEM_CREATED</strong>. The event data contains the <strong><see cref = "SharpDX.MediaFoundation.PMediaItem"/></strong> reference for the new media item.</li> </ul><p>The callback interface is set when you first call <strong>MFPCreateMediaPlayer</strong> to create the MFPlay player object. If you do not provide a callback interface, the <em>fSync</em> parameter must be <strong>TRUE</strong>. Otherwise, <strong>CreateMediaItemFromObject</strong> returns <strong><see cref = "InvalidRequest"/></strong>. </p><p>If you make multiple asynchronous calls to <strong>CreateMediaItemFromObject</strong>, they are not guaranteed to complete in the same order. Use the <em>dwUserData</em> parameter to match created media items with pending requests.</p>
        /// </remarks>
        /// <doc-id>dd374334</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::CreateMediaItemFromObject([In] IUnknown* pIUnknownObj,[In] BOOL fSync,[In] ULONG_PTR dwUserData,[Out, Optional] IMFPMediaItem** ppMediaItem)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::CreateMediaItemFromObject</unmanaged-short>
        public unsafe void CreateMediaItemFromObject(SharpDX.IUnknown iUnknownObjRef, SharpDX.Mathematics.Interop.RawBool fSync, System.IntPtr dwUserData, out SharpDX.MediaFoundation.PMediaItem mediaItemOut)
        {
            System.IntPtr iUnknownObjRef_ = System.IntPtr.Zero;
            System.IntPtr mediaItemOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iUnknownObjRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(iUnknownObjRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)iUnknownObjRef_, fSync, (void *)dwUserData, &mediaItemOut_, (*(void ***)this._nativePointer)[15]);
            if (mediaItemOut_ != System.IntPtr.Zero)
                mediaItemOut = new SharpDX.MediaFoundation.PMediaItem(mediaItemOut_);
            else
                mediaItemOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Queues a media item for playback.</p>
        /// </summary>
        /// <param name = "iMFPMediaItemRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>E_INVALIDARG</strong></strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "DrmUnsupported"/></strong></strong></dt> </dl> </td><td> <p>The media item contains protected content. MFPlay currently does not support protected content.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "NoAudioPlaybackDevice"/></strong></strong></dt> </dl> </td><td> <p>No audio playback device was found. This error can occur if the media source contains audio, but no audio playback devices are available on the system.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method completes asynchronously.  When the operation completes, the application's <strong>IMFPMediaPlayerCallback::OnMediaPlayerEvent</strong> callback method is invoked. The event type is <strong>MFP_EVENT_TYPE_MEDIAITEM_SET</strong>.</p><p>To create a media item, call <strong>IMFPMediaPlayer::CreateMediaItemFromObject</strong> or <strong>IMFPMediaPlayer::CreateMediaItemFromURL</strong>. A media item must be used with the same MFPlay player object that created that item. If the media item was created by a different instance of the player object, <strong>SetMediaItem</strong> returns <strong>E_INVALIDARG</strong>.
        /// </p>
        /// </remarks>
        /// <doc-id>dd374361</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::SetMediaItem([In] IMFPMediaItem* pIMFPMediaItem)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::SetMediaItem</unmanaged-short>
        internal unsafe void SetMediaItem(SharpDX.MediaFoundation.PMediaItem iMFPMediaItemRef)
        {
            System.IntPtr iMFPMediaItemRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iMFPMediaItemRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.PMediaItem>(iMFPMediaItemRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iMFPMediaItemRef_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Clears the current media item.</p><strong>Note</strong>??This method is currently not implemented.?
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method stops playback and releases the player object's references to the current media item.</p><p>This method completes asynchronously.  When the operation completes, the application's <strong>IMFPMediaPlayerCallback::OnMediaPlayerEvent</strong> callback method is invoked. The event type is <strong>MFP_EVENT_TYPE_MEDIAITEM_CLEARED</strong>.</p>
        /// </remarks>
        /// <doc-id>dd374332</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::ClearMediaItem()</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::ClearMediaItem</unmanaged-short>
        public unsafe void ClearMediaItem()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets a reference to the current media item.</p>
        /// </summary>
        /// <param name = "iMFPMediaItemOut">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong>E_FAIL</strong></strong></dt> </dl> </td><td> <p>There is no current media item.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "NotFound"/></strong></strong></dt> </dl> </td><td> <p>There is no current media item.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The <strong>IMFPMediaPlayer::SetMediaItem</strong> method is asynchronous. Therefore, while <strong>SetMediaItem</strong> is pending, <strong>GetMediaItem</strong> will not return the media item that was just set. Instead, the application should implement <strong><see cref = "SharpDX.MediaFoundation.PMediaPlayerCallback"/></strong> interface and handle the <strong>MFP_EVENT_TYPE_MEDIAITEM_SET</strong> event. For more information, see Receiving Events From the Player.</p><p>The previous remark also applies to setting the media item in the <strong>MFPCreateMediaPlayer</strong> function.</p>
        /// </remarks>
        /// <doc-id>dd374342</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::GetMediaItem([Out] IMFPMediaItem** ppIMFPMediaItem)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::GetMediaItem</unmanaged-short>
        internal unsafe void GetMediaItem(out SharpDX.MediaFoundation.PMediaItem iMFPMediaItemOut)
        {
            System.IntPtr iMFPMediaItemOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &iMFPMediaItemOut_, (*(void ***)this._nativePointer)[18]);
            if (iMFPMediaItemOut_ != System.IntPtr.Zero)
                iMFPMediaItemOut = new SharpDX.MediaFoundation.PMediaItem(iMFPMediaItemOut_);
            else
                iMFPMediaItemOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the current audio volume.</p>
        /// </summary>
        /// <param name = "flVolumeRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd374351</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::GetVolume([Out] float* pflVolume)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::GetVolume</unmanaged-short>
        internal unsafe void GetVolume(out System.Single flVolumeRef)
        {
            SharpDX.Result __result__;
            fixed (void *flVolumeRef_ = &flVolumeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, flVolumeRef_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Sets the audio volume.</p>
        /// </summary>
        /// <param name = "flVolume">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "OutOfRange"/></strong></dt> </dl> </td><td> <p>The <em>flVolume</em> parameter is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If you call this method before playback starts, the setting is applied after playback starts.</p><p>This method does not change the master volume level for the player's audio session. Instead, it adjusts the per-channel volume levels for audio stream(s) that belong to the current media item. Other streams in the audio session are not affected. For more information, see Managing the Audio Session.</p>
        /// </remarks>
        /// <doc-id>dd374366</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::SetVolume([In] float flVolume)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::SetVolume</unmanaged-short>
        internal unsafe void SetVolume(System.Single flVolume)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, flVolume, (*(void ***)this._nativePointer)[20]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the current audio balance.</p>
        /// </summary>
        /// <param name = "flBalanceRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd374338</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::GetBalance([Out] float* pflBalance)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::GetBalance</unmanaged-short>
        internal unsafe void GetBalance(out System.Single flBalanceRef)
        {
            SharpDX.Result __result__;
            fixed (void *flBalanceRef_ = &flBalanceRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, flBalanceRef_, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Sets the audio balance.</p>
        /// </summary>
        /// <param name = "flBalance">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "OutOfRange"/></strong></strong></dt> </dl> </td><td> <p>The <em>flBalance</em> parameter is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If you call this method before playback starts, the setting is applied when playback starts.</p>
        /// </remarks>
        /// <doc-id>dd374359</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::SetBalance([In] float flBalance)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::SetBalance</unmanaged-short>
        internal unsafe void SetBalance(System.Single flBalance)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, flBalance, (*(void ***)this._nativePointer)[22]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Queries whether the audio is muted.</p>
        /// </summary>
        /// <param name = "fMuteRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd374343</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::GetMute([Out] BOOL* pfMute)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::GetMute</unmanaged-short>
        internal unsafe void GetMute(out SharpDX.Mathematics.Interop.RawBool fMuteRef)
        {
            fMuteRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fMuteRef_ = &fMuteRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fMuteRef_, (*(void ***)this._nativePointer)[23]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Mutes or unmutes the audio.</p>
        /// </summary>
        /// <param name = "fMute">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>If you call this method before playback starts, the setting is applied after playback starts.</p><p> This method does not mute the entire audio session to which the player belongs. It mutes only the streams from the current media item. Other streams in the audio session are not affected. For more information, see Managing the Audio Session. 
        /// </p>
        /// </remarks>
        /// <doc-id>dd374362</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::SetMute([In] BOOL fMute)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::SetMute</unmanaged-short>
        internal unsafe void SetMute(SharpDX.Mathematics.Interop.RawBool fMute)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, fMute, (*(void ***)this._nativePointer)[24]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the size and aspect ratio of the video. These values are computed before any scaling is done to fit the video into the destination window.</p>
        /// </summary>
        /// <param name = "szVideoRef">No documentation.</param>
        /// <param name = "szARVideoRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>The current media item does not contain video.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>At least one parameter must be non-<strong><c>null</c></strong>.</p>
        /// </remarks>
        /// <doc-id>dd374344</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::GetNativeVideoSize([Out, Optional] SIZE* pszVideo,[Out, Optional] SIZE* pszARVideo)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::GetNativeVideoSize</unmanaged-short>
        public unsafe void GetNativeVideoSize(out SharpDX.Size2 szVideoRef, out SharpDX.Size2 szARVideoRef)
        {
            szVideoRef = default (SharpDX.Size2);
            szARVideoRef = default (SharpDX.Size2);
            SharpDX.Result __result__;
            fixed (void *szARVideoRef_ = &szARVideoRef)
                fixed (void *szVideoRef_ = &szVideoRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, szVideoRef_, szARVideoRef_, (*(void ***)this._nativePointer)[25]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the range of video sizes that can be displayed without significantly degrading performance or image quality.</p>
        /// </summary>
        /// <param name = "szMinRef">No documentation.</param>
        /// <param name = "szMaxRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>The current media item does not contain video.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>At least one parameter must be non-<strong><c>null</c></strong>. Sizes are given in pixels.</p>
        /// </remarks>
        /// <doc-id>dd374341</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::GetIdealVideoSize([Out, Optional] SIZE* pszMin,[Out, Optional] SIZE* pszMax)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::GetIdealVideoSize</unmanaged-short>
        public unsafe void GetIdealVideoSize(out SharpDX.Size2 szMinRef, out SharpDX.Size2 szMaxRef)
        {
            szMinRef = default (SharpDX.Size2);
            szMaxRef = default (SharpDX.Size2);
            SharpDX.Result __result__;
            fixed (void *szMaxRef_ = &szMaxRef)
                fixed (void *szMinRef_ = &szMinRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, szMinRef_, szMaxRef_, (*(void ***)this._nativePointer)[26]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Sets the video source rectangle.</p><p>MFPlay clips the video to this rectangle and stretches the rectangle to fill the video window.</p>
        /// </summary>
        /// <param name = "nrcSourceRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The current media item does not contain video.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>MFPlay stretches the source rectangle to fill the entire video window. By default, MFPlay maintains the source's correct aspect ratio, letterboxing if needed. The letterbox color is controlled by the <strong>IMFPMediaPlayer::SetBorderColor</strong> method.</p><p>This method fails if no media item is currently set, or if the current media item does not contain video.</p><p> To set the video position before playback starts, call this method inside your event handler for the <strong>MFP_EVENT_TYPE_MEDIAITEM_SET</strong> event. For more information, see <strong>IMFPMediaPlayerCallback::OnMediaPlayerEvent</strong>. </p>
        /// </remarks>
        /// <doc-id>dd743247</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::SetVideoSourceRect([In] const MFVideoNormalizedRect* pnrcSource)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::SetVideoSourceRect</unmanaged-short>
        internal unsafe void SetVideoSourceRect(SharpDX.MediaFoundation.VideoNormalizedRect nrcSourceRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &nrcSourceRef, (*(void ***)this._nativePointer)[27]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the video source rectangle.</p>
        /// </summary>
        /// <param name = "nrcSourceRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>The current media item does not contain video.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>dd743246</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::GetVideoSourceRect([Out] MFVideoNormalizedRect* pnrcSource)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::GetVideoSourceRect</unmanaged-short>
        internal unsafe void GetVideoSourceRect(out SharpDX.MediaFoundation.VideoNormalizedRect nrcSourceRef)
        {
            nrcSourceRef = default (SharpDX.MediaFoundation.VideoNormalizedRect);
            SharpDX.Result __result__;
            fixed (void *nrcSourceRef_ = &nrcSourceRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, nrcSourceRef_, (*(void ***)this._nativePointer)[28]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Specifies whether the aspect ratio of the video is preserved during playback.</p>
        /// </summary>
        /// <param name = "dwAspectRatioMode">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>The current media item does not contain video.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method fails if no media item is currently set, or if the current media item does not contain video.</p><p>To set the aspect-ratio mode before playback starts, call this method inside your event handler for the <strong>MFP_EVENT_TYPE_MEDIAITEM_SET</strong> event. For more information, see <strong>IMFPMediaPlayerCallback::OnMediaPlayerEvent</strong>.</p>
        /// </remarks>
        /// <doc-id>dd374358</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::SetAspectRatioMode([In] DWORD dwAspectRatioMode)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::SetAspectRatioMode</unmanaged-short>
        internal unsafe void SetAspectRatioMode(System.Int32 dwAspectRatioMode)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwAspectRatioMode, (*(void ***)this._nativePointer)[29]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the current aspect-ratio correction mode. This mode controls whether the aspect ratio of the video is preserved during playback.</p>
        /// </summary>
        /// <param name = "dwAspectRatioModeRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The current media item does not contain video.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>dd374337</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::GetAspectRatioMode([Out] DWORD* pdwAspectRatioMode)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::GetAspectRatioMode</unmanaged-short>
        internal unsafe void GetAspectRatioMode(out System.Int32 dwAspectRatioModeRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwAspectRatioModeRef_ = &dwAspectRatioModeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwAspectRatioModeRef_, (*(void ***)this._nativePointer)[30]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the window where the video is displayed.</p>
        /// </summary>
        /// <param name = "hwndVideoRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The video window is specified when you first call <strong>MFPCreateMediaPlayer</strong> to create the MFPlay player object.</p>
        /// </remarks>
        /// <doc-id>dd374350</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::GetVideoWindow([Out] HWND* phwndVideo)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::GetVideoWindow</unmanaged-short>
        internal unsafe void GetVideoWindow(out System.IntPtr hwndVideoRef)
        {
            SharpDX.Result __result__;
            fixed (void *hwndVideoRef_ = &hwndVideoRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, hwndVideoRef_, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Updates the video frame.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>The current media item does not contain video.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method when your application's video playback window receives either a <strong>WM_PAINT</strong> or <strong>WM_SIZE</strong> message. This method performs two functions: </p><ul> <li>Ensures that the video frame is repainted while playback is paused or stopped.  </li> <li>Adjusts the displayed video to match the current size of the video window.</li> </ul><strong>Important</strong>??Call the GDI <strong>BeginPaint</strong> function before calling  <strong>UpdateVideo</strong>.?
        /// </remarks>
        /// <doc-id>dd743248</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::UpdateVideo()</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::UpdateVideo</unmanaged-short>
        public unsafe void UpdateVideo()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Sets the color for the video border. The border color is used to letterbox the video.</p>
        /// </summary>
        /// <param name = "clr">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>The current media item does not contain video.</p> </td></tr> <tr><td> <dl> <dt><strong>M<strong>F_E_SHUTDOWN</strong></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method fails if no media item is currently set, or if the current media item does not contain video.</p><p>To set the border color before playback starts, call this method inside your event handler for the <strong>MFP_EVENT_TYPE_MEDIAITEM_SET</strong> event. For more information, see <strong>IMFPMediaPlayerCallback::OnMediaPlayerEvent</strong>.</p>
        /// </remarks>
        /// <doc-id>dd374360</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::SetBorderColor([In] COLORREF Clr)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::SetBorderColor</unmanaged-short>
        internal unsafe void SetBorderColor(System.Int32 clr)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, clr, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Gets the current color of the video border. The border color is used to letterbox the video.</p>
        /// </summary>
        /// <param name = "clrRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The current media item does not contain video.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>dd374339</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::GetBorderColor([Out] COLORREF* pClr)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::GetBorderColor</unmanaged-short>
        internal unsafe void GetBorderColor(out System.Int32 clrRef)
        {
            SharpDX.Result __result__;
            fixed (void *clrRef_ = &clrRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, clrRef_, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Applies an audio or video effect to playback.</p>
        /// </summary>
        /// <param name = "effectRef">No documentation.</param>
        /// <param name = "fOptional">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidIndex"/></strong></strong></dt> </dl> </td><td> <p>This effect was already added.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The object specified in the <em>pEffect</em> parameter can implement either a video effect or an audio effect. The effect is applied to any media items set after the method is called. It is not applied to the current media item. </p><p>For each media item, the effect is applied to the first selected stream of the matching type (audio or video). If a media item has two selected streams of the same type, the second stream does not receive the effect. The effect is ignored if the media item does not contain a stream that matches the effect type. For example, if you set a video effect and play a file that contains just audio, the video effect is ignored, although no error is raised.</p><p>The effect is applied to all subsequent media items, until the application removes the effect. To remove an effect, call <strong>IMFPMediaPlayer::RemoveEffect</strong> or <strong>IMFPMediaPlayer::RemoveAllEffects</strong>.</p><p>If you set multiple effects of the same type (audio or video), they are applied in the same order in which you call <strong>InsertEffect</strong>.</p>
        /// </remarks>
        /// <doc-id>dd374352</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::InsertEffect([In] IUnknown* pEffect,[In] BOOL fOptional)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::InsertEffect</unmanaged-short>
        public unsafe void InsertEffect(SharpDX.IUnknown effectRef, SharpDX.Mathematics.Interop.RawBool fOptional)
        {
            System.IntPtr effectRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            effectRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(effectRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)effectRef_, fOptional, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Removes an effect that was added with the <strong>IMFPMediaPlayer::InsertEffect</strong> method.</p>
        /// </summary>
        /// <param name = "effectRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotFound"/></strong></dt> </dl> </td><td> <p>The effect was not found.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The change applies to the next media item that is set on the player. The effect is not removed from the current media item.</p>
        /// </remarks>
        /// <doc-id>dd374356</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::RemoveEffect([In] IUnknown* pEffect)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::RemoveEffect</unmanaged-short>
        public unsafe void RemoveEffect(SharpDX.IUnknown effectRef)
        {
            System.IntPtr effectRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            effectRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(effectRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)effectRef_, (*(void ***)this._nativePointer)[36]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Removes all effects that were added with the <strong>IMFPMediaPlayer::InsertEffect</strong> method.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The change applies to the next media item that is set on the player. The effects are not removed from the current media item.</p>
        /// </remarks>
        /// <doc-id>dd374355</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::RemoveAllEffects()</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::RemoveAllEffects</unmanaged-short>
        public unsafe void RemoveAllEffects()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[37]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Shuts down the MFPlay player object and releases any resources the object is using.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>After this method is called, most <strong><see cref = "SharpDX.MediaFoundation.PMediaPlayer"/></strong> methods return <strong><see cref = "Shutdown"/></strong>. Also, any media items created from this instance of the player object are invalidated and most <strong><see cref = "SharpDX.MediaFoundation.PMediaItem"/></strong> methods also return <strong><see cref = "Shutdown"/></strong>.</p><p>The player object automatically shuts itself down when its reference count reaches zero. You can use the <strong>Shutdown</strong> method to shut down the player before all of the references have been released.</p>
        /// </remarks>
        /// <doc-id>dd374367</doc-id>
        /// <unmanaged>HRESULT IMFPMediaPlayer::Shutdown()</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayer::Shutdown</unmanaged-short>
        public unsafe void Shutdown()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[38]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("766C8FFB-5FDB-4fea-A28D-B912996F51BD")]
    public partial class PMediaPlayerCallback : SharpDX.ComObject
    {
        public PMediaPlayerCallback(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PMediaPlayerCallback(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PMediaPlayerCallback(nativePtr);
        /// <summary>
        /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Called by the MFPlay player object to notify the application of a playback event.</p>
        /// </summary>
        /// <param name = "eventHeaderRef">No documentation.</param>
        /// <remarks>
        /// <p> The specific type of playback event is given in the <strong>eEventType</strong> member of the <strong><see cref = "SharpDX.MediaFoundation.PEventHeader"/></strong> structure. This structure contains information that is common to all of the event types. Some event types use extended structures. A set of macros is defined for casting the <em>pEventHeader</em> reference to the correct structure type. For more information, see <strong><see cref = "SharpDX.MediaFoundation.PEventType"/></strong>. </p><p>It is safe to call <strong><see cref = "SharpDX.MediaFoundation.PMediaPlayer"/></strong> and <strong><see cref = "SharpDX.MediaFoundation.PMediaItem"/></strong> methods inside the <strong>OnMediaPlayer</strong> method. MFPlay is guaranteed not to reenter the <strong>OnMediaPlayer</strong> method. That is, calls to <strong>OnMediaPlayer</strong> are serialized, and the method will not be invoked again from inside <strong>OnMediaPlayer</strong>. </p>
        /// </remarks>
        /// <doc-id>dd374331</doc-id>
        /// <unmanaged>void IMFPMediaPlayerCallback::OnMediaPlayerEvent([In] MFP_EVENT_HEADER* pEventHeader)</unmanaged>
        /// <unmanaged-short>IMFPMediaPlayerCallback::OnMediaPlayerEvent</unmanaged-short>
        public unsafe void OnMediaPlayerEvent(ref SharpDX.MediaFoundation.PEventHeader eventHeaderRef)
        {
            SharpDX.MediaFoundation.PEventHeader.__Native eventHeaderRef_ = default (SharpDX.MediaFoundation.PEventHeader.__Native);
            eventHeaderRef.__MarshalTo(ref eventHeaderRef_);
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, &eventHeaderRef_, (*(void ***)this._nativePointer)[3]);
            eventHeaderRef.__MarshalFree(ref eventHeaderRef_);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("6C4E655D-EAD8-4421-B6B9-54DCDBBDF820")]
    public partial class PMPClient : SharpDX.ComObject
    {
        public PMPClient(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PMPClient(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PMPClient(nativePtr);
        /// <summary>
        /// <p> Provides a reference to the <strong><see cref = "SharpDX.MediaFoundation.PMPHost"/></strong> interface. </p>
        /// </summary>
        /// <remarks>
        /// <p>The <strong><see cref = "SharpDX.MediaFoundation.PMPHost"/></strong> reference is apartment threaded. The media source must add the reference to the global interface table (GIT) before using it.</p>
        /// </remarks>
        /// <doc-id>ms703915</doc-id>
        /// <unmanaged>SetPMPHost</unmanaged>
        /// <unmanaged-short>SetPMPHost</unmanaged-short>
        public SharpDX.MediaFoundation.PMPHost PMPHost
        {
            set => SetPMPHost(value);
        }

        /// <summary>
        /// <p> Provides a reference to the <strong><see cref = "SharpDX.MediaFoundation.PMPHost"/></strong> interface. </p>
        /// </summary>
        /// <param name = "pMPHostRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The <strong><see cref = "SharpDX.MediaFoundation.PMPHost"/></strong> reference is apartment threaded. The media source must add the reference to the global interface table (GIT) before using it.</p>
        /// </remarks>
        /// <doc-id>ms703915</doc-id>
        /// <unmanaged>HRESULT IMFPMPClient::SetPMPHost([In] IMFPMPHost* pPMPHost)</unmanaged>
        /// <unmanaged-short>IMFPMPClient::SetPMPHost</unmanaged-short>
        internal unsafe void SetPMPHost(SharpDX.MediaFoundation.PMPHost pMPHostRef)
        {
            System.IntPtr pMPHostRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            pMPHostRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.PMPHost>(pMPHostRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)pMPHostRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("c004f646-be2c-48f3-93a2-a0983eba1108")]
    public partial class PMPClientApp : SharpDX.ComObject
    {
        public PMPClientApp(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PMPClientApp(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PMPClientApp(nativePtr);
        /// <summary>
        /// <p>Sets a reference to the <strong><see cref = "SharpDX.MediaFoundation.PMPHostApp"/></strong> interface allowing a media source to create objects in the PMP process.</p>
        /// </summary>
        /// <doc-id>jj128317</doc-id>
        /// <unmanaged>SetPMPHost</unmanaged>
        /// <unmanaged-short>SetPMPHost</unmanaged-short>
        public SharpDX.MediaFoundation.PMPHostApp PMPHost
        {
            set => SetPMPHost(value);
        }

        /// <summary>
        /// <p>Sets a reference to the <strong><see cref = "SharpDX.MediaFoundation.PMPHostApp"/></strong> interface allowing a media source to create objects in the PMP process.</p>
        /// </summary>
        /// <param name = "pMPHostRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>jj128317</doc-id>
        /// <unmanaged>HRESULT IMFPMPClientApp::SetPMPHost([In] IMFPMPHostApp* pPMPHost)</unmanaged>
        /// <unmanaged-short>IMFPMPClientApp::SetPMPHost</unmanaged-short>
        internal unsafe void SetPMPHost(SharpDX.MediaFoundation.PMPHostApp pMPHostRef)
        {
            System.IntPtr pMPHostRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            pMPHostRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.PMPHostApp>(pMPHostRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)pMPHostRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("F70CA1A9-FDC7-4782-B994-ADFFB1C98606")]
    public partial class PMPHost : SharpDX.ComObject
    {
        public PMPHost(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PMPHost(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PMPHost(nativePtr);
        /// <summary>
        /// <p> Blocks the protected media path (PMP) process from ending. </p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>When this method is called, it increments the lock count on the PMP process. For every call to this method, the application should make a corresponding call to <strong>IMFPMPHost::UnlockProcess</strong>, which decrements the lock count. When the PMP process is ready to exit, it waits for about 3 seconds, or until the lock count reaches zero, before exiting.</p>
        /// </remarks>
        /// <doc-id>ms697003</doc-id>
        /// <unmanaged>HRESULT IMFPMPHost::LockProcess()</unmanaged>
        /// <unmanaged-short>IMFPMPHost::LockProcess</unmanaged-short>
        public unsafe void LockProcess()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Decrements the lock count on the protected media path (PMP) process. Call this method once for each call to <strong>IMFPMPHost::LockProcess</strong>. </p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>ms698984</doc-id>
        /// <unmanaged>HRESULT IMFPMPHost::UnlockProcess()</unmanaged>
        /// <unmanaged-short>IMFPMPHost::UnlockProcess</unmanaged-short>
        public unsafe void UnlockProcess()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Creates an object in the protect media path (PMP) process, from a CLSID. </p>
        /// </summary>
        /// <param name = "clsid"><dd> <p> The CLSID of the object to create. </p> </dd></param>
        /// <param name = "streamRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.Win32.IStream"/></strong> interface. This parameter can be <strong><c>null</c></strong>. If this parameter is not <strong><c>null</c></strong>, the PMP host queries the created object for the <strong>IPersistStream</strong> interface and calls <strong>IPersistStream::Load</strong>, passing in the <em>pStream</em> reference. </p> </dd></param>
        /// <param name = "riid"><dd> <p> The interface identifier (IID) of the interface to retrieve. </p> </dd></param>
        /// <param name = "vOut"><dd> <p> Receives a reference to the requested interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> You can use the <em>pStream</em> parameter to initialize the object after it is created. </p>
        /// </remarks>
        /// <doc-id>ms698995</doc-id>
        /// <unmanaged>HRESULT IMFPMPHost::CreateObjectByCLSID([In] const GUID&amp; clsid,[In] IStream* pStream,[In] const GUID&amp; riid,[In] void** ppv)</unmanaged>
        /// <unmanaged-short>IMFPMPHost::CreateObjectByCLSID</unmanaged-short>
        public unsafe void CreateObjectByCLSID(System.Guid clsid, SharpDX.Win32.IStream streamRef, System.Guid riid, System.IntPtr vOut)
        {
            System.IntPtr streamRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            streamRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.Win32.IStream>(streamRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &clsid, (void *)streamRef_, &riid, (void *)vOut, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("84d2054a-3aa1-4728-a3b0-440a418cf49c")]
    public partial class PMPHostApp : SharpDX.ComObject
    {
        public PMPHostApp(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PMPHostApp(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PMPHostApp(nativePtr);
        /// <summary>
        /// <p> Blocks the protected media path (PMP) process from ending. </p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>When this method is called, it increments the lock count on the PMP process. For every call to this method, the application should make a corresponding call to <strong>IMFPMPHostApp::UnlockProcess</strong>, which decrements the lock count. When the PMP process is ready to exit, it waits for about 3 seconds, or until the lock count reaches zero, before exiting.</p>
        /// </remarks>
        /// <doc-id>jj128320</doc-id>
        /// <unmanaged>HRESULT IMFPMPHostApp::LockProcess()</unmanaged>
        /// <unmanaged-short>IMFPMPHostApp::LockProcess</unmanaged-short>
        public unsafe void LockProcess()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Decrements the lock count on the protected media path (PMP) process. Call this method once for each call to <strong>IMFPMPHostApp::LockProcess</strong>. </p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>jj128321</doc-id>
        /// <unmanaged>HRESULT IMFPMPHostApp::UnlockProcess()</unmanaged>
        /// <unmanaged-short>IMFPMPHostApp::UnlockProcess</unmanaged-short>
        public unsafe void UnlockProcess()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Creates a Windows Runtime object in the protected media path (PMP) process. </p>
        /// </summary>
        /// <param name = "id"><dd> <p>Id of object to create.</p> </dd></param>
        /// <param name = "streamRef"><dd> <p>Data to be passed to the object by way of a <strong>IPersistStream</strong>.</p> </dd></param>
        /// <param name = "riid"><dd> <p> The interface identifier (IID) of the interface to retrieve. </p> </dd></param>
        /// <param name = "vOut"><dd> <p> Receives a reference to the created object. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>jj128319</doc-id>
        /// <unmanaged>HRESULT IMFPMPHostApp::ActivateClassById([In] const wchar_t* id,[In, Optional] IStream* pStream,[In] const GUID&amp; riid,[Out] void** ppv)</unmanaged>
        /// <unmanaged-short>IMFPMPHostApp::ActivateClassById</unmanaged-short>
        public unsafe void ActivateClassById(System.String id, SharpDX.Win32.IStream streamRef, System.Guid riid, out System.IntPtr vOut)
        {
            System.IntPtr streamRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            streamRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.Win32.IStream>(streamRef);
            fixed (void *vOut_ = &vOut)
                fixed (char *id_ = id)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)id_, (void *)streamRef_, &riid, vOut_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("994e23af-1cc2-493c-b9fa-46f1cb040fa4")]
    public partial class PMPServer : SharpDX.ComObject
    {
        public PMPServer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PMPServer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PMPServer(nativePtr);
        /// <summary>
        /// <p> </p><p>Blocks the protected media path (PMP) process from ending.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>When this method is called, it increments the lock count on the PMP process. For every call to this method, the application should make a corresponding call to IMFPMPServer::UnlockProcess, which decrements the lock count. When the PMP process is ready to exit, it waits for about 3 seconds, or until the lock count reaches zero, before exiting.</p>
        /// </remarks>
        /// <doc-id>ms701590</doc-id>
        /// <unmanaged>HRESULT IMFPMPServer::LockProcess()</unmanaged>
        /// <unmanaged-short>IMFPMPServer::LockProcess</unmanaged-short>
        public unsafe void LockProcess()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Decrements the lock count on the protected media path (PMP) process. Call this method once for each call to IMFPMPServer::LockProcess.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms696204</doc-id>
        /// <unmanaged>HRESULT IMFPMPServer::UnlockProcess()</unmanaged>
        /// <unmanaged-short>IMFPMPServer::UnlockProcess</unmanaged-short>
        public unsafe void UnlockProcess()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Creates an object in the protected media path (PMP) process.</p>
        /// </summary>
        /// <param name = "clsid"><dd> <p>CLSID of the object to create.</p> </dd></param>
        /// <param name = "riid"><dd> <p>Interface identifier of the interface to retrieve.</p> </dd></param>
        /// <param name = "objectOut"><dd> <p>Receives a reference to the requested interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms704806</doc-id>
        /// <unmanaged>HRESULT IMFPMPServer::CreateObjectByCLSID([In] const GUID&amp; clsid,[In] const GUID&amp; riid,[Out] void** ppObject)</unmanaged>
        /// <unmanaged-short>IMFPMPServer::CreateObjectByCLSID</unmanaged-short>
        public unsafe void CreateObjectByCLSID(System.Guid clsid, System.Guid riid, out System.IntPtr objectOut)
        {
            SharpDX.Result __result__;
            fixed (void *objectOut_ = &objectOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &clsid, &riid, objectOut_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("868CE85C-8EA9-4f55-AB82-B009A910A805")]
    public partial class PresentationClock : SharpDX.MediaFoundation.Clock
    {
        public PresentationClock(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PresentationClock(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PresentationClock(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the clock's presentation time source.</p>
        /// </summary>
        /// <doc-id>ms704730</doc-id>
        /// <unmanaged>GetTimeSource / SetTimeSource</unmanaged>
        /// <unmanaged-short>GetTimeSource</unmanaged-short>
        public SharpDX.MediaFoundation.PresentationTimeSource TimeSource
        {
            get
            {
                GetTimeSource(out var __output__);
                return __output__;
            }

            set => SetTimeSource(value);
        }

        /// <summary>
        /// <p> Retrieves the latest clock time. </p>
        /// </summary>
        /// <remarks>
        /// <p>This method does not attempt to smooth out jitter or otherwise account for any inaccuracies in the clock time.</p>
        /// </remarks>
        /// <doc-id>ms696209</doc-id>
        /// <unmanaged>GetTime</unmanaged>
        /// <unmanaged-short>GetTime</unmanaged-short>
        public System.Int64 Time
        {
            get
            {
                GetTime(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Sets the time source for the presentation clock. The time source is the object that drives the clock by providing the current time.</p>
        /// </summary>
        /// <param name = "timeSourceRef"><dd> <p>Pointer to the <see cref = "SharpDX.MediaFoundation.PresentationTimeSource"/> interface of the time source.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ClockNotSimple"/></strong></dt> </dl> </td><td> <p>The time source does not have a frequency of 10 MHz.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotInitializeD"/></strong></dt> </dl> </td><td> <p>The time source has not been initialized.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The presentation clock cannot start until it has a time source.</p><p>The time source is automatically registered to receive state change notifications from the clock, through the time source's <see cref = "SharpDX.MediaFoundation.ClockStateSink"/> interface, which all time sources must implement.</p><p>This time source have a frequency of 10 MHz. See IMFClock::GetClockCharacteristics. If not, the method returns <see cref = "ClockNotSimple"/>.</p>
        /// </remarks>
        /// <doc-id>ms694835</doc-id>
        /// <unmanaged>HRESULT IMFPresentationClock::SetTimeSource([In, Optional] IMFPresentationTimeSource* pTimeSource)</unmanaged>
        /// <unmanaged-short>IMFPresentationClock::SetTimeSource</unmanaged-short>
        internal unsafe void SetTimeSource(SharpDX.MediaFoundation.PresentationTimeSource timeSourceRef)
        {
            System.IntPtr timeSourceRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            timeSourceRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.PresentationTimeSource>(timeSourceRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)timeSourceRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the clock's presentation time source.</p>
        /// </summary>
        /// <param name = "timeSourceOut"><dd> <p>Receives a reference to the time source's <see cref = "SharpDX.MediaFoundation.PresentationTimeSource"/> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ClockNoTimeSource"/></strong></dt> </dl> </td><td> <p>No time source was set on this clock.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms704730</doc-id>
        /// <unmanaged>HRESULT IMFPresentationClock::GetTimeSource([Out] IMFPresentationTimeSource** ppTimeSource)</unmanaged>
        /// <unmanaged-short>IMFPresentationClock::GetTimeSource</unmanaged-short>
        internal unsafe void GetTimeSource(out SharpDX.MediaFoundation.PresentationTimeSource timeSourceOut)
        {
            System.IntPtr timeSourceOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &timeSourceOut_, (*(void ***)this._nativePointer)[9]);
            if (timeSourceOut_ != System.IntPtr.Zero)
                timeSourceOut = new SharpDX.MediaFoundation.PresentationTimeSource(timeSourceOut_);
            else
                timeSourceOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Retrieves the latest clock time. </p>
        /// </summary>
        /// <param name = "hnsClockTimeRef"><dd> <p> Receives the latest clock time, in 100-nanosecond units. The time is relative to when the clock was last started. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ClockNoTimeSource"/></strong></dt> </dl> </td><td> <p> The clock does not have a presentation time source. Call <strong>IMFPresentationClock::SetTimeSource</strong>. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method does not attempt to smooth out jitter or otherwise account for any inaccuracies in the clock time.</p>
        /// </remarks>
        /// <doc-id>ms696209</doc-id>
        /// <unmanaged>HRESULT IMFPresentationClock::GetTime([Out] longlong* phnsClockTime)</unmanaged>
        /// <unmanaged-short>IMFPresentationClock::GetTime</unmanaged-short>
        internal unsafe void GetTime(out System.Int64 hnsClockTimeRef)
        {
            SharpDX.Result __result__;
            fixed (void *hnsClockTimeRef_ = &hnsClockTimeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, hnsClockTimeRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Registers an object to be notified whenever the clock starts, stops, or pauses, or changes rate.</p>
        /// </summary>
        /// <param name = "stateSinkRef"><dd> <p>Pointer to the object's <see cref = "SharpDX.MediaFoundation.ClockStateSink"/> interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Before releasing the object, call IMFPresentationClock::RemoveClockStateSink to unregister the object for state-change notifications.</p>
        /// </remarks>
        /// <doc-id>ms703129</doc-id>
        /// <unmanaged>HRESULT IMFPresentationClock::AddClockStateSink([In, Optional] IMFClockStateSink* pStateSink)</unmanaged>
        /// <unmanaged-short>IMFPresentationClock::AddClockStateSink</unmanaged-short>
        public unsafe void AddClockStateSink(SharpDX.MediaFoundation.ClockStateSink stateSinkRef)
        {
            System.IntPtr stateSinkRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            stateSinkRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.ClockStateSink>(stateSinkRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)stateSinkRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Unregisters an object that is receiving state-change notifications from the clock.</p>
        /// </summary>
        /// <param name = "stateSinkRef"><dd> <p>Pointer to the object's <see cref = "SharpDX.MediaFoundation.ClockStateSink"/> interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms703032</doc-id>
        /// <unmanaged>HRESULT IMFPresentationClock::RemoveClockStateSink([In, Optional] IMFClockStateSink* pStateSink)</unmanaged>
        /// <unmanaged-short>IMFPresentationClock::RemoveClockStateSink</unmanaged-short>
        public unsafe void RemoveClockStateSink(SharpDX.MediaFoundation.ClockStateSink stateSinkRef)
        {
            System.IntPtr stateSinkRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            stateSinkRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.ClockStateSink>(stateSinkRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)stateSinkRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Starts the presentation clock.</p>
        /// </summary>
        /// <param name = "llClockStartOffset"><dd> <p>Initial starting time, in 100-nanosecond units. At the time the <strong>Start</strong> method is called, the clock's IMFPresentationClock::GetTime method returns this value, and the clock time increments from there. If the value is PRESENTATION_CURRENT_POSITION, the clock starts from its current position. Use this value if the clock is paused and you want to restart it from the same position.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ClockNoTimeSource"/></strong></dt> </dl> </td><td> <p>No time source was set on this clock.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is valid in all states (stopped, paused, or running).</p><p>If the clock is paused and restarted from the same position (<em>llClockStartOffset</em> is PRESENTATION_CURRENT_POSITION), the presentation clock sends an IMFClockStateSink::OnClockRestart notification. Otherwise, the clock sends an IMFClockStateSink::OnClockStart notification.</p><p>The presentation clock initiates the state change by calling <strong>OnClockStart</strong> or <strong>OnClockRestart</strong> on the clock's time source. This call is made synchronously. If it fails, the state change does not occur. If the call succeeds, the state changes, and the clock notifies the other state-change subscribers by calling their <strong>OnClockStart</strong> or <strong>OnClockRestart</strong> methods. These calls are made asynchronously.</p><p>If the clock is already running, calling <strong>Start</strong> again has the effect of seeking the clock to the new <em>StartOffset</em> position.</p>
        /// </remarks>
        /// <doc-id>ms702290</doc-id>
        /// <unmanaged>HRESULT IMFPresentationClock::Start([In] longlong llClockStartOffset)</unmanaged>
        /// <unmanaged-short>IMFPresentationClock::Start</unmanaged-short>
        public unsafe void Start(System.Int64 llClockStartOffset)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, llClockStartOffset, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Stops the presentation clock. While the clock is stopped, the clock time does not advance, and the clock's IMFPresentationClock::GetTime method returns zero.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ClockNoTimeSource"/></strong></dt> </dl> </td><td> <p>No time source was set on this clock.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ClockStateAlreadySet"/></strong></dt> </dl> </td><td> <p>The clock is already stopped.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is valid when the clock is running or paused.</p><p>The presentation clock initiates the state change by calling IMFClockStateSink::OnClockStop on the clock's time source. This call is made synchronously. If it fails, the state change does not occur. If the call succeeds, the state changes, and the clock notifies the other state-change subscribers by calling their <strong>OnClockStop</strong> methods. These calls are made asynchronously.</p>
        /// </remarks>
        /// <doc-id>ms697195</doc-id>
        /// <unmanaged>HRESULT IMFPresentationClock::Stop()</unmanaged>
        /// <unmanaged-short>IMFPresentationClock::Stop</unmanaged-short>
        public unsafe void Stop()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Pauses the presentation clock. While the clock is paused, the clock time does not advance, and the clock's IMFPresentationClock::GetTime returns the time at which the clock was paused.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ClockNoTimeSource"/></strong></dt> </dl> </td><td> <p>No time source was set on this clock.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ClockStateAlreadySet"/></strong></dt> </dl> </td><td> <p>The clock is already paused.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The clock is stopped. This request is not valid when the clock is stopped.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is valid when the clock is running. It is not valid when the clock is paused or stopped.</p><p>The presentation clock initiates the state change by calling IMFClockStateSink::OnClockPause on the clock's time source. This call is made synchronously. If it fails, the state change does not occur. If the call succeeds, the state changes, and the clock notifies the other state-change subscribers by calling their <strong>OnClockPause</strong> methods. These calls are made asynchronously.</p>
        /// </remarks>
        /// <doc-id>ms696201</doc-id>
        /// <unmanaged>HRESULT IMFPresentationClock::Pause()</unmanaged>
        /// <unmanaged-short>IMFPresentationClock::Pause</unmanaged-short>
        public unsafe void Pause()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("03cb2711-24d7-4db6-a17f-f3a7a479a536")]
    public partial class PresentationDescriptor : SharpDX.MediaFoundation.MediaAttributes
    {
        public PresentationDescriptor(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PresentationDescriptor(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PresentationDescriptor(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the number of stream descriptors in the presentation. Each stream descriptor contains information about one stream in the media source. To retrieve a stream descriptor, call the <strong>IMFPresentationDescriptor::GetStreamDescriptorByIndex</strong> method.</p>
        /// </summary>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms701621</doc-id>
        /// <unmanaged>GetStreamDescriptorCount</unmanaged>
        /// <unmanaged-short>GetStreamDescriptorCount</unmanaged-short>
        public System.Int32 StreamDescriptorCount
        {
            get
            {
                GetStreamDescriptorCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of stream descriptors in the presentation. Each stream descriptor contains information about one stream in the media source. To retrieve a stream descriptor, call the <strong>IMFPresentationDescriptor::GetStreamDescriptorByIndex</strong> method.</p>
        /// </summary>
        /// <param name = "dwDescriptorCountRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms701621</doc-id>
        /// <unmanaged>HRESULT IMFPresentationDescriptor::GetStreamDescriptorCount([Out] DWORD* pdwDescriptorCount)</unmanaged>
        /// <unmanaged-short>IMFPresentationDescriptor::GetStreamDescriptorCount</unmanaged-short>
        internal unsafe void GetStreamDescriptorCount(out System.Int32 dwDescriptorCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwDescriptorCountRef_ = &dwDescriptorCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwDescriptorCountRef_, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves a stream descriptor for a stream in the presentation. The stream descriptor contains information about the stream.</p>
        /// </summary>
        /// <param name = "dwIndex"><dd> <p>Zero-based index of the stream. To find the number of streams in the presentation, call the <strong>IMFPresentationDescriptor::GetStreamDescriptorCount</strong> method.</p> </dd></param>
        /// <param name = "fSelectedRef"><dd> <p>Receives a Boolean value. The value is <strong>TRUE</strong> if the stream is currently selected, or <strong><see cref = "SharpDX.Result.False"/></strong> if the stream is currently deselected. If a stream is selected, the media source generates data for that stream when <strong>IMFMediaSource::Start</strong> is called. The media source will not generated data for deselected streams. To select a stream, call <strong>IMFPresentationDescriptor::SelectStream</strong>.To deselect a stream, call <strong>IMFPresentationDescriptor::DeselectStream</strong>.</p> </dd></param>
        /// <param name = "descriptorOut"><dd> <p>Receives a reference to the stream descriptor's <strong><see cref = "SharpDX.MediaFoundation.StreamDescriptor"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms694924</doc-id>
        /// <unmanaged>HRESULT IMFPresentationDescriptor::GetStreamDescriptorByIndex([In] DWORD dwIndex,[Out] BOOL* pfSelected,[Out] IMFStreamDescriptor** ppDescriptor)</unmanaged>
        /// <unmanaged-short>IMFPresentationDescriptor::GetStreamDescriptorByIndex</unmanaged-short>
        public unsafe void GetStreamDescriptorByIndex(System.Int32 dwIndex, out SharpDX.Mathematics.Interop.RawBool fSelectedRef, out SharpDX.MediaFoundation.StreamDescriptor descriptorOut)
        {
            fSelectedRef = default (SharpDX.Mathematics.Interop.RawBool);
            System.IntPtr descriptorOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (void *fSelectedRef_ = &fSelectedRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwIndex, fSelectedRef_, &descriptorOut_, (*(void ***)this._nativePointer)[34]);
            if (descriptorOut_ != System.IntPtr.Zero)
                descriptorOut = new SharpDX.MediaFoundation.StreamDescriptor(descriptorOut_);
            else
                descriptorOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Selects a stream in the presentation.</p>
        /// </summary>
        /// <param name = "dwDescriptorIndex"><dd> <p>The stream number to select, indexed from zero. To find the number of streams in the presentation, call <strong>IMFPresentationDescriptor::GetStreamDescriptorCount</strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><em>dwDescriptorIndex</em> is out of range.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> If a stream is selected, the media source will generate data for that stream. The media source will not generated data for deselected streams. To deselect a stream, call <strong>IMFPresentationDescriptor::DeselectStream</strong>. </p><p> To query whether a stream is selected, call <strong>IMFPresentationDescriptor::GetStreamDescriptorByIndex</strong>. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms696272</doc-id>
        /// <unmanaged>HRESULT IMFPresentationDescriptor::SelectStream([In] DWORD dwDescriptorIndex)</unmanaged>
        /// <unmanaged-short>IMFPresentationDescriptor::SelectStream</unmanaged-short>
        public unsafe void SelectStream(System.Int32 dwDescriptorIndex)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwDescriptorIndex, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Deselects a stream in the presentation.</p>
        /// </summary>
        /// <param name = "dwDescriptorIndex"><dd> <p> The stream number to deselect, indexed from zero. To find the number of streams in the presentation, call the <strong>IMFPresentationDescriptor::GetStreamDescriptorCount</strong> method. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><em>dwDescriptorIndex</em> is out of range. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> If a stream is deselected, no data is generated for that stream. To select the stream again, call <strong>IMFPresentationDescriptor::SelectStream</strong>. </p><p> To query whether a stream is selected, call <strong>IMFPresentationDescriptor::GetStreamDescriptorByIndex</strong>. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms696266</doc-id>
        /// <unmanaged>HRESULT IMFPresentationDescriptor::DeselectStream([In] DWORD dwDescriptorIndex)</unmanaged>
        /// <unmanaged-short>IMFPresentationDescriptor::DeselectStream</unmanaged-short>
        public unsafe void DeselectStream(System.Int32 dwDescriptorIndex)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwDescriptorIndex, (*(void ***)this._nativePointer)[36]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Creates a copy of this presentation descriptor.</p>
        /// </summary>
        /// <param name = "presentationDescriptorOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.PresentationDescriptor"/></strong> interface of the new presentation descriptor. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> This method performs a shallow copy of the presentation descriptor. The stream descriptors are not cloned. Therefore, use caution when modifying the presentation presentation descriptor or its stream descriptors. </p><p> If the original presentation descriptor is from a media source, do not modify the presentation descriptor unless the source is stopped. If you use the presentation descriptor to configure a media sink, do not modify the presentation descriptor after the sink is configured. </p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms694028</doc-id>
        /// <unmanaged>HRESULT IMFPresentationDescriptor::Clone([Out] IMFPresentationDescriptor** ppPresentationDescriptor)</unmanaged>
        /// <unmanaged-short>IMFPresentationDescriptor::Clone</unmanaged-short>
        public unsafe void Clone(out SharpDX.MediaFoundation.PresentationDescriptor presentationDescriptorOut)
        {
            System.IntPtr presentationDescriptorOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &presentationDescriptorOut_, (*(void ***)this._nativePointer)[37]);
            if (presentationDescriptorOut_ != System.IntPtr.Zero)
                presentationDescriptorOut = new SharpDX.MediaFoundation.PresentationDescriptor(presentationDescriptorOut_);
            else
                presentationDescriptorOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7FF12CCE-F76F-41c2-863B-1666C8E5E139")]
    public partial class PresentationTimeSource : SharpDX.MediaFoundation.Clock
    {
        public PresentationTimeSource(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PresentationTimeSource(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PresentationTimeSource(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the underlying clock that the presentation time source uses to generate its clock times.</p>
        /// </summary>
        /// <remarks>
        /// <p>A presentation time source must support stopping, starting, pausing, and rate changes. However, in many cases the time source derives its clock times from a hardware clock or other device. The underlying clock is always running, and might not support rate changes.</p><p>Optionally, a time source can expose the underlying clock by implementing this method. The underlying clock is always running, even when the presentation time source is paused or stopped. (Therefore, the underlying clock returns the MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING flag in the <strong>IMFClock::GetClockCharacteristics</strong> method).</p><p>The underlying clock is useful if you want to make decisions based on the clock times while the presentation clock is stopped or paused.</p><p>If the time source does not expose an underlying clock, the method returns <see cref = "NoClock"/>.</p>
        /// </remarks>
        /// <doc-id>ms694071</doc-id>
        /// <unmanaged>GetUnderlyingClock</unmanaged>
        /// <unmanaged-short>GetUnderlyingClock</unmanaged-short>
        public SharpDX.MediaFoundation.Clock UnderlyingClock
        {
            get
            {
                GetUnderlyingClock(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the underlying clock that the presentation time source uses to generate its clock times.</p>
        /// </summary>
        /// <param name = "clockOut"><dd> <p>Receives a reference to the clock's <strong><see cref = "SharpDX.MediaFoundation.Clock"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoClock"/></strong></dt> </dl> </td><td> <p>This time source does not expose an underlying clock.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>A presentation time source must support stopping, starting, pausing, and rate changes. However, in many cases the time source derives its clock times from a hardware clock or other device. The underlying clock is always running, and might not support rate changes.</p><p>Optionally, a time source can expose the underlying clock by implementing this method. The underlying clock is always running, even when the presentation time source is paused or stopped. (Therefore, the underlying clock returns the MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING flag in the <strong>IMFClock::GetClockCharacteristics</strong> method).</p><p>The underlying clock is useful if you want to make decisions based on the clock times while the presentation clock is stopped or paused.</p><p>If the time source does not expose an underlying clock, the method returns <see cref = "NoClock"/>.</p>
        /// </remarks>
        /// <doc-id>ms694071</doc-id>
        /// <unmanaged>HRESULT IMFPresentationTimeSource::GetUnderlyingClock([Out] IMFClock** ppClock)</unmanaged>
        /// <unmanaged-short>IMFPresentationTimeSource::GetUnderlyingClock</unmanaged-short>
        internal unsafe void GetUnderlyingClock(out SharpDX.MediaFoundation.Clock clockOut)
        {
            System.IntPtr clockOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &clockOut_, (*(void ***)this._nativePointer)[8]);
            if (clockOut_ != System.IntPtr.Zero)
                clockOut = new SharpDX.MediaFoundation.Clock(clockOut_);
            else
                clockOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ef5dc845-f0d9-4ec9-b00c-cb5183d38434")]
    public partial class ProtectedEnvironmentAccess : SharpDX.ComObject
    {
        public ProtectedEnvironmentAccess(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ProtectedEnvironmentAccess(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ProtectedEnvironmentAccess(nativePtr);
        /// <summary>
        /// <p>Allows content protection systems to access the protected environment.</p>
        /// </summary>
        /// <param name = "inputLength"><dd> <p>The length in bytes of the input data.</p> </dd></param>
        /// <param name = "input"><dd> <p>A reference to the input data.</p> </dd></param>
        /// <param name = "outputLength"><dd> <p>The length in bytes of the output data.</p> </dd></param>
        /// <param name = "output"><dd> <p>A reference to the output data.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>See  <strong>MFCreateProtectedEnvironmentAccess</strong> for an example of how to create an <strong><see cref = "SharpDX.MediaFoundation.ProtectedEnvironmentAccess"/></strong> object and use the <strong>Call</strong> method.</p>
        /// </remarks>
        /// <doc-id>hh448046</doc-id>
        /// <unmanaged>HRESULT IMFProtectedEnvironmentAccess::Call([In] unsigned int inputLength,[In, Buffer] const unsigned char* input,[In] unsigned int outputLength,[Out, Buffer] unsigned char* output)</unmanaged>
        /// <unmanaged-short>IMFProtectedEnvironmentAccess::Call</unmanaged-short>
        public unsafe void Call(System.Int32 inputLength, System.Byte[] input, System.Int32 outputLength, System.Byte[] output)
        {
            SharpDX.Result __result__;
            fixed (void *output_ = output)
                fixed (void *input_ = input)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, inputLength, input_, outputLength, output_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the Global Revocation List (GLR).</p>
        /// </summary>
        /// <param name = "outputLength"><dd> <p>The length of the data returned in <strong>output</strong>.</p> </dd></param>
        /// <param name = "output"><dd> <p>Receives the contents of the global revocation list file.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Allows reading of the system Global Revocation List (GRL).  </p>
        /// </remarks>
        /// <doc-id>jj128322</doc-id>
        /// <unmanaged>HRESULT IMFProtectedEnvironmentAccess::ReadGRL([Out] unsigned int* outputLength,[Out, Buffer] unsigned char** output)</unmanaged>
        /// <unmanaged-short>IMFProtectedEnvironmentAccess::ReadGRL</unmanaged-short>
        public unsafe void ReadGRL(out System.Int32 outputLength, System.Byte[] output)
        {
            SharpDX.Result __result__;
            fixed (void *output_ = output)
                fixed (void *outputLength_ = &outputLength)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, outputLength_, output_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("EC15E2E9-E36B-4f7c-8758-77D452EF4CE7")]
    public partial class QualityAdvise : SharpDX.ComObject
    {
        public QualityAdvise(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator QualityAdvise(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new QualityAdvise(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the current drop mode.</p>
        /// </summary>
        /// <doc-id>ms702987</doc-id>
        /// <unmanaged>GetDropMode / SetDropMode</unmanaged>
        /// <unmanaged-short>GetDropMode</unmanaged-short>
        public SharpDX.MediaFoundation.QualityDropMode DropMode
        {
            get
            {
                GetDropMode(out var __output__);
                return __output__;
            }

            set => SetDropMode(value);
        }

        /// <summary>
        /// <p> </p><p>Retrieves the current quality level.</p>
        /// </summary>
        /// <doc-id>ms701591</doc-id>
        /// <unmanaged>GetQualityLevel / SetQualityLevel</unmanaged>
        /// <unmanaged-short>GetQualityLevel</unmanaged-short>
        public SharpDX.MediaFoundation.QualityLevel QualityLevel
        {
            get
            {
                GetQualityLevel(out var __output__);
                return __output__;
            }

            set => SetQualityLevel(value);
        }

        /// <summary>
        /// <p> </p><p>Sets the drop mode. In drop mode, a component drops samples, more or less aggressively depending on the level of the drop mode.</p>
        /// </summary>
        /// <param name = "eDropMode"><dd> <p>Requested drop mode, specified as a member of the <strong><see cref = "SharpDX.MediaFoundation.QualityDropMode"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoMoreDropModes"/></strong></dt> </dl> </td><td> <p>The component does not support the specified mode or any higher modes.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If this method is called on a media source, the media source might switch between thinned and non-thinned output. If that occurs, the affected streams will send an MEStreamThinMode event to indicate the transition. The operation is asynchronous; after <strong>SetDropMode</strong> returns, you might receive samples that were queued before the transition. The MEStreamThinMode event marks the exact point in the stream where the transition occurs.</p>
        /// </remarks>
        /// <doc-id>ms694861</doc-id>
        /// <unmanaged>HRESULT IMFQualityAdvise::SetDropMode([In] MF_QUALITY_DROP_MODE eDropMode)</unmanaged>
        /// <unmanaged-short>IMFQualityAdvise::SetDropMode</unmanaged-short>
        internal unsafe void SetDropMode(SharpDX.MediaFoundation.QualityDropMode eDropMode)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)eDropMode), (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the quality level. The quality level determines how the component consumes or produces samples.</p>
        /// </summary>
        /// <param name = "eQualityLevel"><dd> <p>Requested quality level, specified as a member of the <strong><see cref = "SharpDX.MediaFoundation.QualityLevel"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoMoreQualityLevels"/></strong></dt> </dl> </td><td> <p>The component does not support the specified quality level or any levels below it.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms705619</doc-id>
        /// <unmanaged>HRESULT IMFQualityAdvise::SetQualityLevel([In] MF_QUALITY_LEVEL eQualityLevel)</unmanaged>
        /// <unmanaged-short>IMFQualityAdvise::SetQualityLevel</unmanaged-short>
        internal unsafe void SetQualityLevel(SharpDX.MediaFoundation.QualityLevel eQualityLevel)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)eQualityLevel), (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the current drop mode.</p>
        /// </summary>
        /// <param name = "eDropModeRef"><dd> <p>Receives the drop mode, specified as a member of the <strong><see cref = "SharpDX.MediaFoundation.QualityDropMode"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms702987</doc-id>
        /// <unmanaged>HRESULT IMFQualityAdvise::GetDropMode([Out] MF_QUALITY_DROP_MODE* peDropMode)</unmanaged>
        /// <unmanaged-short>IMFQualityAdvise::GetDropMode</unmanaged-short>
        internal unsafe void GetDropMode(out SharpDX.MediaFoundation.QualityDropMode eDropModeRef)
        {
            SharpDX.Result __result__;
            fixed (void *eDropModeRef_ = &eDropModeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, eDropModeRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the current quality level.</p>
        /// </summary>
        /// <param name = "eQualityLevelRef"><dd> <p>Receives the quality level, specified as a member of the <strong><see cref = "SharpDX.MediaFoundation.QualityLevel"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms701591</doc-id>
        /// <unmanaged>HRESULT IMFQualityAdvise::GetQualityLevel([Out] MF_QUALITY_LEVEL* peQualityLevel)</unmanaged>
        /// <unmanaged-short>IMFQualityAdvise::GetQualityLevel</unmanaged-short>
        internal unsafe void GetQualityLevel(out SharpDX.MediaFoundation.QualityLevel eQualityLevelRef)
        {
            SharpDX.Result __result__;
            fixed (void *eQualityLevelRef_ = &eQualityLevelRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, eQualityLevelRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Drops samples over a specified interval of time.</p>
        /// </summary>
        /// <param name = "hnsAmountToDrop"><dd> <p>Amount of time to drop, in 100-nanosecond units. This value is always absolute. If the method is called multiple times, do not add the times from previous calls.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "DroptimeNotSupported"/></strong></dt> </dl> </td><td> <p>The object does not support this method.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Ideally the quality manager can prevent a renderer from falling behind. But if this does occur, then simply lowering quality does not guarantee the renderer will ever catch up. As a result, audio and video might fall out of sync. To correct this problem, the quality manager can call <strong>DropTime</strong> to request that the renderer drop samples quickly over a specified time interval. After that period, the renderer stops dropping samples.</p><p>This method is primarily intended for the video renderer. Dropped audio samples cause audio glitching, which is not desirable.</p><p>If a component does not support this method, it should return <see cref = "DroptimeNotSupported"/>.</p>
        /// </remarks>
        /// <doc-id>ms697431</doc-id>
        /// <unmanaged>HRESULT IMFQualityAdvise::DropTime([In] longlong hnsAmountToDrop)</unmanaged>
        /// <unmanaged-short>IMFQualityAdvise::DropTime</unmanaged-short>
        public unsafe void DropTime(System.Int64 hnsAmountToDrop)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, hnsAmountToDrop, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("F3706F0D-8EA2-4886-8000-7155E9EC2EAE")]
    public partial class QualityAdvise2 : SharpDX.MediaFoundation.QualityAdvise
    {
        public QualityAdvise2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator QualityAdvise2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new QualityAdvise2(nativePtr);
        /// <summary>
        /// <p>Forwards an MEQualityNotify event from the media sink.</p>
        /// </summary>
        /// <param name = "eventRef">No documentation.</param>
        /// <param name = "dwFlagsRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd743250</doc-id>
        /// <unmanaged>HRESULT IMFQualityAdvise2::NotifyQualityEvent([In, Optional] IMFMediaEvent* pEvent,[Out] DWORD* pdwFlags)</unmanaged>
        /// <unmanaged-short>IMFQualityAdvise2::NotifyQualityEvent</unmanaged-short>
        public unsafe void NotifyQualityEvent(SharpDX.MediaFoundation.MediaEvent eventRef, out System.Int32 dwFlagsRef)
        {
            System.IntPtr eventRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            eventRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaEvent>(eventRef);
            fixed (void *dwFlagsRef_ = &dwFlagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)eventRef_, dwFlagsRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("dfcd8e4d-30b5-4567-acaa-8eb5b7853dc9")]
    public partial class QualityAdviseLimits : SharpDX.ComObject
    {
        public QualityAdviseLimits(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator QualityAdviseLimits(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new QualityAdviseLimits(nativePtr);
        /// <summary>
        /// <p>Gets the maximum <em>drop mode</em>. A higher drop mode means that the object will, if needed, drop samples more aggressively to match the presentation clock.</p>
        /// </summary>
        /// <remarks>
        /// <p>To get the current drop mode, call the <strong>IMFQualityAdvise::GetDropMode</strong> method. To set the drop mode, call the <strong>IMFQualityAdvise::SetDropMode</strong> method.</p>
        /// </remarks>
        /// <doc-id>dd374512</doc-id>
        /// <unmanaged>GetMaximumDropMode</unmanaged>
        /// <unmanaged-short>GetMaximumDropMode</unmanaged-short>
        public SharpDX.MediaFoundation.QualityDropMode MaximumDropMode
        {
            get
            {
                GetMaximumDropMode(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the minimum quality level that is supported by the component.</p>
        /// </summary>
        /// <remarks>
        /// <p>To get the current quality level, call the <strong>IMFQualityAdvise::GetQualityLevel</strong> method. To set the quality level, call the <strong>IMFQualityAdvise::SetQualityLevel</strong> method.</p>
        /// </remarks>
        /// <doc-id>dd374513</doc-id>
        /// <unmanaged>GetMinimumQualityLevel</unmanaged>
        /// <unmanaged-short>GetMinimumQualityLevel</unmanaged-short>
        public SharpDX.MediaFoundation.QualityLevel MinimumQualityLevel
        {
            get
            {
                GetMinimumQualityLevel(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the maximum <em>drop mode</em>. A higher drop mode means that the object will, if needed, drop samples more aggressively to match the presentation clock.</p>
        /// </summary>
        /// <param name = "eDropModeRef"><dd> <p>Receives the maximum drop mode, specified as a member of the <strong><see cref = "SharpDX.MediaFoundation.QualityDropMode"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>To get the current drop mode, call the <strong>IMFQualityAdvise::GetDropMode</strong> method. To set the drop mode, call the <strong>IMFQualityAdvise::SetDropMode</strong> method.</p>
        /// </remarks>
        /// <doc-id>dd374512</doc-id>
        /// <unmanaged>HRESULT IMFQualityAdviseLimits::GetMaximumDropMode([Out] MF_QUALITY_DROP_MODE* peDropMode)</unmanaged>
        /// <unmanaged-short>IMFQualityAdviseLimits::GetMaximumDropMode</unmanaged-short>
        internal unsafe void GetMaximumDropMode(out SharpDX.MediaFoundation.QualityDropMode eDropModeRef)
        {
            SharpDX.Result __result__;
            fixed (void *eDropModeRef_ = &eDropModeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, eDropModeRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the minimum quality level that is supported by the component.</p>
        /// </summary>
        /// <param name = "eQualityLevelRef"><dd> <p>Receives the minimum quality level, specified as a member of the <strong><see cref = "SharpDX.MediaFoundation.QualityLevel"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>To get the current quality level, call the <strong>IMFQualityAdvise::GetQualityLevel</strong> method. To set the quality level, call the <strong>IMFQualityAdvise::SetQualityLevel</strong> method.</p>
        /// </remarks>
        /// <doc-id>dd374513</doc-id>
        /// <unmanaged>HRESULT IMFQualityAdviseLimits::GetMinimumQualityLevel([Out] MF_QUALITY_LEVEL* peQualityLevel)</unmanaged>
        /// <unmanaged-short>IMFQualityAdviseLimits::GetMinimumQualityLevel</unmanaged-short>
        internal unsafe void GetMinimumQualityLevel(out SharpDX.MediaFoundation.QualityLevel eQualityLevelRef)
        {
            SharpDX.Result __result__;
            fixed (void *eQualityLevelRef_ = &eQualityLevelRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, eQualityLevelRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("8D009D86-5B9F-4115-B1FC-9F80D52AB8AB")]
    public partial class QualityManager : SharpDX.ComObject
    {
        public QualityManager(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator QualityManager(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new QualityManager(nativePtr);
        /// <summary>
        /// <p> </p><p>Called when the Media Session is about to start playing a new topology.</p>
        /// </summary>
        /// <param name = "topologyRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.Topology"/></strong> interface of the new topology. If this parameter is <strong><c>null</c></strong>, the quality manager should release any references to the previous topology.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>In a typical quality manager this method does the following:</p><ol> <li> <p>Enumerates the nodes in the topology.</p> </li> <li> <p>Calls <strong>IMFTopologyNode::GetObject</strong> to get the node's underlying object.</p> </li> <li> <p>Queries for the <strong><see cref = "SharpDX.MediaFoundation.QualityAdvise"/></strong> interface.</p> </li> </ol><p>The quality manager can then use the <strong><see cref = "SharpDX.MediaFoundation.QualityAdvise"/></strong> references to adjust audio-video quality as needed.</p>
        /// </remarks>
        /// <doc-id>ms697409</doc-id>
        /// <unmanaged>HRESULT IMFQualityManager::NotifyTopology([In] IMFTopology* pTopology)</unmanaged>
        /// <unmanaged-short>IMFQualityManager::NotifyTopology</unmanaged-short>
        public unsafe void NotifyTopology(SharpDX.MediaFoundation.Topology topologyRef)
        {
            System.IntPtr topologyRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            topologyRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Topology>(topologyRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)topologyRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Called when the Media Session selects a presentation clock.</p>
        /// </summary>
        /// <param name = "clockRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.PresentationClock"/></strong> interface of the presentation clock. If this parameter is <strong><c>null</c></strong>, the quality manager should release any references to the presentation clock.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms702211</doc-id>
        /// <unmanaged>HRESULT IMFQualityManager::NotifyPresentationClock([In] IMFPresentationClock* pClock)</unmanaged>
        /// <unmanaged-short>IMFQualityManager::NotifyPresentationClock</unmanaged-short>
        public unsafe void NotifyPresentationClock(SharpDX.MediaFoundation.PresentationClock clockRef)
        {
            System.IntPtr clockRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            clockRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.PresentationClock>(clockRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)clockRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Called when the media processor is about to deliver an input sample to a pipeline component.</p>
        /// </summary>
        /// <param name = "nodeRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.TopologyNode"/></strong> interface of the topology node that represents the pipeline component.</p> </dd></param>
        /// <param name = "lInputIndex"><dd> <p>Index of the input stream on the topology node.</p> </dd></param>
        /// <param name = "sampleRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> interface of the input sample.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is called for every sample passing through every pipeline component. Therefore, the method must return quickly to avoid introducing too much latency into the pipeline.</p>
        /// </remarks>
        /// <doc-id>ms703097</doc-id>
        /// <unmanaged>HRESULT IMFQualityManager::NotifyProcessInput([In] IMFTopologyNode* pNode,[In] long lInputIndex,[In] IMFSample* pSample)</unmanaged>
        /// <unmanaged-short>IMFQualityManager::NotifyProcessInput</unmanaged-short>
        public unsafe void NotifyProcessInput(SharpDX.MediaFoundation.TopologyNode nodeRef, System.Int32 lInputIndex, SharpDX.MediaFoundation.Sample sampleRef)
        {
            System.IntPtr nodeRef_ = System.IntPtr.Zero;
            System.IntPtr sampleRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            nodeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.TopologyNode>(nodeRef);
            sampleRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Sample>(sampleRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)nodeRef_, lInputIndex, (void *)sampleRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Called after the media processor gets an output sample from a pipeline component.</p>
        /// </summary>
        /// <param name = "nodeRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.TopologyNode"/></strong> interface of the topology node that represents the pipeline component.</p> </dd></param>
        /// <param name = "lOutputIndex"><dd> <p>Index of the output stream on the topology node.</p> </dd></param>
        /// <param name = "sampleRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> interface of the output sample.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is called for every sample passing through every pipeline component. Therefore, the method must return quickly to avoid introducing too much latency into the pipeline.</p>
        /// </remarks>
        /// <doc-id>ms700792</doc-id>
        /// <unmanaged>HRESULT IMFQualityManager::NotifyProcessOutput([In] IMFTopologyNode* pNode,[In] long lOutputIndex,[In] IMFSample* pSample)</unmanaged>
        /// <unmanaged-short>IMFQualityManager::NotifyProcessOutput</unmanaged-short>
        public unsafe void NotifyProcessOutput(SharpDX.MediaFoundation.TopologyNode nodeRef, System.Int32 lOutputIndex, SharpDX.MediaFoundation.Sample sampleRef)
        {
            System.IntPtr nodeRef_ = System.IntPtr.Zero;
            System.IntPtr sampleRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            nodeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.TopologyNode>(nodeRef);
            sampleRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Sample>(sampleRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)nodeRef_, lOutputIndex, (void *)sampleRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Called when a pipeline component sends an MEQualityNotify event.</p>
        /// </summary>
        /// <param name = "objectRef">No documentation.</param>
        /// <param name = "eventRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms704768</doc-id>
        /// <unmanaged>HRESULT IMFQualityManager::NotifyQualityEvent([In] IUnknown* pObject,[In] IMFMediaEvent* pEvent)</unmanaged>
        /// <unmanaged-short>IMFQualityManager::NotifyQualityEvent</unmanaged-short>
        public unsafe void NotifyQualityEvent(SharpDX.IUnknown objectRef, SharpDX.MediaFoundation.MediaEvent eventRef)
        {
            System.IntPtr objectRef_ = System.IntPtr.Zero;
            System.IntPtr eventRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            objectRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(objectRef);
            eventRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaEvent>(eventRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)objectRef_, (void *)eventRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Called when the Media Session is shutting down.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The quality manager should release all references to the Media Session when this method is called.</p>
        /// </remarks>
        /// <doc-id>ms703099</doc-id>
        /// <unmanaged>HRESULT IMFQualityManager::Shutdown()</unmanaged>
        /// <unmanaged-short>IMFQualityManager::Shutdown</unmanaged-short>
        public unsafe void Shutdown()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("88ddcd21-03c3-4275-91ed-55ee3929328f")]
    public partial class RateControl : SharpDX.ComObject
    {
        public RateControl(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RateControl(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RateControl(nativePtr);
        /// <summary>
        /// <p> Sets the playback rate. </p>
        /// </summary>
        /// <param name = "fThin"><dd> <p> If <strong>TRUE</strong>, the media streams are thinned. Otherwise, the stream is not thinned. For media sources and demultiplexers, the object must thin the streams when this parameter is <strong>TRUE</strong>. For downstream transforms, such as decoders and multiplexers, this parameter is informative; it notifies the object that the input streams are thinned. For information, see About Rate Control. </p> </dd></param>
        /// <param name = "flRate"><dd> <p> The requested playback rate. Postive values indicate forward playback, negative values indicate reverse playback, and zero indicates scrubbing (the source delivers a single frame). </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ReverseUnsupported"/></strong></dt> </dl> </td><td> <p> The object does not support reverse playback. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ThinningUnsupported"/></strong></dt> </dl> </td><td> <p> The object does not support thinning. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedRate"/></strong></dt> </dl> </td><td> <p> The object does not support the requested playback rate. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedRateTransition"/></strong></dt> </dl> </td><td> <p> The object cannot change to the new rate while in the running state. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The Media Session prevents some transitions between rate boundaries, depending on the current playback state:</p><table> <tr><th>Playback State</th><th>Forward/Reverse</th><th>Forward/Zero</th><th>Reverse/Zero</th></tr> <tr><td>Running</td><td>No</td><td>No</td><td>No</td></tr> <tr><td>Paused</td><td>No</td><td>Yes</td><td>No</td></tr> <tr><td>Stopped</td><td>Yes</td><td>Yes</td><td>Yes</td></tr> </table><p>?</p><p>If the transition is not supported, the method returns <strong><see cref = "UnsupportedRateTransition"/></strong>.</p><p>When a media source completes a call to <strong>SetRate</strong>, it sends the MESourceRateChanged event. Other pipeline components do not send this event.</p><p>If a media source switches between thinned and non-thinned playback, the streams send an MEStreamThinMode event to indicate the transition. Events from the media source are not synchronized with events from the media streams. After you receive the MESourceRateChanged event, you can still receive samples that were queued before the stream switched to thinned or non-thinned mode. The MEStreamThinMode event marks the exact point in the stream where the transition occurs.</p><p>When the Media Session completes a call to <strong>SetRate</strong>, it sends the MESessionRateChanged event.</p>
        /// </remarks>
        /// <doc-id>ms696979</doc-id>
        /// <unmanaged>HRESULT IMFRateControl::SetRate([In] BOOL fThin,[In] float flRate)</unmanaged>
        /// <unmanaged-short>IMFRateControl::SetRate</unmanaged-short>
        public unsafe void SetRate(SharpDX.Mathematics.Interop.RawBool fThin, System.Single flRate)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, fThin, flRate, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Gets the current playback rate.</p>
        /// </summary>
        /// <param name = "flRateRef"><dd> <p>Receives the current playback rate.</p> </dd></param>
        /// <returns><dd> <p>Receives the value <strong>TRUE</strong> if the stream is currently being thinned. If the object does not support thinning, this parameter always receives the value <strong><see cref = "SharpDX.Result.False"/></strong>. This parameter can be <strong><c>null</c></strong>. For more information, see About Rate Control.</p> </dd></returns>
        /// <doc-id>ms705641</doc-id>
        /// <unmanaged>HRESULT IMFRateControl::GetRate([Out] BOOL* pfThin,[Out] float* pflRate)</unmanaged>
        /// <unmanaged-short>IMFRateControl::GetRate</unmanaged-short>
        public unsafe SharpDX.Mathematics.Interop.RawBool GetRate(out System.Single flRateRef)
        {
            SharpDX.Mathematics.Interop.RawBool fThinRef;
            SharpDX.Result __result__;
            fixed (void *flRateRef_ = &flRateRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &fThinRef, flRateRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
            return fThinRef;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("0a9ccdbc-d797-4563-9667-94ec5d79292d")]
    public partial class RateSupport : SharpDX.ComObject
    {
        public RateSupport(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RateSupport(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RateSupport(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the slowest playback rate supported by the object.</p>
        /// </summary>
        /// <param name = "eDirection"><dd> <p>Specifies whether to query to the slowest forward playback rate or reverse playback rate. The value is a member of the <strong><see cref = "SharpDX.MediaFoundation.RateDirection"/></strong> enumeration.</p> </dd></param>
        /// <param name = "fThin"><dd> <p>If <strong>TRUE</strong>, the method retrieves the slowest thinned playback rate. Otherwise, the method retrieves the slowest non-thinned playback rate. For information about thinning, see About Rate Control.</p> </dd></param>
        /// <param name = "flRateRef"><dd> <p>Receives the slowest playback rate that the object supports.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ReverseUnsupported"/></strong></dt> </dl> </td><td> <p>The object does not support reverse playback.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ThinningUnsupported"/></strong></dt> </dl> </td><td> <p>The object does not support thinning.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The value returned in <em>plfRate</em> represents a lower bound. Playback at this rate is not guaranteed. Call <strong>IMFRateSupport::IsRateSupported</strong> to check whether the boundary rate is supported. For example, a component that supports arbitrarily slow rates will return zero in <em>pflRate</em>, and applications should call <strong>IsRateSupported</strong> separately to determine whether the component supports rate 0.</p><p>If <em>eDirection</em> is MFRATE_REVERSE, the method retrieves the slowest reverse playback rate. This is a negative value, assuming the object supports reverse playback.</p>
        /// </remarks>
        /// <doc-id>ms704596</doc-id>
        /// <unmanaged>HRESULT IMFRateSupport::GetSlowestRate([In] MFRATE_DIRECTION eDirection,[In] BOOL fThin,[Out] float* pflRate)</unmanaged>
        /// <unmanaged-short>IMFRateSupport::GetSlowestRate</unmanaged-short>
        public unsafe void GetSlowestRate(SharpDX.MediaFoundation.RateDirection eDirection, SharpDX.Mathematics.Interop.RawBool fThin, out System.Single flRateRef)
        {
            SharpDX.Result __result__;
            fixed (void *flRateRef_ = &flRateRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, unchecked ((System.Int32)eDirection), fThin, flRateRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Gets the fastest playback rate supported by the object.</p>
        /// </summary>
        /// <param name = "eDirection"><dd> <p>Specifies whether to query to the fastest forward playback rate or reverse playback rate. The value is a member of the <strong><see cref = "SharpDX.MediaFoundation.RateDirection"/></strong> enumeration.</p> </dd></param>
        /// <param name = "fThin"><dd> <p>If <strong>TRUE</strong>, the method retrieves the fastest thinned playback rate. Otherwise, the method retrieves the fastest non-thinned playback rate. For information about thinning, see About Rate Control.</p> </dd></param>
        /// <param name = "flRateRef"><dd> <p>Receives the fastest playback rate that the object supports.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ReverseUnsupported"/></strong></dt> </dl> </td><td> <p>The object does not support reverse playback.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ThinningUnsupported"/></strong></dt> </dl> </td><td> <p>The object does not support thinning.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>For some formats (such as ASF), thinning means dropping all frames that are not I-frames. If a component produces stream data, such as a media source or a demultiplexer, it should pay attention to the <em>fThin</em> parameter and return <see cref = "ThinningUnsupported"/> if it cannot thin the stream.</p><p>If the component processes or receives a stream (most transforms or media sinks), it may ignore this parameter if it does not care whether the stream is thinned. In the Media Session's implementation of rate support, if the transforms do not explicitly support reverse playback, the Media Session will attempt to playback in reverse with thinning but not without thinning. Therefore, most applications will set <em>fThin</em> to <strong>TRUE</strong> when using the Media Session for reverse playback.</p><p>If <em>eDirection</em> is MFRATE_REVERSE, the method retrieves the fastest reverse playback rate. This is a negative value, assuming the object supports reverse playback.</p>
        /// </remarks>
        /// <doc-id>ms693505</doc-id>
        /// <unmanaged>HRESULT IMFRateSupport::GetFastestRate([In] MFRATE_DIRECTION eDirection,[In] BOOL fThin,[Out] float* pflRate)</unmanaged>
        /// <unmanaged-short>IMFRateSupport::GetFastestRate</unmanaged-short>
        public unsafe void GetFastestRate(SharpDX.MediaFoundation.RateDirection eDirection, SharpDX.Mathematics.Interop.RawBool fThin, out System.Single flRateRef)
        {
            SharpDX.Result __result__;
            fixed (void *flRateRef_ = &flRateRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, unchecked ((System.Int32)eDirection), fThin, flRateRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Queries whether the object supports a specified playback rate.</p>
        /// </summary>
        /// <param name = "fThin"><dd> <p>If <strong>TRUE</strong>, the method queries whether the object supports the playback rate with thinning. Otherwise, the method queries whether the object supports the playback rate without thinning. For information about thinning, see About Rate Control.</p> </dd></param>
        /// <param name = "flRate"><dd> <p>The playback rate to query.</p> </dd></param>
        /// <param name = "flNearestSupportedRateRef"><dd> <p>If the object does not support the playback rate given in <em>flRate</em>, this parameter receives the closest supported playback rate. If the method returns <see cref = "SharpDX.Result.Ok"/>, this parameter receives the value given in <em>flRate</em>. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The object supports the specified rate.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ReverseUnsupported"/></strong></dt> </dl> </td><td> <p>The object does not support reverse playback.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ThinningUnsupported"/></strong></dt> </dl> </td><td> <p>The object does not support thinning.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedRate"/></strong></dt> </dl> </td><td> <p>The object does not support the specified rate.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms696250</doc-id>
        /// <unmanaged>HRESULT IMFRateSupport::IsRateSupported([In] BOOL fThin,[In] float flRate,[InOut, Optional] float* pflNearestSupportedRate)</unmanaged>
        /// <unmanaged-short>IMFRateSupport::IsRateSupported</unmanaged-short>
        public unsafe void IsRateSupported(SharpDX.Mathematics.Interop.RawBool fThin, System.Single flRate, System.IntPtr flNearestSupportedRateRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, fThin, flRate, (void *)flNearestSupportedRateRef, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("E7FE2E12-661C-40DA-92F9-4F002AB67627")]
    public partial class ReadWriteClassFactory : SharpDX.ComObject
    {
        public ReadWriteClassFactory(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ReadWriteClassFactory(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ReadWriteClassFactory(nativePtr);
        /// <summary>
        /// <p>Creates an instance of the sink writer or source reader, given a URL.</p>
        /// </summary>
        /// <param name = "clsid"><dd> <p>The CLSID of the object to create.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><strong>CLSID_MFSinkWriter</strong></strong></dt> </dl> </td><td> <p>Create the sink writer. The <em>ppvObject</em> parameter receives an <strong><see cref = "SharpDX.MediaFoundation.SinkWriter"/></strong> interface reference.</p> </td></tr> <tr><td><dl> <dt><strong><strong>CLSID_MFSourceReader</strong></strong></dt> </dl> </td><td> <p>Create the source reader. The <em>ppvObject</em> parameter receives an <strong><see cref = "SharpDX.MediaFoundation.SourceReader"/></strong> interface reference.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "wszURLRef"><dd> <p>A null-terminated string that contains a URL. If <em>clsid</em> is CLSID_<strong>MFSinkWriter</strong>, the URL specifies the name of the output file. The sink writer creates a new file with this name. If <em>clsid</em> is <strong>CLSID_MFSourceReader</strong>, the URL specifies the input file for the source reader.</p> </dd></param>
        /// <param name = "attributesRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface. You can use this parameter to configure the sink writer or source reader. For more information, see the following topics:</p> <ul> <li> Sink Writer Attributes </li> <li> Source Reader Attributes </li> </ul> <p>This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "riid"><dd> <p>The IID of the requested interface.</p> </dd></param>
        /// <param name = "vObjectOut"><dd> <p>Receives a reference to the requested interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374516</doc-id>
        /// <unmanaged>HRESULT IMFReadWriteClassFactory::CreateInstanceFromURL([In] const GUID&amp; clsid,[In] const wchar_t* pwszURL,[In, Optional] IMFAttributes* pAttributes,[In] const GUID&amp; riid,[Out] void** ppvObject)</unmanaged>
        /// <unmanaged-short>IMFReadWriteClassFactory::CreateInstanceFromURL</unmanaged-short>
        public unsafe void CreateInstanceFromURL(System.Guid clsid, System.String wszURLRef, SharpDX.MediaFoundation.MediaAttributes attributesRef, System.Guid riid, out System.IntPtr vObjectOut)
        {
            System.IntPtr attributesRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            attributesRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(attributesRef);
            fixed (void *vObjectOut_ = &vObjectOut)
                fixed (char *wszURLRef_ = wszURLRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &clsid, (void *)wszURLRef_, (void *)attributesRef_, &riid, vObjectOut_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Creates an instance of the sink writer or source reader, given an <strong><see cref = "SharpDX.IUnknown"/></strong> reference. </p>
        /// </summary>
        /// <param name = "clsid"><dd> <p>The CLSID of the object to create.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><strong>CLSID_MFSinkWriter</strong></strong></dt> </dl> </td><td> <p>Create the sink writer. The <em>ppvObject</em> parameter receives an <strong><see cref = "SharpDX.MediaFoundation.SinkWriter"/></strong> interface reference.</p> </td></tr> <tr><td><dl> <dt><strong><strong>CLSID_MFSourceReader</strong></strong></dt> </dl> </td><td> <p>Create the source reader. The <em>ppvObject</em> parameter receives an <strong><see cref = "SharpDX.MediaFoundation.SourceReader"/></strong> interface reference.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "unkObjectRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of an object that is used to initialize the source reader or sink writer. The method queries this reference for one of the following interfaces.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><strong><see cref = "SharpDX.MediaFoundation.IByteStream"/></strong></strong></dt> </dl> </td><td> <p>Pointer to a byte stream. </p> <p>If <em>clsid</em> is <strong>CLSID_MFSinkWriter</strong>, the sink writer writes data to this byte stream.</p> <p>If <em>clsid</em> is <strong>CLSID_MFSourceReader</strong>, this byte stream provides the source data for the source reader.</p> </td></tr> <tr><td><dl> <dt><strong><strong><see cref = "SharpDX.MediaFoundation.MediaSink"/></strong></strong></dt> </dl> </td><td> <p>Pointer to a media sink. Applies only when <em>clsid</em> is <strong>CLSID_MFSinkWriter</strong>. </p> </td></tr> <tr><td><dl> <dt><strong><strong><see cref = "SharpDX.MediaFoundation.MediaSource"/></strong></strong></dt> </dl> </td><td> <p>Pointer to a media source. Applies only when <em>clsid</em> is <strong>CLSID_MFSourceReader</strong>.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "attributesRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface. You can use this parameter to configure the sink writer or source reader. For more information, see the following topics:</p> <ul> <li> Sink Writer Attributes </li> <li> Source Reader Attributes </li> </ul> <p>This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "riid"><dd> <p>The IID of the requested interface.</p> </dd></param>
        /// <param name = "vObjectOut"><dd> <p>Receives a reference to the requested interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374515</doc-id>
        /// <unmanaged>HRESULT IMFReadWriteClassFactory::CreateInstanceFromObject([In] const GUID&amp; clsid,[In] IUnknown* punkObject,[In, Optional] IMFAttributes* pAttributes,[In] const GUID&amp; riid,[Out] void** ppvObject)</unmanaged>
        /// <unmanaged-short>IMFReadWriteClassFactory::CreateInstanceFromObject</unmanaged-short>
        public unsafe void CreateInstanceFromObject(System.Guid clsid, SharpDX.IUnknown unkObjectRef, SharpDX.MediaFoundation.MediaAttributes attributesRef, System.Guid riid, out System.IntPtr vObjectOut)
        {
            System.IntPtr unkObjectRef_ = System.IntPtr.Zero;
            System.IntPtr attributesRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            unkObjectRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkObjectRef);
            attributesRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(attributesRef);
            fixed (void *vObjectOut_ = &vObjectOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &clsid, (void *)unkObjectRef_, (void *)attributesRef_, &riid, vObjectOut_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2347D60B-3FB5-480c-8803-8DF3ADCD3EF0")]
    public partial class RealTimeClient : SharpDX.ComObject
    {
        public RealTimeClient(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RealTimeClient(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RealTimeClient(nativePtr);
        /// <summary>
        /// <p>Specifies the work queue for the topology branch that contains this object.</p>
        /// </summary>
        /// <remarks>
        /// <p> An application can register a branch of the topology to use a private work queue. The Media Session notifies any pipeline object that supports <strong><see cref = "SharpDX.MediaFoundation.RealTimeClient"/></strong> by calling <strong>SetWorkQueue</strong> with the application's work queue identifier. </p><p>When the application unregisters the topology branch, the Media Session calls <strong>SetWorkQueue</strong> again with the value <strong>MFASYNC_CALLBACK_QUEUE_UNDEFINED</strong>. </p>
        /// </remarks>
        /// <doc-id>aa367678</doc-id>
        /// <unmanaged>SetWorkQueue</unmanaged>
        /// <unmanaged-short>SetWorkQueue</unmanaged-short>
        public System.Int32 WorkQueue
        {
            set => SetWorkQueue(value);
        }

        /// <summary>
        /// <p>Notifies the object to register its worker threads with the Multimedia Class Scheduler Service (MMCSS).</p>
        /// </summary>
        /// <param name = "dwTaskIndex"><dd> <p> The MMCSS task identifier. </p> </dd></param>
        /// <param name = "wszClass"><dd> <p>The name of the MMCSS task. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> The object's worker threads should register themselves with MMCSS by calling <strong>AvSetMmThreadCharacteristics</strong>, using the task name and identifier specified in this method.</p>
        /// </remarks>
        /// <doc-id>aa367059</doc-id>
        /// <unmanaged>HRESULT IMFRealTimeClient::RegisterThreads([In] DWORD dwTaskIndex,[In] const wchar_t* wszClass)</unmanaged>
        /// <unmanaged-short>IMFRealTimeClient::RegisterThreads</unmanaged-short>
        public unsafe void RegisterThreads(System.Int32 dwTaskIndex, System.String wszClass)
        {
            SharpDX.Result __result__;
            fixed (char *wszClass_ = wszClass)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwTaskIndex, (void *)wszClass_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Notifies the object to unregister its worker threads from the Multimedia Class Scheduler Service (MMCSS). </p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The object's worker threads should unregister themselves from MMCSS by calling <strong>AvRevertMmThreadCharacteristics</strong>.</p>
        /// </remarks>
        /// <doc-id>aa371717</doc-id>
        /// <unmanaged>HRESULT IMFRealTimeClient::UnregisterThreads()</unmanaged>
        /// <unmanaged-short>IMFRealTimeClient::UnregisterThreads</unmanaged-short>
        public unsafe void UnregisterThreads()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Specifies the work queue for the topology branch that contains this object.</p>
        /// </summary>
        /// <param name = "dwWorkQueueId"><dd> <p>The identifier of the work queue, or the value <strong>MFASYNC_CALLBACK_QUEUE_UNDEFINED</strong>. See Remarks. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> An application can register a branch of the topology to use a private work queue. The Media Session notifies any pipeline object that supports <strong><see cref = "SharpDX.MediaFoundation.RealTimeClient"/></strong> by calling <strong>SetWorkQueue</strong> with the application's work queue identifier. </p><p>When the application unregisters the topology branch, the Media Session calls <strong>SetWorkQueue</strong> again with the value <strong>MFASYNC_CALLBACK_QUEUE_UNDEFINED</strong>. </p>
        /// </remarks>
        /// <doc-id>aa367678</doc-id>
        /// <unmanaged>HRESULT IMFRealTimeClient::SetWorkQueue([In] DWORD dwWorkQueueId)</unmanaged>
        /// <unmanaged-short>IMFRealTimeClient::SetWorkQueue</unmanaged-short>
        internal unsafe void SetWorkQueue(System.Int32 dwWorkQueueId)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwWorkQueueId, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("03910848-AB16-4611-B100-17B88AE2F248")]
    public partial class RealTimeClientEx : SharpDX.ComObject
    {
        public RealTimeClientEx(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RealTimeClientEx(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RealTimeClientEx(nativePtr);
        /// <summary>
        /// <p>Notifies the object to register its worker threads with the Multimedia Class Scheduler Service (MMCSS).</p>
        /// </summary>
        /// <param name = "dwTaskIndexRef"><dd> <p>The MMCSS task identifier. If the value is zero on input,  the object should create a new MCCSS task group. See Remarks.</p> </dd></param>
        /// <param name = "wszClassName"><dd> <p>The name of the MMCSS task.</p> </dd></param>
        /// <param name = "lBasePriority"><dd> <p>The base priority of the thread.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>If the object does not create worker threads, the method should simply return <see cref = "SharpDX.Result.Ok"/> and take no further action. </p><p>Otherwise, if the value of <code>*pdwTaskIndex</code> is zero on input, the object should perform the following steps:</p><ol> <li>A single worker thread calls <strong>AvSetMmThreadCharacteristics</strong> to create a new MMCSS task identifier. Store this value.</li> <li>Any additional worker threads call <strong>AvSetMmThreadCharacteristics</strong> using the new task identifier.</li> <li>Return the new task identifier to the caller, by setting <code>*pdwTaskIndex</code> equal to the task identifier.</li> </ol><p>If the value of <code>*pdwTaskIndex</code> is nonzero on input, the parameter contains an existing MMCSS task identifer. In that case, all worker threads of the object should register themselves for that task by calling <strong>AvSetMmThreadCharacteristics</strong>.</p>
        /// </remarks>
        /// <doc-id>hh448048</doc-id>
        /// <unmanaged>HRESULT IMFRealTimeClientEx::RegisterThreadsEx([InOut] DWORD* pdwTaskIndex,[In] const wchar_t* wszClassName,[In] LONG lBasePriority)</unmanaged>
        /// <unmanaged-short>IMFRealTimeClientEx::RegisterThreadsEx</unmanaged-short>
        public unsafe void RegisterThreadsEx(ref System.Int32 dwTaskIndexRef, System.String wszClassName, System.Int32 lBasePriority)
        {
            SharpDX.Result __result__;
            fixed (char *wszClassName_ = wszClassName)
                fixed (void *dwTaskIndexRef_ = &dwTaskIndexRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwTaskIndexRef_, (void *)wszClassName_, lBasePriority, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Notifies the object to unregister its worker threads from the Multimedia Class Scheduler Service (MMCSS). </p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh448050</doc-id>
        /// <unmanaged>HRESULT IMFRealTimeClientEx::UnregisterThreads()</unmanaged>
        /// <unmanaged-short>IMFRealTimeClientEx::UnregisterThreads</unmanaged-short>
        public unsafe void UnregisterThreads()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Specifies the work queue that this object should use for asynchronous work items. </p>
        /// </summary>
        /// <param name = "dwMultithreadedWorkQueueId"><dd> <p>The work queue identifier.</p> </dd></param>
        /// <param name = "lWorkItemBasePriority"><dd> <p>The base priority for work items.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The object should use the values of <em>dwMultithreadedWorkQueueId</em> and <em>lWorkItemBasePriority</em> when it queues new work items. Use the <strong>MFPutWorkItem2</strong> or <strong>MFPutWorkItemEx2</strong> function to queue the work item.</p>
        /// </remarks>
        /// <doc-id>hh448049</doc-id>
        /// <unmanaged>HRESULT IMFRealTimeClientEx::SetWorkQueueEx([In] DWORD dwMultithreadedWorkQueueId,[In] LONG lWorkItemBasePriority)</unmanaged>
        /// <unmanaged-short>IMFRealTimeClientEx::SetWorkQueueEx</unmanaged-short>
        public unsafe void SetWorkQueueEx(System.Int32 dwMultithreadedWorkQueueId, System.Int32 lWorkItemBasePriority)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwMultithreadedWorkQueueId, lWorkItemBasePriority, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a27003d0-2354-4f2a-8d6a-ab7cff15437e")]
    public partial class RemoteAsyncCallback : SharpDX.ComObject
    {
        public RemoteAsyncCallback(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RemoteAsyncCallback(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RemoteAsyncCallback(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hr">No documentation.</param>
        /// <param name = "remoteResultRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFRemoteAsyncCallback::Invoke([In] HRESULT hr,[In, Optional] IUnknown* pRemoteResult)</unmanaged>
        /// <unmanaged-short>IMFRemoteAsyncCallback::Invoke</unmanaged-short>
        public unsafe void Invoke(SharpDX.Result hr, SharpDX.IUnknown remoteResultRef)
        {
            System.IntPtr remoteResultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            remoteResultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(remoteResultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, hr, (void *)remoteResultRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("1cde6309-cae0-4940-907e-c1ec9c3d1d4a")]
    public partial class RemoteDesktopPlugin : SharpDX.ComObject
    {
        public RemoteDesktopPlugin(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RemoteDesktopPlugin(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RemoteDesktopPlugin(nativePtr);
        /// <summary>
        /// <p> </p><p>Modifies a topology for use in a Terminal Services environment.</p>
        /// </summary>
        /// <param name = "topologyRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.Topology"/></strong> interface of the topology.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the application is running in a Terminal Services client session, call this method before calling <strong>IMFMediaSession::SetTopology</strong> on the Media Session.</p>
        /// </remarks>
        /// <doc-id>ms699001</doc-id>
        /// <unmanaged>HRESULT IMFRemoteDesktopPlugin::UpdateTopology([In] IMFTopology* pTopology)</unmanaged>
        /// <unmanaged-short>IMFRemoteDesktopPlugin::UpdateTopology</unmanaged-short>
        public unsafe void UpdateTopology(SharpDX.MediaFoundation.Topology topologyRef)
        {
            System.IntPtr topologyRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            topologyRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Topology>(topologyRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)topologyRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("994e23ad-1cc2-493c-b9fa-46f1cb040fa4")]
    public partial class RemoteProxy : SharpDX.ComObject
    {
        public RemoteProxy(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RemoteProxy(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RemoteProxy(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves a reference to the remote object for which this object is a proxy.</p>
        /// </summary>
        /// <param name = "riid"><dd> <p>Interface identifier (IID) of the requested interface.</p> </dd></param>
        /// <param name = "vOut"><dd> <p>Receives a reference to the requested interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970370</doc-id>
        /// <unmanaged>HRESULT IMFRemoteProxy::GetRemoteObject([In] const GUID&amp; riid,[Out] void** ppv)</unmanaged>
        /// <unmanaged-short>IMFRemoteProxy::GetRemoteObject</unmanaged-short>
        public unsafe void GetRemoteObject(System.Guid riid, out System.IntPtr vOut)
        {
            SharpDX.Result __result__;
            fixed (void *vOut_ = &vOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &riid, vOut_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves a reference to the object that is hosting this proxy.</p>
        /// </summary>
        /// <param name = "riid"><dd> <p>Interface identifier (IID) of the requested interface.</p> </dd></param>
        /// <param name = "vOut"><dd> <p>Receives a reference to the requested interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970549</doc-id>
        /// <unmanaged>HRESULT IMFRemoteProxy::GetRemoteHost([In] const GUID&amp; riid,[Out] void** ppv)</unmanaged>
        /// <unmanaged-short>IMFRemoteProxy::GetRemoteHost</unmanaged-short>
        public unsafe void GetRemoteHost(System.Guid riid, out System.IntPtr vOut)
        {
            SharpDX.Result __result__;
            fixed (void *vOut_ = &vOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &riid, vOut_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("A7E025DD-5303-4a62-89D6-E747E1EFAC73")]
    public partial class SAMIStyle : SharpDX.ComObject
    {
        public SAMIStyle(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SAMIStyle(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SAMIStyle(nativePtr);
        /// <summary>
        /// <p> Gets the number of styles defined in the SAMI file. </p>
        /// </summary>
        /// <doc-id>bb970341</doc-id>
        /// <unmanaged>GetStyleCount</unmanaged>
        /// <unmanaged-short>GetStyleCount</unmanaged-short>
        public System.Int32 StyleCount
        {
            get
            {
                GetStyleCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Gets a list of the style names defined in the SAMI file. </p>
        /// </summary>
        /// <doc-id>bb970547</doc-id>
        /// <unmanaged>GetStyles</unmanaged>
        /// <unmanaged-short>GetStyles</unmanaged-short>
        public SharpDX.Win32.Variant Styles
        {
            get
            {
                GetStyles(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Gets the number of styles defined in the SAMI file. </p>
        /// </summary>
        /// <param name = "dwCountRef"><dd> <p> Receives the number of SAMI styles in the file. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>bb970341</doc-id>
        /// <unmanaged>HRESULT IMFSAMIStyle::GetStyleCount([Out] DWORD* pdwCount)</unmanaged>
        /// <unmanaged-short>IMFSAMIStyle::GetStyleCount</unmanaged-short>
        internal unsafe void GetStyleCount(out System.Int32 dwCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwCountRef_ = &dwCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwCountRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets a list of the style names defined in the SAMI file. </p>
        /// </summary>
        /// <param name = "propVarStyleArrayRef"><dd> <p>Pointer to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that receives an array of null-terminated wide-character strings. The <strong><see cref = "SharpDX.Win32.Variant"/></strong> type is VT_VECTOR | VT_LPWSTR. The caller must clear the <strong><see cref = "SharpDX.Win32.Variant"/></strong> by calling <strong>PropVariantClear</strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>bb970547</doc-id>
        /// <unmanaged>HRESULT IMFSAMIStyle::GetStyles([Out] PROPVARIANT* pPropVarStyleArray)</unmanaged>
        /// <unmanaged-short>IMFSAMIStyle::GetStyles</unmanaged-short>
        internal unsafe void GetStyles(out SharpDX.Win32.Variant propVarStyleArrayRef)
        {
            propVarStyleArrayRef = default (SharpDX.Win32.Variant);
            SharpDX.Result __result__;
            fixed (void *propVarStyleArrayRef_ = &propVarStyleArrayRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, propVarStyleArrayRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Sets the current style on the SAMI media source.</p>
        /// </summary>
        /// <param name = "wszStyleRef"><dd> <p>Pointer to a null-terminated string containing the name of the style. To clear the current style, pass an empty string ("").  To get the list of style names, call <strong>IMFSAMIStyle::GetStyles</strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>bb970574</doc-id>
        /// <unmanaged>HRESULT IMFSAMIStyle::SetSelectedStyle([In] const wchar_t* pwszStyle)</unmanaged>
        /// <unmanaged-short>IMFSAMIStyle::SetSelectedStyle</unmanaged-short>
        public unsafe void SetSelectedStyle(System.String wszStyleRef)
        {
            SharpDX.Result __result__;
            fixed (char *wszStyleRef_ = wszStyleRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszStyleRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the current style from the SAMI media source. </p>
        /// </summary>
        /// <param name = "wszStyleOut"><dd> <p> Receives a reference to a null-terminated string that contains the name of the style. If no style is currently set, the method returns an empty string. The caller must free the memory for the string by calling <strong>CoTaskMemFree</strong>.  </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>bb970429</doc-id>
        /// <unmanaged>HRESULT IMFSAMIStyle::GetSelectedStyle([Out] wchar_t** ppwszStyle)</unmanaged>
        /// <unmanaged-short>IMFSAMIStyle::GetSelectedStyle</unmanaged-short>
        public unsafe void GetSelectedStyle(System.IntPtr wszStyleOut)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszStyleOut, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("c40a00f2-b93a-4d80-ae8c-5a1c634f58e4")]
    public partial class Sample : SharpDX.MediaFoundation.MediaAttributes
    {
        public Sample(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Sample(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Sample(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves flags associated with the sample.</p><p>Currently no flags are defined. Instead, metadata for samples is defined using attributes. To get attibutes from a sample, use the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface, which <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> inherits. For a list of sample attributes, see Sample Attributes.</p>
        /// </summary>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms701587</doc-id>
        /// <unmanaged>GetSampleFlags / SetSampleFlags</unmanaged>
        /// <unmanaged-short>GetSampleFlags</unmanaged-short>
        public System.Int32 SampleFlags
        {
            get
            {
                GetSampleFlags(out var __output__);
                return __output__;
            }

            set => SetSampleFlags(value);
        }

        /// <summary>
        /// <p> </p><p>Retrieves the presentation time of the sample.</p>
        /// </summary>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms705645</doc-id>
        /// <unmanaged>GetSampleTime / SetSampleTime</unmanaged>
        /// <unmanaged-short>GetSampleTime</unmanaged-short>
        public System.Int64 SampleTime
        {
            get
            {
                GetSampleTime(out var __output__);
                return __output__;
            }

            set => SetSampleTime(value);
        }

        /// <summary>
        /// <p> </p><p>Retrieves the duration of the sample.</p>
        /// </summary>
        /// <remarks>
        /// <p>If the sample contains more than one buffer, the duration includes the data from all of the buffers.</p><p>If the retrieved duration is zero, or if the method returns <strong><see cref = "NoSampleDuration"/></strong>, the duration is unknown. In that case, it might be possible to calculate the duration from the media type?for example, by using the video frame rate or the audio sampling rate.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms703056</doc-id>
        /// <unmanaged>GetSampleDuration / SetSampleDuration</unmanaged>
        /// <unmanaged-short>GetSampleDuration</unmanaged-short>
        public System.Int64 SampleDuration
        {
            get
            {
                GetSampleDuration(out var __output__);
                return __output__;
            }

            set => SetSampleDuration(value);
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of buffers in the sample.</p>
        /// </summary>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms705655</doc-id>
        /// <unmanaged>GetBufferCount</unmanaged>
        /// <unmanaged-short>GetBufferCount</unmanaged-short>
        public System.Int32 BufferCount
        {
            get
            {
                GetBufferCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the total length of the valid data in all of the buffers in the sample. The length is calculated as the sum of the values retrieved by the <strong>IMFMediaBuffer::GetCurrentLength</strong> method.</p>
        /// </summary>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms704584</doc-id>
        /// <unmanaged>GetTotalLength</unmanaged>
        /// <unmanaged-short>GetTotalLength</unmanaged-short>
        public System.Int32 TotalLength
        {
            get
            {
                GetTotalLength(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves flags associated with the sample.</p><p>Currently no flags are defined. Instead, metadata for samples is defined using attributes. To get attibutes from a sample, use the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface, which <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> inherits. For a list of sample attributes, see Sample Attributes.</p>
        /// </summary>
        /// <param name = "dwSampleFlagsRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms701587</doc-id>
        /// <unmanaged>HRESULT IMFSample::GetSampleFlags([Out] DWORD* pdwSampleFlags)</unmanaged>
        /// <unmanaged-short>IMFSample::GetSampleFlags</unmanaged-short>
        internal unsafe void GetSampleFlags(out System.Int32 dwSampleFlagsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwSampleFlagsRef_ = &dwSampleFlagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwSampleFlagsRef_, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets flags associated with the sample.</p><p>Currently no flags are defined. Instead, metadata for samples is defined using attributes. To set attibutes on a sample, use the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface, which <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> inherits. For a list of sample attributes, see Sample Attributes.</p>
        /// </summary>
        /// <param name = "dwSampleFlags">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms696207</doc-id>
        /// <unmanaged>HRESULT IMFSample::SetSampleFlags([In] DWORD dwSampleFlags)</unmanaged>
        /// <unmanaged-short>IMFSample::SetSampleFlags</unmanaged-short>
        internal unsafe void SetSampleFlags(System.Int32 dwSampleFlags)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwSampleFlags, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the presentation time of the sample.</p>
        /// </summary>
        /// <param name = "hnsSampleTimeRef"><dd> <p>Receives the presentation time, in 100-nanosecond units.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoSampleTimestamp"/></strong></dt> </dl> </td><td> <p>The sample does not have a presentation time.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms705645</doc-id>
        /// <unmanaged>HRESULT IMFSample::GetSampleTime([Out] longlong* phnsSampleTime)</unmanaged>
        /// <unmanaged-short>IMFSample::GetSampleTime</unmanaged-short>
        internal unsafe void GetSampleTime(out System.Int64 hnsSampleTimeRef)
        {
            SharpDX.Result __result__;
            fixed (void *hnsSampleTimeRef_ = &hnsSampleTimeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, hnsSampleTimeRef_, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the presentation time of the sample.</p>
        /// </summary>
        /// <param name = "hnsSampleTime"><dd> <p>The presentation time, in 100-nanosecond units.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Some pipeline components require samples that have time stamps. Generally the component that generates the data for the sample also sets the time stamp. The Media Session might modify the time stamps.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms697282</doc-id>
        /// <unmanaged>HRESULT IMFSample::SetSampleTime([In] longlong hnsSampleTime)</unmanaged>
        /// <unmanaged-short>IMFSample::SetSampleTime</unmanaged-short>
        internal unsafe void SetSampleTime(System.Int64 hnsSampleTime)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, hnsSampleTime, (*(void ***)this._nativePointer)[36]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the duration of the sample.</p>
        /// </summary>
        /// <param name = "hnsSampleDurationRef"><dd> <p>Receives the duration, in 100-nanosecond units.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoSampleDuration"/></strong></dt> </dl> </td><td> <p>The sample does not have a specified duration.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the sample contains more than one buffer, the duration includes the data from all of the buffers.</p><p>If the retrieved duration is zero, or if the method returns <strong><see cref = "NoSampleDuration"/></strong>, the duration is unknown. In that case, it might be possible to calculate the duration from the media type?for example, by using the video frame rate or the audio sampling rate.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms703056</doc-id>
        /// <unmanaged>HRESULT IMFSample::GetSampleDuration([Out] longlong* phnsSampleDuration)</unmanaged>
        /// <unmanaged-short>IMFSample::GetSampleDuration</unmanaged-short>
        internal unsafe void GetSampleDuration(out System.Int64 hnsSampleDurationRef)
        {
            SharpDX.Result __result__;
            fixed (void *hnsSampleDurationRef_ = &hnsSampleDurationRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, hnsSampleDurationRef_, (*(void ***)this._nativePointer)[37]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the duration of the sample.</p>
        /// </summary>
        /// <param name = "hnsSampleDuration"><dd> <p>Duration of the sample, in 100-nanosecond units.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method succeeds if the duration is negative, although negative durations are probably not valid for most types of data. It is the responsibility of the object that consumes the sample to validate the duration.</p><p>The duration can also be zero. This might be valid for some types of data. For example, the sample might contain stream metadata with no buffers.</p><p>Until this method is called, the <strong>IMFSample::GetSampleDuration</strong> method returns <strong><see cref = "NoSampleDuration"/></strong>.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms705626</doc-id>
        /// <unmanaged>HRESULT IMFSample::SetSampleDuration([In] longlong hnsSampleDuration)</unmanaged>
        /// <unmanaged-short>IMFSample::SetSampleDuration</unmanaged-short>
        internal unsafe void SetSampleDuration(System.Int64 hnsSampleDuration)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, hnsSampleDuration, (*(void ***)this._nativePointer)[38]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of buffers in the sample.</p>
        /// </summary>
        /// <param name = "dwBufferCountRef"><dd> <p>Receives the number of buffers in the sample. A sample might contain zero buffers.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms705655</doc-id>
        /// <unmanaged>HRESULT IMFSample::GetBufferCount([Out] DWORD* pdwBufferCount)</unmanaged>
        /// <unmanaged-short>IMFSample::GetBufferCount</unmanaged-short>
        internal unsafe void GetBufferCount(out System.Int32 dwBufferCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwBufferCountRef_ = &dwBufferCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwBufferCountRef_, (*(void ***)this._nativePointer)[39]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets a buffer from the sample, by index.</p><p> </p><strong>Note</strong>??In most cases, it is safer to use the <strong>IMFSample::ConvertToContiguousBuffer</strong> method.  If the sample contains more than one buffer, the <strong>ConvertToContiguousBuffer</strong> method replaces them with a single buffer, copies the original data into that buffer, and returns the new buffer to the caller. The copy operation occurs at most once. On subsequent calls, no data is copied.?
        /// </summary>
        /// <param name = "dwIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <remarks>
        /// <p>A sample might contain more than one buffer. Use the <strong>GetBufferByIndex</strong> method to enumerate the individual buffers.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms697014</doc-id>
        /// <unmanaged>HRESULT IMFSample::GetBufferByIndex([In] DWORD dwIndex,[Out] IMFMediaBuffer** ppBuffer)</unmanaged>
        /// <unmanaged-short>IMFSample::GetBufferByIndex</unmanaged-short>
        public unsafe SharpDX.MediaFoundation.MediaBuffer GetBufferByIndex(System.Int32 dwIndex)
        {
            SharpDX.MediaFoundation.MediaBuffer bufferOut;
            System.IntPtr bufferOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwIndex, &bufferOut_, (*(void ***)this._nativePointer)[40]);
            if (bufferOut_ != System.IntPtr.Zero)
                bufferOut = new SharpDX.MediaFoundation.MediaBuffer(bufferOut_);
            else
                bufferOut = null;
            __result__.CheckError();
            return bufferOut;
        }

        /// <summary>
        /// <p> Converts a sample with multiple buffers into a sample with a single buffer. </p>
        /// </summary>
        /// <returns><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaBuffer"/></strong> interface. The caller must release the interface.</p> </dd></returns>
        /// <remarks>
        /// <p>If the sample contains more than one buffer, this method copies the data from the original buffers into a new buffer, and replaces the original buffer list with the new buffer. The new buffer is returned in the <em>ppBuffer</em> parameter.</p><p> If the sample contains a single buffer, this method returns a reference to the original buffer. In typical use, most samples do not contain multiple buffers.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms698917</doc-id>
        /// <unmanaged>HRESULT IMFSample::ConvertToContiguousBuffer([Out] IMFMediaBuffer** ppBuffer)</unmanaged>
        /// <unmanaged-short>IMFSample::ConvertToContiguousBuffer</unmanaged-short>
        public unsafe SharpDX.MediaFoundation.MediaBuffer ConvertToContiguousBuffer()
        {
            SharpDX.MediaFoundation.MediaBuffer bufferOut;
            System.IntPtr bufferOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &bufferOut_, (*(void ***)this._nativePointer)[41]);
            if (bufferOut_ != System.IntPtr.Zero)
                bufferOut = new SharpDX.MediaFoundation.MediaBuffer(bufferOut_);
            else
                bufferOut = null;
            __result__.CheckError();
            return bufferOut;
        }

        /// <summary>
        /// <p> Adds a buffer to the end of the list of buffers in the sample. </p>
        /// </summary>
        /// <param name = "bufferRef"><dd> <p>Pointer to the buffer's <strong><see cref = "SharpDX.MediaFoundation.MediaBuffer"/></strong> interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><c>null</c> reference argument.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>For uncompressed video data, each buffer should contain a single video frame, and samples should not contain multiple frames. In general, storing multiple buffers in a sample is discouraged.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms697465</doc-id>
        /// <unmanaged>HRESULT IMFSample::AddBuffer([In] IMFMediaBuffer* pBuffer)</unmanaged>
        /// <unmanaged-short>IMFSample::AddBuffer</unmanaged-short>
        public unsafe void AddBuffer(SharpDX.MediaFoundation.MediaBuffer bufferRef)
        {
            System.IntPtr bufferRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            bufferRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaBuffer>(bufferRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bufferRef_, (*(void ***)this._nativePointer)[42]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Removes a buffer at a specified index from the sample.</p>
        /// </summary>
        /// <param name = "dwIndex"><dd> <p>Index of the buffer. To find the number of buffers in the sample, call <strong>IMFSample::GetBufferCount</strong>. Buffers are indexed from zero.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms705646</doc-id>
        /// <unmanaged>HRESULT IMFSample::RemoveBufferByIndex([In] DWORD dwIndex)</unmanaged>
        /// <unmanaged-short>IMFSample::RemoveBufferByIndex</unmanaged-short>
        public unsafe void RemoveBufferByIndex(System.Int32 dwIndex)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwIndex, (*(void ***)this._nativePointer)[43]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Removes all of the buffers from the sample.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms703108</doc-id>
        /// <unmanaged>HRESULT IMFSample::RemoveAllBuffers()</unmanaged>
        /// <unmanaged-short>IMFSample::RemoveAllBuffers</unmanaged-short>
        public unsafe void RemoveAllBuffers()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[44]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the total length of the valid data in all of the buffers in the sample. The length is calculated as the sum of the values retrieved by the <strong>IMFMediaBuffer::GetCurrentLength</strong> method.</p>
        /// </summary>
        /// <param name = "cbTotalLengthRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms704584</doc-id>
        /// <unmanaged>HRESULT IMFSample::GetTotalLength([Out] DWORD* pcbTotalLength)</unmanaged>
        /// <unmanaged-short>IMFSample::GetTotalLength</unmanaged-short>
        internal unsafe void GetTotalLength(out System.Int32 cbTotalLengthRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbTotalLengthRef_ = &cbTotalLengthRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cbTotalLengthRef_, (*(void ***)this._nativePointer)[45]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Copies the sample data to a buffer. This method concatenates the valid data from all of the buffers of the sample, in order.</p>
        /// </summary>
        /// <param name = "bufferRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaBuffer"/></strong> interface of the destination buffer. The buffer must be large enough to hold the valid data in the sample. To get the size of the data in the sample, call <strong>IMFSample::GetTotalLength</strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><c>null</c> reference argument.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "BufferTooSmall"/></strong></dt> </dl> </td><td> <p>The buffer is not large enough to contain the data.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms703119</doc-id>
        /// <unmanaged>HRESULT IMFSample::CopyToBuffer([In] IMFMediaBuffer* pBuffer)</unmanaged>
        /// <unmanaged-short>IMFSample::CopyToBuffer</unmanaged-short>
        public unsafe void CopyToBuffer(SharpDX.MediaFoundation.MediaBuffer bufferRef)
        {
            System.IntPtr bufferRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            bufferRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaBuffer>(bufferRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bufferRef_, (*(void ***)this._nativePointer)[46]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("8C7B80BF-EE42-4b59-B1DF-55668E1BDCA8")]
    public partial interface SampleGrabberSinkCallback : SharpDX.MediaFoundation.ClockStateSink
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("ca86aa50-c46e-429e-ab27-16d6ac6844cb")]
    public partial interface SampleGrabberSinkCallback2 : SharpDX.MediaFoundation.SampleGrabberSinkCallback
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("8feed468-6f7e-440d-869a-49bdd283ad0d")]
    public partial class SampleOutputStream : SharpDX.ComObject
    {
        public SampleOutputStream(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SampleOutputStream(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SampleOutputStream(nativePtr);
        /// <summary>
        /// <p>Begins an asynchronous request to write a media sample to the stream.</p>
        /// </summary>
        /// <param name = "sampleRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> interface of the sample.</p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface.</p> </dd></param>
        /// <param name = "unkStateRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.  </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>When the sample has been written to the stream, the callback object's <strong>IMFAsyncCallback::Invoke</strong> method is called. At that point, the caller should call <strong>IMFSampleOutputStream::EndWriteSample</strong> to complete the asynchronous request.  </p>
        /// </remarks>
        /// <doc-id>hh448052</doc-id>
        /// <unmanaged>HRESULT IMFSampleOutputStream::BeginWriteSample([In, Optional] IMFSample* pSample,[In, Optional] IMFAsyncCallback* pCallback,[In, Optional] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFSampleOutputStream::BeginWriteSample</unmanaged-short>
        public unsafe void BeginWriteSample(SharpDX.MediaFoundation.Sample sampleRef, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown unkStateRef)
        {
            System.IntPtr sampleRef_ = System.IntPtr.Zero;
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            sampleRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Sample>(sampleRef);
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)sampleRef_, (void *)callbackRef_, (void *)unkStateRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Completes an asynchronous request to write a media sample to the stream.</p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the <strong>IMFAsyncCallback::Invoke</strong> method. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Call this method when the <strong>IMFSampleOutputStream::BeginWriteSample</strong> method completes asynchronously.  </p>
        /// </remarks>
        /// <doc-id>hh448053</doc-id>
        /// <unmanaged>HRESULT IMFSampleOutputStream::EndWriteSample([In, Optional] IMFAsyncResult* pResult)</unmanaged>
        /// <unmanaged-short>IMFSampleOutputStream::EndWriteSample</unmanaged-short>
        public unsafe void EndWriteSample(SharpDX.MediaFoundation.AsyncResult resultRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSampleOutputStream::Close()</unmanaged>
        /// <unmanaged-short>IMFSampleOutputStream::Close</unmanaged-short>
        public unsafe void Close()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("8e36395f-c7b9-43c4-a54d-512b4af63c95")]
    public partial class SampleProtection : SharpDX.ComObject
    {
        public SampleProtection(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SampleProtection(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SampleProtection(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the version of sample protection that the component implements on input.</p>
        /// </summary>
        /// <doc-id>bb970365</doc-id>
        /// <unmanaged>GetInputProtectionVersion</unmanaged>
        /// <unmanaged-short>GetInputProtectionVersion</unmanaged-short>
        public System.Int32 InputProtectionVersion
        {
            get
            {
                GetInputProtectionVersion(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the version of sample protection that the component implements on output.</p>
        /// </summary>
        /// <doc-id>bb970415</doc-id>
        /// <unmanaged>GetOutputProtectionVersion</unmanaged>
        /// <unmanaged-short>GetOutputProtectionVersion</unmanaged-short>
        public System.Int32 OutputProtectionVersion
        {
            get
            {
                GetOutputProtectionVersion(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the version of sample protection that the component implements on input.</p>
        /// </summary>
        /// <param name = "dwVersionRef"><dd> <p>Receives a member of the <strong><see cref = "SharpDX.MediaFoundation.SampleProtectionVersion"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970365</doc-id>
        /// <unmanaged>HRESULT IMFSampleProtection::GetInputProtectionVersion([Out] DWORD* pdwVersion)</unmanaged>
        /// <unmanaged-short>IMFSampleProtection::GetInputProtectionVersion</unmanaged-short>
        internal unsafe void GetInputProtectionVersion(out System.Int32 dwVersionRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwVersionRef_ = &dwVersionRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwVersionRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the version of sample protection that the component implements on output.</p>
        /// </summary>
        /// <param name = "dwVersionRef"><dd> <p>Receives a member of the <strong><see cref = "SharpDX.MediaFoundation.SampleProtectionVersion"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970415</doc-id>
        /// <unmanaged>HRESULT IMFSampleProtection::GetOutputProtectionVersion([Out] DWORD* pdwVersion)</unmanaged>
        /// <unmanaged-short>IMFSampleProtection::GetOutputProtectionVersion</unmanaged-short>
        internal unsafe void GetOutputProtectionVersion(out System.Int32 dwVersionRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwVersionRef_ = &dwVersionRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwVersionRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the sample protection certificate.</p>
        /// </summary>
        /// <param name = "dwVersion"><dd> <p>Specifies the version number of the sample protection scheme for which to receive a certificate. The version number is specified as a <strong><see cref = "SharpDX.MediaFoundation.SampleProtectionVersion"/></strong> enumeration value.</p> </dd></param>
        /// <param name = "certOut"><dd> <p>Receives a reference to a buffer containing the certificate. The caller must free the memory for the buffer by calling <strong>CoTaskMemFree</strong>.</p> </dd></param>
        /// <param name = "cbCertRef"><dd> <p>Receives the size of the <em>ppCert</em> buffer, in bytes.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p>Not implemented.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>For certain version numbers of sample protection, the downstream component must provide a certificate. Components that do not support these version numbers can return E_NOTIMPL.</p>
        /// </remarks>
        /// <doc-id>bb970503</doc-id>
        /// <unmanaged>HRESULT IMFSampleProtection::GetProtectionCertificate([In] DWORD dwVersion,[Out, Buffer] unsigned char** ppCert,[Out] DWORD* pcbCert)</unmanaged>
        /// <unmanaged-short>IMFSampleProtection::GetProtectionCertificate</unmanaged-short>
        public unsafe void GetProtectionCertificate(System.Int32 dwVersion, System.Byte[] certOut, out System.Int32 cbCertRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbCertRef_ = &cbCertRef)
                fixed (void *certOut_ = certOut)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwVersion, certOut_, cbCertRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves initialization information for sample protection from the upstream component.</p>
        /// </summary>
        /// <param name = "dwVersion"><dd> <p>Specifies the version number of the sample protection scheme. The version number is specified as a <strong><see cref = "SharpDX.MediaFoundation.SampleProtectionVersion"/></strong> enumeration value.</p> </dd></param>
        /// <param name = "dwOutputId"><dd> <p>Identifier of the output stream. The identifier corresponds to the output stream identifier returned by the <strong><see cref = "SharpDX.MediaFoundation.Transform"/></strong> interface.</p> </dd></param>
        /// <param name = "bCertRef"><dd> <p>Pointer to a certificate provided by the downstream component.</p> </dd></param>
        /// <param name = "cbCert"><dd> <p>Size of the certificate, in bytes.</p> </dd></param>
        /// <param name = "bSeedOut"><dd> <p>Receives a reference to a buffer that contains the initialization information for downstream component. The caller must free the memory for the buffer by calling <strong>CoTaskMemFree</strong>.</p> </dd></param>
        /// <param name = "cbSeedRef"><dd> <p>Receives the size of the <em>ppbSeed</em> buffer, in bytes.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p>Not implemented.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method must be implemented by the upstream component. The method fails if the component does not support the requested sample protection version. Downstream components do not implement this method and should return E_NOTIMPL.</p>
        /// </remarks>
        /// <doc-id>ms693577</doc-id>
        /// <unmanaged>HRESULT IMFSampleProtection::InitOutputProtection([In] DWORD dwVersion,[In] DWORD dwOutputId,[In] unsigned char* pbCert,[In] DWORD cbCert,[In] unsigned char** ppbSeed,[In] DWORD* pcbSeed)</unmanaged>
        /// <unmanaged-short>IMFSampleProtection::InitOutputProtection</unmanaged-short>
        public unsafe void InitOutputProtection(System.Int32 dwVersion, System.Int32 dwOutputId, System.Byte bCertRef, System.Int32 cbCert, System.Byte bSeedOut, System.Int32 cbSeedRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwVersion, dwOutputId, &bCertRef, cbCert, &bSeedOut, &cbSeedRef, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Initializes sample protection on the downstream component.</p>
        /// </summary>
        /// <param name = "dwVersion"><dd> <p>Specifies the version number of the sample protection scheme. The version number is specified as a <strong><see cref = "SharpDX.MediaFoundation.SampleProtectionVersion"/></strong> enumeration value.</p> </dd></param>
        /// <param name = "dwInputId"><dd> <p>Identifier of the input stream. The identifier corresponds to the output stream identifier returned by the <strong><see cref = "SharpDX.MediaFoundation.Transform"/></strong> interface.</p> </dd></param>
        /// <param name = "bSeedRef"><dd> <p>Pointer to a buffer that contains the initialization data provided by the upstream component. To retrieve this buffer, call <strong>IMFSampleProtection::InitOutputProtection</strong>.</p> </dd></param>
        /// <param name = "cbSeed"><dd> <p>Size of the <em>pbSeed</em> buffer, in bytes.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms696181</doc-id>
        /// <unmanaged>HRESULT IMFSampleProtection::InitInputProtection([In] DWORD dwVersion,[In] DWORD dwInputId,[In] unsigned char* pbSeed,[In] DWORD cbSeed)</unmanaged>
        /// <unmanaged-short>IMFSampleProtection::InitInputProtection</unmanaged-short>
        public unsafe void InitInputProtection(System.Int32 dwVersion, System.Int32 dwInputId, System.Byte bSeedRef, System.Int32 cbSeed)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwVersion, dwInputId, &bSeedRef, cbSeed, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("e9931663-80bf-4c6e-98af-5dcf58747d1f")]
    public partial class SaveJob : SharpDX.ComObject
    {
        public SaveJob(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SaveJob(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SaveJob(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the percentage of content saved to the provided byte stream.</p>
        /// </summary>
        /// <doc-id>ms700176</doc-id>
        /// <unmanaged>GetProgress</unmanaged>
        /// <unmanaged-short>GetProgress</unmanaged-short>
        public System.Int32 Progress
        {
            get
            {
                GetProgress(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Begins saving a Windows Media file to the application's byte stream.</p>
        /// </summary>
        /// <param name = "streamRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IByteStream"/></strong> interface of the application's byte stream. The data from the source byte stream is written to this byte stream.</p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface</p> </dd></param>
        /// <param name = "stateRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>When the operation completes, the callback object's <strong>IMFAsyncCallback::Invoke</strong> method is called. At that point, the application should call <strong>IMFSaveJob::EndSave</strong> to complete the asynchronous request.</p>
        /// </remarks>
        /// <doc-id>ms705664</doc-id>
        /// <unmanaged>HRESULT IMFSaveJob::BeginSave([In] IMFByteStream* pStream,[In] IMFAsyncCallback* pCallback,[In] IUnknown* pState)</unmanaged>
        /// <unmanaged-short>IMFSaveJob::BeginSave</unmanaged-short>
        public unsafe void BeginSave(SharpDX.MediaFoundation.IByteStream streamRef, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown stateRef)
        {
            System.IntPtr streamRef_ = System.IntPtr.Zero;
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr stateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            streamRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IByteStream>(streamRef);
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            stateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(stateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)streamRef_, (void *)callbackRef_, (void *)stateRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Completes the operation started by <strong>IMFSaveJob::BeginSave</strong>.</p>
        /// </summary>
        /// <param name = "resultRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms701610</doc-id>
        /// <unmanaged>HRESULT IMFSaveJob::EndSave([In] IMFAsyncResult* pResult)</unmanaged>
        /// <unmanaged-short>IMFSaveJob::EndSave</unmanaged-short>
        public unsafe void EndSave(SharpDX.MediaFoundation.AsyncResult resultRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Cancels the operation started by <strong>IMFSaveJob::BeginSave</strong>.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms703196</doc-id>
        /// <unmanaged>HRESULT IMFSaveJob::CancelSave()</unmanaged>
        /// <unmanaged-short>IMFSaveJob::CancelSave</unmanaged-short>
        public unsafe void CancelSave()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the percentage of content saved to the provided byte stream.</p>
        /// </summary>
        /// <param name = "dwPercentCompleteRef"><dd> <p>Receives the percentage of completion.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms700176</doc-id>
        /// <unmanaged>HRESULT IMFSaveJob::GetProgress([Out] DWORD* pdwPercentComplete)</unmanaged>
        /// <unmanaged-short>IMFSaveJob::GetProgress</unmanaged-short>
        internal unsafe void GetProgress(out System.Int32 dwPercentCompleteRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwPercentCompleteRef_ = &dwPercentCompleteRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwPercentCompleteRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("6D4C7B74-52A0-4bb7-B0DB-55F29F47A668")]
    public partial class SchemeHandler : SharpDX.ComObject
    {
        public SchemeHandler(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SchemeHandler(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SchemeHandler(nativePtr);
        /// <summary>
        /// <p> </p><p>Begins an asynchronous request to create an object from a URL.</p><p>When the Source Resolver creates a media source from a URL, it passes the request to a scheme handler. The scheme handler might create a media source directly from the URL, or it might return a byte stream. If it returns a byte stream, the source resolver use a byte-stream handler to create the media source from the byte stream.</p>
        /// </summary>
        /// <param name = "wszURLRef">No documentation.</param>
        /// <param name = "dwFlags">No documentation.</param>
        /// <param name = "propsRef">No documentation.</param>
        /// <param name = "iUnknownCancelCookieOut">No documentation.</param>
        /// <param name = "callbackRef">No documentation.</param>
        /// <param name = "unkStateRef">No documentation.</param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_ACCESSDENIED</strong></dt> </dl> </td><td> <p> Cannot open the URL with the requested access (read or write). </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedByteStreamType"/></strong></dt> </dl> </td><td> <p> Unsupported byte stream type. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The <em>dwFlags</em> parameter must contain the <strong>MF_RESOLUTION_MEDIASOURCE</strong> flag or the <strong>MF_RESOLUTION_BYTESTREAM</strong> flag. If the <strong>MF_RESOLUTION_MEDIASOURCE</strong> flag is set, the scheme handler might create the media source directly from the URL, or it might create a byte stream. The type of object is returned in the <em>pObjectType</em> parameter of the <strong>IMFSchemeHandler::EndCreateObject</strong> method. If the scheme handler returns a byte stream, the source resolver will pass the byte stream to a byte-stream handler, which will create the media source from the byte stream.</p><p>If the <strong>MF_RESOLUTION_BYTESTREAM</strong> flag is set, the scheme handler will attempt to create a byte stream from the URL. However, if the scheme handler is designed to create a media source directly, rather than a byte stream, the method will fail.</p><p>The following table summarizes the behavior of these two flags when passed to this method:</p><table> <tr><th>Flag</th><th>Object created</th></tr> <tr><td><strong>MF_RESOLUTION_MEDIASOURCE</strong></td><td>Media source or byte stream</td></tr> <tr><td><strong>MF_RESOLUTION_BYTESTREAM</strong></td><td>Byte stream</td></tr> </table><p>?</p><p>The <strong>MF_RESOLUTION_MEDIASOURCE</strong> and <strong>MF_RESOLUTION_BYTESTREAM</strong> flags can be combined, although in this case it is redundant.</p><p>When the operation completes, the scheme handler calls the <strong>IMFAsyncCallback::Invoke</strong> method. The Invoke method should call <strong>IMFSchemeHandler::EndCreateObject</strong> to get a reference to the created object.</p>
        /// </remarks>
        /// <doc-id>bb970433</doc-id>
        /// <unmanaged>HRESULT IMFSchemeHandler::BeginCreateObject([In] const wchar_t* pwszURL,[In] DWORD dwFlags,[In] IPropertyStore* pProps,[Out, Optional] IUnknown** ppIUnknownCancelCookie,[In] IMFAsyncCallback* pCallback,[In] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFSchemeHandler::BeginCreateObject</unmanaged-short>
        public unsafe void BeginCreateObject(System.String wszURLRef, System.Int32 dwFlags, SharpDX.ComObject propsRef, out SharpDX.IUnknown iUnknownCancelCookieOut, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown unkStateRef)
        {
            System.IntPtr propsRef_ = System.IntPtr.Zero;
            System.IntPtr iUnknownCancelCookieOut_ = System.IntPtr.Zero;
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            propsRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.ComObject>(propsRef);
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            fixed (char *wszURLRef_ = wszURLRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszURLRef_, dwFlags, (void *)propsRef_, &iUnknownCancelCookieOut_, (void *)callbackRef_, (void *)unkStateRef_, (*(void ***)this._nativePointer)[3]);
            if (iUnknownCancelCookieOut_ != System.IntPtr.Zero)
                iUnknownCancelCookieOut = new SharpDX.ComObject(iUnknownCancelCookieOut_);
            else
                iUnknownCancelCookieOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Completes an asynchronous request to create an object from a URL.</p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the Invoke method.</p> </dd></param>
        /// <param name = "objectTypeRef"><dd> <p>Receives a member of the <strong><see cref = "SharpDX.MediaFoundation.ObjectType"/></strong> enumeration, specifying the type of object that was created.</p> </dd></param>
        /// <param name = "objectOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of the object. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_ABORT</strong></dt> </dl> </td><td> <p>The operation was canceled.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method from inside the <strong>IMFAsyncCallback::Invoke</strong> method.</p>
        /// </remarks>
        /// <doc-id>bb970550</doc-id>
        /// <unmanaged>HRESULT IMFSchemeHandler::EndCreateObject([In] IMFAsyncResult* pResult,[Out] MF_OBJECT_TYPE* pObjectType,[Out] IUnknown** ppObject)</unmanaged>
        /// <unmanaged-short>IMFSchemeHandler::EndCreateObject</unmanaged-short>
        public unsafe void EndCreateObject(SharpDX.MediaFoundation.AsyncResult resultRef, out SharpDX.MediaFoundation.ObjectType objectTypeRef, out SharpDX.IUnknown objectOut)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            System.IntPtr objectOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            fixed (void *objectTypeRef_ = &objectTypeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, objectTypeRef_, &objectOut_, (*(void ***)this._nativePointer)[4]);
            if (objectOut_ != System.IntPtr.Zero)
                objectOut = new SharpDX.ComObject(objectOut_);
            else
                objectOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Cancels the current request to create an object from a URL.</p>
        /// </summary>
        /// <param name = "iUnknownCancelCookieRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface that was returned in the <em>ppIUnknownCancelCookie</em> parameter of the <strong>IMFSchemeHandler::BeginCreateObject</strong> method.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You can use this method to cancel a previous call to <strong>BeginCreateObject</strong>. Because that method is asynchronous, however, it might be completed before the operation can be canceled. Therefore, your callback might still be invoked after you call this method.</p><p>The operation cannot be canceled if <strong>BeginCreateObject</strong> returns <strong><c>null</c></strong> in the <em>ppIUnknownCancelCookie</em> parameter.</p>
        /// </remarks>
        /// <doc-id>bb970419</doc-id>
        /// <unmanaged>HRESULT IMFSchemeHandler::CancelObjectCreation([In] IUnknown* pIUnknownCancelCookie)</unmanaged>
        /// <unmanaged-short>IMFSchemeHandler::CancelObjectCreation</unmanaged-short>
        public unsafe void CancelObjectCreation(SharpDX.IUnknown iUnknownCancelCookieRef)
        {
            System.IntPtr iUnknownCancelCookieRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iUnknownCancelCookieRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(iUnknownCancelCookieRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iUnknownCancelCookieRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("d0ae555d-3b12-4d97-b060-0990bc5aeb67")]
    public partial class SecureChannel : SharpDX.ComObject
    {
        public SecureChannel(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SecureChannel(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SecureChannel(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the client's certificate.</p>
        /// </summary>
        /// <param name = "certOut"><dd> <p>Receives a reference to a buffer allocated by the object. The buffer contains the client's certificate. The caller must release the buffer by calling <strong>CoTaskMemFree</strong>.</p> </dd></param>
        /// <param name = "cbCertRef"><dd> <p>Receives the size of the <em>ppCert</em> buffer, in bytes.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970528</doc-id>
        /// <unmanaged>HRESULT IMFSecureChannel::GetCertificate([Out, Buffer] unsigned char** ppCert,[Out] DWORD* pcbCert)</unmanaged>
        /// <unmanaged-short>IMFSecureChannel::GetCertificate</unmanaged-short>
        public unsafe void GetCertificate(System.Byte[] certOut, out System.Int32 cbCertRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbCertRef_ = &cbCertRef)
                fixed (void *certOut_ = certOut)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, certOut_, cbCertRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Passes the encrypted session key to the client.</p>
        /// </summary>
        /// <param name = "bEncryptedSessionKeyRef"><dd> <p>Pointer to a buffer that contains the encrypted session key. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "cbSessionKey"><dd> <p>Size of the <em>pbEncryptedSessionKey</em> buffer, in bytes.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970477</doc-id>
        /// <unmanaged>HRESULT IMFSecureChannel::SetupSession([In, Buffer] unsigned char* pbEncryptedSessionKey,[In] DWORD cbSessionKey)</unmanaged>
        /// <unmanaged-short>IMFSecureChannel::SetupSession</unmanaged-short>
        public unsafe void SetupSession(System.Byte[] bEncryptedSessionKeyRef, System.Int32 cbSessionKey)
        {
            SharpDX.Result __result__;
            fixed (void *bEncryptedSessionKeyRef_ = bEncryptedSessionKeyRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bEncryptedSessionKeyRef_, cbSessionKey, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("26AFEA53-D9ED-42B5-AB80-E64F9EE34779")]
    public partial class SeekInfo : SharpDX.ComObject
    {
        public SeekInfo(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SeekInfo(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SeekInfo(nativePtr);
        /// <summary>
        /// <p>For a particular seek position, gets the two nearest key frames.</p>
        /// </summary>
        /// <param name = "guidTimeFormatRef"><dd> <p>A reference to a <see cref = "System.Guid"/> that specifies the time format. The time format defines the units for the other parameters of this method. If the value is <strong>GUID_NULL</strong>, the time format is 100-nanosecond units. Some media sources might support additional time format GUIDs. </p> </dd></param>
        /// <param name = "varStartPositionRef"><dd> <p>The seek position. The units for this parameter are specified by <em>pguidTimeFormat</em>.</p> </dd></param>
        /// <param name = "varPreviousKeyFrameRef"><dd> <p>Receives the position of the nearest key frame that appears earlier than <em>pvarStartPosition</em>. The units for this parameter are specified by <em>pguidTimeFormat</em>.</p> </dd></param>
        /// <param name = "varNextKeyFrameRef"><dd> <p>Receives the position of the nearest key frame that appears earlier than <em>pvarStartPosition</em>. The units for this parameter are specified by <em>pguidTimeFormat</em>.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedTimeFormat"/></strong></dt> </dl> </td><td> <p>The time format specified in <em>pguidTimeFormat</em> is not supported.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If an application seeks to a non?key frame, the decoder must start decoding from the previous key frame. This can increase latency, because several frames might get decoded before the requested frame is reached. To reduce latency, an application can call this method to find the two key frames that are closest to the desired time, and then seek to one of those key frames. </p>
        /// </remarks>
        /// <doc-id>hh448055</doc-id>
        /// <unmanaged>HRESULT IMFSeekInfo::GetNearestKeyFrames([In] const GUID* pguidTimeFormat,[In] const PROPVARIANT* pvarStartPosition,[Out] PROPVARIANT* pvarPreviousKeyFrame,[Out] PROPVARIANT* pvarNextKeyFrame)</unmanaged>
        /// <unmanaged-short>IMFSeekInfo::GetNearestKeyFrames</unmanaged-short>
        public unsafe void GetNearestKeyFrames(System.Guid guidTimeFormatRef, SharpDX.Win32.Variant varStartPositionRef, out SharpDX.Win32.Variant varPreviousKeyFrameRef, out SharpDX.Win32.Variant varNextKeyFrameRef)
        {
            varPreviousKeyFrameRef = default (SharpDX.Win32.Variant);
            varNextKeyFrameRef = default (SharpDX.Win32.Variant);
            SharpDX.Result __result__;
            fixed (void *varNextKeyFrameRef_ = &varNextKeyFrameRef)
                fixed (void *varPreviousKeyFrameRef_ = &varPreviousKeyFrameRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidTimeFormatRef, &varStartPositionRef, varPreviousKeyFrameRef_, varNextKeyFrameRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("683F7A5E-4A19-43CD-B1A9-DBF4AB3F7777")]
    public partial class SensorActivitiesReport : SharpDX.ComObject
    {
        public SensorActivitiesReport(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SensorActivitiesReport(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SensorActivitiesReport(nativePtr);
        /// <summary>
        /// <p>Gets the count of <strong><see cref = "SharpDX.MediaFoundation.SensorActivityReport"/></strong> objects that are available to be retrieved.</p>
        /// </summary>
        /// <doc-id>mt493227</doc-id>
        /// <unmanaged>GetCount</unmanaged>
        /// <unmanaged-short>GetCount</unmanaged-short>
        public System.Int32 Count
        {
            get
            {
                GetCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the count of <strong><see cref = "SharpDX.MediaFoundation.SensorActivityReport"/></strong> objects that are available to be retrieved.</p>
        /// </summary>
        /// <param name = "cCountRef">No documentation.</param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>The <em>pcCount</em> parameter is null.</p> </td></tr> </table><p> </p></returns>
        /// <doc-id>mt493227</doc-id>
        /// <unmanaged>HRESULT IMFSensorActivitiesReport::GetCount([Out] ULONG* pcCount)</unmanaged>
        /// <unmanaged-short>IMFSensorActivitiesReport::GetCount</unmanaged-short>
        internal unsafe void GetCount(out System.Int32 cCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *cCountRef_ = &cCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cCountRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Retrieves an <strong><see cref = "SharpDX.MediaFoundation.SensorActivityReport"/></strong> based on the specified index.</p>
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "sensorActivityReport">No documentation.</param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>The <em>sensorActivityReport</em> parameter is null.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidIndex"/></strong></dt> </dl> </td><td> <p>The <em>Index</em> parameter is not less than value returned by <strong>GetCount</strong>. </p> </td></tr> </table><p> </p></returns>
        /// <doc-id>mt493225</doc-id>
        /// <unmanaged>HRESULT IMFSensorActivitiesReport::GetActivityReport([In] ULONG Index,[Out] IMFSensorActivityReport** sensorActivityReport)</unmanaged>
        /// <unmanaged-short>IMFSensorActivitiesReport::GetActivityReport</unmanaged-short>
        public unsafe void GetActivityReport(System.Int32 index, out SharpDX.MediaFoundation.SensorActivityReport sensorActivityReport)
        {
            System.IntPtr sensorActivityReport_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, index, &sensorActivityReport_, (*(void ***)this._nativePointer)[4]);
            if (sensorActivityReport_ != System.IntPtr.Zero)
                sensorActivityReport = new SharpDX.MediaFoundation.SensorActivityReport(sensorActivityReport_);
            else
                sensorActivityReport = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Retrieves an <strong><see cref = "SharpDX.MediaFoundation.SensorActivityReport"/></strong> based on the specified device name.</p>
        /// </summary>
        /// <param name = "symbolicName">No documentation.</param>
        /// <param name = "sensorActivityReport">No documentation.</param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>The <em>symbolicName</em> parameter is null.</p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>The <em>sensorActivityReport</em> parameter is null.</p> </td></tr> <tr><td> <dl> <dt><strong>E_OUTOFMEMORY</strong></dt> </dl> </td><td> <p>The system is out of memory.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidIndex"/></strong></dt> </dl> </td><td> <p>The <em>Index</em> parameter is not less than value returned by <strong>GetCount</strong>. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotFound"/></strong></dt> </dl> </td><td> <p>No sensor with the specified symbolic name was found.</p> </td></tr> </table><p> </p></returns>
        /// <doc-id>mt493226</doc-id>
        /// <unmanaged>HRESULT IMFSensorActivitiesReport::GetActivityReportByDeviceName([In] const wchar_t* SymbolicName,[Out] IMFSensorActivityReport** sensorActivityReport)</unmanaged>
        /// <unmanaged-short>IMFSensorActivitiesReport::GetActivityReportByDeviceName</unmanaged-short>
        public unsafe void GetActivityReportByDeviceName(System.String symbolicName, out SharpDX.MediaFoundation.SensorActivityReport sensorActivityReport)
        {
            System.IntPtr sensorActivityReport_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (char *symbolicName_ = symbolicName)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)symbolicName_, &sensorActivityReport_, (*(void ***)this._nativePointer)[5]);
            if (sensorActivityReport_ != System.IntPtr.Zero)
                sensorActivityReport = new SharpDX.MediaFoundation.SensorActivityReport(sensorActivityReport_);
            else
                sensorActivityReport = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("DE5072EE-DBE3-46DC-8A87-B6F631194751")]
    public partial class SensorActivitiesReportCallback : SharpDX.ComObject
    {
        public SensorActivitiesReportCallback(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SensorActivitiesReportCallback(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SensorActivitiesReportCallback(nativePtr);
        /// <summary>
        /// <p>Raised by the media pipeline when a new <strong><see cref = "SharpDX.MediaFoundation.SensorActivitiesReport"/></strong> is available.</p>
        /// </summary>
        /// <param name = "sensorActivitiesReport">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>mt493219</doc-id>
        /// <unmanaged>HRESULT IMFSensorActivitiesReportCallback::OnActivitiesReport([In] IMFSensorActivitiesReport* sensorActivitiesReport)</unmanaged>
        /// <unmanaged-short>IMFSensorActivitiesReportCallback::OnActivitiesReport</unmanaged-short>
        public unsafe void OnActivitiesReport(SharpDX.MediaFoundation.SensorActivitiesReport sensorActivitiesReport)
        {
            System.IntPtr sensorActivitiesReport_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            sensorActivitiesReport_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.SensorActivitiesReport>(sensorActivitiesReport);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)sensorActivitiesReport_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("D0CEF145-B3F4-4340-A2E5-7A5080CA05CB")]
    public partial class SensorActivityMonitor : SharpDX.ComObject
    {
        public SensorActivityMonitor(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SensorActivityMonitor(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SensorActivityMonitor(nativePtr);
        /// <summary>
        /// <p>Starts the sensor activity monitor.</p>
        /// </summary>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The sensor activity monitor has already been started.</p> </td></tr> </table><p> </p></returns>
        /// <doc-id>mt493221</doc-id>
        /// <unmanaged>HRESULT IMFSensorActivityMonitor::Start()</unmanaged>
        /// <unmanaged-short>IMFSensorActivityMonitor::Start</unmanaged-short>
        public unsafe void Start()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Stops the sensor activity monitor.</p>
        /// </summary>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> </table><p> </p></returns>
        /// <doc-id>mt493223</doc-id>
        /// <unmanaged>HRESULT IMFSensorActivityMonitor::Stop()</unmanaged>
        /// <unmanaged-short>IMFSensorActivityMonitor::Stop</unmanaged-short>
        public unsafe void Stop()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3E8C4BE1-A8C2-4528-90DE-2851BDE5FEAD")]
    public partial class SensorActivityReport : SharpDX.ComObject
    {
        public SensorActivityReport(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SensorActivityReport(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SensorActivityReport(nativePtr);
        /// <summary>
        /// <p>Gets the count of <strong><see cref = "SharpDX.MediaFoundation.SensorProcessActivity"/></strong> objects, representing the current activity of a process associated with the sensor, that are available to be retrieved.</p>
        /// </summary>
        /// <doc-id>mt493230</doc-id>
        /// <unmanaged>GetProcessCount</unmanaged>
        /// <unmanaged-short>GetProcessCount</unmanaged-short>
        public System.Int32 ProcessCount
        {
            get
            {
                GetProcessCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the friendly name for the sensor associated with the report.</p>
        /// </summary>
        /// <param name = "friendlyName"><dd> <p>The string into which the sensor friendly name is written.</p> </dd></param>
        /// <param name = "cchFriendlyName"><dd> <p>The character count of the <em>FriendlyName</em> string.</p> </dd></param>
        /// <param name = "cchWrittenRef"><dd> <p>Receives the number of characters that were written into the <em>FriendlyName</em> string.</p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>The <em>pcchWritten</em> parameter is null.</p> </td></tr> </table><p> </p></returns>
        /// <doc-id>mt493228</doc-id>
        /// <unmanaged>HRESULT IMFSensorActivityReport::GetFriendlyName([Out, Buffer] wchar_t* FriendlyName,[In] ULONG cchFriendlyName,[Out] ULONG* pcchWritten)</unmanaged>
        /// <unmanaged-short>IMFSensorActivityReport::GetFriendlyName</unmanaged-short>
        public unsafe void GetFriendlyName(System.IntPtr friendlyName, System.Int32 cchFriendlyName, out System.Int32 cchWrittenRef)
        {
            SharpDX.Result __result__;
            fixed (void *cchWrittenRef_ = &cchWrittenRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)friendlyName, cchFriendlyName, cchWrittenRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the symbolic link for the sensor associated with the report.</p>
        /// </summary>
        /// <param name = "symbolicLink"><dd> <p>The string into which the sensor symbolic link is written.</p> </dd></param>
        /// <param name = "cchSymbolicLink"><dd> <p>The character count of the <em>SymbolicLink</em> string.</p> </dd></param>
        /// <param name = "cchWrittenRef"><dd> <p>Receives the number of characters that were written into the <em>SymbolicLink</em> string.</p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>The <em>pcchWritten</em> parameter is null.</p> </td></tr> </table><p> </p></returns>
        /// <doc-id>mt493231</doc-id>
        /// <unmanaged>HRESULT IMFSensorActivityReport::GetSymbolicLink([Out, Buffer] wchar_t* SymbolicLink,[In] ULONG cchSymbolicLink,[Out] ULONG* pcchWritten)</unmanaged>
        /// <unmanaged-short>IMFSensorActivityReport::GetSymbolicLink</unmanaged-short>
        public unsafe void GetSymbolicLink(System.IntPtr symbolicLink, System.Int32 cchSymbolicLink, out System.Int32 cchWrittenRef)
        {
            SharpDX.Result __result__;
            fixed (void *cchWrittenRef_ = &cchWrittenRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)symbolicLink, cchSymbolicLink, cchWrittenRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the count of <strong><see cref = "SharpDX.MediaFoundation.SensorProcessActivity"/></strong> objects, representing the current activity of a process associated with the sensor, that are available to be retrieved.</p>
        /// </summary>
        /// <param name = "cCountRef">No documentation.</param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>The <em>pulCount</em> parameter is null.</p> </td></tr> </table><p> </p></returns>
        /// <doc-id>mt493230</doc-id>
        /// <unmanaged>HRESULT IMFSensorActivityReport::GetProcessCount([Out] ULONG* pcCount)</unmanaged>
        /// <unmanaged-short>IMFSensorActivityReport::GetProcessCount</unmanaged-short>
        internal unsafe void GetProcessCount(out System.Int32 cCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *cCountRef_ = &cCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cCountRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets an <strong><see cref = "SharpDX.MediaFoundation.SensorProcessActivity"/></strong> object representing the current process activity of a sensor.</p>
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "processActivityOut">No documentation.</param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>The <em>ppProcessActivity</em> parameter is null.</p> </td></tr> </table><p> </p></returns>
        /// <doc-id>mt493229</doc-id>
        /// <unmanaged>HRESULT IMFSensorActivityReport::GetProcessActivity([In] ULONG Index,[Out] IMFSensorProcessActivity** ppProcessActivity)</unmanaged>
        /// <unmanaged-short>IMFSensorActivityReport::GetProcessActivity</unmanaged-short>
        public unsafe void GetProcessActivity(System.Int32 index, out SharpDX.MediaFoundation.SensorProcessActivity processActivityOut)
        {
            System.IntPtr processActivityOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, index, &processActivityOut_, (*(void ***)this._nativePointer)[6]);
            if (processActivityOut_ != System.IntPtr.Zero)
                processActivityOut = new SharpDX.MediaFoundation.SensorProcessActivity(processActivityOut_);
            else
                processActivityOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("FB9F48F2-2A18-4E28-9730-786F30F04DC4")]
    public partial class SensorDevice : SharpDX.ComObject
    {
        public SensorDevice(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SensorDevice(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SensorDevice(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDeviceId</unmanaged>
        /// <unmanaged-short>GetDeviceId</unmanaged-short>
        public System.Int64 DeviceId
        {
            get
            {
                GetDeviceId(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDeviceType</unmanaged>
        /// <unmanaged-short>GetDeviceType</unmanaged-short>
        public SharpDX.MediaFoundation.SensorDeviceType DeviceType
        {
            get
            {
                GetDeviceType(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFlags</unmanaged>
        /// <unmanaged-short>GetFlags</unmanaged-short>
        public System.Int64 Flags
        {
            get
            {
                GetFlags(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDeviceAttributes</unmanaged>
        /// <unmanaged-short>GetDeviceAttributes</unmanaged-short>
        public SharpDX.MediaFoundation.MediaAttributes DeviceAttributes
        {
            get
            {
                GetDeviceAttributes(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSensorDeviceMode / SetSensorDeviceMode</unmanaged>
        /// <unmanaged-short>GetSensorDeviceMode</unmanaged-short>
        public SharpDX.MediaFoundation.SensorDeviceMode SensorDeviceMode
        {
            get
            {
                GetSensorDeviceMode(out var __output__);
                return __output__;
            }

            set => SetSensorDeviceMode(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "deviceIdRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorDevice::GetDeviceId([Out] unsigned longlong* pDeviceId)</unmanaged>
        /// <unmanaged-short>IMFSensorDevice::GetDeviceId</unmanaged-short>
        internal unsafe void GetDeviceId(out System.Int64 deviceIdRef)
        {
            SharpDX.Result __result__;
            fixed (void *deviceIdRef_ = &deviceIdRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, deviceIdRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "typeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorDevice::GetDeviceType([Out] MFSensorDeviceType* pType)</unmanaged>
        /// <unmanaged-short>IMFSensorDevice::GetDeviceType</unmanaged-short>
        internal unsafe void GetDeviceType(out SharpDX.MediaFoundation.SensorDeviceType typeRef)
        {
            SharpDX.Result __result__;
            fixed (void *typeRef_ = &typeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, typeRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "flagsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorDevice::GetFlags([Out] unsigned longlong* pFlags)</unmanaged>
        /// <unmanaged-short>IMFSensorDevice::GetFlags</unmanaged-short>
        internal unsafe void GetFlags(out System.Int64 flagsRef)
        {
            SharpDX.Result __result__;
            fixed (void *flagsRef_ = &flagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, flagsRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "symbolicLink">No documentation.</param>
        /// <param name = "cchSymbolicLink">No documentation.</param>
        /// <param name = "cchWrittenRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorDevice::GetSymbolicLink([Out, Buffer] wchar_t* SymbolicLink,[In] LONG cchSymbolicLink,[Out] LONG* pcchWritten)</unmanaged>
        /// <unmanaged-short>IMFSensorDevice::GetSymbolicLink</unmanaged-short>
        public unsafe void GetSymbolicLink(System.IntPtr symbolicLink, System.Int32 cchSymbolicLink, out System.Int32 cchWrittenRef)
        {
            SharpDX.Result __result__;
            fixed (void *cchWrittenRef_ = &cchWrittenRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)symbolicLink, cchSymbolicLink, cchWrittenRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "attributesOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorDevice::GetDeviceAttributes([Out, Optional] IMFAttributes** ppAttributes)</unmanaged>
        /// <unmanaged-short>IMFSensorDevice::GetDeviceAttributes</unmanaged-short>
        internal unsafe void GetDeviceAttributes(out SharpDX.MediaFoundation.MediaAttributes attributesOut)
        {
            System.IntPtr attributesOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &attributesOut_, (*(void ***)this._nativePointer)[7]);
            if (attributesOut_ != System.IntPtr.Zero)
                attributesOut = new SharpDX.MediaFoundation.MediaAttributes(attributesOut_);
            else
                attributesOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "eType">No documentation.</param>
        /// <param name = "dwCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorDevice::GetStreamAttributesCount([In] MFSensorStreamType eType,[Out] DWORD* pdwCount)</unmanaged>
        /// <unmanaged-short>IMFSensorDevice::GetStreamAttributesCount</unmanaged-short>
        public unsafe void GetStreamAttributesCount(SharpDX.MediaFoundation.SensorStreamType eType, out System.Int32 dwCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwCountRef_ = &dwCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)eType), dwCountRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "eType">No documentation.</param>
        /// <param name = "dwIndex">No documentation.</param>
        /// <param name = "attributesOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorDevice::GetStreamAttributes([In] MFSensorStreamType eType,[In] DWORD dwIndex,[Out] IMFAttributes** ppAttributes)</unmanaged>
        /// <unmanaged-short>IMFSensorDevice::GetStreamAttributes</unmanaged-short>
        public unsafe void GetStreamAttributes(SharpDX.MediaFoundation.SensorStreamType eType, System.Int32 dwIndex, out SharpDX.MediaFoundation.MediaAttributes attributesOut)
        {
            System.IntPtr attributesOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)eType), dwIndex, &attributesOut_, (*(void ***)this._nativePointer)[9]);
            if (attributesOut_ != System.IntPtr.Zero)
                attributesOut = new SharpDX.MediaFoundation.MediaAttributes(attributesOut_);
            else
                attributesOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "eMode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorDevice::SetSensorDeviceMode([In] MFSensorDeviceMode eMode)</unmanaged>
        /// <unmanaged-short>IMFSensorDevice::SetSensorDeviceMode</unmanaged-short>
        internal unsafe void SetSensorDeviceMode(SharpDX.MediaFoundation.SensorDeviceMode eMode)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)eMode), (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "eModeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorDevice::GetSensorDeviceMode([Out] MFSensorDeviceMode* peMode)</unmanaged>
        /// <unmanaged-short>IMFSensorDevice::GetSensorDeviceMode</unmanaged-short>
        internal unsafe void GetSensorDeviceMode(out SharpDX.MediaFoundation.SensorDeviceMode eModeRef)
        {
            SharpDX.Result __result__;
            fixed (void *eModeRef_ = &eModeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, eModeRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("4110243A-9757-461F-89F1-F22345BCAB4E")]
    public partial class SensorGroup : SharpDX.ComObject
    {
        public SensorGroup(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SensorGroup(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SensorGroup(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFlags</unmanaged>
        /// <unmanaged-short>GetFlags</unmanaged-short>
        public System.Int64 Flags
        {
            get
            {
                GetFlags(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSensorGroupAttributes</unmanaged>
        /// <unmanaged-short>GetSensorGroupAttributes</unmanaged-short>
        public SharpDX.MediaFoundation.MediaAttributes SensorGroupAttributes
        {
            get
            {
                GetSensorGroupAttributes(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSensorDeviceCount</unmanaged>
        /// <unmanaged-short>GetSensorDeviceCount</unmanaged-short>
        public System.Int32 SensorDeviceCount
        {
            get
            {
                GetSensorDeviceCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDefaultSensorDeviceIndex / SetDefaultSensorDeviceIndex</unmanaged>
        /// <unmanaged-short>GetDefaultSensorDeviceIndex</unmanaged-short>
        public System.Int32 DefaultSensorDeviceIndex
        {
            get
            {
                GetDefaultSensorDeviceIndex(out var __output__);
                return __output__;
            }

            set => SetDefaultSensorDeviceIndex(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "symbolicLink">No documentation.</param>
        /// <param name = "cchSymbolicLink">No documentation.</param>
        /// <param name = "cchWrittenRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorGroup::GetSymbolicLink([Out, Buffer] wchar_t* SymbolicLink,[In] LONG cchSymbolicLink,[Out] LONG* pcchWritten)</unmanaged>
        /// <unmanaged-short>IMFSensorGroup::GetSymbolicLink</unmanaged-short>
        public unsafe void GetSymbolicLink(System.IntPtr symbolicLink, System.Int32 cchSymbolicLink, out System.Int32 cchWrittenRef)
        {
            SharpDX.Result __result__;
            fixed (void *cchWrittenRef_ = &cchWrittenRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)symbolicLink, cchSymbolicLink, cchWrittenRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "flagsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorGroup::GetFlags([Out] unsigned longlong* pFlags)</unmanaged>
        /// <unmanaged-short>IMFSensorGroup::GetFlags</unmanaged-short>
        internal unsafe void GetFlags(out System.Int64 flagsRef)
        {
            SharpDX.Result __result__;
            fixed (void *flagsRef_ = &flagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, flagsRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "attributesOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorGroup::GetSensorGroupAttributes([Out, Optional] IMFAttributes** ppAttributes)</unmanaged>
        /// <unmanaged-short>IMFSensorGroup::GetSensorGroupAttributes</unmanaged-short>
        internal unsafe void GetSensorGroupAttributes(out SharpDX.MediaFoundation.MediaAttributes attributesOut)
        {
            System.IntPtr attributesOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &attributesOut_, (*(void ***)this._nativePointer)[5]);
            if (attributesOut_ != System.IntPtr.Zero)
                attributesOut = new SharpDX.MediaFoundation.MediaAttributes(attributesOut_);
            else
                attributesOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorGroup::GetSensorDeviceCount([Out] DWORD* pdwCount)</unmanaged>
        /// <unmanaged-short>IMFSensorGroup::GetSensorDeviceCount</unmanaged-short>
        internal unsafe void GetSensorDeviceCount(out System.Int32 dwCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwCountRef_ = &dwCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwCountRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwIndex">No documentation.</param>
        /// <param name = "deviceOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorGroup::GetSensorDevice([In] DWORD dwIndex,[Out] IMFSensorDevice** ppDevice)</unmanaged>
        /// <unmanaged-short>IMFSensorGroup::GetSensorDevice</unmanaged-short>
        public unsafe void GetSensorDevice(System.Int32 dwIndex, out SharpDX.MediaFoundation.SensorDevice deviceOut)
        {
            System.IntPtr deviceOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwIndex, &deviceOut_, (*(void ***)this._nativePointer)[7]);
            if (deviceOut_ != System.IntPtr.Zero)
                deviceOut = new SharpDX.MediaFoundation.SensorDevice(deviceOut_);
            else
                deviceOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorGroup::SetDefaultSensorDeviceIndex([In] DWORD dwIndex)</unmanaged>
        /// <unmanaged-short>IMFSensorGroup::SetDefaultSensorDeviceIndex</unmanaged-short>
        internal unsafe void SetDefaultSensorDeviceIndex(System.Int32 dwIndex)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwIndex, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwIndexRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorGroup::GetDefaultSensorDeviceIndex([Out] DWORD* pdwIndex)</unmanaged>
        /// <unmanaged-short>IMFSensorGroup::GetDefaultSensorDeviceIndex</unmanaged-short>
        internal unsafe void GetDefaultSensorDeviceIndex(out System.Int32 dwIndexRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwIndexRef_ = &dwIndexRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwIndexRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sourceOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorGroup::CreateMediaSource([Out] IMFMediaSource** ppSource)</unmanaged>
        /// <unmanaged-short>IMFSensorGroup::CreateMediaSource</unmanaged-short>
        public unsafe void CreateMediaSource(out SharpDX.MediaFoundation.MediaSource sourceOut)
        {
            System.IntPtr sourceOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &sourceOut_, (*(void ***)this._nativePointer)[10]);
            if (sourceOut_ != System.IntPtr.Zero)
                sourceOut = new SharpDX.MediaFoundation.MediaSource(sourceOut_);
            else
                sourceOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("39DC7F4A-B141-4719-813C-A7F46162A2B8")]
    public partial class SensorProcessActivity : SharpDX.ComObject
    {
        public SensorProcessActivity(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SensorProcessActivity(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SensorProcessActivity(nativePtr);
        /// <summary>
        /// <p>Gets the ID of the process with which the activity is associated.</p>
        /// </summary>
        /// <doc-id>mt493233</doc-id>
        /// <unmanaged>GetProcessId</unmanaged>
        /// <unmanaged-short>GetProcessId</unmanaged-short>
        public System.Int32 ProcessId
        {
            get
            {
                GetProcessId(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets a value indicating whether the sensor is currently streaming.</p>
        /// </summary>
        /// <doc-id>mt493236</doc-id>
        /// <unmanaged>GetStreamingState</unmanaged>
        /// <unmanaged-short>GetStreamingState</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool StreamingState
        {
            get
            {
                GetStreamingState(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the streaming mode of the sensor process.</p>
        /// </summary>
        /// <doc-id>mt493235</doc-id>
        /// <unmanaged>GetStreamingMode</unmanaged>
        /// <unmanaged-short>GetStreamingMode</unmanaged-short>
        public SharpDX.MediaFoundation.SensorDeviceMode StreamingMode
        {
            get
            {
                GetStreamingMode(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the time associated with the sensor activity report.</p>
        /// </summary>
        /// <doc-id>mt493234</doc-id>
        /// <unmanaged>GetReportTime</unmanaged>
        /// <unmanaged-short>GetReportTime</unmanaged-short>
        public System.Int64 ReportTime
        {
            get
            {
                GetReportTime(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the ID of the process with which the activity is associated.</p>
        /// </summary>
        /// <param name = "pIDRef"><dd> <p>Receives the process ID.</p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>The <em>pPID</em> parameter is null.</p> </td></tr> </table><p> </p></returns>
        /// <doc-id>mt493233</doc-id>
        /// <unmanaged>HRESULT IMFSensorProcessActivity::GetProcessId([Out] ULONG* pPID)</unmanaged>
        /// <unmanaged-short>IMFSensorProcessActivity::GetProcessId</unmanaged-short>
        internal unsafe void GetProcessId(out System.Int32 pIDRef)
        {
            SharpDX.Result __result__;
            fixed (void *pIDRef_ = &pIDRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, pIDRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a value indicating whether the sensor is currently streaming.</p>
        /// </summary>
        /// <param name = "fStreamingRef"><dd> <p>Receives a value indicating whether the sensor is currently streaming.</p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>The <em>pfStreaming</em> parameter is null.</p> </td></tr> </table><p> </p></returns>
        /// <doc-id>mt493236</doc-id>
        /// <unmanaged>HRESULT IMFSensorProcessActivity::GetStreamingState([Out] BOOL* pfStreaming)</unmanaged>
        /// <unmanaged-short>IMFSensorProcessActivity::GetStreamingState</unmanaged-short>
        internal unsafe void GetStreamingState(out SharpDX.Mathematics.Interop.RawBool fStreamingRef)
        {
            fStreamingRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fStreamingRef_ = &fStreamingRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fStreamingRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the streaming mode of the sensor process.</p>
        /// </summary>
        /// <param name = "modeRef"><dd> <p>Receives the process ID.</p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>The <em>pMode</em> parameter is null.</p> </td></tr> </table><p> </p></returns>
        /// <doc-id>mt493235</doc-id>
        /// <unmanaged>HRESULT IMFSensorProcessActivity::GetStreamingMode([Out] MFSensorDeviceMode* pMode)</unmanaged>
        /// <unmanaged-short>IMFSensorProcessActivity::GetStreamingMode</unmanaged-short>
        internal unsafe void GetStreamingMode(out SharpDX.MediaFoundation.SensorDeviceMode modeRef)
        {
            SharpDX.Result __result__;
            fixed (void *modeRef_ = &modeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, modeRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the time associated with the sensor activity report.</p>
        /// </summary>
        /// <param name = "ftRef"><dd> <p>Receives the time associated with the sensor activity report.</p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>The <em>pft</em> parameter is null.</p> </td></tr> </table><p> </p></returns>
        /// <doc-id>mt493234</doc-id>
        /// <unmanaged>HRESULT IMFSensorProcessActivity::GetReportTime([Out] FILETIME* pft)</unmanaged>
        /// <unmanaged-short>IMFSensorProcessActivity::GetReportTime</unmanaged-short>
        internal unsafe void GetReportTime(out System.Int64 ftRef)
        {
            SharpDX.Result __result__;
            fixed (void *ftRef_ = &ftRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, ftRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("22F765D1-8DAB-4107-846D-56BAF72215E7")]
    public partial class SensorProfile : SharpDX.ComObject
    {
        public SensorProfile(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SensorProfile(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SensorProfile(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetProfileId</unmanaged>
        /// <unmanaged-short>GetProfileId</unmanaged-short>
        public SharpDX.MediaFoundation.Sensorprofileid ProfileId
        {
            get
            {
                GetProfileId(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "idRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorProfile::GetProfileId([Out] SENSORPROFILEID* pId)</unmanaged>
        /// <unmanaged-short>IMFSensorProfile::GetProfileId</unmanaged-short>
        internal unsafe void GetProfileId(out SharpDX.MediaFoundation.Sensorprofileid idRef)
        {
            idRef = default (SharpDX.MediaFoundation.Sensorprofileid);
            SharpDX.Result __result__;
            fixed (void *idRef_ = &idRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, idRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "streamId">No documentation.</param>
        /// <param name = "wzFilterSetString">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorProfile::AddProfileFilter([In] unsigned int StreamId,[In] const wchar_t* wzFilterSetString)</unmanaged>
        /// <unmanaged-short>IMFSensorProfile::AddProfileFilter</unmanaged-short>
        public unsafe void AddProfileFilter(System.Int32 streamId, System.String wzFilterSetString)
        {
            SharpDX.Result __result__;
            fixed (char *wzFilterSetString_ = wzFilterSetString)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, streamId, (void *)wzFilterSetString_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "streamId">No documentation.</param>
        /// <param name = "mediaTypeRef">No documentation.</param>
        /// <param name = "fSupportedRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorProfile::IsMediaTypeSupported([In] unsigned int StreamId,[In] IMFMediaType* pMediaType,[Out] BOOL* pfSupported)</unmanaged>
        /// <unmanaged-short>IMFSensorProfile::IsMediaTypeSupported</unmanaged-short>
        public unsafe void IsMediaTypeSupported(System.Int32 streamId, SharpDX.MediaFoundation.MediaType mediaTypeRef, out SharpDX.Mathematics.Interop.RawBool fSupportedRef)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            fSupportedRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            mediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(mediaTypeRef);
            fixed (void *fSupportedRef_ = &fSupportedRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, streamId, (void *)mediaTypeRef_, fSupportedRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "wzBlockedControl">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorProfile::AddBlockedControl([In] const wchar_t* wzBlockedControl)</unmanaged>
        /// <unmanaged-short>IMFSensorProfile::AddBlockedControl</unmanaged-short>
        public unsafe void AddBlockedControl(System.String wzBlockedControl)
        {
            SharpDX.Result __result__;
            fixed (char *wzBlockedControl_ = wzBlockedControl)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wzBlockedControl_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("C95EA55B-0187-48BE-9353-8D2507662351")]
    public partial class SensorProfileCollection : SharpDX.ComObject
    {
        public SensorProfileCollection(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SensorProfileCollection(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SensorProfileCollection(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetProfileCount</unmanaged>
        /// <unmanaged-short>GetProfileCount</unmanaged-short>
        public System.Int32 ProfileCount
        {
            get => GetProfileCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWORD IMFSensorProfileCollection::GetProfileCount()</unmanaged>
        /// <unmanaged-short>IMFSensorProfileCollection::GetProfileCount</unmanaged-short>
        internal unsafe System.Int32 GetProfileCount()
        {
            System.Int32 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "profileOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorProfileCollection::GetProfile([In] DWORD Index,[Out] IMFSensorProfile** ppProfile)</unmanaged>
        /// <unmanaged-short>IMFSensorProfileCollection::GetProfile</unmanaged-short>
        public unsafe void GetProfile(System.Int32 index, out SharpDX.MediaFoundation.SensorProfile profileOut)
        {
            System.IntPtr profileOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, index, &profileOut_, (*(void ***)this._nativePointer)[4]);
            if (profileOut_ != System.IntPtr.Zero)
                profileOut = new SharpDX.MediaFoundation.SensorProfile(profileOut_);
            else
                profileOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "profileRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorProfileCollection::AddProfile([In] IMFSensorProfile* pProfile)</unmanaged>
        /// <unmanaged-short>IMFSensorProfileCollection::AddProfile</unmanaged-short>
        public unsafe void AddProfile(SharpDX.MediaFoundation.SensorProfile profileRef)
        {
            System.IntPtr profileRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            profileRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.SensorProfile>(profileRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)profileRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "profileId">No documentation.</param>
        /// <param name = "profileOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorProfileCollection::FindProfile([In] SENSORPROFILEID* ProfileId,[Out] IMFSensorProfile** ppProfile)</unmanaged>
        /// <unmanaged-short>IMFSensorProfileCollection::FindProfile</unmanaged-short>
        public unsafe void FindProfile(ref SharpDX.MediaFoundation.Sensorprofileid profileId, out SharpDX.MediaFoundation.SensorProfile profileOut)
        {
            System.IntPtr profileOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (void *profileId_ = &profileId)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, profileId_, &profileOut_, (*(void ***)this._nativePointer)[6]);
            if (profileOut_ != System.IntPtr.Zero)
                profileOut = new SharpDX.MediaFoundation.SensorProfile(profileOut_);
            else
                profileOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <unmanaged>void IMFSensorProfileCollection::RemoveProfileByIndex([In] DWORD Index)</unmanaged>
        /// <unmanaged-short>IMFSensorProfileCollection::RemoveProfileByIndex</unmanaged-short>
        public unsafe void RemoveProfileByIndex(System.Int32 index)
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, index, (*(void ***)this._nativePointer)[7]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "profileId">No documentation.</param>
        /// <unmanaged>void IMFSensorProfileCollection::RemoveProfile([In] SENSORPROFILEID* ProfileId)</unmanaged>
        /// <unmanaged-short>IMFSensorProfileCollection::RemoveProfile</unmanaged-short>
        public unsafe void RemoveProfile(ref SharpDX.MediaFoundation.Sensorprofileid profileId)
        {
            fixed (void *profileId_ = &profileId)
                SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, profileId_, (*(void ***)this._nativePointer)[8]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("E9A42171-C56E-498A-8B39-EDA5A070B7FC")]
    public partial class SensorStream : SharpDX.MediaFoundation.MediaAttributes
    {
        public SensorStream(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SensorStream(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SensorStream(nativePtr);
        /// <summary>
        /// <p></p>
        /// </summary>
        /// <doc-id>mt797960</doc-id>
        /// <unmanaged>GetMediaTypeCount</unmanaged>
        /// <unmanaged-short>GetMediaTypeCount</unmanaged-short>
        public System.Int32 MediaTypeCount
        {
            get
            {
                GetMediaTypeCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p></p>
        /// </summary>
        /// <param name = "dwCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <doc-id>mt797960</doc-id>
        /// <unmanaged>HRESULT IMFSensorStream::GetMediaTypeCount([Out] DWORD* pdwCount)</unmanaged>
        /// <unmanaged-short>IMFSensorStream::GetMediaTypeCount</unmanaged-short>
        internal unsafe void GetMediaTypeCount(out System.Int32 dwCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwCountRef_ = &dwCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwCountRef_, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p></p>
        /// </summary>
        /// <param name = "dwIndex">No documentation.</param>
        /// <param name = "mediaTypeOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <doc-id>mt797960</doc-id>
        /// <unmanaged>HRESULT IMFSensorStream::GetMediaType([In] DWORD dwIndex,[Out] IMFMediaType** ppMediaType)</unmanaged>
        /// <unmanaged-short>IMFSensorStream::GetMediaType</unmanaged-short>
        public unsafe void GetMediaType(System.Int32 dwIndex, out SharpDX.MediaFoundation.MediaType mediaTypeOut)
        {
            System.IntPtr mediaTypeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwIndex, &mediaTypeOut_, (*(void ***)this._nativePointer)[34]);
            if (mediaTypeOut_ != System.IntPtr.Zero)
                mediaTypeOut = new SharpDX.MediaFoundation.MediaType(mediaTypeOut_);
            else
                mediaTypeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "streamOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorStream::CloneSensorStream([Out] IMFSensorStream** ppStream)</unmanaged>
        /// <unmanaged-short>IMFSensorStream::CloneSensorStream</unmanaged-short>
        public unsafe void CloneSensorStream(out SharpDX.MediaFoundation.SensorStream streamOut)
        {
            System.IntPtr streamOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &streamOut_, (*(void ***)this._nativePointer)[35]);
            if (streamOut_ != System.IntPtr.Zero)
                streamOut = new SharpDX.MediaFoundation.SensorStream(streamOut_);
            else
                streamOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("EED9C2EE-66B4-4F18-A697-AC7D3960215C")]
    public partial class SensorTransformFactory : SharpDX.ComObject
    {
        public SensorTransformFactory(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SensorTransformFactory(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SensorTransformFactory(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFactoryAttributes</unmanaged>
        /// <unmanaged-short>GetFactoryAttributes</unmanaged-short>
        public SharpDX.MediaFoundation.MediaAttributes FactoryAttributes
        {
            get
            {
                GetFactoryAttributes(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetTransformCount</unmanaged>
        /// <unmanaged-short>GetTransformCount</unmanaged-short>
        public System.Int32 TransformCount
        {
            get
            {
                GetTransformCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "attributesOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorTransformFactory::GetFactoryAttributes([Out] IMFAttributes** ppAttributes)</unmanaged>
        /// <unmanaged-short>IMFSensorTransformFactory::GetFactoryAttributes</unmanaged-short>
        internal unsafe void GetFactoryAttributes(out SharpDX.MediaFoundation.MediaAttributes attributesOut)
        {
            System.IntPtr attributesOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &attributesOut_, (*(void ***)this._nativePointer)[3]);
            if (attributesOut_ != System.IntPtr.Zero)
                attributesOut = new SharpDX.MediaFoundation.MediaAttributes(attributesOut_);
            else
                attributesOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwMaxTransformCount">No documentation.</param>
        /// <param name = "sensorDevicesRef">No documentation.</param>
        /// <param name = "attributesRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorTransformFactory::InitializeFactory([In] DWORD dwMaxTransformCount,[In] IMFCollection* pSensorDevices,[In, Optional] IMFAttributes* pAttributes)</unmanaged>
        /// <unmanaged-short>IMFSensorTransformFactory::InitializeFactory</unmanaged-short>
        public unsafe void InitializeFactory(System.Int32 dwMaxTransformCount, SharpDX.MediaFoundation.Collection sensorDevicesRef, SharpDX.MediaFoundation.MediaAttributes attributesRef)
        {
            System.IntPtr sensorDevicesRef_ = System.IntPtr.Zero;
            System.IntPtr attributesRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            sensorDevicesRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Collection>(sensorDevicesRef);
            attributesRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(attributesRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwMaxTransformCount, (void *)sensorDevicesRef_, (void *)attributesRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorTransformFactory::GetTransformCount([Out] DWORD* pdwCount)</unmanaged>
        /// <unmanaged-short>IMFSensorTransformFactory::GetTransformCount</unmanaged-short>
        internal unsafe void GetTransformCount(out System.Int32 dwCountRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwCountRef_ = &dwCountRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwCountRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Called by the media pipeline to get information about a transform provided by the  sensor transform.</p>
        /// </summary>
        /// <param name = "transformIndex"><dd> <p>The index of the transform for which information is being requested. In the current release, this value will always be 0.</p> </dd></param>
        /// <param name = "guidTransformIdRef"><dd> <p>Gets the identifier for the transform.</p> </dd></param>
        /// <param name = "attributesOut"><dd> <p>The attribute store to be populated.</p> </dd></param>
        /// <param name = "streamInformationOut"><dd> <p>A collection of <strong><see cref = "SharpDX.MediaFoundation.SensorStream"/></strong> objects.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>mt797967</doc-id>
        /// <unmanaged>HRESULT IMFSensorTransformFactory::GetTransformInformation([In] DWORD TransformIndex,[Out] GUID* pguidTransformId,[Out, Optional] IMFAttributes** ppAttributes,[Out] IMFCollection** ppStreamInformation)</unmanaged>
        /// <unmanaged-short>IMFSensorTransformFactory::GetTransformInformation</unmanaged-short>
        public unsafe void GetTransformInformation(System.Int32 transformIndex, out System.Guid guidTransformIdRef, out SharpDX.MediaFoundation.MediaAttributes attributesOut, out SharpDX.MediaFoundation.Collection streamInformationOut)
        {
            guidTransformIdRef = default (System.Guid);
            System.IntPtr attributesOut_ = System.IntPtr.Zero;
            System.IntPtr streamInformationOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (void *guidTransformIdRef_ = &guidTransformIdRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, transformIndex, guidTransformIdRef_, &attributesOut_, &streamInformationOut_, (*(void ***)this._nativePointer)[6]);
            if (attributesOut_ != System.IntPtr.Zero)
                attributesOut = new SharpDX.MediaFoundation.MediaAttributes(attributesOut_);
            else
                attributesOut = null;
            if (streamInformationOut_ != System.IntPtr.Zero)
                streamInformationOut = new SharpDX.MediaFoundation.Collection(streamInformationOut_);
            else
                streamInformationOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "guidSensorTransformID">No documentation.</param>
        /// <param name = "attributesRef">No documentation.</param>
        /// <param name = "deviceMFTOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSensorTransformFactory::CreateTransform([In] const GUID&amp; guidSensorTransformID,[In, Optional] IMFAttributes* pAttributes,[Out] IMFDeviceTransform** ppDeviceMFT)</unmanaged>
        /// <unmanaged-short>IMFSensorTransformFactory::CreateTransform</unmanaged-short>
        public unsafe void CreateTransform(System.Guid guidSensorTransformID, SharpDX.MediaFoundation.MediaAttributes attributesRef, out SharpDX.MediaFoundation.DeviceTransform deviceMFTOut)
        {
            System.IntPtr attributesRef_ = System.IntPtr.Zero;
            System.IntPtr deviceMFTOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            attributesRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(attributesRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidSensorTransformID, (void *)attributesRef_, &deviceMFTOut_, (*(void ***)this._nativePointer)[7]);
            if (deviceMFTOut_ != System.IntPtr.Zero)
                deviceMFTOut = new SharpDX.MediaFoundation.DeviceTransform(deviceMFTOut_);
            else
                deviceMFTOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("197CD219-19CB-4de1-A64C-ACF2EDCBE59E")]
    public partial class SequencerSource : SharpDX.ComObject
    {
        public SequencerSource(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SequencerSource(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SequencerSource(nativePtr);
        /// <summary>
        /// <p> </p><p>Adds a topology to the end of the queue.</p>
        /// </summary>
        /// <param name = "topologyRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.Topology"/></strong> interface of the topology. This reference cannot be <strong><c>null</c></strong>. If an application passes <strong><c>null</c></strong>, the call fails with an E_INVALIDARG error code.</p> </dd></param>
        /// <param name = "dwFlags"><dd> <p>A combination of flags from the <strong><see cref = "SharpDX.MediaFoundation.SequencerTopologyFlags"/></strong> enumeration.</p> </dd></param>
        /// <param name = "dwIdRef"><dd> <p>Receives the sequencer element identifier for this topology.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Attributenotfound"/></strong></dt> </dl> </td><td> <p>The source topology node is missing one of the following attributes:</p> <ul> <li> <p> <strong><see cref = "StreamDescriptor"/></strong> </p> </li> <li> <p> <strong><see cref = "PresentationDescriptor"/></strong> </p> </li> <li> <p> <strong><see cref = "Source"/></strong> </p> </li> </ul> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The sequencer plays topologies in the order they are queued. You can queue as many topologies as you want to preroll.</p><p>The application must indicate to the sequencer when it has queued the last topology on the Media Session. To specify the last topology, set the SequencerTopologyFlags_Last flag in the <em>dwFlags</em> parameter when you append the topology. The sequencer uses this information to end playback with the pipeline. Otherwise, the sequencer waits indefinitely for a new topology to be queued.</p>
        /// </remarks>
        /// <doc-id>ms697046</doc-id>
        /// <unmanaged>HRESULT IMFSequencerSource::AppendTopology([In] IMFTopology* pTopology,[In] DWORD dwFlags,[Out] DWORD* pdwId)</unmanaged>
        /// <unmanaged-short>IMFSequencerSource::AppendTopology</unmanaged-short>
        public unsafe void AppendTopology(SharpDX.MediaFoundation.Topology topologyRef, System.Int32 dwFlags, out System.Int32 dwIdRef)
        {
            System.IntPtr topologyRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            topologyRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Topology>(topologyRef);
            fixed (void *dwIdRef_ = &dwIdRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)topologyRef_, dwFlags, dwIdRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Deletes a topology from the queue.</p>
        /// </summary>
        /// <param name = "dwId"><dd> <p>The sequencer element identifier of the topology to delete.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970428</doc-id>
        /// <unmanaged>HRESULT IMFSequencerSource::DeleteTopology([In] DWORD dwId)</unmanaged>
        /// <unmanaged-short>IMFSequencerSource::DeleteTopology</unmanaged-short>
        public unsafe void DeleteTopology(System.Int32 dwId)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwId, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Maps a presentation descriptor to its associated sequencer element identifier and the topology it represents.</p>
        /// </summary>
        /// <param name = "pDRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.PresentationDescriptor"/></strong> interface of the presentation descriptor.</p> </dd></param>
        /// <param name = "idRef"><dd> <p>Receives the sequencer element identifier. This value is assigned by the sequencer source when the application calls <strong>IMFSequencerSource::AppendTopology</strong>. This parameter is optional and can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "topologyOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.Topology"/></strong> interface of the original topology that the application added to the sequencer source. The caller must release the interface. This parameter can receive the value <strong><c>null</c></strong> if the sequencer source has switched to the next presentation. This parameter is optional and can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>The presentation descriptor is not valid.</p> </td></tr> <tr><td> <dl> <dt><strong>MF_S_SEQUENCER_CONTEXT_CANCELED</strong></dt> </dl> </td><td> <p>This segment was canceled.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The topology returned in <em>ppTopology</em> is the original topology that the application specified in <strong>AppendTopology</strong>. The source nodes in this topology contain references to the native sources. Do not queue this topology on the Media Session. Instead, call <strong>IMFMediaSourceTopologyProvider::GetMediaSourceTopology</strong> to get the sequencer source's modified topology. The source nodes in the modified topology contain references to the sequencer source, rather than the native sources.</p>
        /// </remarks>
        /// <doc-id>bb970514</doc-id>
        /// <unmanaged>HRESULT IMFSequencerSource::GetPresentationContext([In] IMFPresentationDescriptor* pPD,[Out, Optional] DWORD* pId,[Out, Optional] IMFTopology** ppTopology)</unmanaged>
        /// <unmanaged-short>IMFSequencerSource::GetPresentationContext</unmanaged-short>
        public unsafe void GetPresentationContext(SharpDX.MediaFoundation.PresentationDescriptor pDRef, out System.Int32 idRef, out SharpDX.MediaFoundation.Topology topologyOut)
        {
            System.IntPtr pDRef_ = System.IntPtr.Zero;
            System.IntPtr topologyOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            pDRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.PresentationDescriptor>(pDRef);
            fixed (void *idRef_ = &idRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)pDRef_, idRef_, &topologyOut_, (*(void ***)this._nativePointer)[5]);
            if (topologyOut_ != System.IntPtr.Zero)
                topologyOut = new SharpDX.MediaFoundation.Topology(topologyOut_);
            else
                topologyOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Updates a topology in the queue.</p>
        /// </summary>
        /// <param name = "dwId"><dd> <p>Sequencer element identifier of the topology to update.</p> </dd></param>
        /// <param name = "topologyRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.Topology"/></strong> interface of the updated topology object.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The sequencer source has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is asynchronous. When the operation is completed, the sequencer source sends an MESequencerSourceTopologyUpdated event.</p>
        /// </remarks>
        /// <doc-id>bb970402</doc-id>
        /// <unmanaged>HRESULT IMFSequencerSource::UpdateTopology([In] DWORD dwId,[In] IMFTopology* pTopology)</unmanaged>
        /// <unmanaged-short>IMFSequencerSource::UpdateTopology</unmanaged-short>
        public unsafe void UpdateTopology(System.Int32 dwId, SharpDX.MediaFoundation.Topology topologyRef)
        {
            System.IntPtr topologyRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            topologyRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Topology>(topologyRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwId, (void *)topologyRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Updates the flags for a topology in the queue.</p>
        /// </summary>
        /// <param name = "dwId"><dd> <p>Sequencer element identifier of the topology to update.</p> </dd></param>
        /// <param name = "dwFlags"><dd> <p>Bitwise <strong>OR</strong> of flags from the <strong><see cref = "SharpDX.MediaFoundation.SequencerTopologyFlags"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970564</doc-id>
        /// <unmanaged>HRESULT IMFSequencerSource::UpdateTopologyFlags([In] DWORD dwId,[In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IMFSequencerSource::UpdateTopologyFlags</unmanaged-short>
        public unsafe void UpdateTopologyFlags(System.Int32 dwId, System.Int32 dwFlags)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwId, dwFlags, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("fa993888-4383-415a-a930-dd472a8cf6f7")]
    public partial class ServiceProvider : SharpDX.ComObject
    {
        public ServiceProvider(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ServiceProvider(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ServiceProvider(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves a service interface.</p>
        /// </summary>
        /// <param name = "guidService"><dd> <p>The service identifier (SID) of the service. For a list of service identifiers, see Service Interfaces.</p> </dd></param>
        /// <param name = "riid"><dd> <p>The interface identifier (IID) of the interface being requested.</p> </dd></param>
        /// <returns><dd> <p>Receives the interface reference. The caller must release the interface.</p> </dd></returns>
        /// <doc-id>ms696978</doc-id>
        /// <unmanaged>HRESULT IMFGetService::GetService([In] const GUID&amp; guidService,[In] const GUID&amp; riid,[Out] void** ppvObject)</unmanaged>
        /// <unmanaged-short>IMFGetService::GetService</unmanaged-short>
        public unsafe System.IntPtr GetService(System.Guid guidService, System.Guid riid)
        {
            System.IntPtr vObjectOut;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidService, &riid, &vObjectOut, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
            return vObjectOut;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("97ec2ea4-0e42-4937-97ac-9d6d328824e1")]
    public partial class Shutdownable : SharpDX.ComObject
    {
        public Shutdownable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Shutdownable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Shutdownable(nativePtr);
        /// <summary>
        /// <p> Queries the status of an earlier call to the <strong>IMFShutdown::Shutdown</strong> method. </p>
        /// </summary>
        /// <remarks>
        /// <p>Until <strong>Shutdown</strong> is called, the <strong>GetShutdownStatus</strong> method returns <strong><see cref = "InvalidRequest"/></strong>.</p><p>If an object's <strong>Shutdown</strong> method is asynchronous, <em>pStatus</em> might receive the value <strong>MFSHUTDOWN_INITIATED</strong>. When the object is completely shut down, <em>pStatus</em> receives the value <strong>MFSHUTDOWN_COMPLETED</strong>.</p>
        /// </remarks>
        /// <doc-id>bb970451</doc-id>
        /// <unmanaged>GetShutdownStatus</unmanaged>
        /// <unmanaged-short>GetShutdownStatus</unmanaged-short>
        public SharpDX.MediaFoundation.ShutdownStatus ShutdownStatus
        {
            get
            {
                GetShutdownStatus(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Shuts down a Media Foundation object and releases all resources associated with the object. </p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The <strong>MFShutdownObject</strong> helper function is equivalent to calling this method.</p>
        /// </remarks>
        /// <doc-id>ms701615</doc-id>
        /// <unmanaged>HRESULT IMFShutdown::Shutdown()</unmanaged>
        /// <unmanaged-short>IMFShutdown::Shutdown</unmanaged-short>
        public unsafe void Shutdown()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Queries the status of an earlier call to the <strong>IMFShutdown::Shutdown</strong> method. </p>
        /// </summary>
        /// <param name = "statusRef">No documentation.</param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p> The <strong>Shutdown</strong> method has not been called on this object. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Until <strong>Shutdown</strong> is called, the <strong>GetShutdownStatus</strong> method returns <strong><see cref = "InvalidRequest"/></strong>.</p><p>If an object's <strong>Shutdown</strong> method is asynchronous, <em>pStatus</em> might receive the value <strong>MFSHUTDOWN_INITIATED</strong>. When the object is completely shut down, <em>pStatus</em> receives the value <strong>MFSHUTDOWN_COMPLETED</strong>.</p>
        /// </remarks>
        /// <doc-id>bb970451</doc-id>
        /// <unmanaged>HRESULT IMFShutdown::GetShutdownStatus([Out] MFSHUTDOWN_STATUS* pStatus)</unmanaged>
        /// <unmanaged-short>IMFShutdown::GetShutdownStatus</unmanaged-short>
        internal unsafe void GetShutdownStatus(out SharpDX.MediaFoundation.ShutdownStatus statusRef)
        {
            SharpDX.Result __result__;
            fixed (void *statusRef_ = &statusRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, statusRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("4a724bca-ff6a-4c07-8e0d-7a358421cf06")]
    public partial class SignedLibrary : SharpDX.ComObject
    {
        public SignedLibrary(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SignedLibrary(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SignedLibrary(nativePtr);
        /// <summary>
        /// <p>Gets the procedure address of the specified function in the signed library.</p>
        /// </summary>
        /// <param name = "name"><dd> <p>The entry point name in the DLL that specifies the function.</p> </dd></param>
        /// <param name = "address"><dd> <p>Receives the address of the entry point.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>See  <strong>MFLoadSignedLibrary</strong> for an example of how to create an <strong><see cref = "SharpDX.MediaFoundation.SignedLibrary"/></strong> object and call the <strong>GetProcedureAddress</strong> method.</p>
        /// </remarks>
        /// <doc-id>hh448059</doc-id>
        /// <unmanaged>HRESULT IMFSignedLibrary::GetProcedureAddress([In] const char* name,[Out] void** address)</unmanaged>
        /// <unmanaged-short>IMFSignedLibrary::GetProcedureAddress</unmanaged-short>
        public unsafe void GetProcedureAddress(System.String name, out System.IntPtr address)
        {
            System.IntPtr name_;
            SharpDX.Result __result__;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            fixed (void *address_ = &address)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, address_, (*(void ***)this._nativePointer)[3]);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("089EDF13-CF71-4338-8D13-9E569DBDC319")]
    public partial class SimpleAudioVolume : SharpDX.ComObject
    {
        public SimpleAudioVolume(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SimpleAudioVolume(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SimpleAudioVolume(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the master volume level.</p>
        /// </summary>
        /// <remarks>
        /// <p>If an external event changes the master volume, the audio renderer sends an MEAudioSessionVolumeChanged event, which the Media Session forwards to the application.</p>
        /// </remarks>
        /// <doc-id>bb970319</doc-id>
        /// <unmanaged>GetMasterVolume / SetMasterVolume</unmanaged>
        /// <unmanaged-short>GetMasterVolume</unmanaged-short>
        public System.Single MasterVolume
        {
            get
            {
                GetMasterVolume(out var __output__);
                return __output__;
            }

            set => SetMasterVolume(value);
        }

        /// <summary>
        /// <p> </p><p>Queries whether the audio is muted.</p>
        /// </summary>
        /// <remarks>
        /// <p>Calling <strong>IMFSimpleAudioVolume::SetMasterVolume</strong> to set the volume does not change whether the audio is muted.</p>
        /// </remarks>
        /// <doc-id>bb970332</doc-id>
        /// <unmanaged>GetMute / SetMute</unmanaged>
        /// <unmanaged-short>GetMute</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool Mute
        {
            get
            {
                GetMute(out var __output__);
                return __output__;
            }

            set => SetMute(value);
        }

        /// <summary>
        /// <p> </p><p>Sets the master volume level.</p>
        /// </summary>
        /// <param name = "fLevel"><dd> <p>Volume level. Volume is expressed as an attenuation level, where 0.0 indicates silence and 1.0 indicates full volume (no attenuation).</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotInitializeD"/></strong></dt> </dl> </td><td> <p>The audio renderer is not initialized.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "StreamsInkRemoved"/></strong></dt> </dl> </td><td> <p>The audio renderer was removed from the pipeline.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Events outside of the application can change the master volume level. For example, the user can change the volume from the system volume-control program (SndVol). If an external event changes the master volume, the audio renderer sends an MEAudioSessionVolumeChanged event, which the Media Session forwards to the application.</p>
        /// </remarks>
        /// <doc-id>bb970391</doc-id>
        /// <unmanaged>HRESULT IMFSimpleAudioVolume::SetMasterVolume([In] float fLevel)</unmanaged>
        /// <unmanaged-short>IMFSimpleAudioVolume::SetMasterVolume</unmanaged-short>
        internal unsafe void SetMasterVolume(System.Single fLevel)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fLevel, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the master volume level.</p>
        /// </summary>
        /// <param name = "fLevelRef"><dd> <p>Receives the volume level. Volume is expressed as an attenuation level, where 0.0 indicates silence and 1.0 indicates full volume (no attenuation).</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotInitializeD"/></strong></dt> </dl> </td><td> <p>The audio renderer is not initialized.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "StreamsInkRemoved"/></strong></dt> </dl> </td><td> <p>The audio renderer was removed from the pipeline.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If an external event changes the master volume, the audio renderer sends an MEAudioSessionVolumeChanged event, which the Media Session forwards to the application.</p>
        /// </remarks>
        /// <doc-id>bb970319</doc-id>
        /// <unmanaged>HRESULT IMFSimpleAudioVolume::GetMasterVolume([Out] float* pfLevel)</unmanaged>
        /// <unmanaged-short>IMFSimpleAudioVolume::GetMasterVolume</unmanaged-short>
        internal unsafe void GetMasterVolume(out System.Single fLevelRef)
        {
            SharpDX.Result __result__;
            fixed (void *fLevelRef_ = &fLevelRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fLevelRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Mutes or unmutes the audio.</p>
        /// </summary>
        /// <param name = "bMute"><dd> <p>Specify <strong>TRUE</strong> to mute the audio, or <strong><see cref = "SharpDX.Result.False"/></strong> to unmute the audio.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotInitializeD"/></strong></dt> </dl> </td><td> <p>The audio renderer is not initialized.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "StreamsInkRemoved"/></strong></dt> </dl> </td><td> <p>The audio renderer was removed from the pipeline.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method does not change the volume level returned by the <strong>IMFSimpleAudioVolume::GetMasterVolume</strong> function.</p>
        /// </remarks>
        /// <doc-id>bb970531</doc-id>
        /// <unmanaged>HRESULT IMFSimpleAudioVolume::SetMute([In] const BOOL bMute)</unmanaged>
        /// <unmanaged-short>IMFSimpleAudioVolume::SetMute</unmanaged-short>
        internal unsafe void SetMute(SharpDX.Mathematics.Interop.RawBool bMute)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, bMute, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Queries whether the audio is muted.</p>
        /// </summary>
        /// <param name = "bMuteRef"><dd> <p>Receives a Boolean value. If <strong>TRUE</strong>, the audio is muted; otherwise, the audio is not muted.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotInitializeD"/></strong></dt> </dl> </td><td> <p>The audio renderer is not initialized.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "StreamsInkRemoved"/></strong></dt> </dl> </td><td> <p>The audio renderer was removed from the pipeline.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Calling <strong>IMFSimpleAudioVolume::SetMasterVolume</strong> to set the volume does not change whether the audio is muted.</p>
        /// </remarks>
        /// <doc-id>bb970332</doc-id>
        /// <unmanaged>HRESULT IMFSimpleAudioVolume::GetMute([Out] BOOL* pbMute)</unmanaged>
        /// <unmanaged-short>IMFSimpleAudioVolume::GetMute</unmanaged-short>
        internal unsafe void GetMute(out SharpDX.Mathematics.Interop.RawBool bMuteRef)
        {
            bMuteRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *bMuteRef_ = &bMuteRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bMuteRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3137f1cd-fe5e-4805-a5d8-fb477448cb3d")]
    public partial class SinkWriter : SharpDX.ComObject
    {
        public SinkWriter(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SinkWriter(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SinkWriter(nativePtr);
        /// <summary>
        /// <p>Adds a stream to the sink writer.</p>
        /// </summary>
        /// <param name = "targetMediaTypeRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of a media type. This media type specifies the format of the samples that will be written to the file. It does not need to match the input format. To set the input format, call <strong>IMFSinkWriter::SetInputMediaType</strong>.</p> </dd></param>
        /// <param name = "dwStreamIndexRef"><dd> <p>Receives the zero-based index of the new stream.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374646</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriter::AddStream([In] IMFMediaType* pTargetMediaType,[Out] DWORD* pdwStreamIndex)</unmanaged>
        /// <unmanaged-short>IMFSinkWriter::AddStream</unmanaged-short>
        public unsafe void AddStream(SharpDX.MediaFoundation.MediaType targetMediaTypeRef, out System.Int32 dwStreamIndexRef)
        {
            System.IntPtr targetMediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            targetMediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(targetMediaTypeRef);
            fixed (void *dwStreamIndexRef_ = &dwStreamIndexRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)targetMediaTypeRef_, dwStreamIndexRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the input format for a stream on the sink writer.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of the stream. The index is received by the <em>pdwStreamIndex</em> parameter of the <strong>IMFSinkWriter::AddStream</strong> method.</p> </dd></param>
        /// <param name = "inputMediaTypeRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of a media type. The media type specifies the input format.</p> </dd></param>
        /// <param name = "encodingParametersRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface of an attribute store. Use the attribute store to configure the encoder. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidMediaType"/></strong></strong></dt> </dl> </td><td> <p>The underlying media sink does not support the format, no conversion is possible, or a dynamic format change is not possible.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidStreamNumber"/></strong></strong></dt> </dl> </td><td> <p>The <em>dwStreamIndex</em> parameter is invalid.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "TopoCodecNotFound"/></strong></strong></dt> </dl> </td><td> <p>Could not find an encoder for the encoded format.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The input format does not have to match the target format that is written to the media sink. If the formats do not match, the method attempts to load an encoder that can encode from the input format to the target format.</p><p>After streaming begins?that is, after the  first call to <strong>IMFSinkWriter::WriteSample</strong>?you can call this method at any time to change the input format.  However, the underlying encoder and media sink must support dynamic format changes.</p><p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374653</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriter::SetInputMediaType([In] DWORD dwStreamIndex,[In] IMFMediaType* pInputMediaType,[In, Optional] IMFAttributes* pEncodingParameters)</unmanaged>
        /// <unmanaged-short>IMFSinkWriter::SetInputMediaType</unmanaged-short>
        public unsafe void SetInputMediaType(System.Int32 dwStreamIndex, SharpDX.MediaFoundation.MediaType inputMediaTypeRef, SharpDX.MediaFoundation.MediaAttributes encodingParametersRef)
        {
            System.IntPtr inputMediaTypeRef_ = System.IntPtr.Zero;
            System.IntPtr encodingParametersRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            inputMediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(inputMediaTypeRef);
            encodingParametersRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(encodingParametersRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (void *)inputMediaTypeRef_, (void *)encodingParametersRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Initializes the sink writer for writing.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>The request is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method after you configure the input streams and before you send any data to the sink writer. </p><p>You must call <strong>BeginWriting</strong> before calling any of the following methods:</p><ul> <li> <strong>IMFSinkWriter::Finalize</strong> </li> <li> <strong>IMFSinkWriter::Flush</strong> </li> <li> <strong>IMFSinkWriter::NotifyEndOfSegment</strong> </li> <li> <strong>IMFSinkWriter::PlaceMarker</strong> </li> <li> <strong>IMFSinkWriter::SendStreamTick</strong> </li> <li> <strong>IMFSinkWriter::WriteSample</strong> </li> </ul><p>The underlying media sink must have at least one input stream. Otherwise, <strong>BeginWriting</strong> returns <strong><see cref = "InvalidRequest"/></strong>. To add input streams, call the <strong>IMFSinkWriter::AddStream</strong> method.</p><p>If <strong>BeginWriting</strong> succeeds, any further calls to <strong>BeginWriting</strong> return <strong><see cref = "InvalidRequest"/></strong>.</p><p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374647</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriter::BeginWriting()</unmanaged>
        /// <unmanaged-short>IMFSinkWriter::BeginWriting</unmanaged-short>
        public unsafe void BeginWriting()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Delivers a sample to the sink writer.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of the stream for this sample.</p> </dd></param>
        /// <param name = "sampleRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> interface of the sample.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>The request is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You must call <strong>IMFSinkWriter::BeginWriting</strong> before calling this method. Otherwise, the method returns <strong><see cref = "InvalidRequest"/></strong>.</p><p>By default, the sink writer limits the rate of incoming data by blocking the calling thread inside the <strong>WriteSample</strong> method. This prevents the application from delivering samples too quickly. To disable this behavior, set the <see cref = "DisableThrottling"/> attribute when you create the sink writer.</p><p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374654</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriter::WriteSample([In] DWORD dwStreamIndex,[In] IMFSample* pSample)</unmanaged>
        /// <unmanaged-short>IMFSinkWriter::WriteSample</unmanaged-short>
        public unsafe void WriteSample(System.Int32 dwStreamIndex, SharpDX.MediaFoundation.Sample sampleRef)
        {
            System.IntPtr sampleRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            sampleRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Sample>(sampleRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (void *)sampleRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Indicates a gap in an input stream.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of the stream.</p> </dd></param>
        /// <param name = "llTimestamp"><dd> <p>The position in the stream where the gap in the data occurs. The value is given in 100-nanosecond units, relative to the start of the stream.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>For video, call this method once for each missing frame. For audio, call this method at least once per second during a gap in the audio. Set the <strong><see cref = "Discontinuity"/></strong> attribute on the first media sample after the gap.</p><p>Internally, this method calls <strong>IMFStreamSink::PlaceMarker</strong> on the media sink.</p><p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374652</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriter::SendStreamTick([In] DWORD dwStreamIndex,[In] longlong llTimestamp)</unmanaged>
        /// <unmanaged-short>IMFSinkWriter::SendStreamTick</unmanaged-short>
        public unsafe void SendStreamTick(System.Int32 dwStreamIndex, System.Int64 llTimestamp)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, llTimestamp, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Places a marker in the specified stream.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of the stream.</p> </dd></param>
        /// <param name = "vContextRef"><dd> <p>Pointer to an application-defined value. The value of this parameter is returned to the caller in the <em>pvContext</em> parameter of the caller's <strong>IMFSinkWriterCallback::OnMarker</strong> callback method. The application is responsible for any memory allocation associated with this data. This parameter can be <strong><c>null</c></strong>. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>The request is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>To use this method, you must provide an asynchronous callback when you create the sink writer. Otherwise, the method returns <strong><see cref = "InvalidRequest"/></strong>. For more information, see <see cref = "AsyncCallback"/>.</p><p>Markers provide a way to be notified when the media sink consumes all of the samples in a stream up to a certain point. The media sink does not process the marker until it has processed all of the samples that came before the marker. When the media sink processes the marker, the sink writer calls the application's <strong>OnMarker</strong> method. When the callback is invoked, you know that the sink has consumed all of the previous samples for that stream.</p><p>For example, to change the format midstream, call <strong>PlaceMarker</strong> at the point where the format changes. When <strong>OnMarker</strong> is called, it is safe to call <strong>IMFSinkWriter::SetInputMediaType</strong> to change the input type (assuming that the media sink supports dynamic format changes).</p><p>Internally, this method calls <strong>IMFStreamSink::PlaceMarker</strong> on the media sink.</p><p> </p><strong>Note</strong>??The <em>pvContext</em> parameter of the <strong>IMFSinkWriter::PlaceMarker</strong> method is not passed to the <em>pvarContextValue</em> parameter of the <strong>IMFStreamSink::PlaceMarker</strong> method. These two parameters are not directly related.?<p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374651</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriter::PlaceMarker([In] DWORD dwStreamIndex,[In] void* pvContext)</unmanaged>
        /// <unmanaged-short>IMFSinkWriter::PlaceMarker</unmanaged-short>
        public unsafe void PlaceMarker(System.Int32 dwStreamIndex, System.IntPtr vContextRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (void *)vContextRef, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Notifies the media sink that a stream has reached the end of a segment.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of a stream, or <strong>MF_SINK_WRITER_ALL_STREAMS</strong> to signal that all streams have reached the end of a segment.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>The request is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You must call <strong>IMFSinkWriter::BeginWriting</strong> before calling this method. Otherwise, the method returns <strong><see cref = "InvalidRequest"/></strong>.</p><p>This method sends an <strong>MFSTREAMSINK_MARKER_ENDOFSEGMENT</strong> marker to the media sink for the specified streams. For more information, see <strong>IMFStreamSink::PlaceMarker</strong>.</p><p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd743366</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriter::NotifyEndOfSegment([In] DWORD dwStreamIndex)</unmanaged>
        /// <unmanaged-short>IMFSinkWriter::NotifyEndOfSegment</unmanaged-short>
        public unsafe void NotifyEndOfSegment(System.Int32 dwStreamIndex)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Flushes one or more streams.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of the stream to flush, or <strong>MF_SINK_WRITER_ALL_STREAMS</strong> to flush all of the streams.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>The request is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You must call <strong>IMFSinkWriter::BeginWriting</strong> before calling this method. Otherwise, the method returns <strong><see cref = "InvalidRequest"/></strong>.</p><p>For each stream that is flushed, the sink writer drops all pending samples, flushes the encoder, and sends an <strong>MFSTREAMSINK_MARKER_ENDOFSEGMENT</strong> marker to the media sink.</p><p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd743365</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriter::Flush([In] DWORD dwStreamIndex)</unmanaged>
        /// <unmanaged-short>IMFSinkWriter::Flush</unmanaged-short>
        public unsafe void Flush(System.Int32 dwStreamIndex)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Completes all writing operations on the sink writer.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Call this method after you send all of the input samples to the sink writer. The method performs any operations needed to create the final output from the media sink.</p><p>If you provide a callback interface when you create the sink writer, this method completes asynchronously. When the operation completes, the <strong>IMFSinkWriterCallback::OnFinalize</strong> method of your callback is called. For more information, see <see cref = "AsyncCallback"/>.  Otherwise, if you do not provide a callback, the <strong>Finalize</strong> method blocks until the operation completes.</p><p>Internally, this method calls <strong>IMFStreamSink::PlaceMarker</strong> to place end-of-segment markers for each stream on the media sink. It also calls <strong>IMFFinalizableMediaSink::BeginFinalize</strong> and <strong>EndFinalize</strong> if the media sink supports the <strong><see cref = "SharpDX.MediaFoundation.FinalizableMediaSink"/></strong> interface.</p><p>After this method is called, the following methods will fail:</p><ul> <li> <strong>IMFSinkWriter::PlaceMarker</strong> </li> <li> <strong>IMFSinkWriter::SendStreamTick</strong> </li> <li> <strong>IMFSinkWriter::WriteSample</strong> </li> </ul><p>If you do not call <strong>Finalize</strong>, the output from the media sink might be incomplete or invalid. For example, required file headers might be missing from the output file.</p><p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374648</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriter::Finalize()</unmanaged>
        /// <unmanaged-short>IMFSinkWriter::Finalize</unmanaged-short>
        public unsafe void Finalize()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries the underlying media sink or encoder for an interface.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of a stream to query, or <strong>MF_SINK_WRITER_MEDIASINK</strong> to query the media sink itself.</p> </dd></param>
        /// <param name = "guidService"><dd> <p>A service identifier <see cref = "System.Guid"/>, or <strong>GUID_NULL</strong>.  If the value is <strong>GUID_NULL</strong>, the method calls <strong>QueryInterface</strong> to get the requested interface. Otherwise, the method calls <strong>IMFGetService::GetService</strong>. For a list of service identifiers, see Service Interfaces.</p> </dd></param>
        /// <param name = "riid"><dd> <p>The interface identifier (IID) of the interface being requested. </p> </dd></param>
        /// <param name = "vObjectOut"><dd> <p>Receives a reference to the requested interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>If the <em>dwStreamIndex</em> parameter equals <strong>MF_SINK_WRITER_MEDIASINK</strong>, the method attempts to get the interface from the media sink. Otherwise, it attempts to get the interface from the encoder for the stream at the specified index. If that fails, or if no encoder is present, the method attempts to get the interface from the stream on the media sink.</p><p> If the input and output types of the sink are identical and compressed, it's possible that no encoding is required and the video encoder will not be instantiated. In that case, <strong>GetServiceForStream</strong> will return <see cref = "UnsupportedService"/>. </p><p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374649</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriter::GetServiceForStream([In] DWORD dwStreamIndex,[In] const GUID&amp; guidService,[In] const GUID&amp; riid,[Out] void** ppvObject)</unmanaged>
        /// <unmanaged-short>IMFSinkWriter::GetServiceForStream</unmanaged-short>
        public unsafe void GetServiceForStream(System.Int32 dwStreamIndex, System.Guid guidService, System.Guid riid, out System.IntPtr vObjectOut)
        {
            SharpDX.Result __result__;
            fixed (void *vObjectOut_ = &vObjectOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, &guidService, &riid, vObjectOut_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets statistics about the performance of the sink writer.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of a stream to query, or <strong>MF_SINK_WRITER_ALL_STREAMS </strong> to query the media sink itself.</p> </dd></param>
        /// <param name = "statsRef"><dd> <p>A reference to an <strong><see cref = "SharpDX.MediaFoundation.SinkWriterStatistics"/></strong> structure. Before calling the method, set the <strong>cb</strong> member to the size of the structure in bytes. The method fills the structure with statistics from the sink writer.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>Invalid stream number.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374650</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriter::GetStatistics([In] DWORD dwStreamIndex,[In] MF_SINK_WRITER_STATISTICS* pStats)</unmanaged>
        /// <unmanaged-short>IMFSinkWriter::GetStatistics</unmanaged-short>
        internal unsafe SharpDX.Result GetStatistics_(System.Int32 dwStreamIndex, System.IntPtr statsRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (void *)statsRef, (*(void ***)this._nativePointer)[13]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("666f76de-33d2-41b9-a458-29ed0a972c58")]
    public partial class SinkWriterCallback : SharpDX.ComObject
    {
        public SinkWriterCallback(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SinkWriterCallback(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SinkWriterCallback(nativePtr);
        /// <summary>
        /// <p>Called when the <strong>IMFSinkWriter::Finalize</strong> method completes.</p>
        /// </summary>
        /// <param name = "hrStatus">No documentation.</param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Currently, the sink writer ignores the return value.</p></returns>
        /// <remarks>
        /// <p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374644</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriterCallback::OnFinalize([In] HRESULT hrStatus)</unmanaged>
        /// <unmanaged-short>IMFSinkWriterCallback::OnFinalize</unmanaged-short>
        public unsafe void OnFinalize(SharpDX.Result hrStatus)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, hrStatus, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Called when the <strong>IMFSinkWriter::PlaceMarker</strong> method completes.</p>
        /// </summary>
        /// <param name = "dwStreamIndex">No documentation.</param>
        /// <param name = "vContextRef">No documentation.</param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Currently, the sink writer ignores the return value.</p></returns>
        /// <remarks>
        /// <p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374645</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriterCallback::OnMarker([In] DWORD dwStreamIndex,[In] void* pvContext)</unmanaged>
        /// <unmanaged-short>IMFSinkWriterCallback::OnMarker</unmanaged-short>
        public unsafe void OnMarker(System.Int32 dwStreamIndex, System.IntPtr vContextRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (void *)vContextRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2456BD58-C067-4513-84FE-8D0C88FFDC61")]
    public partial class SinkWriterCallback2 : SharpDX.MediaFoundation.SinkWriterCallback
    {
        public SinkWriterCallback2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SinkWriterCallback2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SinkWriterCallback2(nativePtr);
        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Called when the transform chain in the <strong><see cref = "SharpDX.MediaFoundation.SourceReader"/></strong> is built or modified.</p>
        /// </summary>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Currently, the sink writer ignores the return value.</p></returns>
        /// <doc-id>dn949417</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriterCallback2::OnTransformChange()</unmanaged>
        /// <unmanaged-short>IMFSinkWriterCallback2::OnTransformChange</unmanaged-short>
        public unsafe void OnTransformChange()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Called when an asynchronous error occurs with the <strong><see cref = "SharpDX.MediaFoundation.SinkWriter"/></strong>.</p>
        /// </summary>
        /// <param name = "dwStreamIndex">No documentation.</param>
        /// <param name = "hrStatus">No documentation.</param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Currently, the sink writer ignores the return value.</p></returns>
        /// <doc-id>dn949416</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriterCallback2::OnStreamError([In] DWORD dwStreamIndex,[In] HRESULT hrStatus)</unmanaged>
        /// <unmanaged-short>IMFSinkWriterCallback2::OnStreamError</unmanaged-short>
        public unsafe void OnStreamError(System.Int32 dwStreamIndex, SharpDX.Result hrStatus)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, dwStreamIndex, hrStatus, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("17C3779E-3CDE-4EDE-8C60-3899F5F53AD6")]
    public partial class SinkWriterEncoderConfig : SharpDX.ComObject
    {
        public SinkWriterEncoderConfig(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SinkWriterEncoderConfig(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SinkWriterEncoderConfig(nativePtr);
        /// <summary>
        /// <p>Dynamically changes the target media type that Sink Writer is encoding to.  </p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>Specifies the stream index.</p> </dd></param>
        /// <param name = "targetMediaTypeRef"><dd> <p>The new media format to encode to.</p> </dd></param>
        /// <param name = "encodingParametersRef"><dd> <p>The new set of encoding parameters to configure the encoder with. If not specified, previously provided parameters will be used.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The new media type must be supported by the media sink being used and by     the encoder MFTs installed on the system.
        /// </p>
        /// </remarks>
        /// <doc-id>dn302048</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriterEncoderConfig::SetTargetMediaType([In] DWORD dwStreamIndex,[In] IMFMediaType* pTargetMediaType,[In, Optional] IMFAttributes* pEncodingParameters)</unmanaged>
        /// <unmanaged-short>IMFSinkWriterEncoderConfig::SetTargetMediaType</unmanaged-short>
        public unsafe void SetTargetMediaType(System.Int32 dwStreamIndex, SharpDX.MediaFoundation.MediaType targetMediaTypeRef, SharpDX.MediaFoundation.MediaAttributes encodingParametersRef)
        {
            System.IntPtr targetMediaTypeRef_ = System.IntPtr.Zero;
            System.IntPtr encodingParametersRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            targetMediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(targetMediaTypeRef);
            encodingParametersRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(encodingParametersRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (void *)targetMediaTypeRef_, (void *)encodingParametersRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Dynamically updates the encoder configuration with a collection of new encoder settings.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>Specifies the stream index.</p> </dd></param>
        /// <param name = "encodingParametersRef"><dd> <p>A set of encoding parameters to configure the encoder with. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The encoder will be configured with these settings after all previously queued input media samples have been sent to it through <strong>IMFTransform::ProcessInput</strong>.
        /// </p>
        /// </remarks>
        /// <doc-id>dn302047</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriterEncoderConfig::PlaceEncodingParameters([In] DWORD dwStreamIndex,[In] IMFAttributes* pEncodingParameters)</unmanaged>
        /// <unmanaged-short>IMFSinkWriterEncoderConfig::PlaceEncodingParameters</unmanaged-short>
        public unsafe void PlaceEncodingParameters(System.Int32 dwStreamIndex, SharpDX.MediaFoundation.MediaAttributes encodingParametersRef)
        {
            System.IntPtr encodingParametersRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            encodingParametersRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(encodingParametersRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (void *)encodingParametersRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("588d72ab-5Bc1-496a-8714-b70617141b25")]
    public partial class SinkWriterEx : SharpDX.MediaFoundation.SinkWriter
    {
        public SinkWriterEx(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SinkWriterEx(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SinkWriterEx(nativePtr);
        /// <summary>
        /// <p>Gets a reference to a Media Foundation transform (MFT) for a specified stream.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The zero-based index of a stream.</p> </dd></param>
        /// <param name = "dwTransformIndex"><dd> <p>The zero-based index of the MFT to retreive.</p> </dd></param>
        /// <param name = "guidCategoryRef"><dd> <p>Receives a reference to a <see cref = "System.Guid"/> that specifies the category of the MFT. For a list of possible values, see <strong>MFT_CATEGORY</strong>.</p> </dd></param>
        /// <param name = "transformOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.Transform"/></strong> interface of the MFT. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh448061</doc-id>
        /// <unmanaged>HRESULT IMFSinkWriterEx::GetTransformForStream([In] DWORD dwStreamIndex,[In] DWORD dwTransformIndex,[Out, Optional] GUID* pGuidCategory,[Out] IMFTransform** ppTransform)</unmanaged>
        /// <unmanaged-short>IMFSinkWriterEx::GetTransformForStream</unmanaged-short>
        public unsafe void GetTransformForStream(System.Int32 dwStreamIndex, System.Int32 dwTransformIndex, out System.Guid guidCategoryRef, out SharpDX.MediaFoundation.Transform transformOut)
        {
            guidCategoryRef = default (System.Guid);
            System.IntPtr transformOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (void *guidCategoryRef_ = &guidCategoryRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, dwTransformIndex, guidCategoryRef_, &transformOut_, (*(void ***)this._nativePointer)[14]);
            if (transformOut_ != System.IntPtr.Zero)
                transformOut = new SharpDX.MediaFoundation.Transform(transformOut_);
            else
                transformOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("e2cd3a4b-af25-4d3d-9110-da0e6f8ee877")]
    public partial class SourceBuffer : SharpDX.ComObject
    {
        public SourceBuffer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SourceBuffer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SourceBuffer(nativePtr);
        /// <summary>
        /// <p>Gets a value that indicates  if <strong>Append</strong>, <strong>AppendByteStream</strong>, or <strong>Remove</strong> is in process.</p>
        /// </summary>
        /// <doc-id>dn302069</doc-id>
        /// <unmanaged>GetUpdating</unmanaged>
        /// <unmanaged-short>GetUpdating</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool Updating
        {
            get => GetUpdating();
        }

        /// <summary>
        /// <p>Gets the buffered time range.</p>
        /// </summary>
        /// <doc-id>dn302067</doc-id>
        /// <unmanaged>GetBuffered</unmanaged>
        /// <unmanaged-short>GetBuffered</unmanaged-short>
        public SharpDX.MediaFoundation.MediaTimeRange Buffered
        {
            get
            {
                GetBuffered(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets or sets the timestamp offset for media segments appended to the <strong><see cref = "SharpDX.MediaFoundation.SourceBuffer"/></strong>.</p>
        /// </summary>
        /// <doc-id>dn302068</doc-id>
        /// <unmanaged>GetTimeStampOffset / SetTimeStampOffset</unmanaged>
        /// <unmanaged-short>GetTimeStampOffset</unmanaged-short>
        public System.Double TimeStampOffset
        {
            get => GetTimeStampOffset();
            set => SetTimeStampOffset(value);
        }

        /// <summary>
        /// <p>Gets or sets the timestamp for the start of the append window.</p>
        /// </summary>
        /// <doc-id>dn302066</doc-id>
        /// <unmanaged>GetAppendWindowStart / SetAppendWindowStart</unmanaged>
        /// <unmanaged-short>GetAppendWindowStart</unmanaged-short>
        public System.Double AppendWindowStart
        {
            get => GetAppendWindowStart();
            set => SetAppendWindowStart(value);
        }

        /// <summary>
        /// <p>Gets or sets the timestamp for the end of the append window.</p>
        /// </summary>
        /// <doc-id>dn302065</doc-id>
        /// <unmanaged>GetAppendWindowEnd / SetAppendWindowEnd</unmanaged>
        /// <unmanaged-short>GetAppendWindowEnd</unmanaged-short>
        public System.Double AppendWindowEnd
        {
            get => GetAppendWindowEnd();
            set => SetAppendWindowEnd(value);
        }

        /// <summary>
        /// <p>Gets a value that indicates  if <strong>Append</strong>, <strong>AppendByteStream</strong>, or <strong>Remove</strong> is in process.</p>
        /// </summary>
        /// <returns><p><strong>true</strong> if <strong>Append</strong>, <strong>AppendByteStream</strong>, or <strong>Remove</strong>; otherwise, <strong>false</strong>.</p></returns>
        /// <doc-id>dn302069</doc-id>
        /// <unmanaged>BOOL IMFSourceBuffer::GetUpdating()</unmanaged>
        /// <unmanaged-short>IMFSourceBuffer::GetUpdating</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool GetUpdating()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the buffered time range.</p>
        /// </summary>
        /// <param name = "bufferedOut"><dd> <p>The buffered time range.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn302067</doc-id>
        /// <unmanaged>HRESULT IMFSourceBuffer::GetBuffered([Out] IMFMediaTimeRange** ppBuffered)</unmanaged>
        /// <unmanaged-short>IMFSourceBuffer::GetBuffered</unmanaged-short>
        internal unsafe void GetBuffered(out SharpDX.MediaFoundation.MediaTimeRange bufferedOut)
        {
            System.IntPtr bufferedOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &bufferedOut_, (*(void ***)this._nativePointer)[4]);
            if (bufferedOut_ != System.IntPtr.Zero)
                bufferedOut = new SharpDX.MediaFoundation.MediaTimeRange(bufferedOut_);
            else
                bufferedOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the timestamp offset for media segments appended to the <strong><see cref = "SharpDX.MediaFoundation.SourceBuffer"/></strong>.</p>
        /// </summary>
        /// <returns><p>The timestamp offset.</p></returns>
        /// <doc-id>dn302068</doc-id>
        /// <unmanaged>double IMFSourceBuffer::GetTimeStampOffset()</unmanaged>
        /// <unmanaged-short>IMFSourceBuffer::GetTimeStampOffset</unmanaged-short>
        internal unsafe System.Double GetTimeStampOffset()
        {
            System.Double __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCalldouble(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// <p>Sets the timestamp offset for media segments appended to the <strong><see cref = "SharpDX.MediaFoundation.SourceBuffer"/></strong>.</p>
        /// </summary>
        /// <param name = "offset">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn302073</doc-id>
        /// <unmanaged>HRESULT IMFSourceBuffer::SetTimeStampOffset([In] double offset)</unmanaged>
        /// <unmanaged-short>IMFSourceBuffer::SetTimeStampOffset</unmanaged-short>
        internal unsafe void SetTimeStampOffset(System.Double offset)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, offset, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the timestamp for the start of the append window.</p>
        /// </summary>
        /// <returns><p>The timestamp for the start of the append window.</p></returns>
        /// <doc-id>dn302066</doc-id>
        /// <unmanaged>double IMFSourceBuffer::GetAppendWindowStart()</unmanaged>
        /// <unmanaged-short>IMFSourceBuffer::GetAppendWindowStart</unmanaged-short>
        internal unsafe System.Double GetAppendWindowStart()
        {
            System.Double __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCalldouble(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// <p>Sets the timestamp for the start of the append window.</p>
        /// </summary>
        /// <param name = "time"><dd> <p>The timestamp for the start of the append window.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn302072</doc-id>
        /// <unmanaged>HRESULT IMFSourceBuffer::SetAppendWindowStart([In] double time)</unmanaged>
        /// <unmanaged-short>IMFSourceBuffer::SetAppendWindowStart</unmanaged-short>
        internal unsafe void SetAppendWindowStart(System.Double time)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, time, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the timestamp for the end of the append window.</p>
        /// </summary>
        /// <returns><p>The timestamp for the end of the append window.</p></returns>
        /// <doc-id>dn302065</doc-id>
        /// <unmanaged>double IMFSourceBuffer::GetAppendWindowEnd()</unmanaged>
        /// <unmanaged-short>IMFSourceBuffer::GetAppendWindowEnd</unmanaged-short>
        internal unsafe System.Double GetAppendWindowEnd()
        {
            System.Double __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCalldouble(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// <p>Sets the timestamp for the end of the append window.</p>
        /// </summary>
        /// <param name = "time"><dd></dd></param>
        /// <returns><p>The timestamp for the end of the append window.</p></returns>
        /// <doc-id>dn302071</doc-id>
        /// <unmanaged>HRESULT IMFSourceBuffer::SetAppendWindowEnd([In] double time)</unmanaged>
        /// <unmanaged-short>IMFSourceBuffer::SetAppendWindowEnd</unmanaged-short>
        internal unsafe void SetAppendWindowEnd(System.Double time)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, time, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Appends the specified media segment to the <strong><see cref = "SharpDX.MediaFoundation.SourceBuffer"/></strong>.</p>
        /// </summary>
        /// <param name = "dataRef">No documentation.</param>
        /// <param name = "len">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn302063</doc-id>
        /// <unmanaged>HRESULT IMFSourceBuffer::Append([In, Buffer] const unsigned char* pData,[In] DWORD len)</unmanaged>
        /// <unmanaged-short>IMFSourceBuffer::Append</unmanaged-short>
        public unsafe void Append(System.Byte[] dataRef, System.Int32 len)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, len, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Appends the media segment from the specified byte stream to the <strong><see cref = "SharpDX.MediaFoundation.SourceBuffer"/></strong>.</p>
        /// </summary>
        /// <param name = "streamRef">No documentation.</param>
        /// <param name = "maxLenRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn302064</doc-id>
        /// <unmanaged>HRESULT IMFSourceBuffer::AppendByteStream([In] IMFByteStream* pStream,[In, Optional] unsigned longlong* pMaxLen)</unmanaged>
        /// <unmanaged-short>IMFSourceBuffer::AppendByteStream</unmanaged-short>
        public unsafe void AppendByteStream(SharpDX.MediaFoundation.IByteStream streamRef, System.Int64? maxLenRef)
        {
            System.IntPtr streamRef_ = System.IntPtr.Zero;
            System.Int64 maxLenRef_;
            SharpDX.Result __result__;
            streamRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IByteStream>(streamRef);
            if (maxLenRef != null)
                maxLenRef_ = maxLenRef.Value;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)streamRef_, maxLenRef == null ? (void *)0 : &maxLenRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Aborts the processing of the current media segment. </p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn302062</doc-id>
        /// <unmanaged>HRESULT IMFSourceBuffer::Abort()</unmanaged>
        /// <unmanaged-short>IMFSourceBuffer::Abort</unmanaged-short>
        public unsafe void Abort()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Removes the media segments defined by the specified time range from the <strong><see cref = "SharpDX.MediaFoundation.SourceBuffer"/></strong>.</p>
        /// </summary>
        /// <param name = "start">No documentation.</param>
        /// <param name = "end">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn302070</doc-id>
        /// <unmanaged>HRESULT IMFSourceBuffer::Remove([In] double start,[In] double end)</unmanaged>
        /// <unmanaged-short>IMFSourceBuffer::Remove</unmanaged-short>
        public unsafe void Remove(System.Double start, System.Double end)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, start, end, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("19666fb4-babe-4c55-bc03-0a074da37e2a")]
    public partial class SourceBufferAppendMode : SharpDX.ComObject
    {
        public SourceBufferAppendMode(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SourceBufferAppendMode(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SourceBufferAppendMode(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetAppendMode / SetAppendMode</unmanaged>
        /// <unmanaged-short>GetAppendMode</unmanaged-short>
        public SharpDX.MediaFoundation.MultisampledEAppendMode AppendMode
        {
            get => GetAppendMode();
            set => SetAppendMode(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>MF_MSE_APPEND_MODE IMFSourceBufferAppendMode::GetAppendMode()</unmanaged>
        /// <unmanaged-short>IMFSourceBufferAppendMode::GetAppendMode</unmanaged-short>
        internal unsafe SharpDX.MediaFoundation.MultisampledEAppendMode GetAppendMode()
        {
            SharpDX.MediaFoundation.MultisampledEAppendMode __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMediaFoundationMultisampledEAppendMode(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "mode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFSourceBufferAppendMode::SetAppendMode([In] MF_MSE_APPEND_MODE mode)</unmanaged>
        /// <unmanaged-short>IMFSourceBufferAppendMode::SetAppendMode</unmanaged-short>
        internal unsafe void SetAppendMode(SharpDX.MediaFoundation.MultisampledEAppendMode mode)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)mode), (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("249981f8-8325-41f3-b80c-3b9e3aad0cbe")]
    public partial class SourceBufferList : SharpDX.ComObject
    {
        public SourceBufferList(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SourceBufferList(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SourceBufferList(nativePtr);
        /// <summary>
        /// <p>Gets the number of <strong><see cref = "SharpDX.MediaFoundation.SourceBuffer"/></strong> objects  in the list.</p>
        /// </summary>
        /// <doc-id>dn302051</doc-id>
        /// <unmanaged>GetLength</unmanaged>
        /// <unmanaged-short>GetLength</unmanaged-short>
        public System.Int32 Length
        {
            get => GetLength();
        }

        /// <summary>
        /// <p>Gets the number of <strong><see cref = "SharpDX.MediaFoundation.SourceBuffer"/></strong> objects  in the list.</p>
        /// </summary>
        /// <returns><p>The number of source buffers in the list.</p></returns>
        /// <doc-id>dn302051</doc-id>
        /// <unmanaged>DWORD IMFSourceBufferList::GetLength()</unmanaged>
        /// <unmanaged-short>IMFSourceBufferList::GetLength</unmanaged-short>
        internal unsafe System.Int32 GetLength()
        {
            System.Int32 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the <strong><see cref = "SharpDX.MediaFoundation.SourceBuffer"/></strong> at the specified index in the list.</p>
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <returns><p>The source buffer.</p></returns>
        /// <doc-id>dn302052</doc-id>
        /// <unmanaged>IMFSourceBuffer* IMFSourceBufferList::GetSourceBuffer([In] DWORD index)</unmanaged>
        /// <unmanaged-short>IMFSourceBufferList::GetSourceBuffer</unmanaged-short>
        public unsafe SharpDX.MediaFoundation.SourceBuffer GetSourceBuffer(System.Int32 index)
        {
            SharpDX.MediaFoundation.SourceBuffer __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[4]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.MediaFoundation.SourceBuffer(__result__native);
            else
                __result__ = null;
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("87e47623-2ceb-45d6-9b88-d8520c4dcbbc")]
    public partial class SourceBufferNotify : SharpDX.ComObject
    {
        public SourceBufferNotify(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SourceBufferNotify(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SourceBufferNotify(nativePtr);
        /// <summary>
        /// <p>Used to indicate that the source buffer has started updating.</p>
        /// </summary>
        /// <doc-id>dn302061</doc-id>
        /// <unmanaged>void IMFSourceBufferNotify::OnUpdateStart()</unmanaged>
        /// <unmanaged-short>IMFSourceBufferNotify::OnUpdateStart</unmanaged-short>
        public unsafe void OnUpdateStart()
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[3]);
        }

        /// <summary>
        /// <p>Used to indicate that the source buffer has been aborted.</p>
        /// </summary>
        /// <doc-id>dn302054</doc-id>
        /// <unmanaged>void IMFSourceBufferNotify::OnAbort()</unmanaged>
        /// <unmanaged-short>IMFSourceBufferNotify::OnAbort</unmanaged-short>
        public unsafe void OnAbort()
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// <p>Used to indicate that an error has occurred with the  source buffer.</p>
        /// </summary>
        /// <param name = "hr"><dd></dd></param>
        /// <doc-id>dn302055</doc-id>
        /// <unmanaged>void IMFSourceBufferNotify::OnError([In] HRESULT hr)</unmanaged>
        /// <unmanaged-short>IMFSourceBufferNotify::OnError</unmanaged-short>
        public unsafe void OnError(SharpDX.Result hr)
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid0(this._nativePointer, hr, (*(void ***)this._nativePointer)[5]);
        }

        /// <summary>
        /// <p>Used to indicate that the source buffer is updating.</p>
        /// </summary>
        /// <doc-id>dn302056</doc-id>
        /// <unmanaged>void IMFSourceBufferNotify::OnUpdate()</unmanaged>
        /// <unmanaged-short>IMFSourceBufferNotify::OnUpdate</unmanaged-short>
        public unsafe void OnUpdate()
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[6]);
        }

        /// <summary>
        /// <p>Used to indicate that the source buffer has finished updating.</p>
        /// </summary>
        /// <doc-id>dn302057</doc-id>
        /// <unmanaged>void IMFSourceBufferNotify::OnUpdateEnd()</unmanaged>
        /// <unmanaged-short>IMFSourceBufferNotify::OnUpdateEnd</unmanaged-short>
        public unsafe void OnUpdateEnd()
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[7]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("059054B3-027C-494C-A27D-9113291CF87F")]
    public partial class SourceOpenMonitor : SharpDX.ComObject
    {
        public SourceOpenMonitor(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SourceOpenMonitor(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SourceOpenMonitor(nativePtr);
        /// <summary>
        /// <p> </p><p>Called by the network source when the open operation begins or ends.</p>
        /// </summary>
        /// <param name = "eventRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaEvent"/></strong> interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The networks source calls this method with the following event types.</p><ul> <li> <p> MEConnectStart </p> </li> <li> <p> MEConnectEnd </p> </li> </ul><p>For more information, see How to Get Events from the Network Source.</p>
        /// </remarks>
        /// <doc-id>ms694870</doc-id>
        /// <unmanaged>HRESULT IMFSourceOpenMonitor::OnSourceEvent([In, Optional] IMFMediaEvent* pEvent)</unmanaged>
        /// <unmanaged-short>IMFSourceOpenMonitor::OnSourceEvent</unmanaged-short>
        public unsafe void OnSourceEvent(SharpDX.MediaFoundation.MediaEvent eventRef)
        {
            System.IntPtr eventRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            eventRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaEvent>(eventRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)eventRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("70ae66f2-c809-4e4f-8915-bdcb406b7993")]
    public partial class SourceReader : SharpDX.ComObject
    {
        public SourceReader(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SourceReader(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SourceReader(nativePtr);
        /// <summary>
        /// <p>Queries whether a stream is selected.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The stream to query. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "fSelectedRef"><dd> <p>Receives <strong>TRUE</strong> if the stream is selected and will generate data. Receives <strong><see cref = "SharpDX.Result.False"/></strong> if the stream is not selected and will not generate data.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374664</doc-id>
        /// <unmanaged>HRESULT IMFSourceReader::GetStreamSelection([In] DWORD dwStreamIndex,[Out] BOOL* pfSelected)</unmanaged>
        /// <unmanaged-short>IMFSourceReader::GetStreamSelection</unmanaged-short>
        public unsafe void GetStreamSelection(System.Int32 dwStreamIndex, out SharpDX.Mathematics.Interop.RawBool fSelectedRef)
        {
            fSelectedRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fSelectedRef_ = &fSelectedRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, fSelectedRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Selects or deselects one or more streams.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The stream to set. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_ALL_STREAMS</strong></strong></dt> <dt>0xFFFFFFFE</dt> </dl> </td><td> <p>All streams.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "fSelected"><dd> <p>Specify <strong>TRUE</strong> to select streams or <strong><see cref = "SharpDX.Result.False"/></strong> to deselect streams. If a stream is deselected, it will not generate data.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>There are two common uses for this method:</p><ul> <li>To change the default stream selection. Some media files contain multiple streams of the same type. For example, a file might include audio streams for multiple languages. You can use this method to change which of the streams is selected. To get information about each stream, call <strong>IMFSourceReader::GetPresentationAttribute</strong> or <strong>IMFSourceReader::GetNativeMediaType</strong>.</li> <li>If you will not need data from one of the streams, it is a good idea to deselect that stream. If the stream is selected, the media source might hold onto a queue of unread data, and the queue might grow indefinitely, consuming memory. </li> </ul><p>For an example of deselecting a stream, see Tutorial: Decoding Audio.</p><p>If a stream is deselected, the <strong>IMFSourceReader::ReadSample</strong> method returns <strong><see cref = "InvalidRequest"/></strong> for that stream. Other <strong><see cref = "SharpDX.MediaFoundation.SourceReader"/></strong> methods are valid for deselected streams.</p><p>Stream selection does not affect how the source reader loads or unloads decoders in memory. In particular, deselecting a stream does not force the source reader to unload the decoder for that stream.</p><p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374669</doc-id>
        /// <unmanaged>HRESULT IMFSourceReader::SetStreamSelection([In] DWORD dwStreamIndex,[In] BOOL fSelected)</unmanaged>
        /// <unmanaged-short>IMFSourceReader::SetStreamSelection</unmanaged-short>
        public unsafe void SetStreamSelection(System.Int32 dwStreamIndex, SharpDX.Mathematics.Interop.RawBool fSelected)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, dwStreamIndex, fSelected, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a format that is supported natively by the media source.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>Specifies which stream to query. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "dwMediaTypeIndex"><dd> <p>The zero-based index of the media type to retrieve.</p> </dd></param>
        /// <returns><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface. The caller must release the interface.</p> </dd></returns>
        /// <remarks>
        /// <p>This method queries the underlying media source for its native output format. Potentially, each source stream can produce more than one output format. Use the <em>dwMediaTypeIndex</em> parameter to loop through the available formats. Generally, file sources offer just one format per stream, but capture devices might offer several formats.</p><p> The method returns a copy of the media type, so it is safe to modify the object received in the <em> ppMediaType</em> parameter.</p><p>To set  the output type for a stream, call the <strong>IMFSourceReader::SetCurrentMediaType</strong> method.</p><p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374661</doc-id>
        /// <unmanaged>HRESULT IMFSourceReader::GetNativeMediaType([In] DWORD dwStreamIndex,[In] DWORD dwMediaTypeIndex,[Out] IMFMediaType** ppMediaType)</unmanaged>
        /// <unmanaged-short>IMFSourceReader::GetNativeMediaType</unmanaged-short>
        public unsafe SharpDX.MediaFoundation.MediaType GetNativeMediaType(System.Int32 dwStreamIndex, System.Int32 dwMediaTypeIndex)
        {
            SharpDX.MediaFoundation.MediaType mediaTypeOut;
            System.IntPtr mediaTypeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, dwMediaTypeIndex, &mediaTypeOut_, (*(void ***)this._nativePointer)[5]);
            if (mediaTypeOut_ != System.IntPtr.Zero)
                mediaTypeOut = new SharpDX.MediaFoundation.MediaType(mediaTypeOut_);
            else
                mediaTypeOut = null;
            __result__.CheckError();
            return mediaTypeOut;
        }

        /// <summary>
        /// <p>Gets the current media type for a stream.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The stream to query. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <returns><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface. The caller must release the interface.</p> </dd></returns>
        /// <remarks>
        /// <p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374660</doc-id>
        /// <unmanaged>HRESULT IMFSourceReader::GetCurrentMediaType([In] DWORD dwStreamIndex,[Out] IMFMediaType** ppMediaType)</unmanaged>
        /// <unmanaged-short>IMFSourceReader::GetCurrentMediaType</unmanaged-short>
        public unsafe SharpDX.MediaFoundation.MediaType GetCurrentMediaType(System.Int32 dwStreamIndex)
        {
            SharpDX.MediaFoundation.MediaType mediaTypeOut;
            System.IntPtr mediaTypeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, &mediaTypeOut_, (*(void ***)this._nativePointer)[6]);
            if (mediaTypeOut_ != System.IntPtr.Zero)
                mediaTypeOut = new SharpDX.MediaFoundation.MediaType(mediaTypeOut_);
            else
                mediaTypeOut = null;
            __result__.CheckError();
            return mediaTypeOut;
        }

        /// <summary>
        /// <p>Sets the media type for a stream.</p><p>This media type defines that format that the Source Reader produces as output. It can differ from the native format provided by the media source. See Remarks for more information.</p>
        /// </summary>
        /// <param name = "dwStreamIndex">No documentation.</param>
        /// <param name = "dwReservedRef">No documentation.</param>
        /// <param name = "mediaTypeRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidMediaType"/></strong></strong></dt> </dl> </td><td> <p>At least one decoder was found for the native stream type, but the type specified by <em>pMediaType</em> was rejected.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>One or more sample requests are still pending.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidStreamNumber"/></strong></strong></dt> </dl> </td><td> <p>The <em>dwStreamIndex</em> parameter is invalid.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "TopoCodecNotFound"/></strong></strong></dt> </dl> </td><td> <p>Could not find a decoder for the native stream type.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>For each stream, you can set the media type to any of the following:</p><ul> <li>One of the native types offered by the media source. To enumerate the native types, call <strong>IMFSourceReader::GetNativeMediaType</strong>.</li> <li>If the native media type is compressed, you can specify a corresponding uncompressed format. The Source Reader will search for a decoder that can decode from the native format to the specified uncompressed format.</li> </ul><p>Audio resampling support was added to the source reader with Windows?8.  In versions of Windows prior to  Windows?8, the source reader does not support audio resampling. If you need to resample the audio in versions of Windows earlier than Windows?8, you can use the <strong>Audio Resampler DSP</strong>.</p><p>If you set the <see cref = "EnableVideoProcessing"/> attribute to <strong>TRUE</strong> when you create the Source Reader, the Source Reader will convert YUV video to RGB-32. This conversion is not optimized for real-time video playback.</p><p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374667</doc-id>
        /// <unmanaged>HRESULT IMFSourceReader::SetCurrentMediaType([In] DWORD dwStreamIndex,[In] DWORD* pdwReserved,[In] IMFMediaType* pMediaType)</unmanaged>
        /// <unmanaged-short>IMFSourceReader::SetCurrentMediaType</unmanaged-short>
        internal unsafe void SetCurrentMediaType(System.Int32 dwStreamIndex, System.IntPtr dwReservedRef, SharpDX.MediaFoundation.MediaType mediaTypeRef)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(mediaTypeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (void *)dwReservedRef, (void *)mediaTypeRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Seeks to a new position in the media source.</p>
        /// </summary>
        /// <param name = "guidTimeFormat"><dd> <p>A <see cref = "System.Guid"/> that specifies the <em>time format</em>. The time format defines the units for the <em>varPosition</em> parameter. The following value is defined for all media sources:</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>GUID_NULL</strong></dt> </dl> </td><td> <p>100-nanosecond units.</p> </td></tr> </table> <p>?</p> <p>Some media sources might support additional values. </p> </dd></param>
        /// <param name = "varPosition"><dd> <p>The position from which playback will be started. The units are specified by the <em>guidTimeFormat</em> parameter. If the <em>guidTimeFormat</em> parameter is <strong>GUID_NULL</strong>, set the variant type to <strong>VT_I8</strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidRequest"/></strong></strong></dt> </dl> </td><td> <p>One or more sample requests are still pending.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The <strong>SetCurrentPosition</strong> method does not guarantee exact seeking. The accuracy of the seek depends on the media content. If the media content contains a video stream, the <strong>SetCurrentPosition</strong> method typically seeks to the nearest key frame before the desired position. The distance between key frames depends on several factors, including the encoder implementation, the video content, and the particular encoding settings used to encode the content. The distance between key frame can vary within a single video file (for example, depending on scene complexity).</p><p>After seeking, the application should call <strong>IMFSourceReader::ReadSample</strong> and advance to the desired position. </p><p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374668</doc-id>
        /// <unmanaged>HRESULT IMFSourceReader::SetCurrentPosition([In] const GUID&amp; guidTimeFormat,[In] const PROPVARIANT&amp; varPosition)</unmanaged>
        /// <unmanaged-short>IMFSourceReader::SetCurrentPosition</unmanaged-short>
        internal unsafe void SetCurrentPosition(System.Guid guidTimeFormat, SharpDX.Win32.Variant varPosition)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &guidTimeFormat, &varPosition, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Reads the next sample from the media source.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The stream to pull data from. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_ANY_STREAM</strong></strong></dt> <dt>0xFFFFFFFE</dt> </dl> </td><td> <p>Get the next available sample, regardless of which stream.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "dwControlFlags"><dd> <p>A bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.SourceReaderControlFlags"/></strong> enumeration.</p> </dd></param>
        /// <param name = "dwActualStreamIndexRef"><dd> <p>Receives the zero-based index of the stream.</p> </dd></param>
        /// <param name = "dwStreamFlagsRef"><dd> <p>Receives a bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.SourceReaderFlags"/></strong> enumeration.</p> </dd></param>
        /// <param name = "llTimestampRef"><dd> <p>Receives the time stamp of the sample, or the time of the stream event indicated in <em>pdwStreamFlags</em>. The time is given in 100-nanosecond units.</p> </dd></param>
        /// <returns><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> interface or the value <strong><c>null</c></strong> (see Remarks). If this parameter receives a non-<strong><c>null</c></strong> reference, the caller must release the interface.</p> </dd></returns>
        /// <remarks>
        /// <p>If the requested stream is not selected, the return code is <strong><see cref = "InvalidRequest"/></strong>. See <strong>IMFSourceReader::SetStreamSelection</strong>.</p><p> This method can complete synchronously or asynchronously. If you provide a callback reference when you create the source reader, the method is asynchronous. Otherwise, the method is synchronous. For more information about setting the callback reference, see <see cref = "AsyncCallback"/>.</p>
        /// </remarks>
        /// <doc-id>dd374665</doc-id>
        /// <unmanaged>HRESULT IMFSourceReader::ReadSample([In] DWORD dwStreamIndex,[In] DWORD dwControlFlags,[Out, Optional] DWORD* pdwActualStreamIndex,[Out, Optional] DWORD* pdwStreamFlags,[Out, Optional] longlong* pllTimestamp,[Out, Optional] IMFSample** ppSample)</unmanaged>
        /// <unmanaged-short>IMFSourceReader::ReadSample</unmanaged-short>
        public unsafe SharpDX.MediaFoundation.Sample ReadSample(System.Int32 dwStreamIndex, SharpDX.MediaFoundation.SourceReaderControlFlags dwControlFlags, out System.Int32 dwActualStreamIndexRef, out SharpDX.MediaFoundation.SourceReaderFlags dwStreamFlagsRef, out System.Int64 llTimestampRef)
        {
            SharpDX.MediaFoundation.Sample sampleOut;
            System.IntPtr sampleOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (void *llTimestampRef_ = &llTimestampRef)
                fixed (void *dwStreamFlagsRef_ = &dwStreamFlagsRef)
                    fixed (void *dwActualStreamIndexRef_ = &dwActualStreamIndexRef)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, unchecked ((System.Int32)dwControlFlags), dwActualStreamIndexRef_, dwStreamFlagsRef_, llTimestampRef_, &sampleOut_, (*(void ***)this._nativePointer)[9]);
            if (sampleOut_ != System.IntPtr.Zero)
                sampleOut = new SharpDX.MediaFoundation.Sample(sampleOut_);
            else
                sampleOut = null;
            __result__.CheckError();
            return sampleOut;
        }

        /// <summary>
        /// <p>Flushes one or more streams.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The stream to flush. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_ALL_STREAMS</strong></strong></dt> <dt>0xFFFFFFFE</dt> </dl> </td><td> <p>All streams.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The <strong>Flush</strong> method discards all queued samples and cancels all pending sample requests.</p><p>This method can complete either synchronously or asynchronously. If you provide a callback reference when you create the source reader, the method is asynchronous. Otherwise, the method is synchronous. For more information about the setting the callback reference, see <see cref = "AsyncCallback"/>.</p><p>In synchronous mode, the method blocks until the operation is complete.</p><p>In asynchronous mode, the application's <strong>IMFSourceReaderCallback::OnFlush</strong> method is called when the flush operation completes. While a flush operation is pending, the <strong>IMFSourceReader::ReadSample</strong> method returns <strong><see cref = "NotAccepting"/></strong>.</p><strong>Note</strong>??In Windows?7, there was a bug in the implementation of this method, which causes <strong>OnFlush</strong> to be called before the flush operation completes. A hotfix is available that fixes this bug. For more information, see http://support.microsoft.com/kb/979567.?<p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374659</doc-id>
        /// <unmanaged>HRESULT IMFSourceReader::Flush([In] DWORD dwStreamIndex)</unmanaged>
        /// <unmanaged-short>IMFSourceReader::Flush</unmanaged-short>
        public unsafe void Flush(System.Int32 dwStreamIndex)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Queries the underlying media source or decoder for an interface.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The stream or object to query. If the value is <strong>MF_SOURCE_READER_MEDIASOURCE</strong>, the method queries the media source. Otherwise, it queries the decoder that is associated with the specified stream. The following values are possible.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_MEDIASOURCE</strong></strong></dt> <dt>0xFFFFFFFF</dt> </dl> </td><td> <p>The media source.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "guidService"><dd> <p>A service identifier <see cref = "System.Guid"/>.  If the value is <strong>GUID_NULL</strong>, the method calls <strong>QueryInterface</strong> to get the requested interface. Otherwise, the method calls the <strong>IMFGetService::GetService</strong> method. For a list of service identifiers, see Service Interfaces.</p> </dd></param>
        /// <param name = "riid"><dd> <p>The interface identifier (IID) of the interface being requested. </p> </dd></param>
        /// <returns><dd> <p>Receives a reference to the requested interface. The caller must release the interface.</p> </dd></returns>
        /// <remarks>
        /// <p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374663</doc-id>
        /// <unmanaged>HRESULT IMFSourceReader::GetServiceForStream([In] DWORD dwStreamIndex,[In] const GUID&amp; guidService,[In] const GUID&amp; riid,[Out] void** ppvObject)</unmanaged>
        /// <unmanaged-short>IMFSourceReader::GetServiceForStream</unmanaged-short>
        public unsafe System.IntPtr GetServiceForStream(System.Int32 dwStreamIndex, System.Guid guidService, System.Guid riid)
        {
            System.IntPtr vObjectOut;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, &guidService, &riid, &vObjectOut, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
            return vObjectOut;
        }

        /// <summary>
        /// <p>Gets an attribute from the underlying media source.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The stream or object to query. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_MEDIASOURCE</strong></strong></dt> <dt>0xFFFFFFFF</dt> </dl> </td><td> <p>The media source.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "guidAttribute"><dd> <p>A <see cref = "System.Guid"/> that identifies the attribute to retrieve. If the <em>dwStreamIndex</em> parameter equals  <strong>MF_SOURCE_READER_MEDIASOURCE</strong>, <em>guidAttribute</em> can specify one of the following:</p> <ul> <li>A presentation descriptor attribute. For a list of values, see Presentation Descriptor Attributes.</li> <li> <see cref = "MediaSourceCharacteristics"/>. Use this value to get characteristics flags from the media source.</li> </ul> <p>Otherwise, if the <em>dwStreamIndex</em> parameter specifies a stream, <em>guidAttribute</em> specifies a stream descriptor attribute. For a list of values, see Stream Descriptor Attributes.</p> </dd></param>
        /// <returns><dd> <p>A reference to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that receives the value of the attribute. Call the <strong>PropVariantClear</strong> function to free the <strong><see cref = "SharpDX.Win32.Variant"/></strong>. </p> </dd></returns>
        /// <remarks>
        /// <p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374662</doc-id>
        /// <unmanaged>HRESULT IMFSourceReader::GetPresentationAttribute([In] DWORD dwStreamIndex,[In] const GUID&amp; guidAttribute,[Out] PROPVARIANT* pvarAttribute)</unmanaged>
        /// <unmanaged-short>IMFSourceReader::GetPresentationAttribute</unmanaged-short>
        public unsafe SharpDX.Win32.Variant GetPresentationAttribute(System.Int32 dwStreamIndex, System.Guid guidAttribute)
        {
            SharpDX.Win32.Variant varAttributeRef;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, &guidAttribute, &varAttributeRef, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
            return varAttributeRef;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("deec8d99-fa1d-4d82-84c2-2c8969944867")]
    public partial class SourceReaderCallback : SharpDX.ComObject
    {
        public SourceReaderCallback(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SourceReaderCallback(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SourceReaderCallback(nativePtr);
        /// <summary>
        /// <p>Called when the <strong>IMFSourceReader::ReadSample</strong> method completes.</p>
        /// </summary>
        /// <param name = "hrStatus">No documentation.</param>
        /// <param name = "dwStreamIndex">No documentation.</param>
        /// <param name = "dwStreamFlags">No documentation.</param>
        /// <param name = "llTimestamp">No documentation.</param>
        /// <param name = "sampleRef">No documentation.</param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Currently, the source reader ignores the return value.</p></returns>
        /// <remarks>
        /// <p>The <em>pSample</em> parameter might be <strong><c>null</c></strong>. For example, when the source reader reaches the end of a stream, <em>dwStreamFlags</em> contains the <strong>MF_SOURCE_READERF_ENDOFSTREAM</strong> flag, and <em>pSample</em> is <strong><c>null</c></strong>. </p><p>If there is a gap in the stream, <em>dwStreamFlags</em> contains the <strong>MF_SOURCE_READERF_STREAMTICK</strong> flag, <em>pSample</em> is <strong><c>null</c></strong>, and <em>llTimestamp</em> indicates the time when the gap occurred.  </p><p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374658</doc-id>
        /// <unmanaged>HRESULT IMFSourceReaderCallback::OnReadSample([In] HRESULT hrStatus,[In] DWORD dwStreamIndex,[In] DWORD dwStreamFlags,[In] longlong llTimestamp,[In, Optional] IMFSample* pSample)</unmanaged>
        /// <unmanaged-short>IMFSourceReaderCallback::OnReadSample</unmanaged-short>
        public unsafe void OnReadSample(SharpDX.Result hrStatus, System.Int32 dwStreamIndex, System.Int32 dwStreamFlags, System.Int64 llTimestamp, SharpDX.MediaFoundation.Sample sampleRef)
        {
            System.IntPtr sampleRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            sampleRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Sample>(sampleRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, hrStatus, dwStreamIndex, dwStreamFlags, llTimestamp, (void *)sampleRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Called when the <strong>IMFSourceReader::Flush</strong> method completes.</p>
        /// </summary>
        /// <param name = "dwStreamIndex">No documentation.</param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Currently, the source reader ignores the return value.</p></returns>
        /// <remarks>
        /// <p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd374657</doc-id>
        /// <unmanaged>HRESULT IMFSourceReaderCallback::OnFlush([In] DWORD dwStreamIndex)</unmanaged>
        /// <unmanaged-short>IMFSourceReaderCallback::OnFlush</unmanaged-short>
        public unsafe void OnFlush(System.Int32 dwStreamIndex)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Called when the source reader receives certain events from the media source.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>For stream events, the value is the zero-based index of the stream that sent the event. For source events, the value is <strong>MF_SOURCE_READER_MEDIASOURCE</strong>.</p> </dd></param>
        /// <param name = "eventRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaEvent"/></strong> interface of the event.</p> </dd></param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Currently, the source reader ignores the return value.</p></returns>
        /// <remarks>
        /// <p>In the current implementation,  the source reader uses this method to forward the following events to the application:</p><ul> <li> MEBufferingStarted </li> <li> MEBufferingStopped </li> <li> MEConnectEnd </li> <li> MEConnectStart </li> <li> MEExtendedType </li> <li> MESourceCharacteristicsChanged </li> <li> MESourceMetadataChanged </li> </ul><p>This interface is available on Windows?Vista if Platform Update Supplement for Windows?Vista is installed.</p>
        /// </remarks>
        /// <doc-id>dd743367</doc-id>
        /// <unmanaged>HRESULT IMFSourceReaderCallback::OnEvent([In] DWORD dwStreamIndex,[In] IMFMediaEvent* pEvent)</unmanaged>
        /// <unmanaged-short>IMFSourceReaderCallback::OnEvent</unmanaged-short>
        public unsafe void OnEvent(System.Int32 dwStreamIndex, SharpDX.MediaFoundation.MediaEvent eventRef)
        {
            System.IntPtr eventRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            eventRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaEvent>(eventRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (void *)eventRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("CF839FE6-8C2A-4DD2-B6EA-C22D6961AF05")]
    public partial class SourceReaderCallback2 : SharpDX.MediaFoundation.SourceReaderCallback
    {
        public SourceReaderCallback2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SourceReaderCallback2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SourceReaderCallback2(nativePtr);
        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Called when the transform chain in the <strong><see cref = "SharpDX.MediaFoundation.SourceReader"/></strong> is built or modified.</p>
        /// </summary>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Currently, the source reader ignores the return value.</p></returns>
        /// <doc-id>dn949420</doc-id>
        /// <unmanaged>HRESULT IMFSourceReaderCallback2::OnTransformChange()</unmanaged>
        /// <unmanaged-short>IMFSourceReaderCallback2::OnTransformChange</unmanaged-short>
        public unsafe void OnTransformChange()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Called when an asynchronous error occurs with the <strong><see cref = "SharpDX.MediaFoundation.SourceReader"/></strong>.</p>
        /// </summary>
        /// <param name = "dwStreamIndex">No documentation.</param>
        /// <param name = "hrStatus">No documentation.</param>
        /// <returns><p>Returns an <strong><see cref = "SharpDX.Result"/></strong> value. Currently, the source reader ignores the return value.</p></returns>
        /// <doc-id>dn949419</doc-id>
        /// <unmanaged>HRESULT IMFSourceReaderCallback2::OnStreamError([In] DWORD dwStreamIndex,[In] HRESULT hrStatus)</unmanaged>
        /// <unmanaged-short>IMFSourceReaderCallback2::OnStreamError</unmanaged-short>
        public unsafe void OnStreamError(System.Int32 dwStreamIndex, SharpDX.Result hrStatus)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, dwStreamIndex, hrStatus, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7b981cf0-560e-4116-9875-b099895f23d7")]
    public partial class SourceReaderEx : SharpDX.MediaFoundation.SourceReader
    {
        public SourceReaderEx(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SourceReaderEx(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SourceReaderEx(nativePtr);
        /// <summary>
        /// <p>Sets the native media type for a stream on the media source.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd></dd></param>
        /// <param name = "mediaTypeRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of the media type.</p> </dd></param>
        /// <param name = "dwStreamFlagsRef"><dd> <p>Receives a bitwise <strong>OR</strong> of zero or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>MF_SOURCE_READERF_ALLEFFECTSREMOVED</strong></dt> </dl> </td><td> <p>All effects were removed from the stream.</p> </td></tr> <tr><td><dl> <dt><strong>MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED</strong></dt> </dl> </td><td> <p>The current output type changed.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>Invalid request.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidStreamNumber"/></strong></strong></dt> </dl> </td><td> <p>The <em>dwStreamIndex</em> parameter is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method sets the output type that is produced by the media source. Unlike the <strong>IMFSourceReader::SetCurrentMediaType</strong> method, this method does not insert any decoders, video processors, or other transforms. The media source must support the specified media type natively. To get a list of supported types from the media source, call <strong>IMFSourceReader::GetNativeMediaType</strong>.</p><p>In asynchronous mode, this method fails if a sample request is pending. In that case, wait for the <strong>OnReadSample</strong> callback to be invoked before calling the method. For more information about using the Source Reader in asynchronous mode, see <strong>IMFSourceReader::ReadSample</strong>.</p><p>This method can trigger a change in the output format for the stream. If so, the <strong>MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED</strong> flag is returned in the  <em>pdwStreamFlags</em> parameter. The method might also cause the Source Reader to remove any effects that were added by the <strong>IMFSourceReaderEx::AddTransformForStream</strong> method. If this occurs, the  <strong>MF_SOURCE_READERF_ALLEFFECTSREMOVED</strong> flag is returned in <em>pdwStreamFlags</em>. </p><p>This method is useful with audio and video capture devices, because a device might support several output formats. This method enables the application to choose the device format before decoders and other transforms are added.</p>
        /// </remarks>
        /// <doc-id>hh448066</doc-id>
        /// <unmanaged>HRESULT IMFSourceReaderEx::SetNativeMediaType([In] DWORD dwStreamIndex,[In, Optional] IMFMediaType* pMediaType,[Out] DWORD* pdwStreamFlags)</unmanaged>
        /// <unmanaged-short>IMFSourceReaderEx::SetNativeMediaType</unmanaged-short>
        public unsafe void SetNativeMediaType(System.Int32 dwStreamIndex, SharpDX.MediaFoundation.MediaType mediaTypeRef, out System.Int32 dwStreamFlagsRef)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(mediaTypeRef);
            fixed (void *dwStreamFlagsRef_ = &dwStreamFlagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (void *)mediaTypeRef_, dwStreamFlagsRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Adds a transform, such as an audio or video effect, to a stream.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The stream to configure. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "transformOrActivateRef"><dd> <p>A reference to one of the following:</p> <ul> <li>A Media Foundation transform (MFT) that exposes the <strong><see cref = "SharpDX.MediaFoundation.Transform"/></strong> interface.</li> <li>An MFT activation object that exposes the <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> interface.</li> </ul> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidMediaType"/></strong></dt> </dl> </td><td> <p>The transform does not support the current stream format, and no conversion was possible. See Remarks for more information.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>Invalid request.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidStreamNumber"/></strong></strong></dt> </dl> </td><td> <p>The <em>dwStreamIndex</em> parameter is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method attempts to add the transform at the end of the current processing chain. </p><p>To use this method, make the following sequence of calls:</p><ol> <li>Call <strong>IMFSourceReader::SetCurrentMediaType</strong> to set the output type that you want for the stream. In this step, you can specify a media type that contains only the major type and subtype GUIDs. For example, to get 32-bit RGB output, set a major type of <strong><see cref = "Video"/></strong> and a subtype of <strong><see cref = "Rgb32"/></strong>. (For more information, see Media Type GUIDs.)</li> <li>Call <strong>AddTransformForStream</strong>. If the Source Reader successfully connects the transform, it sets the output type on the transform.</li> <li>Call <strong>IMFSourceReader::GetCurrentMediaType</strong> to get the output type from the transform. This method returns a media type with a complete format description.</li> <li>Optionally, if you want to modify the output type, call <strong>IMFSourceReader::SetCurrentMediaType</strong> again to set a complete media type on the transform.</li> </ol><p>The <strong>AddTransformForStream</strong> method will not insert a decoder into the processing chain. If the native stream format is encoded, and the transform requires an uncompressed format, call <strong>SetCurrentMediaType</strong> to set the uncompressed format (step 1 in the previous list). However, the method will insert a video processor to convert between RGB and YUV formats, if required.</p><p>The method fails if the source reader was configured with the <see cref = "ReadwriteDisableConverters"/> or <see cref = "EnableVideoProcessing"/> attributes. </p><p>In asynchronous mode, the method also fails if a sample request is pending. In that case, wait for the <strong>OnReadSample</strong> callback to be invoked before calling the method. For more information about using the Source Reader in asynchronous mode, see <strong>IMFSourceReader::ReadSample</strong>.</p><p>You can add a transform at any time during streaming. However, the method does not flush or drain the pipeline before inserting the transform. Therefore, if data is already in the pipeline, the next sample is not guaranteed to have the transform applied.</p>
        /// </remarks>
        /// <doc-id>hh448063</doc-id>
        /// <unmanaged>HRESULT IMFSourceReaderEx::AddTransformForStream([In] DWORD dwStreamIndex,[In] IUnknown* pTransformOrActivate)</unmanaged>
        /// <unmanaged-short>IMFSourceReaderEx::AddTransformForStream</unmanaged-short>
        public unsafe void AddTransformForStream(System.Int32 dwStreamIndex, SharpDX.IUnknown transformOrActivateRef)
        {
            System.IntPtr transformOrActivateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            transformOrActivateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(transformOrActivateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (void *)transformOrActivateRef_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Removes all of the Media Foundation transforms (MFTs) for a specified stream, with the exception of the decoder.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The stream for which to remove the MFTs. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>Invalid request.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidStreamNumber"/></strong></strong></dt> </dl> </td><td> <p>The <em>dwStreamIndex</em> parameter is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Calling this method can reset the current output type for the stream. To get the new output type, call <strong>IMFSourceReader::GetCurrentMediaType</strong>.</p><p>In asynchronous mode, this method fails if a sample request is pending. In that case, wait for the <strong>OnReadSample</strong> callback to be invoked before calling the method. For more information about using the Source Reader in asynchronous mode, see <strong>IMFSourceReader::ReadSample</strong>.</p>
        /// </remarks>
        /// <doc-id>hh448065</doc-id>
        /// <unmanaged>HRESULT IMFSourceReaderEx::RemoveAllTransformsForStream([In] DWORD dwStreamIndex)</unmanaged>
        /// <unmanaged-short>IMFSourceReaderEx::RemoveAllTransformsForStream</unmanaged-short>
        public unsafe void RemoveAllTransformsForStream(System.Int32 dwStreamIndex)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a reference to a Media Foundation transform (MFT) for a specified stream.</p>
        /// </summary>
        /// <param name = "dwStreamIndex"><dd> <p>The stream to query for the MFT. The value can be any of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0?0xFFFFFFFB</dt> </dl> </td><td> <p>The zero-based index of a stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_VIDEO_STREAM</strong></strong></dt> <dt>0xFFFFFFFC</dt> </dl> </td><td> <p>The first video stream.</p> </td></tr> <tr><td><dl> <dt><strong><strong>MF_SOURCE_READER_FIRST_AUDIO_STREAM</strong></strong></dt> <dt>0xFFFFFFFD</dt> </dl> </td><td> <p>The first audio stream.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "dwTransformIndex"><dd> <p>The zero-based index of the MFT to retreive.</p> </dd></param>
        /// <param name = "guidCategoryRef"><dd> <p>Receives a <see cref = "System.Guid"/> that specifies the category of the MFT. For a list of possible values, see <strong>MFT_CATEGORY</strong>.</p> </dd></param>
        /// <param name = "transformOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.Transform"/></strong> interface of the MFT. The caller must release the interface.</p> </dd></param>
        /// <returns><p>This method can return one of these values.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>Success.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidIndex"/></strong></dt> </dl> </td><td> <p>The <em>dwTransformIndex</em> parameter is out of range.</p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "InvalidStreamNumber"/></strong></strong></dt> </dl> </td><td> <p>The <em>dwStreamIndex</em> parameter is invalid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You can use this method to configure an MFT after it is inserted into the processing chain. Do not use the reference returned in <em>ppTransform</em> to set media types on the MFT or to process data. In particular, calling any of the following <strong><see cref = "SharpDX.MediaFoundation.Transform"/></strong> methods could have unexpected results.</p><ul> <li> <strong>AddInputStreams</strong> </li> <li> <strong>DeleteInputStream</strong> </li> <li> <strong>ProcessEvent</strong> </li> <li> <strong>ProcessInput</strong> </li> <li> <strong>ProcessMessage</strong> </li> <li> <strong>ProcessOutput</strong> </li> <li> <strong>SetInputType</strong> </li> <li> <strong>SetOutputType</strong> </li> </ul><p>If a decoder is present, it appears at index position zero.</p><p>To avoid losing any data, you should drain the source reader before calling this method. For more information, see Draining the Data Pipeline.</p>
        /// </remarks>
        /// <doc-id>hh448064</doc-id>
        /// <unmanaged>HRESULT IMFSourceReaderEx::GetTransformForStream([In] DWORD dwStreamIndex,[In] DWORD dwTransformIndex,[Out, Optional] GUID* pGuidCategory,[Out] IMFTransform** ppTransform)</unmanaged>
        /// <unmanaged-short>IMFSourceReaderEx::GetTransformForStream</unmanaged-short>
        public unsafe void GetTransformForStream(System.Int32 dwStreamIndex, System.Int32 dwTransformIndex, out System.Guid guidCategoryRef, out SharpDX.MediaFoundation.Transform transformOut)
        {
            guidCategoryRef = default (System.Guid);
            System.IntPtr transformOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (void *guidCategoryRef_ = &guidCategoryRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIndex, dwTransformIndex, guidCategoryRef_, &transformOut_, (*(void ***)this._nativePointer)[16]);
            if (transformOut_ != System.IntPtr.Zero)
                transformOut = new SharpDX.MediaFoundation.Transform(transformOut_);
            else
                transformOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("FBE5A32D-A497-4b61-BB85-97B1A848A6E3")]
    public partial class SourceResolver : SharpDX.ComObject
    {
        public SourceResolver(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SourceResolver(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SourceResolver(nativePtr);
        /// <summary>
        /// <p> Creates a media source or a byte stream from a URL. This method is synchronous. </p>
        /// </summary>
        /// <param name = "wszURLRef"><dd> <p> Null-terminated string that contains the URL to resolve. </p> </dd></param>
        /// <param name = "dwFlags"><dd> <p> Bitwise OR of one or more flags. See <strong>Source Resolver Flags</strong>. See remarks below.</p> </dd></param>
        /// <param name = "propsRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.ComObject"/></strong> interface of a property store. The method passes the property store to the scheme handler or byte-stream handler that creates the object. The handler can use the property store to configure the object. This parameter can be <strong><c>null</c></strong>. For more information, see Configuring a Media Source. </p> </dd></param>
        /// <param name = "objectTypeRef"><dd> <p> Receives a member of the <strong><see cref = "SharpDX.MediaFoundation.ObjectType"/></strong> enumeration, specifying the type of object that was created. </p> </dd></param>
        /// <param name = "objectOut"><dd> <p> Receives a reference to the object's <strong><see cref = "SharpDX.IUnknown"/></strong> interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SourceResolverMutuallyExclusiveFlags"/></strong></dt> </dl> </td><td> <p> The <em>dwFlags</em> parameter contains mutually exclusive flags. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedScheme"/></strong></dt> </dl> </td><td> <p> The URL scheme is not supported. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The <em>dwFlags</em> parameter must contain either the <strong>MF_RESOLUTION_MEDIASOURCE</strong> flag or the <strong>MF_RESOLUTION_BYTESTREAM</strong> flag, but should not contain both.</p><p>It is recommended that you do not set <strong>MF_RESOLUTION_WRITE</strong> on the input argument <em>dwFlags</em> unless it is necessary for your scenario. For most use-cases, media sources do not need to be created with write capability. Creating a media source with write capability may have a lower probability of success than creating a media source without write capability. This is because there can be stricter checks on the content represented by the URL when creating a media source with write capability.</p><p>For local files, you can pass the file name in the <em>pwszURL</em> parameter; the <code>file:</code> scheme is not required.</p><strong>Note</strong>??This method cannot be called remotely.?
        /// </remarks>
        /// <doc-id>ms702279</doc-id>
        /// <unmanaged>HRESULT IMFSourceResolver::CreateObjectFromURL([In] const wchar_t* pwszURL,[In] DWORD dwFlags,[In] IPropertyStore* pProps,[Out] MF_OBJECT_TYPE* pObjectType,[Out] IUnknown** ppObject)</unmanaged>
        /// <unmanaged-short>IMFSourceResolver::CreateObjectFromURL</unmanaged-short>
        internal unsafe void CreateObjectFromURL(System.String wszURLRef, System.Int32 dwFlags, SharpDX.ComObject propsRef, out SharpDX.MediaFoundation.ObjectType objectTypeRef, out SharpDX.IUnknown objectOut)
        {
            System.IntPtr propsRef_ = System.IntPtr.Zero;
            System.IntPtr objectOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            propsRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.ComObject>(propsRef);
            fixed (void *objectTypeRef_ = &objectTypeRef)
                fixed (char *wszURLRef_ = wszURLRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszURLRef_, dwFlags, (void *)propsRef_, objectTypeRef_, &objectOut_, (*(void ***)this._nativePointer)[3]);
            if (objectOut_ != System.IntPtr.Zero)
                objectOut = new SharpDX.ComObject(objectOut_);
            else
                objectOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Creates a media source from a byte stream. This method is synchronous. </p>
        /// </summary>
        /// <param name = "byteStreamRef"><dd> <p> Pointer to the byte stream's <strong><see cref = "SharpDX.MediaFoundation.IByteStream"/></strong> interface. </p> </dd></param>
        /// <param name = "wszURLRef"><dd> <p> Null-terminated string that contains the URL of the byte stream. The URL is optional and can be <strong><c>null</c></strong>. See Remarks for more information. </p> </dd></param>
        /// <param name = "dwFlags"><dd> <p> Bitwise <strong>OR</strong> of flags. See <strong>Source Resolver Flags</strong>. </p> </dd></param>
        /// <param name = "propsRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.ComObject"/></strong> interface of a property store. The method passes the property store to the byte-stream handler. The byte-stream handler can use the property store to configure the media source. This parameter can be <strong><c>null</c></strong>. For more information, see Configuring a Media Source. </p> </dd></param>
        /// <param name = "objectTypeRef"><dd> <p> Receives a member of the <strong><see cref = "SharpDX.MediaFoundation.ObjectType"/></strong> enumeration, specifying the type of object that was created. </p> </dd></param>
        /// <param name = "objectOut"><dd> <p> Receives a reference to the media source's <strong><see cref = "SharpDX.IUnknown"/></strong> interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SourceResolverMutuallyExclusiveFlags"/></strong></dt> </dl> </td><td> <p> The <em>dwFlags</em> parameter contains mutually exclusive flags. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedByteStreamType"/></strong></dt> </dl> </td><td> <p> This byte stream is not supported. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The <em>dwFlags</em> parameter must contain the <strong>MF_RESOLUTION_MEDIASOURCE</strong> flag and should not contain the <strong>MF_RESOLUTION_BYTESTREAM</strong> flag.</p><p>The source resolver attempts to find one or more byte-stream handlers for the byte stream, based on the file name extension of the URL, or the MIME type of the byte stream (or both). The URL is specified in the optional <em>pwszURL</em> parameter, and the MIME type may be specified in the <strong><see cref = "ContentType"/></strong> attribute on the byte stream. Byte-stream handlers are registered by file name extension or MIME type, or both, as described in Scheme Handlers and Byte-Stream Handlers. The caller should specify at least one of these values (both if possible):</p><ul> <li> Specify the URL in the <em>pwszURL</em> parameter. </li> <li> Specify the MIME type by setting the <strong><see cref = "ContentType"/></strong> attribute on the byte stream. (This attribute might be set already when you create the byte stream, depending on how the byte stream was created.) </li> </ul><strong>Note</strong>??This method cannot be called remotely.?
        /// </remarks>
        /// <doc-id>ms704671</doc-id>
        /// <unmanaged>HRESULT IMFSourceResolver::CreateObjectFromByteStream([In] IMFByteStream* pByteStream,[In] const wchar_t* pwszURL,[In] DWORD dwFlags,[In] IPropertyStore* pProps,[Out] MF_OBJECT_TYPE* pObjectType,[Out] IUnknown** ppObject)</unmanaged>
        /// <unmanaged-short>IMFSourceResolver::CreateObjectFromByteStream</unmanaged-short>
        public unsafe void CreateObjectFromByteStream(SharpDX.MediaFoundation.IByteStream byteStreamRef, System.String wszURLRef, System.Int32 dwFlags, SharpDX.ComObject propsRef, out SharpDX.MediaFoundation.ObjectType objectTypeRef, out SharpDX.IUnknown objectOut)
        {
            System.IntPtr byteStreamRef_ = System.IntPtr.Zero;
            System.IntPtr propsRef_ = System.IntPtr.Zero;
            System.IntPtr objectOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            byteStreamRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IByteStream>(byteStreamRef);
            propsRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.ComObject>(propsRef);
            fixed (void *objectTypeRef_ = &objectTypeRef)
                fixed (char *wszURLRef_ = wszURLRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)byteStreamRef_, (void *)wszURLRef_, dwFlags, (void *)propsRef_, objectTypeRef_, &objectOut_, (*(void ***)this._nativePointer)[4]);
            if (objectOut_ != System.IntPtr.Zero)
                objectOut = new SharpDX.ComObject(objectOut_);
            else
                objectOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Begins an asynchronous request to create a media source or a byte stream from a URL.</p>
        /// </summary>
        /// <param name = "wszURLRef"><dd> <p>Null-terminated string that contains the URL to resolve.</p> </dd></param>
        /// <param name = "dwFlags"><dd> <p>Bitwise OR of flags. See <strong>Source Resolver Flags</strong>.</p> </dd></param>
        /// <param name = "propsRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.ComObject"/></strong> interface of a property store. The method passes the property store to the scheme handler or byte-stream handler that creates the object. The handler can use the property store to configure the object. This parameter can be <strong><c>null</c></strong>. For more information, see Configuring a Media Source.</p> </dd></param>
        /// <param name = "iUnknownCancelCookieOut"><dd> <p>Receives an <strong><see cref = "SharpDX.IUnknown"/></strong> reference or the value <strong><c>null</c></strong>. If the value is not <strong><c>null</c></strong>, you can cancel the asynchronous operation by passing this reference to the <strong>IMFSourceResolver::CancelObjectCreation</strong> method. The caller must release the interface. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface.</p> </dd></param>
        /// <param name = "unkStateRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SourceResolverMutuallyExclusiveFlags"/></strong></dt> </dl> </td><td> <p>The <em>dwFlags</em> parameter contains mutually exclusive flags.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedScheme"/></strong></dt> </dl> </td><td> <p>The URL scheme is not supported.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The <em>dwFlags</em> parameter must contain either the MF_RESOLUTION_MEDIASOURCE flag or the MF_RESOLUTION_BYTESTREAM flag, but should not contain both.</p><p>For local files, you can pass the file name in the <em>pwszURL</em> parameter; the <code>file:</code> scheme is not required.</p><p>When the operation completes, the source resolver calls the <strong>IMFAsyncCallback::Invoke</strong> method. The <strong>Invoke</strong> method should call <strong>IMFSourceResolver::EndCreateObjectFromURL</strong> to get a reference to the object that was created.</p><p>The usage of the <em>pProps</em> parameter depends on the implementation of the media source. </p>
        /// </remarks>
        /// <doc-id>ms702995</doc-id>
        /// <unmanaged>HRESULT IMFSourceResolver::BeginCreateObjectFromURL([In] const wchar_t* pwszURL,[In] DWORD dwFlags,[In] IPropertyStore* pProps,[Out, Optional] IUnknown** ppIUnknownCancelCookie,[In] IMFAsyncCallback* pCallback,[In] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFSourceResolver::BeginCreateObjectFromURL</unmanaged-short>
        public unsafe void BeginCreateObjectFromURL(System.String wszURLRef, System.Int32 dwFlags, SharpDX.ComObject propsRef, out SharpDX.IUnknown iUnknownCancelCookieOut, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown unkStateRef)
        {
            System.IntPtr propsRef_ = System.IntPtr.Zero;
            System.IntPtr iUnknownCancelCookieOut_ = System.IntPtr.Zero;
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            propsRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.ComObject>(propsRef);
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            fixed (char *wszURLRef_ = wszURLRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszURLRef_, dwFlags, (void *)propsRef_, &iUnknownCancelCookieOut_, (void *)callbackRef_, (void *)unkStateRef_, (*(void ***)this._nativePointer)[5]);
            if (iUnknownCancelCookieOut_ != System.IntPtr.Zero)
                iUnknownCancelCookieOut = new SharpDX.ComObject(iUnknownCancelCookieOut_);
            else
                iUnknownCancelCookieOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Completes an asynchronous request to create an object from a URL. </p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the <strong>Invoke</strong> method. </p> </dd></param>
        /// <param name = "objectTypeRef"><dd> <p> Receives a member of the <strong><see cref = "SharpDX.MediaFoundation.ObjectType"/></strong> enumeration, specifying the type of object that was created. </p> </dd></param>
        /// <param name = "objectOut"><dd> <p> Receives a reference to the media source's <strong><see cref = "SharpDX.IUnknown"/></strong> interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_ABORT</strong></dt> </dl> </td><td> <p> The operation was canceled. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method from inside your application's <strong>IMFAsyncCallback::Invoke</strong> method.</p>
        /// </remarks>
        /// <doc-id>ms702134</doc-id>
        /// <unmanaged>HRESULT IMFSourceResolver::EndCreateObjectFromURL([In] IMFAsyncResult* pResult,[Out] MF_OBJECT_TYPE* pObjectType,[Out] IUnknown** ppObject)</unmanaged>
        /// <unmanaged-short>IMFSourceResolver::EndCreateObjectFromURL</unmanaged-short>
        public unsafe void EndCreateObjectFromURL(SharpDX.MediaFoundation.AsyncResult resultRef, out SharpDX.MediaFoundation.ObjectType objectTypeRef, out SharpDX.IUnknown objectOut)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            System.IntPtr objectOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            fixed (void *objectTypeRef_ = &objectTypeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, objectTypeRef_, &objectOut_, (*(void ***)this._nativePointer)[6]);
            if (objectOut_ != System.IntPtr.Zero)
                objectOut = new SharpDX.ComObject(objectOut_);
            else
                objectOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Begins an asynchronous request to create a media source from a byte stream.</p>
        /// </summary>
        /// <param name = "byteStreamRef"><dd> <p>A reference to the byte stream's <strong><see cref = "SharpDX.MediaFoundation.IByteStream"/></strong> interface. </p> </dd></param>
        /// <param name = "wszURLRef"><dd> <p>A null-terminated string that contains the original URL of the byte stream. This parameter can be <strong><c>null</c></strong>. </p> </dd></param>
        /// <param name = "dwFlags"><dd> <p>A bitwise <strong>OR</strong> of one or more flags. See <strong>Source Resolver Flags</strong>. </p> </dd></param>
        /// <param name = "propsRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.ComObject"/></strong> interface of a property store. The method passes the property store to the byte-stream handler. The byte-stream handler can use the property store to configure the media source. This parameter can be <strong><c>null</c></strong>. For more information, see Configuring a Media Source. </p> </dd></param>
        /// <param name = "iUnknownCancelCookieOut"><dd> <p>Receives an <strong><see cref = "SharpDX.IUnknown"/></strong> reference or the value <strong><c>null</c></strong>. If the value is not <strong><c>null</c></strong>, you can cancel the asynchronous operation by passing this reference to the <strong>IMFSourceResolver::CancelObjectCreation</strong> method. The caller must release the interface. This parameter can be <strong><c>null</c></strong>. </p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface. </p> </dd></param>
        /// <param name = "unkStateRef"><dd> <p>A oointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SourceResolverMutuallyExclusiveFlags"/></strong></dt> </dl> </td><td> <p>The <em>dwFlags</em> parameter contains mutually exclusive flags.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedByteStreamType"/></strong></dt> </dl> </td><td> <p>The byte stream is not supported.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ByteStreamNotSeekable"/></strong></dt> </dl> </td><td> <p>The byte stream does not support seeking.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The <em>dwFlags</em> parameter must contain the <strong>MF_RESOLUTION_MEDIASOURCE</strong> flag and should not contain the <strong>MF_RESOLUTION_BYTESTREAM</strong> flag.</p><p>The source resolver attempts to find one or more byte-stream handlers for the byte stream, based on the file name extension of the URL, or the MIME type of the byte stream (or both). The URL is specified in the optional <em>pwszURL</em> parameter, and the MIME type may be specified in the <strong><see cref = "ContentType"/></strong> attribute on the byte stream. Byte-stream handlers are registered by file name extension or MIME type, or both, as described in Scheme Handlers and Byte-Stream Handlers. The caller should specify at least one of these values.</p><p>When the operation completes, the source resolver calls the <strong>IMFAsyncCallback::Invoke</strong> method. The <strong>Invoke</strong> method should call <strong>IMFSourceResolver::EndCreateObjectFromByteStream</strong> to get a reference to the media source.</p>
        /// </remarks>
        /// <doc-id>ms698915</doc-id>
        /// <unmanaged>HRESULT IMFSourceResolver::BeginCreateObjectFromByteStream([In] IMFByteStream* pByteStream,[In] const wchar_t* pwszURL,[In] DWORD dwFlags,[In] IPropertyStore* pProps,[Out, Optional] IUnknown** ppIUnknownCancelCookie,[In] IMFAsyncCallback* pCallback,[In] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFSourceResolver::BeginCreateObjectFromByteStream</unmanaged-short>
        public unsafe void BeginCreateObjectFromByteStream(SharpDX.MediaFoundation.IByteStream byteStreamRef, System.String wszURLRef, System.Int32 dwFlags, SharpDX.ComObject propsRef, out SharpDX.IUnknown iUnknownCancelCookieOut, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown unkStateRef)
        {
            System.IntPtr byteStreamRef_ = System.IntPtr.Zero;
            System.IntPtr propsRef_ = System.IntPtr.Zero;
            System.IntPtr iUnknownCancelCookieOut_ = System.IntPtr.Zero;
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            byteStreamRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IByteStream>(byteStreamRef);
            propsRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.ComObject>(propsRef);
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            fixed (char *wszURLRef_ = wszURLRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)byteStreamRef_, (void *)wszURLRef_, dwFlags, (void *)propsRef_, &iUnknownCancelCookieOut_, (void *)callbackRef_, (void *)unkStateRef_, (*(void ***)this._nativePointer)[7]);
            if (iUnknownCancelCookieOut_ != System.IntPtr.Zero)
                iUnknownCancelCookieOut = new SharpDX.ComObject(iUnknownCancelCookieOut_);
            else
                iUnknownCancelCookieOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Completes an asynchronous request to create a media source from a byte stream.</p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the <strong>Invoke</strong> method.</p> </dd></param>
        /// <param name = "objectTypeRef"><dd> <p>Receives a member of the <strong><see cref = "SharpDX.MediaFoundation.ObjectType"/></strong> enumeration, specifying the type of object that was created.</p> </dd></param>
        /// <param name = "objectOut"><dd> <p>Receives a reference to the media source's <strong><see cref = "SharpDX.IUnknown"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_ABORT</strong></dt> </dl> </td><td> <p>The application canceled the operation.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method from inside your application's <strong>IMFAsyncCallback::Invoke</strong> method.</p>
        /// </remarks>
        /// <doc-id>ms697199</doc-id>
        /// <unmanaged>HRESULT IMFSourceResolver::EndCreateObjectFromByteStream([In] IMFAsyncResult* pResult,[Out] MF_OBJECT_TYPE* pObjectType,[Out] IUnknown** ppObject)</unmanaged>
        /// <unmanaged-short>IMFSourceResolver::EndCreateObjectFromByteStream</unmanaged-short>
        public unsafe void EndCreateObjectFromByteStream(SharpDX.MediaFoundation.AsyncResult resultRef, out SharpDX.MediaFoundation.ObjectType objectTypeRef, out SharpDX.IUnknown objectOut)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            System.IntPtr objectOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            fixed (void *objectTypeRef_ = &objectTypeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, objectTypeRef_, &objectOut_, (*(void ***)this._nativePointer)[8]);
            if (objectOut_ != System.IntPtr.Zero)
                objectOut = new SharpDX.ComObject(objectOut_);
            else
                objectOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Cancels an asynchronous request to create an object. </p>
        /// </summary>
        /// <param name = "iUnknownCancelCookieRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface that was returned in the <em>ppIUnknownCancelCookie</em> parameter of the <strong>IMFSourceResolver::BeginCreateObjectFromByteStream</strong> or <strong>IMFSourceResolver::BeginCreateObjectFromURL</strong> method. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> You can use this method to cancel a previous call to <strong>BeginCreateObjectFromByteStream</strong> or <strong>BeginCreateObjectFromURL</strong>. Because these methods are asynchronous, however, they might be completed before the operation can be canceled. Therefore, your callback might still be invoked after you call this method. </p><strong>Note</strong>??This method cannot be called remotely.?
        /// </remarks>
        /// <doc-id>ms698845</doc-id>
        /// <unmanaged>HRESULT IMFSourceResolver::CancelObjectCreation([In] IUnknown* pIUnknownCancelCookie)</unmanaged>
        /// <unmanaged-short>IMFSourceResolver::CancelObjectCreation</unmanaged-short>
        public unsafe void CancelObjectCreation(SharpDX.IUnknown iUnknownCancelCookieRef)
        {
            System.IntPtr iUnknownCancelCookieRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            iUnknownCancelCookieRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(iUnknownCancelCookieRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)iUnknownCancelCookieRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("61f7d887-1230-4a8b-aeba-8ad434d1a64d")]
    public partial class SSLCertificateManager : SharpDX.ComObject
    {
        public SSLCertificateManager(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SSLCertificateManager(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SSLCertificateManager(nativePtr);
        /// <summary>
        /// <p>Gets the client SSL certificate synchronously.</p>
        /// </summary>
        /// <param name = "szURLRef"><dd> <p>Pointer to a string that contains the URL for which a client-side SSL certificate is required. Media Foundation can resolve the scheme and send the request to the server.</p> </dd></param>
        /// <param name = "bDataOut"><dd> <p>Pointer to the buffer that stores the certificate.This caller must free the buffer by calling <strong>CoTaskMemFree</strong>.</p> </dd></param>
        /// <param name = "cbDataRef"><dd> <p>Pointer to a <strong><see cref = "System.Int32"/></strong> variable that receives the number of bytes required to hold the certificate data in the buffer pointed by <em>*ppbData</em>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd374674</doc-id>
        /// <unmanaged>HRESULT IMFSSLCertificateManager::GetClientCertificate([In] const wchar_t* pszURL,[Out, Buffer] unsigned char** ppbData,[Out] DWORD* pcbData)</unmanaged>
        /// <unmanaged-short>IMFSSLCertificateManager::GetClientCertificate</unmanaged-short>
        public unsafe void GetClientCertificate(System.String szURLRef, System.Byte[] bDataOut, out System.Int32 cbDataRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbDataRef_ = &cbDataRef)
                fixed (void *bDataOut_ = bDataOut)
                    fixed (char *szURLRef_ = szURLRef)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szURLRef_, bDataOut_, cbDataRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Starts an asynchronous call to get the client SSL certificate.</p>
        /// </summary>
        /// <param name = "szURLRef"><dd> <p>A null-terminated string that contains the URL for which a client-side SSL certificate is required. Media Foundation can  resolve the scheme and send the request to the server.</p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface.</p> </dd></param>
        /// <param name = "stateRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.  </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>When the operation completes, the callback object's <strong>IMFAsyncCallback::Invoke</strong> method is called. At that point, the application should call <strong>IMFSSLCertificateManager::EndGetClientCertificate</strong> to complete the asynchronous request.  </p>
        /// </remarks>
        /// <doc-id>dd374671</doc-id>
        /// <unmanaged>HRESULT IMFSSLCertificateManager::BeginGetClientCertificate([In] const wchar_t* pszURL,[In] IMFAsyncCallback* pCallback,[In] IUnknown* pState)</unmanaged>
        /// <unmanaged-short>IMFSSLCertificateManager::BeginGetClientCertificate</unmanaged-short>
        public unsafe void BeginGetClientCertificate(System.String szURLRef, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown stateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr stateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            stateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(stateRef);
            fixed (char *szURLRef_ = szURLRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szURLRef_, (void *)callbackRef_, (void *)stateRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Completes an asynchronous request to get the client SSL certificate. </p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the <strong>IMFAsyncCallback::Invoke</strong> method.  </p> </dd></param>
        /// <param name = "bDataOut"><dd> <p>Receives a reference to the buffer that stores the certificate.The caller must free the buffer by calling <strong>CoTaskMemFree</strong>.</p> </dd></param>
        /// <param name = "cbDataRef"><dd> <p>Receives the size of the <em>ppbData</em> buffer, in bytes.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Call this method after the <strong>IMFSSLCertificateManager::BeginGetClientCertificate</strong> method completes asynchronously. </p>
        /// </remarks>
        /// <doc-id>dd374672</doc-id>
        /// <unmanaged>HRESULT IMFSSLCertificateManager::EndGetClientCertificate([In] IMFAsyncResult* pResult,[Out, Buffer] unsigned char** ppbData,[Out] DWORD* pcbData)</unmanaged>
        /// <unmanaged-short>IMFSSLCertificateManager::EndGetClientCertificate</unmanaged-short>
        public unsafe void EndGetClientCertificate(SharpDX.MediaFoundation.AsyncResult resultRef, System.Byte[] bDataOut, out System.Int32 cbDataRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            fixed (void *cbDataRef_ = &cbDataRef)
                fixed (void *bDataOut_ = bDataOut)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, bDataOut_, cbDataRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Indicates whether the server SSL certificate must be verified by the caller, Media Foundation,  or the <strong><see cref = "SharpDX.MediaFoundation.SSLCertificateManager"/></strong> implementation class.</p>
        /// </summary>
        /// <param name = "szURLRef"><dd> <p> Pointer to a string that contains the URL that  is sent to the server.</p> </dd></param>
        /// <param name = "fOverrideAutomaticCheckRef"><dd> <p>Pointer to a <strong><see cref = "SharpDX.Mathematics.Interop.RawBool"/></strong> value. Set to <strong>TRUE</strong> if <strong>IMFSSLCertificateManager::OnServerCertificate</strong> is used to verify the server certificate.Set to <strong><see cref = "SharpDX.Result.False"/></strong> if Media Foundation verifies the server certificate  by using the certificates in the Windows certificate store.</p> </dd></param>
        /// <param name = "fClientCertificateAvailableRef"><dd> <p>Pointer to a <strong><see cref = "SharpDX.Mathematics.Interop.RawBool"/></strong> value. Set to <strong>TRUE</strong> if the SSL certificate for the client is available for immediate retrieval. Media Foundation  calls <strong>IMFSSLCertificateManager::GetClientCertificate</strong> to obtain the client certificate synchronously. If the value is set to <strong><see cref = "SharpDX.Result.False"/></strong>, Media Foundation obtains the client SSL certificate with an asynchronous call to <strong>IMFSSLCertificateManager::BeginGetClientCertificate</strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd374673</doc-id>
        /// <unmanaged>HRESULT IMFSSLCertificateManager::GetCertificatePolicy([In] const wchar_t* pszURL,[In] BOOL* pfOverrideAutomaticCheck,[In] BOOL* pfClientCertificateAvailable)</unmanaged>
        /// <unmanaged-short>IMFSSLCertificateManager::GetCertificatePolicy</unmanaged-short>
        public unsafe void GetCertificatePolicy(System.String szURLRef, SharpDX.Mathematics.Interop.RawBool fOverrideAutomaticCheckRef, SharpDX.Mathematics.Interop.RawBool fClientCertificateAvailableRef)
        {
            SharpDX.Result __result__;
            fixed (char *szURLRef_ = szURLRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szURLRef_, &fOverrideAutomaticCheckRef, &fClientCertificateAvailableRef, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Called by Media Foundation when the server SSL certificate has been received; indicates whether the server certificate is accepted.</p>
        /// </summary>
        /// <param name = "szURLRef"><dd> <p>Pointer to a string that contains the URL used to send the request to the server, and for which a server-side SSL certificate has been received.</p> </dd></param>
        /// <param name = "bDataRef"><dd> <p>Pointer to a buffer that contains the server SSL certificate.</p> </dd></param>
        /// <param name = "cbData"><dd> <p>Pointer to a <strong><see cref = "System.Int32"/></strong> variable that indicates the size of <em>pbData</em> in bytes.</p> </dd></param>
        /// <param name = "fIsGoodRef"><dd> <p>Pointer to a <strong><see cref = "SharpDX.Mathematics.Interop.RawBool"/></strong> variable that indicates whether the certificate is accepted.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd374675</doc-id>
        /// <unmanaged>HRESULT IMFSSLCertificateManager::OnServerCertificate([In] const wchar_t* pszURL,[In, Buffer] unsigned char* pbData,[In] DWORD cbData,[In] BOOL* pfIsGood)</unmanaged>
        /// <unmanaged-short>IMFSSLCertificateManager::OnServerCertificate</unmanaged-short>
        public unsafe void OnServerCertificate(System.String szURLRef, System.Byte[] bDataRef, System.Int32 cbData, SharpDX.Mathematics.Interop.RawBool fIsGoodRef)
        {
            SharpDX.Result __result__;
            fixed (void *bDataRef_ = bDataRef)
                fixed (char *szURLRef_ = szURLRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szURLRef_, bDataRef_, cbData, &fIsGoodRef, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("56c03d9c-9dbb-45f5-ab4b-d80f47c05938")]
    public partial class StreamDescriptor : SharpDX.MediaFoundation.MediaAttributes
    {
        public StreamDescriptor(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator StreamDescriptor(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new StreamDescriptor(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves an identifier for the stream.</p>
        /// </summary>
        /// <remarks>
        /// <p>The stream identifier uniquely identifies a stream within a presentation. It does not change throughout the lifetime of the stream. For example, if the presentation changes while the source is running, the index number of the stream may change, but the stream identifier does not.</p><p>In general, stream identifiers do not have a specific meaning, other than to identify the stream. Some media sources may assign stream identifiers based on meaningful values, such as packet identifiers, but this depends on the implementation.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms703852</doc-id>
        /// <unmanaged>GetStreamIdentifier</unmanaged>
        /// <unmanaged-short>GetStreamIdentifier</unmanaged-short>
        public System.Int32 StreamIdentifier
        {
            get
            {
                GetStreamIdentifier(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves a media type handler for the stream. The media type handler can be used to enumerate supported media types for the stream, get the current media type, and set the media type.</p>
        /// </summary>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms700210</doc-id>
        /// <unmanaged>GetMediaTypeHandler</unmanaged>
        /// <unmanaged-short>GetMediaTypeHandler</unmanaged-short>
        public SharpDX.MediaFoundation.MediaTypeHandler MediaTypeHandler
        {
            get
            {
                GetMediaTypeHandler(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves an identifier for the stream.</p>
        /// </summary>
        /// <param name = "dwStreamIdentifierRef"><dd> <p>Receives the stream identifier.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The stream identifier uniquely identifies a stream within a presentation. It does not change throughout the lifetime of the stream. For example, if the presentation changes while the source is running, the index number of the stream may change, but the stream identifier does not.</p><p>In general, stream identifiers do not have a specific meaning, other than to identify the stream. Some media sources may assign stream identifiers based on meaningful values, such as packet identifiers, but this depends on the implementation.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms703852</doc-id>
        /// <unmanaged>HRESULT IMFStreamDescriptor::GetStreamIdentifier([Out] DWORD* pdwStreamIdentifier)</unmanaged>
        /// <unmanaged-short>IMFStreamDescriptor::GetStreamIdentifier</unmanaged-short>
        internal unsafe void GetStreamIdentifier(out System.Int32 dwStreamIdentifierRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwStreamIdentifierRef_ = &dwStreamIdentifierRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamIdentifierRef_, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves a media type handler for the stream. The media type handler can be used to enumerate supported media types for the stream, get the current media type, and set the media type.</p>
        /// </summary>
        /// <param name = "mediaTypeHandlerOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaTypeHandler"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>
        /// </remarks>
        /// <doc-id>ms700210</doc-id>
        /// <unmanaged>HRESULT IMFStreamDescriptor::GetMediaTypeHandler([Out] IMFMediaTypeHandler** ppMediaTypeHandler)</unmanaged>
        /// <unmanaged-short>IMFStreamDescriptor::GetMediaTypeHandler</unmanaged-short>
        internal unsafe void GetMediaTypeHandler(out SharpDX.MediaFoundation.MediaTypeHandler mediaTypeHandlerOut)
        {
            System.IntPtr mediaTypeHandlerOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &mediaTypeHandlerOut_, (*(void ***)this._nativePointer)[34]);
            if (mediaTypeHandlerOut_ != System.IntPtr.Zero)
                mediaTypeHandlerOut = new SharpDX.MediaFoundation.MediaTypeHandler(mediaTypeHandlerOut_);
            else
                mediaTypeHandlerOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("9db7aa41-3cc5-40d4-8509-555804ad34cc")]
    public partial class StreamingSinkConfig : SharpDX.ComObject
    {
        public StreamingSinkConfig(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator StreamingSinkConfig(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new StreamingSinkConfig(nativePtr);
        /// <summary>
        /// <p>Called by the streaming media client before the Media Session starts streaming to specify the byte offset or the time offset.</p>
        /// </summary>
        /// <param name = "fSeekOffsetIsByteOffset"><dd> <p> A Boolean value that specifies whether <em>qwSeekOffset</em> gives a byte offset of a time offset.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>TRUE</strong></dt> </dl> </td><td> <p>The <em>qwSeekOffset</em> parameter specifies a byte offset.</p> </td></tr> <tr><td><dl> <dt><strong><see cref = "SharpDX.Result.False"/></strong></dt> </dl> </td><td> <p>The <em>qwSeekOffset</em> parameter specifies the time position in 100-nanosecond units.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "qwSeekOffset"><dd> <p>A byte offset or a time offset, depending on the value passed in <em>fSeekOffsetIsByteOffset</em>.  Time offsets are specified in 100-nanosecond units.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd374677</doc-id>
        /// <unmanaged>HRESULT IMFStreamingSinkConfig::StartStreaming([In] BOOL fSeekOffsetIsByteOffset,[In] unsigned longlong qwSeekOffset)</unmanaged>
        /// <unmanaged-short>IMFStreamingSinkConfig::StartStreaming</unmanaged-short>
        public unsafe void StartStreaming(SharpDX.Mathematics.Interop.RawBool fSeekOffsetIsByteOffset, System.Int64 qwSeekOffset)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, fSeekOffsetIsByteOffset, qwSeekOffset, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("0A97B3CF-8E7C-4a3d-8F8C-0C843DC247FB")]
    public partial class StreamSink : SharpDX.MediaFoundation.MediaEventGenerator
    {
        public StreamSink(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator StreamSink(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new StreamSink(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the media sink that owns this stream sink.</p>
        /// </summary>
        /// <doc-id>ms699003</doc-id>
        /// <unmanaged>GetMediaSink</unmanaged>
        /// <unmanaged-short>GetMediaSink</unmanaged-short>
        public SharpDX.MediaFoundation.MediaSink MediaSink
        {
            get
            {
                GetMediaSink(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the stream identifier for this stream sink.</p>
        /// </summary>
        /// <doc-id>ms702129</doc-id>
        /// <unmanaged>GetIdentifier</unmanaged>
        /// <unmanaged-short>GetIdentifier</unmanaged-short>
        public System.Int32 Identifier
        {
            get
            {
                GetIdentifier(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMediaTypeHandler</unmanaged>
        /// <unmanaged-short>GetMediaTypeHandler</unmanaged-short>
        public SharpDX.MediaFoundation.MediaTypeHandler MediaTypeHandler
        {
            get
            {
                GetMediaTypeHandler(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the media sink that owns this stream sink.</p>
        /// </summary>
        /// <param name = "mediaSinkOut"><dd> <p>Receives a reference to the media sink's <strong><see cref = "SharpDX.MediaFoundation.MediaSink"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media sink's <strong>Shutdown</strong> method has been called.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "StreamsInkRemoved"/></strong></dt> </dl> </td><td> <p>This stream was removed from the media sink and is no longer valid.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms699003</doc-id>
        /// <unmanaged>HRESULT IMFStreamSink::GetMediaSink([Out] IMFMediaSink** ppMediaSink)</unmanaged>
        /// <unmanaged-short>IMFStreamSink::GetMediaSink</unmanaged-short>
        internal unsafe void GetMediaSink(out SharpDX.MediaFoundation.MediaSink mediaSinkOut)
        {
            System.IntPtr mediaSinkOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &mediaSinkOut_, (*(void ***)this._nativePointer)[7]);
            if (mediaSinkOut_ != System.IntPtr.Zero)
                mediaSinkOut = new SharpDX.MediaFoundation.MediaSink(mediaSinkOut_);
            else
                mediaSinkOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the stream identifier for this stream sink.</p>
        /// </summary>
        /// <param name = "dwIdentifierRef"><dd> <p>Receives the stream identifier. If this stream sink was added by calling <strong>IMFMediaSink::AddStreamSink</strong>, the stream identifier is in the <em>dwStreamSinkIdentifier</em> parameter of that method. Otherwise, the media sink defines the identifier.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media sink's <strong>Shutdown</strong> method has been called.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "StreamsInkRemoved"/></strong></dt> </dl> </td><td> <p>This stream was removed from the media sink and is no longer valid.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms702129</doc-id>
        /// <unmanaged>HRESULT IMFStreamSink::GetIdentifier([Out] DWORD* pdwIdentifier)</unmanaged>
        /// <unmanaged-short>IMFStreamSink::GetIdentifier</unmanaged-short>
        internal unsafe void GetIdentifier(out System.Int32 dwIdentifierRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwIdentifierRef_ = &dwIdentifierRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwIdentifierRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "handlerOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFStreamSink::GetMediaTypeHandler([Out] IMFMediaTypeHandler** ppHandler)</unmanaged>
        /// <unmanaged-short>IMFStreamSink::GetMediaTypeHandler</unmanaged-short>
        internal unsafe void GetMediaTypeHandler(out SharpDX.MediaFoundation.MediaTypeHandler handlerOut)
        {
            System.IntPtr handlerOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &handlerOut_, (*(void ***)this._nativePointer)[9]);
            if (handlerOut_ != System.IntPtr.Zero)
                handlerOut = new SharpDX.MediaFoundation.MediaTypeHandler(handlerOut_);
            else
                handlerOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Delivers a sample to the stream. The media sink processes the sample.</p>
        /// </summary>
        /// <param name = "sampleRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> interface of a sample that contains valid data for the stream.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStateTransition"/></strong></dt> </dl> </td><td> <p>The media sink is in the wrong state to receive a sample. For example, preroll is complete but the presenation clock has not started yet.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidTimestamp"/></strong></dt> </dl> </td><td> <p>The sample has an invalid time stamp. See Remarks.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The media sink is paused or stopped and cannot process the sample.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoClock"/></strong></dt> </dl> </td><td> <p>The presentation clock was not set. Call <strong>IMFMediaSink::SetPresentationClock</strong>.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoSampleTimestamp"/></strong></dt> </dl> </td><td> <p>The sample does not have a time stamp.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotInitializeD"/></strong></dt> </dl> </td><td> <p>The stream sink has not been initialized.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media sink's <strong>Shutdown</strong> method has been called.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "StreamsInkRemoved"/></strong></dt> </dl> </td><td> <p>This stream was removed from the media sink and is no longer valid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method when the stream sink sends an MEStreamSinkRequestSample event.</p><p>This method can return <see cref = "InvalidTimestamp"/> for various reasons, depending on the implementation of the media sink:</p><ul> <li> <p>Negative time stamps.</p> </li> <li> <p>Time stamps that jump backward (within the same stream).</p> </li> <li> <p>The time stamps for one stream have drifted too far from the time stamps on another stream within the same media sink (for example, an archive sink that multiplexes the streams).</p> </li> </ul><p>Not every media sink returns an error code in these situations.</p>
        /// </remarks>
        /// <doc-id>ms696208</doc-id>
        /// <unmanaged>HRESULT IMFStreamSink::ProcessSample([In, Optional] IMFSample* pSample)</unmanaged>
        /// <unmanaged-short>IMFStreamSink::ProcessSample</unmanaged-short>
        public unsafe void ProcessSample(SharpDX.MediaFoundation.Sample sampleRef)
        {
            System.IntPtr sampleRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            sampleRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Sample>(sampleRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)sampleRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Places a marker in the stream. </p>
        /// </summary>
        /// <param name = "eMarkerType"><dd> <p> Specifies the marker type, as a member of the <strong><see cref = "SharpDX.MediaFoundation.StreamsInkMarkerType"/></strong> enumeration. </p> </dd></param>
        /// <param name = "varMarkerValueRef"><dd> <p> Optional reference to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that contains additional information related to the marker. The meaning of this value depends on the marker type. This parameter can be <strong><c>null</c></strong>. </p> </dd></param>
        /// <param name = "varContextValueRef"><dd> <p> Optional reference to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that is attached to the MEStreamSinkMarker event. Call <strong>IMFMediaEvent::GetValue</strong> to get this value from the event. The caller can use this information for any purpose. This parameter can be <strong><c>null</c></strong>. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><strong><see cref = "SharpDX.Result.Ok"/></strong></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "Shutdown"/></strong></strong></dt> </dl> </td><td> <p> The media sink's <strong>Shutdown</strong> method has been called. </p> </td></tr> <tr><td> <dl> <dt><strong><strong><see cref = "StreamsInkRemoved"/></strong></strong></dt> </dl> </td><td> <p> This stream was removed from the media sink and is no longer valid. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method causes the stream sink to send an MEStreamSinkMarker event after the stream sink consumes all of the samples that were delivered up to this point (before the call to <strong>PlaceMarker</strong>).</p>
        /// </remarks>
        /// <doc-id>ms703026</doc-id>
        /// <unmanaged>HRESULT IMFStreamSink::PlaceMarker([In] MFSTREAMSINK_MARKER_TYPE eMarkerType,[In] const PROPVARIANT* pvarMarkerValue,[In] const PROPVARIANT* pvarContextValue)</unmanaged>
        /// <unmanaged-short>IMFStreamSink::PlaceMarker</unmanaged-short>
        public unsafe void PlaceMarker(SharpDX.MediaFoundation.StreamsInkMarkerType eMarkerType, SharpDX.Win32.Variant varMarkerValueRef, SharpDX.Win32.Variant varContextValueRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)eMarkerType), &varMarkerValueRef, &varContextValueRef, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Causes the stream sink to drop any samples that it has received and has not rendered yet.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotInitializeD"/></strong></dt> </dl> </td><td> <p>The stream sink has not been initialized yet. You might need to set a media type.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The media sink's <strong>Shutdown</strong> method has been called.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "StreamsInkRemoved"/></strong></dt> </dl> </td><td> <p>This stream was removed from the media sink and is no longer valid.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If any samples are still queued from previous calls to the <strong>IMFStreamSink::ProcessSample</strong> method, the media sink immediately discards them, without processing them. This can cause a glitch in the rendered output. The running state of the sink (running, paused, or stopped) does not change.</p><p>Any pending marker events from the <strong>IMFStreamSink::PlaceMarker</strong> method are dispatched immediately, with the status code E_ABORT.</p><p>This method is synchronous. It does not return until the sink has discarded all pending samples.</p>
        /// </remarks>
        /// <doc-id>ms697054</doc-id>
        /// <unmanaged>HRESULT IMFStreamSink::Flush()</unmanaged>
        /// <unmanaged-short>IMFStreamSink::Flush</unmanaged-short>
        public unsafe void Flush()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("fff4af3a-1fc1-4ef9-a29b-d26c49e2f31a")]
    public partial class SystemId : SharpDX.ComObject
    {
        public SystemId(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SystemId(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SystemId(nativePtr);
        /// <summary>
        /// <p>Retrieves system id data.</p>
        /// </summary>
        /// <param name = "size"><dd> <p>The size in bytes of the returned data.</p> </dd></param>
        /// <param name = "data"><dd> <p>Receives the returned data.  The caller must free this buffer by calling <strong>CoTaskMemFree</strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>hh448068</doc-id>
        /// <unmanaged>HRESULT IMFSystemId::GetData([Out] unsigned int* size,[Out, Buffer] unsigned char** data)</unmanaged>
        /// <unmanaged-short>IMFSystemId::GetData</unmanaged-short>
        public unsafe void GetData(out System.Int32 size, System.Byte[] data)
        {
            SharpDX.Result __result__;
            fixed (void *data_ = data)
                fixed (void *size_ = &size)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, size_, data_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets up the <strong><see cref = "SharpDX.MediaFoundation.SystemId"/></strong>.</p>
        /// </summary>
        /// <param name = "stage">No documentation.</param>
        /// <param name = "cbIn">No documentation.</param>
        /// <param name = "bInRef">No documentation.</param>
        /// <param name = "cbOutRef">No documentation.</param>
        /// <param name = "bOutOut">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>jj128323</doc-id>
        /// <unmanaged>HRESULT IMFSystemId::Setup([In] unsigned int stage,[In] unsigned int cbIn,[In, Buffer] const unsigned char* pbIn,[Out] unsigned int* pcbOut,[Out, Buffer] unsigned char** ppbOut)</unmanaged>
        /// <unmanaged-short>IMFSystemId::Setup</unmanaged-short>
        public unsafe void Setup(System.Int32 stage, System.Int32 cbIn, System.Byte[] bInRef, out System.Int32 cbOutRef, System.Byte[] bOutOut)
        {
            SharpDX.Result __result__;
            fixed (void *bOutOut_ = bOutOut)
                fixed (void *cbOutRef_ = &cbOutRef)
                    fixed (void *bInRef_ = bInRef)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, stage, cbIn, bInRef_, cbOutRef_, bOutOut_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ab9d8661-f7e8-4ef4-9861-89f334f94e74")]
    public partial class TimecodeTranslate : SharpDX.ComObject
    {
        public TimecodeTranslate(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TimecodeTranslate(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TimecodeTranslate(nativePtr);
        /// <summary>
        /// <p>Starts an asynchronous call to convert Society of Motion Picture and Television Engineers (SMPTE) time code to 100-nanosecond units.</p>
        /// </summary>
        /// <param name = "propVarTimecodeRef"><dd> <p>Time in SMPTE time code to convert. The <strong>vt</strong> member of the <strong><see cref = "SharpDX.Win32.Variant"/></strong> structure is set to <strong>VT_I8</strong>. The <strong>hVal.QuadPart</strong> member contains the time in binary coded decimal (BCD) form. See Remarks.</p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface.</p> </dd></param>
        /// <param name = "unkStateRef"><dd> <p>PPointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><em>pPropVarTimecode</em> is not <strong>VT_I8</strong>.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ByteStreamNotSeekable"/></strong></dt> </dl> </td><td> <p>The byte stream is not seekable. The time code cannot be read from the end of the byte stream.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>When the asynchronous method completes, the callback object's <strong>IMFAsyncCallback::Invoke</strong> method is called. At that point, the application must call <strong>IMFTimecodeTranslate::EndConvertTimecodeToHNS</strong> to complete the asynchronous request.</p><p>The value of <em>pPropVarTimecode</em> is a 64-bit unsigned value typed as a <strong>LONGLONG</strong>. The upper <strong><see cref = "System.Int32"/></strong> contains the range. (A <em>range</em> is a continuous series of time codes.) The lower <strong><see cref = "System.Int32"/></strong> contains the time code in the form of a hexadecimal number <em>0xhhmmssff</em>,  where each 2-byte sequence is read as a decimal value.</p><pre>void CreateTimeCode( <see cref = "System.Int32"/> dwFrames, <see cref = "System.Int32"/> dwSeconds, <see cref = "System.Int32"/> dwMinutes, <see cref = "System.Int32"/> dwHours, <see cref = "System.Int32"/> dwRange, <see cref = "SharpDX.Win32.Variant"/> *pvar )
        /// { ULONGLONG ullTimecode = ((ULONGLONG)dwRange) &lt; &lt; 32; ullTimecode +=   dwFrames  % 10; ullTimecode += (( (ULONGLONG)dwFrames )  / 10) &lt; &lt; 4; ullTimecode += (( (ULONGLONG)dwSeconds ) % 10) &lt; &lt; 8; ullTimecode += (( (ULONGLONG)dwSeconds ) / 10) &lt; &lt; 12; ullTimecode += (( (ULONGLONG)dwMinutes ) % 10) &lt; &lt; 16; ullTimecode += (( (ULONGLONG)dwMinutes ) / 10) &lt; &lt; 20; ullTimecode += (( (ULONGLONG)dwHours )   % 10) &lt; &lt; 24; ullTimecode += (( (ULONGLONG)dwHours )   / 10) &lt; &lt; 28; pvar-&gt;vt = VT_I8; pvar-&gt;hVal.QuadPart = (LONGLONG)ullTimecode;
        /// }
        /// </pre>
        /// </remarks>
        /// <doc-id>dd374680</doc-id>
        /// <unmanaged>HRESULT IMFTimecodeTranslate::BeginConvertTimecodeToHNS([In] const PROPVARIANT* pPropVarTimecode,[In] IMFAsyncCallback* pCallback,[In] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFTimecodeTranslate::BeginConvertTimecodeToHNS</unmanaged-short>
        public unsafe void BeginConvertTimecodeToHNS(SharpDX.Win32.Variant propVarTimecodeRef, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown unkStateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &propVarTimecodeRef, (void *)callbackRef_, (void *)unkStateRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Completes an asynchronous request to convert time in Society of Motion Picture and Television Engineers (SMPTE) time code to 100-nanosecond units.</p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the <strong>IMFAsyncCallback::Invoke</strong> method. </p> </dd></param>
        /// <param name = "hnsTimeRef"><dd> <p>Receives the converted time.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Call this method after the <strong>IMFTimecodeTranslate::BeginConvertTimecodeToHNS</strong> method completes asynchronously.</p>
        /// </remarks>
        /// <doc-id>dd374682</doc-id>
        /// <unmanaged>HRESULT IMFTimecodeTranslate::EndConvertTimecodeToHNS([In] IMFAsyncResult* pResult,[In] longlong* phnsTime)</unmanaged>
        /// <unmanaged-short>IMFTimecodeTranslate::EndConvertTimecodeToHNS</unmanaged-short>
        public unsafe void EndConvertTimecodeToHNS(SharpDX.MediaFoundation.AsyncResult resultRef, System.Int64 hnsTimeRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, &hnsTimeRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Starts an asynchronous call to convert time in 100-nanosecond units to Society of Motion Picture and Television Engineers (SMPTE) time code.</p>
        /// </summary>
        /// <param name = "hnsTime"><dd> <p>The time to convert, in 100-nanosecond units.</p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface. </p> </dd></param>
        /// <param name = "unkStateRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The object's <strong>Shutdown</strong> method was called.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "ByteStreamNotSeekable"/></strong></dt> </dl> </td><td> <p>The byte stream is not seekable. The time code cannot be read from the end of the byte stream.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>When the asynchronous method completes, the callback object's <strong>IMFAsyncCallback::Invoke</strong> method is called. At that point, the application must call <strong>IMFTimecodeTranslate::EndConvertHNSToTimecode</strong> to complete the asynchronous request.</p>
        /// </remarks>
        /// <doc-id>dd374679</doc-id>
        /// <unmanaged>HRESULT IMFTimecodeTranslate::BeginConvertHNSToTimecode([In] longlong hnsTime,[In] IMFAsyncCallback* pCallback,[In] IUnknown* punkState)</unmanaged>
        /// <unmanaged-short>IMFTimecodeTranslate::BeginConvertHNSToTimecode</unmanaged-short>
        public unsafe void BeginConvertHNSToTimecode(System.Int64 hnsTime, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown unkStateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, hnsTime, (void *)callbackRef_, (void *)unkStateRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Completes an asynchronous request to convert time in 100-nanosecond units to Society of Motion Picture and Television Engineers (SMPTE) time code.</p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the <strong>IMFAsyncCallback::Invoke</strong> method.</p> </dd></param>
        /// <param name = "propVarTimecodeRef"><dd> <p>A reference to a <strong><see cref = "SharpDX.Win32.Variant"/></strong> that receives the converted time. The <strong>vt</strong> member of the <strong><see cref = "SharpDX.Win32.Variant"/></strong> structure is set to VT_I8. The <strong>hVal.QuadPart</strong> member contains the converted time in binary coded decimal (BCD) form. See Remarks.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Call this method after the <strong>IMFTimecodeTranslate::BeginConvertHNSToTimecode</strong> method completes asynchronously.</p><p>The value of <em>pPropVarTimecode</em> is a 64-bit unsigned value typed as a <strong>LONGLONG</strong>. The upper <strong><see cref = "System.Int32"/></strong> contains the range. (A <em>range</em> is a continuous series of time codes.) The lower <strong><see cref = "System.Int32"/></strong> contains the time code in the form of a hexadecimal number <em>0xhhmmssff</em>,  where each 2-byte sequence is read as a decimal value.</p><pre><see cref = "SharpDX.Result"/> ParseTimeCode( const <see cref = "SharpDX.Win32.Variant"/>&amp; var, <see cref = "System.Int32"/> *pdwRange, <see cref = "System.Int32"/> *pdwFrames, <see cref = "System.Int32"/> *pdwSeconds, <see cref = "System.Int32"/> *pdwMinutes, <see cref = "System.Int32"/> *pdwHours )
        /// { if (var.vt != VT_I8) { return E_INVALIDARG; } ULONGLONG ullTimeCode = (ULONGLONG)var.hVal.QuadPart; <see cref = "System.Int32"/> dwTimecode = (<see cref = "System.Int32"/>)(ullTimeCode &amp; 0xFFFFFFFF); *pdwRange   = (<see cref = "System.Int32"/>)(ullTimeCode &gt; &gt; 32); *pdwFrames  =     dwTimecode &amp; 0x0000000F; *pdwFrames  += (( dwTimecode &amp; 0x000000F0) &gt; &gt; 4 )  * 10; *pdwSeconds =   ( dwTimecode &amp; 0x00000F00) &gt; &gt; 8; *pdwSeconds += (( dwTimecode &amp; 0x0000F000) &gt; &gt; 12 ) * 10; *pdwMinutes =   ( dwTimecode &amp; 0x000F0000) &gt; &gt; 16; *pdwMinutes += (( dwTimecode &amp; 0x00F00000) &gt; &gt; 20 ) * 10; *pdwHours   =   ( dwTimecode &amp; 0x0F000000) &gt; &gt; 24; *pdwHours   += (( dwTimecode &amp; 0xF0000000) &gt; &gt; 28 ) * 10; return <see cref = "SharpDX.Result.Ok"/>;
        /// }
        /// </pre>
        /// </remarks>
        /// <doc-id>dd374681</doc-id>
        /// <unmanaged>HRESULT IMFTimecodeTranslate::EndConvertHNSToTimecode([In] IMFAsyncResult* pResult,[In] PROPVARIANT* pPropVarTimecode)</unmanaged>
        /// <unmanaged-short>IMFTimecodeTranslate::EndConvertHNSToTimecode</unmanaged-short>
        public unsafe void EndConvertHNSToTimecode(SharpDX.MediaFoundation.AsyncResult resultRef, SharpDX.Win32.Variant propVarTimecodeRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, &propVarTimecodeRef, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("1f2a94c9-a3df-430d-9d0f-acd85ddc29af")]
    public partial class TimedText : SharpDX.ComObject
    {
        public TimedText(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TimedText(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TimedText(nativePtr);
        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the offset to the cue time.</p>
        /// </summary>
        /// <doc-id>dn800353</doc-id>
        /// <unmanaged>GetCueTimeOffset / SetCueTimeOffset</unmanaged>
        /// <unmanaged-short>GetCueTimeOffset</unmanaged-short>
        public System.Double CueTimeOffset
        {
            get
            {
                GetCueTimeOffset(out var __output__);
                return __output__;
            }

            set => SetCueTimeOffset(value);
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Retrieves a list of all timed-text tracks registered with the <strong><see cref = "SharpDX.MediaFoundation.TimedText"/></strong>.</p>
        /// </summary>
        /// <doc-id>dn859184</doc-id>
        /// <unmanaged>GetTracks</unmanaged>
        /// <unmanaged-short>GetTracks</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextTrackList Tracks
        {
            get
            {
                GetTracks(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the list of active timed-text tracks in the timed-text component.</p>
        /// </summary>
        /// <doc-id>dn800352</doc-id>
        /// <unmanaged>GetActiveTracks</unmanaged>
        /// <unmanaged-short>GetActiveTracks</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextTrackList ActiveTracks
        {
            get
            {
                GetActiveTracks(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the list of all the timed-text tracks in the timed-text component.</p>
        /// </summary>
        /// <doc-id>dn800355</doc-id>
        /// <unmanaged>GetTextTracks</unmanaged>
        /// <unmanaged-short>GetTextTracks</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextTrackList TextTracks
        {
            get
            {
                GetTextTracks(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the list of the timed-metadata tracks in the timed-text component.</p>
        /// </summary>
        /// <doc-id>dn800354</doc-id>
        /// <unmanaged>GetMetadataTracks</unmanaged>
        /// <unmanaged-short>GetMetadataTracks</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextTrackList MetadataTracks
        {
            get
            {
                GetMetadataTracks(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Enables or disables inband mode.</p>
        /// </summary>
        /// <doc-id>dn800360</doc-id>
        /// <unmanaged>SetInBandEnabled</unmanaged>
        /// <unmanaged-short>SetInBandEnabled</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool InBandEnabled
        {
            set => SetInBandEnabled(value);
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether inband mode is enabled.</p>
        /// </summary>
        /// <doc-id>dn800356</doc-id>
        /// <unmanaged>IsInBandEnabled</unmanaged>
        /// <unmanaged-short>IsInBandEnabled</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsInBandEnabled
        {
            get => IsInBandEnabled_();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Registers a timed-text notify object.</p>
        /// </summary>
        /// <param name = "notify"><dd>  <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.TimedTextNotify"/></strong> interface for the timed-text notify object to register.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800357</doc-id>
        /// <unmanaged>HRESULT IMFTimedText::RegisterNotifications([In, Optional] IMFTimedTextNotify* notify)</unmanaged>
        /// <unmanaged-short>IMFTimedText::RegisterNotifications</unmanaged-short>
        public unsafe void RegisterNotifications(SharpDX.MediaFoundation.TimedTextNotify notify)
        {
            System.IntPtr notify_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            notify_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.TimedTextNotify>(notify);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)notify_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Selects or deselects a track of text in the timed-text component.</p>
        /// </summary>
        /// <param name = "trackId"><dd>  <p>The identifier of the track to select. </p> </dd></param>
        /// <param name = "selected"><dd>  <p>Specifies whether to select or deselect a track of text. Specify <strong>TRUE</strong> to select the track or <strong><see cref = "SharpDX.Result.False"/></strong> to deselect the track. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800358</doc-id>
        /// <unmanaged>HRESULT IMFTimedText::SelectTrack([In] DWORD trackId,[In] BOOL selected)</unmanaged>
        /// <unmanaged-short>IMFTimedText::SelectTrack</unmanaged-short>
        public unsafe void SelectTrack(System.Int32 trackId, SharpDX.Mathematics.Interop.RawBool selected)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, trackId, selected, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Adds a timed-text data source.</p>
        /// </summary>
        /// <param name = "byteStream"><dd>  <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.IByteStream"/></strong> interface for the data source to add.</p> </dd></param>
        /// <param name = "label"><dd>  <p>Null-terminated wide-character string that contains the label of the data source.</p> </dd></param>
        /// <param name = "language"><dd>  <p>Null-terminated wide-character string that contains the language of the data source.</p> </dd></param>
        /// <param name = "kind"><dd>  <p>A <strong><see cref = "SharpDX.MediaFoundation.TimedTextTrackKind"/></strong>-typed value that specifies the kind of timed-text track.</p> </dd></param>
        /// <param name = "isDefault"><dd>  <p>Specifies whether to add the default data source. Specify <strong>TRUE</strong> to add the default data source or <strong><see cref = "SharpDX.Result.False"/></strong> otherwise.</p> </dd></param>
        /// <param name = "trackId"><dd>  <p>Receives a reference to the unique identifier for the added track.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800351</doc-id>
        /// <unmanaged>HRESULT IMFTimedText::AddDataSource([In] IMFByteStream* byteStream,[In, Optional] const wchar_t* label,[In, Optional] const wchar_t* language,[In] MF_TIMED_TEXT_TRACK_KIND kind,[In] BOOL isDefault,[Out] DWORD* trackId)</unmanaged>
        /// <unmanaged-short>IMFTimedText::AddDataSource</unmanaged-short>
        public unsafe void AddDataSource(SharpDX.MediaFoundation.IByteStream byteStream, System.String label, System.String language, SharpDX.MediaFoundation.TimedTextTrackKind kind, SharpDX.Mathematics.Interop.RawBool isDefault, out System.Int32 trackId)
        {
            System.IntPtr byteStream_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            byteStream_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IByteStream>(byteStream);
            fixed (void *trackId_ = &trackId)
                fixed (char *language_ = language)
                    fixed (char *label_ = label)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)byteStream_, (void *)label_, (void *)language_, unchecked ((System.Int32)kind), isDefault, trackId_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Adds a timed-text data source from the specified URL.</p>
        /// </summary>
        /// <param name = "url"><dd>  <p>The URL of the timed-text data source.</p> </dd></param>
        /// <param name = "label"><dd>  <p>Null-terminated wide-character string that contains the label of the data source.</p> </dd></param>
        /// <param name = "language"><dd>  <p>Null-terminated wide-character string that contains the language of the data source.</p> </dd></param>
        /// <param name = "kind"><dd>  <p>A <strong><see cref = "SharpDX.MediaFoundation.TimedTextTrackKind"/></strong>-typed value that specifies the kind of timed-text track.</p> </dd></param>
        /// <param name = "isDefault"><dd>  <p>Specifies whether to add the default data source. Specify <strong>TRUE</strong> to add the default data source or <strong><see cref = "SharpDX.Result.False"/></strong> otherwise.</p> </dd></param>
        /// <param name = "trackId"><dd>  <p>Receives a reference to the unique identifier for the added track.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn859183</doc-id>
        /// <unmanaged>HRESULT IMFTimedText::AddDataSourceFromUrl([In] const wchar_t* url,[In, Optional] const wchar_t* label,[In, Optional] const wchar_t* language,[In] MF_TIMED_TEXT_TRACK_KIND kind,[In] BOOL isDefault,[Out] DWORD* trackId)</unmanaged>
        /// <unmanaged-short>IMFTimedText::AddDataSourceFromUrl</unmanaged-short>
        public unsafe void AddDataSourceFromUrl(System.String url, System.String label, System.String language, SharpDX.MediaFoundation.TimedTextTrackKind kind, SharpDX.Mathematics.Interop.RawBool isDefault, out System.Int32 trackId)
        {
            SharpDX.Result __result__;
            fixed (void *trackId_ = &trackId)
                fixed (char *language_ = language)
                    fixed (char *label_ = label)
                        fixed (char *url_ = url)
                            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)url_, (void *)label_, (void *)language_, unchecked ((System.Int32)kind), isDefault, trackId_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "label">No documentation.</param>
        /// <param name = "language">No documentation.</param>
        /// <param name = "kind">No documentation.</param>
        /// <param name = "track">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFTimedText::AddTrack([In, Optional] const wchar_t* label,[In, Optional] const wchar_t* language,[In] MF_TIMED_TEXT_TRACK_KIND kind,[Out] IMFTimedTextTrack** track)</unmanaged>
        /// <unmanaged-short>IMFTimedText::AddTrack</unmanaged-short>
        public unsafe void AddTrack(System.String label, System.String language, SharpDX.MediaFoundation.TimedTextTrackKind kind, out SharpDX.MediaFoundation.TimedTextTrack track)
        {
            System.IntPtr track_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (char *language_ = language)
                fixed (char *label_ = label)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)label_, (void *)language_, unchecked ((System.Int32)kind), &track_, (*(void ***)this._nativePointer)[7]);
            if (track_ != System.IntPtr.Zero)
                track = new SharpDX.MediaFoundation.TimedTextTrack(track_);
            else
                track = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Removes the timed-text track with the specified identifier.</p>
        /// </summary>
        /// <param name = "track"><dd>  <p>The identifier of the track to remove.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Get the identifier for a track by calling <strong>GetId</strong>. </p><p>When a track is removed, all buffered data from the track is also removed.</p>
        /// </remarks>
        /// <doc-id>dn859185</doc-id>
        /// <unmanaged>HRESULT IMFTimedText::RemoveTrack([In] IMFTimedTextTrack* track)</unmanaged>
        /// <unmanaged-short>IMFTimedText::RemoveTrack</unmanaged-short>
        public unsafe void RemoveTrack(SharpDX.MediaFoundation.TimedTextTrack track)
        {
            System.IntPtr track_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            track_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.TimedTextTrack>(track);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)track_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the offset to the cue time.</p>
        /// </summary>
        /// <param name = "offset"><dd>  <p>A reference to a variable that receives the offset to the cue time.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800353</doc-id>
        /// <unmanaged>HRESULT IMFTimedText::GetCueTimeOffset([Out] double* offset)</unmanaged>
        /// <unmanaged-short>IMFTimedText::GetCueTimeOffset</unmanaged-short>
        internal unsafe void GetCueTimeOffset(out System.Double offset)
        {
            SharpDX.Result __result__;
            fixed (void *offset_ = &offset)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, offset_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Sets the offset to the cue time.</p>
        /// </summary>
        /// <param name = "offset"><dd>  <p>The offset to the cue time.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800359</doc-id>
        /// <unmanaged>HRESULT IMFTimedText::SetCueTimeOffset([In] double offset)</unmanaged>
        /// <unmanaged-short>IMFTimedText::SetCueTimeOffset</unmanaged-short>
        internal unsafe void SetCueTimeOffset(System.Double offset)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, offset, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Retrieves a list of all timed-text tracks registered with the <strong><see cref = "SharpDX.MediaFoundation.TimedText"/></strong>.</p>
        /// </summary>
        /// <param name = "tracks">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn859184</doc-id>
        /// <unmanaged>HRESULT IMFTimedText::GetTracks([Out] IMFTimedTextTrackList** tracks)</unmanaged>
        /// <unmanaged-short>IMFTimedText::GetTracks</unmanaged-short>
        internal unsafe void GetTracks(out SharpDX.MediaFoundation.TimedTextTrackList tracks)
        {
            System.IntPtr tracks_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &tracks_, (*(void ***)this._nativePointer)[11]);
            if (tracks_ != System.IntPtr.Zero)
                tracks = new SharpDX.MediaFoundation.TimedTextTrackList(tracks_);
            else
                tracks = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the list of active timed-text tracks in the timed-text component.</p>
        /// </summary>
        /// <param name = "activeTracks"><dd>  <p>A reference to a memory block that receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.TimedTextTrackList"/></strong> interface that can enumerate the list of active timed-text tracks.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800352</doc-id>
        /// <unmanaged>HRESULT IMFTimedText::GetActiveTracks([Out] IMFTimedTextTrackList** activeTracks)</unmanaged>
        /// <unmanaged-short>IMFTimedText::GetActiveTracks</unmanaged-short>
        internal unsafe void GetActiveTracks(out SharpDX.MediaFoundation.TimedTextTrackList activeTracks)
        {
            System.IntPtr activeTracks_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &activeTracks_, (*(void ***)this._nativePointer)[12]);
            if (activeTracks_ != System.IntPtr.Zero)
                activeTracks = new SharpDX.MediaFoundation.TimedTextTrackList(activeTracks_);
            else
                activeTracks = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the list of all the timed-text tracks in the timed-text component.</p>
        /// </summary>
        /// <param name = "textTracks"><dd>  <p>A reference to a memory block that receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.TimedTextTrackList"/></strong> interface that can enumerate the list of all of the timed-text tracks.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800355</doc-id>
        /// <unmanaged>HRESULT IMFTimedText::GetTextTracks([Out] IMFTimedTextTrackList** textTracks)</unmanaged>
        /// <unmanaged-short>IMFTimedText::GetTextTracks</unmanaged-short>
        internal unsafe void GetTextTracks(out SharpDX.MediaFoundation.TimedTextTrackList textTracks)
        {
            System.IntPtr textTracks_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &textTracks_, (*(void ***)this._nativePointer)[13]);
            if (textTracks_ != System.IntPtr.Zero)
                textTracks = new SharpDX.MediaFoundation.TimedTextTrackList(textTracks_);
            else
                textTracks = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the list of the timed-metadata tracks in the timed-text component.</p>
        /// </summary>
        /// <param name = "metadataTracks"><dd>  <p>A reference to a memory block that receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.TimedTextTrackList"/></strong> interface that can enumerate the list of the timed-metadata tracks.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800354</doc-id>
        /// <unmanaged>HRESULT IMFTimedText::GetMetadataTracks([Out] IMFTimedTextTrackList** metadataTracks)</unmanaged>
        /// <unmanaged-short>IMFTimedText::GetMetadataTracks</unmanaged-short>
        internal unsafe void GetMetadataTracks(out SharpDX.MediaFoundation.TimedTextTrackList metadataTracks)
        {
            System.IntPtr metadataTracks_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &metadataTracks_, (*(void ***)this._nativePointer)[14]);
            if (metadataTracks_ != System.IntPtr.Zero)
                metadataTracks = new SharpDX.MediaFoundation.TimedTextTrackList(metadataTracks_);
            else
                metadataTracks = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Enables or disables inband mode.</p>
        /// </summary>
        /// <param name = "enabled"><dd>  <p> Specifies whether inband mode is enabled. If <strong>TRUE</strong>, inband mode is enabled. If <strong><see cref = "SharpDX.Result.False"/></strong>, inband mode is disabled. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800360</doc-id>
        /// <unmanaged>HRESULT IMFTimedText::SetInBandEnabled([In] BOOL enabled)</unmanaged>
        /// <unmanaged-short>IMFTimedText::SetInBandEnabled</unmanaged-short>
        internal unsafe void SetInBandEnabled(SharpDX.Mathematics.Interop.RawBool enabled)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, enabled, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether inband mode is enabled.</p>
        /// </summary>
        /// <returns><p>Returns whether inband mode is enabled. If <strong>TRUE</strong>, inband mode is enabled. If <strong><see cref = "SharpDX.Result.False"/></strong>, inband mode is disabled. </p></returns>
        /// <doc-id>dn800356</doc-id>
        /// <unmanaged>BOOL IMFTimedText::IsInBandEnabled()</unmanaged>
        /// <unmanaged-short>IMFTimedText::IsInBandEnabled</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsInBandEnabled_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[16]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("4ae3a412-0545-43c4-bf6f-6b97a5c6c432")]
    public partial class TimedTextBinary : SharpDX.ComObject
    {
        public TimedTextBinary(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TimedTextBinary(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TimedTextBinary(nativePtr);
        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the data content of the timed-text object.</p>
        /// </summary>
        /// <param name = "data"><dd>  <p>A reference to a memory block that receives a reference to the data content of the timed-text object.</p> </dd></param>
        /// <param name = "length"><dd>  <p>A reference to a variable that receives the length in bytes of the data content.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800289</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextBinary::GetData([Out, Buffer] const unsigned char** data,[Out] DWORD* length)</unmanaged>
        /// <unmanaged-short>IMFTimedTextBinary::GetData</unmanaged-short>
        public unsafe void GetData(System.Byte[] data, out System.Int32 length)
        {
            SharpDX.Result __result__;
            fixed (void *length_ = &length)
                fixed (void *data_ = data)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, data_, length_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("1e560447-9a2b-43e1-a94c-b0aaabfbfbc9")]
    public partial class TimedTextCue : SharpDX.ComObject
    {
        public TimedTextCue(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TimedTextCue(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TimedTextCue(nativePtr);
        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the identifier of a timed-text cue.</p>
        /// </summary>
        /// <remarks>
        /// <p>The identifier is retrieved by this method is dynamically generated by the system and is guaranteed to uniquely identify a cue within a single timed-text track. It is not guaranteed to be unique across tracks. If a cue already has an identifier that is provided in the text-track data format, this ID can be retrieved by calling <strong>GetOriginalId</strong>.</p>
        /// </remarks>
        /// <doc-id>dn859177</doc-id>
        /// <unmanaged>GetId</unmanaged>
        /// <unmanaged-short>GetId</unmanaged-short>
        public System.Int32 Id
        {
            get => GetId();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the kind of timed-text cue.</p>
        /// </summary>
        /// <doc-id>dn800291</doc-id>
        /// <unmanaged>GetCueKind</unmanaged>
        /// <unmanaged-short>GetCueKind</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextTrackKind CueKind
        {
            get => GetCueKind();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the start time of the cue in the track.</p>
        /// </summary>
        /// <doc-id>dn800297</doc-id>
        /// <unmanaged>GetStartTime</unmanaged>
        /// <unmanaged-short>GetStartTime</unmanaged-short>
        public System.Double StartTime
        {
            get => GetStartTime();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the duration time of the cue in the track.</p>
        /// </summary>
        /// <doc-id>dn800293</doc-id>
        /// <unmanaged>GetDuration</unmanaged>
        /// <unmanaged-short>GetDuration</unmanaged-short>
        public System.Double Duration
        {
            get => GetDuration();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the identifier of the timed-text cue.</p>
        /// </summary>
        /// <doc-id>dn800299</doc-id>
        /// <unmanaged>GetTrackId</unmanaged>
        /// <unmanaged-short>GetTrackId</unmanaged-short>
        public System.Int32 TrackId
        {
            get => GetTrackId();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the data content of the timed-text cue.</p>
        /// </summary>
        /// <doc-id>dn800292</doc-id>
        /// <unmanaged>GetData</unmanaged>
        /// <unmanaged-short>GetData</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextBinary Data
        {
            get
            {
                GetData(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets info about the display region  of the timed-text cue.</p>
        /// </summary>
        /// <doc-id>dn800296</doc-id>
        /// <unmanaged>GetRegion</unmanaged>
        /// <unmanaged-short>GetRegion</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextRegion Region
        {
            get
            {
                GetRegion(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets info about the style  of the timed-text cue.</p>
        /// </summary>
        /// <doc-id>dn800298</doc-id>
        /// <unmanaged>GetStyle</unmanaged>
        /// <unmanaged-short>GetStyle</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextStyle Style
        {
            get
            {
                GetStyle(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the number of lines of text in the timed-text cue.</p>
        /// </summary>
        /// <doc-id>dn800295</doc-id>
        /// <unmanaged>GetLineCount</unmanaged>
        /// <unmanaged-short>GetLineCount</unmanaged-short>
        public System.Int32 LineCount
        {
            get => GetLineCount();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the identifier of a timed-text cue.</p>
        /// </summary>
        /// <returns><p>The identifier of a timed-text cue.</p></returns>
        /// <remarks>
        /// <p>The identifier is retrieved by this method is dynamically generated by the system and is guaranteed to uniquely identify a cue within a single timed-text track. It is not guaranteed to be unique across tracks. If a cue already has an identifier that is provided in the text-track data format, this ID can be retrieved by calling <strong>GetOriginalId</strong>.</p>
        /// </remarks>
        /// <doc-id>dn859177</doc-id>
        /// <unmanaged>DWORD IMFTimedTextCue::GetId()</unmanaged>
        /// <unmanaged-short>IMFTimedTextCue::GetId</unmanaged-short>
        internal unsafe System.Int32 GetId()
        {
            System.Int32 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the cue identifier that is provided in the text-track data format, if available.</p>
        /// </summary>
        /// <param name = "originalId"><dd>  <p>The cue identifier that is provided in the text-track data format.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method retrieves an identifier for the cue that is included in the source data, if one was specified. The system dynamically generates identifiers for cues that are guaranteed to be unique within a single time-text track. To obtain this system-generated ID, call <strong>GetId</strong>.</p>
        /// </remarks>
        /// <doc-id>dn859178</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextCue::GetOriginalId([Out] wchar_t** originalId)</unmanaged>
        /// <unmanaged-short>IMFTimedTextCue::GetOriginalId</unmanaged-short>
        public unsafe void GetOriginalId(System.IntPtr originalId)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)originalId, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the kind of timed-text cue.</p>
        /// </summary>
        /// <returns><p>Returns a <strong><see cref = "SharpDX.MediaFoundation.TimedTextTrackKind"/></strong>-typed value that specifies the kind of timed-text cue.</p></returns>
        /// <doc-id>dn800291</doc-id>
        /// <unmanaged>MF_TIMED_TEXT_TRACK_KIND IMFTimedTextCue::GetCueKind()</unmanaged>
        /// <unmanaged-short>IMFTimedTextCue::GetCueKind</unmanaged-short>
        internal unsafe SharpDX.MediaFoundation.TimedTextTrackKind GetCueKind()
        {
            SharpDX.MediaFoundation.TimedTextTrackKind __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMediaFoundationTimedTextTrackKind(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the start time of the cue in the track.</p>
        /// </summary>
        /// <returns><p>Returns the start time of the cue in the track.</p></returns>
        /// <doc-id>dn800297</doc-id>
        /// <unmanaged>double IMFTimedTextCue::GetStartTime()</unmanaged>
        /// <unmanaged-short>IMFTimedTextCue::GetStartTime</unmanaged-short>
        internal unsafe System.Double GetStartTime()
        {
            System.Double __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCalldouble(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the duration time of the cue in the track.</p>
        /// </summary>
        /// <returns><p>Returns the duration time of the cue in the track.</p></returns>
        /// <doc-id>dn800293</doc-id>
        /// <unmanaged>double IMFTimedTextCue::GetDuration()</unmanaged>
        /// <unmanaged-short>IMFTimedTextCue::GetDuration</unmanaged-short>
        internal unsafe System.Double GetDuration()
        {
            System.Double __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCalldouble(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the identifier of the timed-text cue.</p>
        /// </summary>
        /// <returns><p>Returns the identifier of the timed-text cue.</p></returns>
        /// <doc-id>dn800299</doc-id>
        /// <unmanaged>DWORD IMFTimedTextCue::GetTrackId()</unmanaged>
        /// <unmanaged-short>IMFTimedTextCue::GetTrackId</unmanaged-short>
        internal unsafe System.Int32 GetTrackId()
        {
            System.Int32 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the data content of the timed-text cue.</p>
        /// </summary>
        /// <param name = "data"><dd>  <p>A reference to a memory block that receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.TimedTextBinary"/></strong> interface for the data content of the timed-text cue. This parameter can be <strong><c>null</c></strong>. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800292</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextCue::GetData([Out, Optional] IMFTimedTextBinary** data)</unmanaged>
        /// <unmanaged-short>IMFTimedTextCue::GetData</unmanaged-short>
        internal unsafe void GetData(out SharpDX.MediaFoundation.TimedTextBinary data)
        {
            System.IntPtr data_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &data_, (*(void ***)this._nativePointer)[9]);
            if (data_ != System.IntPtr.Zero)
                data = new SharpDX.MediaFoundation.TimedTextBinary(data_);
            else
                data = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets info about the display region  of the timed-text cue.</p>
        /// </summary>
        /// <param name = "region"><dd>  <p>A reference to a memory block that receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.TimedTextRegion"/></strong> interface for the timed-text region. This parameter can be <strong><c>null</c></strong>. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800296</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextCue::GetRegion([Out, Optional] IMFTimedTextRegion** region)</unmanaged>
        /// <unmanaged-short>IMFTimedTextCue::GetRegion</unmanaged-short>
        internal unsafe void GetRegion(out SharpDX.MediaFoundation.TimedTextRegion region)
        {
            System.IntPtr region_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &region_, (*(void ***)this._nativePointer)[10]);
            if (region_ != System.IntPtr.Zero)
                region = new SharpDX.MediaFoundation.TimedTextRegion(region_);
            else
                region = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets info about the style  of the timed-text cue.</p>
        /// </summary>
        /// <param name = "style"><dd>  <p>A reference to a memory block that receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.TimedTextStyle"/></strong> interface for the timed-text style. This parameter can be <strong><c>null</c></strong>. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800298</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextCue::GetStyle([Out, Optional] IMFTimedTextStyle** style)</unmanaged>
        /// <unmanaged-short>IMFTimedTextCue::GetStyle</unmanaged-short>
        internal unsafe void GetStyle(out SharpDX.MediaFoundation.TimedTextStyle style)
        {
            System.IntPtr style_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &style_, (*(void ***)this._nativePointer)[11]);
            if (style_ != System.IntPtr.Zero)
                style = new SharpDX.MediaFoundation.TimedTextStyle(style_);
            else
                style = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the number of lines of text in the timed-text cue.</p>
        /// </summary>
        /// <returns><p>Returns the number of lines of text.</p></returns>
        /// <doc-id>dn800295</doc-id>
        /// <unmanaged>DWORD IMFTimedTextCue::GetLineCount()</unmanaged>
        /// <unmanaged-short>IMFTimedTextCue::GetLineCount</unmanaged-short>
        internal unsafe System.Int32 GetLineCount()
        {
            System.Int32 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets a line of text in the cue from the index of the line.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>The index of the line of text in the cue to retrieve. </p> </dd></param>
        /// <param name = "line"><dd>  <p>A reference to a memory block that receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.TimedTextFormattedText"/></strong> interface for the line of text in the cue.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800294</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextCue::GetLine([In] DWORD index,[Out] IMFTimedTextFormattedText** line)</unmanaged>
        /// <unmanaged-short>IMFTimedTextCue::GetLine</unmanaged-short>
        public unsafe void GetLine(System.Int32 index, out SharpDX.MediaFoundation.TimedTextFormattedText line)
        {
            System.IntPtr line_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, index, &line_, (*(void ***)this._nativePointer)[13]);
            if (line_ != System.IntPtr.Zero)
                line = new SharpDX.MediaFoundation.TimedTextFormattedText(line_);
            else
                line = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ad128745-211b-40a0-9981-fe65f166d0fd")]
    public partial class TimedTextCueList : SharpDX.ComObject
    {
        public TimedTextCueList(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TimedTextCueList(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TimedTextCueList(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetLength</unmanaged>
        /// <unmanaged-short>GetLength</unmanaged-short>
        public System.Int32 Length
        {
            get => GetLength();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWORD IMFTimedTextCueList::GetLength()</unmanaged>
        /// <unmanaged-short>IMFTimedTextCueList::GetLength</unmanaged-short>
        internal unsafe System.Int32 GetLength()
        {
            System.Int32 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "cue">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFTimedTextCueList::GetCueByIndex([In] DWORD index,[Out] IMFTimedTextCue** cue)</unmanaged>
        /// <unmanaged-short>IMFTimedTextCueList::GetCueByIndex</unmanaged-short>
        public unsafe void GetCueByIndex(System.Int32 index, out SharpDX.MediaFoundation.TimedTextCue cue)
        {
            System.IntPtr cue_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, index, &cue_, (*(void ***)this._nativePointer)[4]);
            if (cue_ != System.IntPtr.Zero)
                cue = new SharpDX.MediaFoundation.TimedTextCue(cue_);
            else
                cue = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "id">No documentation.</param>
        /// <param name = "cue">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFTimedTextCueList::GetCueById([In] DWORD id,[Out] IMFTimedTextCue** cue)</unmanaged>
        /// <unmanaged-short>IMFTimedTextCueList::GetCueById</unmanaged-short>
        public unsafe void GetCueById(System.Int32 id, out SharpDX.MediaFoundation.TimedTextCue cue)
        {
            System.IntPtr cue_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, id, &cue_, (*(void ***)this._nativePointer)[5]);
            if (cue_ != System.IntPtr.Zero)
                cue = new SharpDX.MediaFoundation.TimedTextCue(cue_);
            else
                cue = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "originalId">No documentation.</param>
        /// <param name = "cue">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFTimedTextCueList::GetCueByOriginalId([In] const wchar_t* originalId,[Out] IMFTimedTextCue** cue)</unmanaged>
        /// <unmanaged-short>IMFTimedTextCueList::GetCueByOriginalId</unmanaged-short>
        public unsafe void GetCueByOriginalId(System.String originalId, out SharpDX.MediaFoundation.TimedTextCue cue)
        {
            System.IntPtr cue_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (char *originalId_ = originalId)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)originalId_, &cue_, (*(void ***)this._nativePointer)[6]);
            if (cue_ != System.IntPtr.Zero)
                cue = new SharpDX.MediaFoundation.TimedTextCue(cue_);
            else
                cue = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "start">No documentation.</param>
        /// <param name = "duration">No documentation.</param>
        /// <param name = "text">No documentation.</param>
        /// <param name = "cue">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFTimedTextCueList::AddTextCue([In] double start,[In] double duration,[In] const wchar_t* text,[Out, Optional] IMFTimedTextCue** cue)</unmanaged>
        /// <unmanaged-short>IMFTimedTextCueList::AddTextCue</unmanaged-short>
        public unsafe void AddTextCue(System.Double start, System.Double duration, System.String text, out SharpDX.MediaFoundation.TimedTextCue cue)
        {
            System.IntPtr cue_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (char *text_ = text)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, start, duration, (void *)text_, &cue_, (*(void ***)this._nativePointer)[7]);
            if (cue_ != System.IntPtr.Zero)
                cue = new SharpDX.MediaFoundation.TimedTextCue(cue_);
            else
                cue = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "start">No documentation.</param>
        /// <param name = "duration">No documentation.</param>
        /// <param name = "data">No documentation.</param>
        /// <param name = "dataSize">No documentation.</param>
        /// <param name = "cue">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFTimedTextCueList::AddDataCue([In] double start,[In] double duration,[In, Buffer] const unsigned char* data,[In] DWORD dataSize,[Out, Optional] IMFTimedTextCue** cue)</unmanaged>
        /// <unmanaged-short>IMFTimedTextCueList::AddDataCue</unmanaged-short>
        public unsafe void AddDataCue(System.Double start, System.Double duration, System.Byte[] data, System.Int32 dataSize, out SharpDX.MediaFoundation.TimedTextCue cue)
        {
            System.IntPtr cue_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (void *data_ = data)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, start, duration, data_, dataSize, &cue_, (*(void ***)this._nativePointer)[8]);
            if (cue_ != System.IntPtr.Zero)
                cue = new SharpDX.MediaFoundation.TimedTextCue(cue_);
            else
                cue = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cue">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFTimedTextCueList::RemoveCue([In] IMFTimedTextCue* cue)</unmanaged>
        /// <unmanaged-short>IMFTimedTextCueList::RemoveCue</unmanaged-short>
        public unsafe void RemoveCue(SharpDX.MediaFoundation.TimedTextCue cue)
        {
            System.IntPtr cue_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            cue_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.TimedTextCue>(cue);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)cue_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("e13af3c1-4d47-4354-b1f5-e83ae0ecae60")]
    public partial class TimedTextFormattedText : SharpDX.ComObject
    {
        public TimedTextFormattedText(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TimedTextFormattedText(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TimedTextFormattedText(nativePtr);
        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the number of subformats in the formatted timed-text object.</p>
        /// </summary>
        /// <doc-id>dn800302</doc-id>
        /// <unmanaged>GetSubformattingCount</unmanaged>
        /// <unmanaged-short>GetSubformattingCount</unmanaged-short>
        public System.Int32 SubformattingCount
        {
            get => GetSubformattingCount();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the text in the formatted timed-text object.</p>
        /// </summary>
        /// <param name = "text"><dd>  <p>A reference to a variable that receives the null-terminated wide-character string that contains the text.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800303</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextFormattedText::GetText([Out, Optional] wchar_t** text)</unmanaged>
        /// <unmanaged-short>IMFTimedTextFormattedText::GetText</unmanaged-short>
        public unsafe void GetText(System.IntPtr text)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)text, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the number of subformats in the formatted timed-text object.</p>
        /// </summary>
        /// <returns><p>Returns the number of subformats. </p></returns>
        /// <doc-id>dn800302</doc-id>
        /// <unmanaged>DWORD IMFTimedTextFormattedText::GetSubformattingCount()</unmanaged>
        /// <unmanaged-short>IMFTimedTextFormattedText::GetSubformattingCount</unmanaged-short>
        internal unsafe System.Int32 GetSubformattingCount()
        {
            System.Int32 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets a subformat in the formatted timed-text object.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>The index of the subformat in the formatted timed-text object.</p> </dd></param>
        /// <param name = "firstChar"><dd>  <p>A reference to a variable that receives the first character of the subformat. </p> </dd></param>
        /// <param name = "charLength"><dd>  <p>A reference to a variable that receives the length, in characters, of the subformat. </p> </dd></param>
        /// <param name = "style"><dd>  <p>A reference to a memory block that receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.TimedTextStyle"/></strong> interface for the subformat's timed-text style. This parameter can be <strong><c>null</c></strong>. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800301</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextFormattedText::GetSubformatting([In] DWORD index,[Out] DWORD* firstChar,[Out] DWORD* charLength,[Out, Optional] IMFTimedTextStyle** style)</unmanaged>
        /// <unmanaged-short>IMFTimedTextFormattedText::GetSubformatting</unmanaged-short>
        public unsafe void GetSubformatting(System.Int32 index, out System.Int32 firstChar, out System.Int32 charLength, out SharpDX.MediaFoundation.TimedTextStyle style)
        {
            System.IntPtr style_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (void *charLength_ = &charLength)
                fixed (void *firstChar_ = &firstChar)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, index, firstChar_, charLength_, &style_, (*(void ***)this._nativePointer)[5]);
            if (style_ != System.IntPtr.Zero)
                style = new SharpDX.MediaFoundation.TimedTextStyle(style_);
            else
                style = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("df6b87b6-ce12-45db-aba7-432fe054e57d")]
    public partial class TimedTextNotify : SharpDX.ComObject
    {
        public TimedTextNotify(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TimedTextNotify(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TimedTextNotify(nativePtr);
        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Called when a text track is added</p>
        /// </summary>
        /// <param name = "trackId"><dd>  <p>The identifier of the track that was added. </p> </dd></param>
        /// <doc-id>dn800308</doc-id>
        /// <unmanaged>void IMFTimedTextNotify::TrackAdded([In] DWORD trackId)</unmanaged>
        /// <unmanaged-short>IMFTimedTextNotify::TrackAdded</unmanaged-short>
        public unsafe void TrackAdded(System.Int32 trackId)
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, trackId, (*(void ***)this._nativePointer)[3]);
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Called when a text track is removed.</p>
        /// </summary>
        /// <param name = "trackId"><dd>  <p>The identifier of the track that was removed. </p> </dd></param>
        /// <doc-id>dn800309</doc-id>
        /// <unmanaged>void IMFTimedTextNotify::TrackRemoved([In] DWORD trackId)</unmanaged>
        /// <unmanaged-short>IMFTimedTextNotify::TrackRemoved</unmanaged-short>
        public unsafe void TrackRemoved(System.Int32 trackId)
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, trackId, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Called when a track is selected or deselected.</p>
        /// </summary>
        /// <param name = "trackId"><dd>  <p>The identifier of the track that was selected or deselected. </p> </dd></param>
        /// <param name = "selected"><dd>  <p><strong>TRUE</strong> if the track was selected. <strong><see cref = "SharpDX.Result.False"/></strong> if the track was deselected. </p> </dd></param>
        /// <doc-id>dn800310</doc-id>
        /// <unmanaged>void IMFTimedTextNotify::TrackSelected([In] DWORD trackId,[In] BOOL selected)</unmanaged>
        /// <unmanaged-short>IMFTimedTextNotify::TrackSelected</unmanaged-short>
        public unsafe void TrackSelected(System.Int32 trackId, SharpDX.Mathematics.Interop.RawBool selected)
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid0(this._nativePointer, trackId, selected, (*(void ***)this._nativePointer)[5]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "trackId">No documentation.</param>
        /// <unmanaged>void IMFTimedTextNotify::TrackReadyStateChanged([In] DWORD trackId)</unmanaged>
        /// <unmanaged-short>IMFTimedTextNotify::TrackReadyStateChanged</unmanaged-short>
        public unsafe void TrackReadyStateChanged(System.Int32 trackId)
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, trackId, (*(void ***)this._nativePointer)[6]);
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Called when an error occurs in a text track.</p>
        /// </summary>
        /// <param name = "errorCode"><dd>  <p>An <see cref = "SharpDX.MediaFoundation.TimedTextErrorCode"/> representing the last error.</p> </dd></param>
        /// <param name = "extendedErrorCode"><dd>  <p>The extended error code for the last error.</p> </dd></param>
        /// <param name = "sourceTrackId"><dd>  <p>The identifier of the track on which the error occurred.</p> </dd></param>
        /// <doc-id>dn800306</doc-id>
        /// <unmanaged>void IMFTimedTextNotify::Error([In] MF_TIMED_TEXT_ERROR_CODE errorCode,[In] HRESULT extendedErrorCode,[In] DWORD sourceTrackId)</unmanaged>
        /// <unmanaged-short>IMFTimedTextNotify::Error</unmanaged-short>
        public unsafe void Error(SharpDX.MediaFoundation.TimedTextErrorCode errorCode, SharpDX.Result extendedErrorCode, System.Int32 sourceTrackId)
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid0(this._nativePointer, unchecked ((System.Int32)errorCode), extendedErrorCode, sourceTrackId, (*(void ***)this._nativePointer)[7]);
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Called when a cue event occurs in a text track.</p>
        /// </summary>
        /// <param name = "cueEvent"><dd>  <p>A value specifying the type of event that has occured.</p> </dd></param>
        /// <param name = "currentTime"><dd>  <p>The current time when the cue event occurred.</p> </dd></param>
        /// <param name = "cue"><dd>  <p>The <strong><see cref = "SharpDX.MediaFoundation.TimedTextCue"/></strong> object representing the cue.</p> </dd></param>
        /// <doc-id>dn800305</doc-id>
        /// <unmanaged>void IMFTimedTextNotify::Cue([In] MF_TIMED_TEXT_CUE_EVENT cueEvent,[In] double currentTime,[In, Optional] IMFTimedTextCue* cue)</unmanaged>
        /// <unmanaged-short>IMFTimedTextNotify::Cue</unmanaged-short>
        public unsafe void Cue(SharpDX.MediaFoundation.TimedTextCueEvent cueEvent, System.Double currentTime, SharpDX.MediaFoundation.TimedTextCue cue)
        {
            System.IntPtr cue_ = System.IntPtr.Zero;
            cue_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.TimedTextCue>(cue);
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)cueEvent), currentTime, (void *)cue_, (*(void ***)this._nativePointer)[8]);
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Resets the timed-text-notify object.</p>
        /// </summary>
        /// <doc-id>dn800307</doc-id>
        /// <unmanaged>void IMFTimedTextNotify::Reset()</unmanaged>
        /// <unmanaged-short>IMFTimedTextNotify::Reset</unmanaged-short>
        public unsafe void Reset()
        {
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[9]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("c8d22afc-bc47-4bdf-9b04-787e49ce3f58")]
    public partial class TimedTextRegion : SharpDX.ComObject
    {
        public TimedTextRegion(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TimedTextRegion(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TimedTextRegion(nativePtr);
        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the background color of the region.</p>
        /// </summary>
        /// <doc-id>dn800312</doc-id>
        /// <unmanaged>GetBackgroundColor</unmanaged>
        /// <unmanaged-short>GetBackgroundColor</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawColorBGRA BackgroundColor
        {
            get
            {
                GetBackgroundColor(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the writing mode of the region.</p>
        /// </summary>
        /// <doc-id>dn800322</doc-id>
        /// <unmanaged>GetWritingMode</unmanaged>
        /// <unmanaged-short>GetWritingMode</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextWritingMode WritingMode
        {
            get
            {
                GetWritingMode(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the display alignment of the region.</p>
        /// </summary>
        /// <doc-id>dn800314</doc-id>
        /// <unmanaged>GetDisplayAlignment</unmanaged>
        /// <unmanaged-short>GetDisplayAlignment</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextDisplayAlignment DisplayAlignment
        {
            get
            {
                GetDisplayAlignment(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether a clip of text overflowed the region.</p>
        /// </summary>
        /// <doc-id>dn800313</doc-id>
        /// <unmanaged>GetClipOverflow</unmanaged>
        /// <unmanaged-short>GetClipOverflow</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool ClipOverflow
        {
            get
            {
                GetClipOverflow(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether the word wrap feature is enabled in the region.</p>
        /// </summary>
        /// <doc-id>dn800321</doc-id>
        /// <unmanaged>GetWrap</unmanaged>
        /// <unmanaged-short>GetWrap</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool Wrap
        {
            get
            {
                GetWrap(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the Z-index (depth) of the region.</p>
        /// </summary>
        /// <doc-id>dn800323</doc-id>
        /// <unmanaged>GetZIndex</unmanaged>
        /// <unmanaged-short>GetZIndex</unmanaged-short>
        public System.Int32 ZIndex
        {
            get
            {
                GetZIndex(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the scroll mode of the region.</p>
        /// </summary>
        /// <doc-id>dn800320</doc-id>
        /// <unmanaged>GetScrollMode</unmanaged>
        /// <unmanaged-short>GetScrollMode</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextScrollMode ScrollMode
        {
            get
            {
                GetScrollMode(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the name of the region.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>A reference to a variable that receives the null-terminated wide-character string that contains the name of the region.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800317</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextRegion::GetName([Out] wchar_t** name)</unmanaged>
        /// <unmanaged-short>IMFTimedTextRegion::GetName</unmanaged-short>
        public unsafe void GetName(System.IntPtr name)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the position of the region.</p>
        /// </summary>
        /// <param name = "xRef"><dd>  <p>A reference to a variable that receives the X-coordinate of the position.</p> </dd></param>
        /// <param name = "yRef"><dd>  <p>A reference to a variable that receives the Y-coordinate of the position.</p> </dd></param>
        /// <param name = "unitType"><dd>  <p>A reference to a variable that receives a <strong><see cref = "SharpDX.MediaFoundation.TimedTextUnitType"/></strong>-typed value that specifies the units in which the timed-text region is measured.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800319</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextRegion::GetPosition([Out] double* pX,[Out] double* pY,[Out] MF_TIMED_TEXT_UNIT_TYPE* unitType)</unmanaged>
        /// <unmanaged-short>IMFTimedTextRegion::GetPosition</unmanaged-short>
        public unsafe void GetPosition(out System.Double xRef, out System.Double yRef, out SharpDX.MediaFoundation.TimedTextUnitType unitType)
        {
            SharpDX.Result __result__;
            fixed (void *unitType_ = &unitType)
                fixed (void *yRef_ = &yRef)
                    fixed (void *xRef_ = &xRef)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, xRef_, yRef_, unitType_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the extent of the region.</p>
        /// </summary>
        /// <param name = "widthRef"><dd>  <p>A reference to a variable that receives the width of the region.</p> </dd></param>
        /// <param name = "heightRef"><dd>  <p>A reference to a variable that receives the height of the region.</p> </dd></param>
        /// <param name = "unitType"><dd>  <p>A reference to a variable that receives a <strong><see cref = "SharpDX.MediaFoundation.TimedTextUnitType"/></strong>-typed value that specifies the units in which the timed-text region is measured.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800315</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextRegion::GetExtent([Out] double* pWidth,[Out] double* pHeight,[Out] MF_TIMED_TEXT_UNIT_TYPE* unitType)</unmanaged>
        /// <unmanaged-short>IMFTimedTextRegion::GetExtent</unmanaged-short>
        public unsafe void GetExtent(out System.Double widthRef, out System.Double heightRef, out SharpDX.MediaFoundation.TimedTextUnitType unitType)
        {
            SharpDX.Result __result__;
            fixed (void *unitType_ = &unitType)
                fixed (void *heightRef_ = &heightRef)
                    fixed (void *widthRef_ = &widthRef)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, widthRef_, heightRef_, unitType_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the background color of the region.</p>
        /// </summary>
        /// <param name = "bgColor"><dd>  <p>A reference to a variable that receives a <strong><see cref = "SharpDX.Mathematics.Interop.RawColorBGRA"/></strong> structure that describes the background color.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800312</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextRegion::GetBackgroundColor([Out] MFARGB* bgColor)</unmanaged>
        /// <unmanaged-short>IMFTimedTextRegion::GetBackgroundColor</unmanaged-short>
        internal unsafe void GetBackgroundColor(out SharpDX.Mathematics.Interop.RawColorBGRA bgColor)
        {
            bgColor = default (SharpDX.Mathematics.Interop.RawColorBGRA);
            SharpDX.Result __result__;
            fixed (void *bgColor_ = &bgColor)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bgColor_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the writing mode of the region.</p>
        /// </summary>
        /// <param name = "writingMode"><dd>  <p>A reference to a variable that receives a <strong><see cref = "SharpDX.MediaFoundation.TimedTextWritingMode"/></strong>-typed value that specifies the writing mode of the region.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800322</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextRegion::GetWritingMode([Out] MF_TIMED_TEXT_WRITING_MODE* writingMode)</unmanaged>
        /// <unmanaged-short>IMFTimedTextRegion::GetWritingMode</unmanaged-short>
        internal unsafe void GetWritingMode(out SharpDX.MediaFoundation.TimedTextWritingMode writingMode)
        {
            SharpDX.Result __result__;
            fixed (void *writingMode_ = &writingMode)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, writingMode_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the display alignment of the region.</p>
        /// </summary>
        /// <param name = "displayAlign"><dd>  <p>A reference to a variable that receives a <strong><see cref = "SharpDX.MediaFoundation.TimedTextDisplayAlignment"/></strong>-typed value that specifies the display alignment of the region.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800314</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextRegion::GetDisplayAlignment([Out] MF_TIMED_TEXT_DISPLAY_ALIGNMENT* displayAlign)</unmanaged>
        /// <unmanaged-short>IMFTimedTextRegion::GetDisplayAlignment</unmanaged-short>
        internal unsafe void GetDisplayAlignment(out SharpDX.MediaFoundation.TimedTextDisplayAlignment displayAlign)
        {
            SharpDX.Result __result__;
            fixed (void *displayAlign_ = &displayAlign)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, displayAlign_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the height of each line of text in the region.</p>
        /// </summary>
        /// <param name = "lineHeightRef"><dd>  <p>A reference to a variable that receives the height of each line of text in the region.</p> </dd></param>
        /// <param name = "unitType"><dd>  <p>A reference to a variable that receives a <strong><see cref = "SharpDX.MediaFoundation.TimedTextUnitType"/></strong>-typed value that specifies the units in which the timed-text region is measured.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800316</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextRegion::GetLineHeight([Out] double* pLineHeight,[Out] MF_TIMED_TEXT_UNIT_TYPE* unitType)</unmanaged>
        /// <unmanaged-short>IMFTimedTextRegion::GetLineHeight</unmanaged-short>
        public unsafe void GetLineHeight(out System.Double lineHeightRef, out SharpDX.MediaFoundation.TimedTextUnitType unitType)
        {
            SharpDX.Result __result__;
            fixed (void *unitType_ = &unitType)
                fixed (void *lineHeightRef_ = &lineHeightRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, lineHeightRef_, unitType_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether a clip of text overflowed the region.</p>
        /// </summary>
        /// <param name = "clipOverflow"><dd>  <p>A reference to a variable that receives a value that specifies whether a clip of text overflowed the region. The variable specifies <strong>TRUE</strong> if the clip overflowed; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800313</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextRegion::GetClipOverflow([Out] BOOL* clipOverflow)</unmanaged>
        /// <unmanaged-short>IMFTimedTextRegion::GetClipOverflow</unmanaged-short>
        internal unsafe void GetClipOverflow(out SharpDX.Mathematics.Interop.RawBool clipOverflow)
        {
            clipOverflow = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *clipOverflow_ = &clipOverflow)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, clipOverflow_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the padding that surrounds the region.</p>
        /// </summary>
        /// <param name = "before"><dd>  <p>A reference to a variable that receives the padding before the start of the region.</p> </dd></param>
        /// <param name = "start"><dd>  <p>A reference to a variable that receives the start of the region.</p> </dd></param>
        /// <param name = "after"><dd>  <p>A reference to a variable that receives the padding after the end of the region.</p> </dd></param>
        /// <param name = "end"><dd>  <p>A reference to a variable that receives the end of the region.</p> </dd></param>
        /// <param name = "unitType"><dd>  <p>A reference to a variable that receives a <strong><see cref = "SharpDX.MediaFoundation.TimedTextUnitType"/></strong>-typed value that specifies the units in which the timed-text region is measured.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800318</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextRegion::GetPadding([Out] double* before,[Out] double* start,[Out] double* after,[Out] double* end,[Out] MF_TIMED_TEXT_UNIT_TYPE* unitType)</unmanaged>
        /// <unmanaged-short>IMFTimedTextRegion::GetPadding</unmanaged-short>
        public unsafe void GetPadding(out System.Double before, out System.Double start, out System.Double after, out System.Double end, out SharpDX.MediaFoundation.TimedTextUnitType unitType)
        {
            SharpDX.Result __result__;
            fixed (void *unitType_ = &unitType)
                fixed (void *end_ = &end)
                    fixed (void *after_ = &after)
                        fixed (void *start_ = &start)
                            fixed (void *before_ = &before)
                                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, before_, start_, after_, end_, unitType_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether the word wrap feature is enabled in the region.</p>
        /// </summary>
        /// <param name = "wrap"><dd>  <p>A reference to a variable that receives a value that specifies whether the word wrap feature is enabled in the region. The variable specifies <strong>TRUE</strong> if word wrap is enabled; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800321</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextRegion::GetWrap([Out] BOOL* wrap)</unmanaged>
        /// <unmanaged-short>IMFTimedTextRegion::GetWrap</unmanaged-short>
        internal unsafe void GetWrap(out SharpDX.Mathematics.Interop.RawBool wrap)
        {
            wrap = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *wrap_ = &wrap)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, wrap_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the Z-index (depth) of the region.</p>
        /// </summary>
        /// <param name = "zIndex"><dd>  <p>A reference to a variable that receives the Z-index (depth) of the region.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800323</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextRegion::GetZIndex([Out] int* zIndex)</unmanaged>
        /// <unmanaged-short>IMFTimedTextRegion::GetZIndex</unmanaged-short>
        internal unsafe void GetZIndex(out System.Int32 zIndex)
        {
            SharpDX.Result __result__;
            fixed (void *zIndex_ = &zIndex)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, zIndex_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the scroll mode of the region.</p>
        /// </summary>
        /// <param name = "scrollMode"><dd>  <p>A reference to a variable that receives a <strong><see cref = "SharpDX.MediaFoundation.TimedTextScrollMode"/></strong>-typed value that specifies the scroll mode of the region.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800320</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextRegion::GetScrollMode([Out] MF_TIMED_TEXT_SCROLL_MODE* scrollMode)</unmanaged>
        /// <unmanaged-short>IMFTimedTextRegion::GetScrollMode</unmanaged-short>
        internal unsafe void GetScrollMode(out SharpDX.MediaFoundation.TimedTextScrollMode scrollMode)
        {
            SharpDX.Result __result__;
            fixed (void *scrollMode_ = &scrollMode)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, scrollMode_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("09b2455d-b834-4f01-a347-9052e21c450e")]
    public partial class TimedTextStyle : SharpDX.ComObject
    {
        public TimedTextStyle(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TimedTextStyle(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TimedTextStyle(nativePtr);
        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether the timed-text style is external.</p>
        /// </summary>
        /// <doc-id>dn800338</doc-id>
        /// <unmanaged>IsExternal</unmanaged>
        /// <unmanaged-short>IsExternal</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsExternal
        {
            get => IsExternal_();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the color of the timed-text style.</p>
        /// </summary>
        /// <doc-id>dn800327</doc-id>
        /// <unmanaged>GetColor</unmanaged>
        /// <unmanaged-short>GetColor</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawColorBGRA Color
        {
            get
            {
                GetColor(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the background color of the timed-text style.</p>
        /// </summary>
        /// <doc-id>dn800325</doc-id>
        /// <unmanaged>GetBackgroundColor</unmanaged>
        /// <unmanaged-short>GetBackgroundColor</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawColorBGRA BackgroundColor
        {
            get
            {
                GetBackgroundColor(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether the style  of timed text always shows the background.</p>
        /// </summary>
        /// <doc-id>dn800334</doc-id>
        /// <unmanaged>GetShowBackgroundAlways</unmanaged>
        /// <unmanaged-short>GetShowBackgroundAlways</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool ShowBackgroundAlways
        {
            get
            {
                GetShowBackgroundAlways(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the font style of the timed-text style.</p>
        /// </summary>
        /// <doc-id>dn800330</doc-id>
        /// <unmanaged>GetFontStyle</unmanaged>
        /// <unmanaged-short>GetFontStyle</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextFontStyle FontStyle
        {
            get
            {
                GetFontStyle(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether the style  of timed text is bold.</p>
        /// </summary>
        /// <doc-id>dn800326</doc-id>
        /// <unmanaged>GetBold</unmanaged>
        /// <unmanaged-short>GetBold</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool Bold
        {
            get
            {
                GetBold(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether the right to left writing mode of the timed-text style  is enabled.</p>
        /// </summary>
        /// <doc-id>dn800332</doc-id>
        /// <unmanaged>GetRightToLeft</unmanaged>
        /// <unmanaged-short>GetRightToLeft</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool RightToLeft
        {
            get
            {
                GetRightToLeft(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the text alignment of the timed-text style.</p>
        /// </summary>
        /// <doc-id>dn800335</doc-id>
        /// <unmanaged>GetTextAlignment</unmanaged>
        /// <unmanaged-short>GetTextAlignment</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextAlignment TextAlignment
        {
            get
            {
                GetTextAlignment(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets how text is decorated for the timed-text style.</p>
        /// </summary>
        /// <doc-id>dn800336</doc-id>
        /// <unmanaged>GetTextDecoration</unmanaged>
        /// <unmanaged-short>GetTextDecoration</unmanaged-short>
        public System.Int32 TextDecoration
        {
            get
            {
                GetTextDecoration(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the name of the timed-text style.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>A reference to a variable that receives the null-terminated wide-character string that contains the name of the style.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800331</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextStyle::GetName([Out] wchar_t** name)</unmanaged>
        /// <unmanaged-short>IMFTimedTextStyle::GetName</unmanaged-short>
        public unsafe void GetName(System.IntPtr name)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether the timed-text style is external.</p>
        /// </summary>
        /// <returns><p>Returns whether the timed-text style is external. If <strong>TRUE</strong>, the timed-text style is external; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>. </p></returns>
        /// <doc-id>dn800338</doc-id>
        /// <unmanaged>BOOL IMFTimedTextStyle::IsExternal()</unmanaged>
        /// <unmanaged-short>IMFTimedTextStyle::IsExternal</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsExternal_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the font family of the timed-text style.</p>
        /// </summary>
        /// <param name = "fontFamily"><dd>  <p>A reference to a variable that receives the null-terminated wide-character string that contains the font family of the style.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800328</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextStyle::GetFontFamily([Out] wchar_t** fontFamily)</unmanaged>
        /// <unmanaged-short>IMFTimedTextStyle::GetFontFamily</unmanaged-short>
        public unsafe void GetFontFamily(System.IntPtr fontFamily)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFamily, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the font size  of the timed-text style.</p>
        /// </summary>
        /// <param name = "fontSize"><dd>  <p>A reference to a variable that receives the font size  of the timed-text style.</p> </dd></param>
        /// <param name = "unitType"><dd>  <p>A reference to a variable that receives a <strong><see cref = "SharpDX.MediaFoundation.TimedTextUnitType"/></strong>-typed value that specifies the units in which the timed-text style is measured.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800329</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextStyle::GetFontSize([Out] double* fontSize,[Out] MF_TIMED_TEXT_UNIT_TYPE* unitType)</unmanaged>
        /// <unmanaged-short>IMFTimedTextStyle::GetFontSize</unmanaged-short>
        public unsafe void GetFontSize(out System.Double fontSize, out SharpDX.MediaFoundation.TimedTextUnitType unitType)
        {
            SharpDX.Result __result__;
            fixed (void *unitType_ = &unitType)
                fixed (void *fontSize_ = &fontSize)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fontSize_, unitType_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the color of the timed-text style.</p>
        /// </summary>
        /// <param name = "color"><dd>  <p>A reference to a variable that receives a <strong><see cref = "SharpDX.Mathematics.Interop.RawColorBGRA"/></strong> structure that describes the color.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800327</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextStyle::GetColor([Out] MFARGB* color)</unmanaged>
        /// <unmanaged-short>IMFTimedTextStyle::GetColor</unmanaged-short>
        internal unsafe void GetColor(out SharpDX.Mathematics.Interop.RawColorBGRA color)
        {
            color = default (SharpDX.Mathematics.Interop.RawColorBGRA);
            SharpDX.Result __result__;
            fixed (void *color_ = &color)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, color_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the background color of the timed-text style.</p>
        /// </summary>
        /// <param name = "bgColor"><dd>  <p>A reference to a variable that receives a <strong><see cref = "SharpDX.Mathematics.Interop.RawColorBGRA"/></strong> structure that describes the background color.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800325</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextStyle::GetBackgroundColor([Out] MFARGB* bgColor)</unmanaged>
        /// <unmanaged-short>IMFTimedTextStyle::GetBackgroundColor</unmanaged-short>
        internal unsafe void GetBackgroundColor(out SharpDX.Mathematics.Interop.RawColorBGRA bgColor)
        {
            bgColor = default (SharpDX.Mathematics.Interop.RawColorBGRA);
            SharpDX.Result __result__;
            fixed (void *bgColor_ = &bgColor)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bgColor_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether the style  of timed text always shows the background.</p>
        /// </summary>
        /// <param name = "showBackgroundAlways"><dd>  <p>A reference to a variable that receives a value that specifies whether the style  of timed text always shows the background. The variable specifies <strong>TRUE</strong> if the background is always shown; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800334</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextStyle::GetShowBackgroundAlways([Out] BOOL* showBackgroundAlways)</unmanaged>
        /// <unmanaged-short>IMFTimedTextStyle::GetShowBackgroundAlways</unmanaged-short>
        internal unsafe void GetShowBackgroundAlways(out SharpDX.Mathematics.Interop.RawBool showBackgroundAlways)
        {
            showBackgroundAlways = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *showBackgroundAlways_ = &showBackgroundAlways)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, showBackgroundAlways_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the font style of the timed-text style.</p>
        /// </summary>
        /// <param name = "fontStyle"><dd>  <p>A reference to a variable that receives a <strong><see cref = "SharpDX.MediaFoundation.TimedTextFontStyle"/></strong>-typed value that specifies the font style.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800330</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextStyle::GetFontStyle([Out] MF_TIMED_TEXT_FONT_STYLE* fontStyle)</unmanaged>
        /// <unmanaged-short>IMFTimedTextStyle::GetFontStyle</unmanaged-short>
        internal unsafe void GetFontStyle(out SharpDX.MediaFoundation.TimedTextFontStyle fontStyle)
        {
            SharpDX.Result __result__;
            fixed (void *fontStyle_ = &fontStyle)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fontStyle_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether the style  of timed text is bold.</p>
        /// </summary>
        /// <param name = "bold"><dd>  <p>A reference to a variable that receives a value that specifies whether the style  of timed text is bold. The variable specifies <strong>TRUE</strong> if the style is bold; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800326</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextStyle::GetBold([Out] BOOL* bold)</unmanaged>
        /// <unmanaged-short>IMFTimedTextStyle::GetBold</unmanaged-short>
        internal unsafe void GetBold(out SharpDX.Mathematics.Interop.RawBool bold)
        {
            bold = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *bold_ = &bold)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bold_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether the right to left writing mode of the timed-text style  is enabled.</p>
        /// </summary>
        /// <param name = "rightToLeft"><dd>  <p>A reference to a variable that receives a value that specifies whether the right to left writing mode is enabled. The variable specifies <strong>TRUE</strong> if the right to left writing mode is enabled; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800332</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextStyle::GetRightToLeft([Out] BOOL* rightToLeft)</unmanaged>
        /// <unmanaged-short>IMFTimedTextStyle::GetRightToLeft</unmanaged-short>
        internal unsafe void GetRightToLeft(out SharpDX.Mathematics.Interop.RawBool rightToLeft)
        {
            rightToLeft = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *rightToLeft_ = &rightToLeft)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, rightToLeft_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the text alignment of the timed-text style.</p>
        /// </summary>
        /// <param name = "textAlign"><dd>  <p>A reference to a variable that receives a <strong><see cref = "SharpDX.MediaFoundation.TimedTextAlignment"/></strong>-typed value that specifies the text alignment.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800335</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextStyle::GetTextAlignment([Out] MF_TIMED_TEXT_ALIGNMENT* textAlign)</unmanaged>
        /// <unmanaged-short>IMFTimedTextStyle::GetTextAlignment</unmanaged-short>
        internal unsafe void GetTextAlignment(out SharpDX.MediaFoundation.TimedTextAlignment textAlign)
        {
            SharpDX.Result __result__;
            fixed (void *textAlign_ = &textAlign)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, textAlign_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets how text is decorated for the timed-text style.</p>
        /// </summary>
        /// <param name = "textDecoration"><dd>  <p>A reference to a variable that receives a combination of <strong><see cref = "SharpDX.MediaFoundation.TimedTextDecoration"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies how text is decorated.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800336</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextStyle::GetTextDecoration([Out] DWORD* textDecoration)</unmanaged>
        /// <unmanaged-short>IMFTimedTextStyle::GetTextDecoration</unmanaged-short>
        internal unsafe void GetTextDecoration(out System.Int32 textDecoration)
        {
            SharpDX.Result __result__;
            fixed (void *textDecoration_ = &textDecoration)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, textDecoration_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the text outline for the timed-text style.</p>
        /// </summary>
        /// <param name = "color"><dd>  <p>A reference to a variable that receives a <strong><see cref = "SharpDX.Mathematics.Interop.RawColorBGRA"/></strong> structure that describes the color.</p> </dd></param>
        /// <param name = "thickness"><dd>  <p>A reference to a variable that receives the thickness.</p> </dd></param>
        /// <param name = "blurRadius"><dd>  <p>A reference to a variable that receives the blur radius.</p> </dd></param>
        /// <param name = "unitType"><dd>  <p>A reference to a variable that receives a <strong><see cref = "SharpDX.MediaFoundation.TimedTextUnitType"/></strong>-typed value that specifies the units in which the timed-text is measured.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800337</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextStyle::GetTextOutline([Out] MFARGB* color,[Out] double* thickness,[Out] double* blurRadius,[Out] MF_TIMED_TEXT_UNIT_TYPE* unitType)</unmanaged>
        /// <unmanaged-short>IMFTimedTextStyle::GetTextOutline</unmanaged-short>
        public unsafe void GetTextOutline(out SharpDX.Mathematics.Interop.RawColorBGRA color, out System.Double thickness, out System.Double blurRadius, out SharpDX.MediaFoundation.TimedTextUnitType unitType)
        {
            color = default (SharpDX.Mathematics.Interop.RawColorBGRA);
            SharpDX.Result __result__;
            fixed (void *unitType_ = &unitType)
                fixed (void *blurRadius_ = &blurRadius)
                    fixed (void *thickness_ = &thickness)
                        fixed (void *color_ = &color)
                            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, color_, thickness_, blurRadius_, unitType_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("8822c32d-654e-4233-bf21-d7f2e67d30d4")]
    public partial class TimedTextTrack : SharpDX.ComObject
    {
        public TimedTextTrack(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TimedTextTrack(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TimedTextTrack(nativePtr);
        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the identifier of the track of timed text.</p>
        /// </summary>
        /// <doc-id>dn800344</doc-id>
        /// <unmanaged>GetId</unmanaged>
        /// <unmanaged-short>GetId</unmanaged-short>
        public System.Int32 Id
        {
            get => GetId();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the kind of timed-text track.</p>
        /// </summary>
        /// <doc-id>dn800348</doc-id>
        /// <unmanaged>GetTrackKind</unmanaged>
        /// <unmanaged-short>GetTrackKind</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextTrackKind TrackKind
        {
            get => GetTrackKind();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether the timed-text track is inband.</p>
        /// </summary>
        /// <doc-id>dn800350</doc-id>
        /// <unmanaged>IsInBand</unmanaged>
        /// <unmanaged-short>IsInBand</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsInBand
        {
            get => IsInBand_();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether the timed-text track is active.</p>
        /// </summary>
        /// <doc-id>dn800349</doc-id>
        /// <unmanaged>IsActive</unmanaged>
        /// <unmanaged-short>IsActive</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsActive
        {
            get => IsActive_();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets a value indicating the error type of the latest error associated with the track.</p>
        /// </summary>
        /// <doc-id>dn859180</doc-id>
        /// <unmanaged>GetErrorCode</unmanaged>
        /// <unmanaged-short>GetErrorCode</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextErrorCode ErrorCode
        {
            get => GetErrorCode();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the extended error code for the latest error associated with the track.</p>
        /// </summary>
        /// <remarks>
        /// <p>If the most recent error was associated with a track, this value will be the same <strong><see cref = "SharpDX.Result"/></strong> as returned by the <strong>IMFTimedTextNotify::Error</strong> method.</p>
        /// </remarks>
        /// <doc-id>dn859181</doc-id>
        /// <unmanaged>GetExtendedErrorCode</unmanaged>
        /// <unmanaged-short>GetExtendedErrorCode</unmanaged-short>
        public SharpDX.Result ExtendedErrorCode
        {
            get => GetExtendedErrorCode();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets a <see cref = "System.Guid"/> that identifies the track's underlying data format.</p>
        /// </summary>
        /// <doc-id>dn859179</doc-id>
        /// <unmanaged>GetDataFormat</unmanaged>
        /// <unmanaged-short>GetDataFormat</unmanaged-short>
        public System.Guid DataFormat
        {
            get
            {
                GetDataFormat(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetReadyState</unmanaged>
        /// <unmanaged-short>GetReadyState</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextTrackReadyState ReadyState
        {
            get => GetReadyState();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetCueList</unmanaged>
        /// <unmanaged-short>GetCueList</unmanaged-short>
        public SharpDX.MediaFoundation.TimedTextCueList CueList
        {
            get
            {
                GetCueList(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the identifier of the track of timed text.</p>
        /// </summary>
        /// <returns><p>Returns the identifier of the track. </p></returns>
        /// <doc-id>dn800344</doc-id>
        /// <unmanaged>DWORD IMFTimedTextTrack::GetId()</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrack::GetId</unmanaged-short>
        internal unsafe System.Int32 GetId()
        {
            System.Int32 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the label of the track.</p>
        /// </summary>
        /// <param name = "label"><dd>  <p>A reference to a variable that receives the null-terminated wide-character string that contains the label of the track.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800346</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextTrack::GetLabel([Out] wchar_t** label)</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrack::GetLabel</unmanaged-short>
        public unsafe void GetLabel(System.IntPtr label)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)label, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Sets the label of a timed-text track.</p>
        /// </summary>
        /// <param name = "label"><dd>  <p>A reference to a null-terminated wide-character string that contains the label of the track.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn859182</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextTrack::SetLabel([In] const wchar_t* label)</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrack::SetLabel</unmanaged-short>
        public unsafe void SetLabel(System.String label)
        {
            SharpDX.Result __result__;
            fixed (char *label_ = label)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)label_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the language of the track.</p>
        /// </summary>
        /// <param name = "language"><dd>  <p>A reference to a variable that receives the null-terminated wide-character string that contains the language of the track.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800347</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextTrack::GetLanguage([Out] wchar_t** language)</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrack::GetLanguage</unmanaged-short>
        public unsafe void GetLanguage(System.IntPtr language)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)language, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the kind of timed-text track.</p>
        /// </summary>
        /// <returns><p>Returns a <strong><see cref = "SharpDX.MediaFoundation.TimedTextTrackKind"/></strong>-typed value that specifies the kind of timed-text track.</p></returns>
        /// <doc-id>dn800348</doc-id>
        /// <unmanaged>MF_TIMED_TEXT_TRACK_KIND IMFTimedTextTrack::GetTrackKind()</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrack::GetTrackKind</unmanaged-short>
        internal unsafe SharpDX.MediaFoundation.TimedTextTrackKind GetTrackKind()
        {
            SharpDX.MediaFoundation.TimedTextTrackKind __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMediaFoundationTimedTextTrackKind(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether the timed-text track is inband.</p>
        /// </summary>
        /// <returns><p>Returns whether the timed-text track is inband. If <strong>TRUE</strong>, the timed-text track is inband; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>. </p></returns>
        /// <doc-id>dn800350</doc-id>
        /// <unmanaged>BOOL IMFTimedTextTrack::IsInBand()</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrack::IsInBand</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsInBand_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the in-band metadata of the track.</p>
        /// </summary>
        /// <param name = "dispatchType"><dd>  <p>A reference to a variable that receives the null-terminated wide-character string that contains the in-band metadata of the track.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800345</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextTrack::GetInBandMetadataTrackDispatchType([Out] wchar_t** dispatchType)</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrack::GetInBandMetadataTrackDispatchType</unmanaged-short>
        public unsafe void GetInBandMetadataTrackDispatchType(System.IntPtr dispatchType)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)dispatchType, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Determines whether the timed-text track is active.</p>
        /// </summary>
        /// <returns><p>Returns whether the timed-text track is active. If <strong>TRUE</strong>, the timed-text track is active; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>. </p></returns>
        /// <doc-id>dn800349</doc-id>
        /// <unmanaged>BOOL IMFTimedTextTrack::IsActive()</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrack::IsActive</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsActive_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[10]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets a value indicating the error type of the latest error associated with the track.</p>
        /// </summary>
        /// <returns><p>A value indicating the error type of the latest error associated with the track.</p></returns>
        /// <doc-id>dn859180</doc-id>
        /// <unmanaged>MF_TIMED_TEXT_ERROR_CODE IMFTimedTextTrack::GetErrorCode()</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrack::GetErrorCode</unmanaged-short>
        internal unsafe SharpDX.MediaFoundation.TimedTextErrorCode GetErrorCode()
        {
            SharpDX.MediaFoundation.TimedTextErrorCode __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMediaFoundationTimedTextErrorCode(this._nativePointer, (*(void ***)this._nativePointer)[11]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the extended error code for the latest error associated with the track.</p>
        /// </summary>
        /// <returns><p>The extended error code for the latest error associated with the track.</p></returns>
        /// <remarks>
        /// <p>If the most recent error was associated with a track, this value will be the same <strong><see cref = "SharpDX.Result"/></strong> as returned by the <strong>IMFTimedTextNotify::Error</strong> method.</p>
        /// </remarks>
        /// <doc-id>dn859181</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextTrack::GetExtendedErrorCode()</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrack::GetExtendedErrorCode</unmanaged-short>
        internal unsafe SharpDX.Result GetExtendedErrorCode()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets a <see cref = "System.Guid"/> that identifies the track's underlying data format.</p>
        /// </summary>
        /// <param name = "format"><dd>  <p>A <see cref = "System.Guid"/> that identifies the track's underlying data format.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn859179</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextTrack::GetDataFormat([Out] GUID* format)</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrack::GetDataFormat</unmanaged-short>
        internal unsafe void GetDataFormat(out System.Guid format)
        {
            format = default (System.Guid);
            SharpDX.Result __result__;
            fixed (void *format_ = &format)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, format_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>MF_TIMED_TEXT_TRACK_READY_STATE IMFTimedTextTrack::GetReadyState()</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrack::GetReadyState</unmanaged-short>
        internal unsafe SharpDX.MediaFoundation.TimedTextTrackReadyState GetReadyState()
        {
            SharpDX.MediaFoundation.TimedTextTrackReadyState __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallSharpDXMediaFoundationTimedTextTrackReadyState(this._nativePointer, (*(void ***)this._nativePointer)[14]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cues">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IMFTimedTextTrack::GetCueList([Out] IMFTimedTextCueList** cues)</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrack::GetCueList</unmanaged-short>
        internal unsafe void GetCueList(out SharpDX.MediaFoundation.TimedTextCueList cues)
        {
            System.IntPtr cues_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &cues_, (*(void ***)this._nativePointer)[15]);
            if (cues_ != System.IntPtr.Zero)
                cues = new SharpDX.MediaFoundation.TimedTextCueList(cues_);
            else
                cues = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("23ff334c-442c-445f-bccc-edc438aa11e2")]
    public partial class TimedTextTrackList : SharpDX.ComObject
    {
        public TimedTextTrackList(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TimedTextTrackList(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TimedTextTrackList(nativePtr);
        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the length, in tracks, of the timed-text-track list.</p>
        /// </summary>
        /// <doc-id>dn800341</doc-id>
        /// <unmanaged>GetLength</unmanaged>
        /// <unmanaged-short>GetLength</unmanaged-short>
        public System.Int32 Length
        {
            get => GetLength();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets the length, in tracks, of the timed-text-track list.</p>
        /// </summary>
        /// <returns><p>Returns the length, in tracks, of the timed-text-track list.</p></returns>
        /// <doc-id>dn800341</doc-id>
        /// <unmanaged>DWORD IMFTimedTextTrackList::GetLength()</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrackList::GetLength</unmanaged-short>
        internal unsafe System.Int32 GetLength()
        {
            System.Int32 __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets a text track in the list from the index of the track.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>The index of the track in the list to retrieve. </p> </dd></param>
        /// <param name = "track"><dd>  <p>A reference to a memory block that receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.TimedTextTrack"/></strong> interface for the timed-text track.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800342</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextTrackList::GetTrack([In] DWORD index,[Out] IMFTimedTextTrack** track)</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrackList::GetTrack</unmanaged-short>
        public unsafe void GetTrack(System.Int32 index, out SharpDX.MediaFoundation.TimedTextTrack track)
        {
            System.IntPtr track_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, index, &track_, (*(void ***)this._nativePointer)[4]);
            if (track_ != System.IntPtr.Zero)
                track = new SharpDX.MediaFoundation.TimedTextTrack(track_);
            else
                track = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Gets a text track in the list from the identifier of the track.</p>
        /// </summary>
        /// <param name = "trackId"><dd>  <p>The identifier of the track in the list to retrieve. </p> </dd></param>
        /// <param name = "track"><dd>  <p>A reference to a memory block that receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.TimedTextTrack"/></strong> interface for the timed-text track.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800343</doc-id>
        /// <unmanaged>HRESULT IMFTimedTextTrackList::GetTrackById([In] DWORD trackId,[Out] IMFTimedTextTrack** track)</unmanaged>
        /// <unmanaged-short>IMFTimedTextTrackList::GetTrackById</unmanaged-short>
        public unsafe void GetTrackById(System.Int32 trackId, out SharpDX.MediaFoundation.TimedTextTrack track)
        {
            System.IntPtr track_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, trackId, &track_, (*(void ***)this._nativePointer)[5]);
            if (track_ != System.IntPtr.Zero)
                track = new SharpDX.MediaFoundation.TimedTextTrack(track_);
            else
                track = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("e56e4cbd-8f70-49d8-a0f8-edb3d6ab9bf2")]
    public partial class Timer : SharpDX.ComObject
    {
        public Timer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Timer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Timer(nativePtr);
        /// <summary>
        /// <p> </p><p>Sets a timer that invokes a callback at the specified time.</p>
        /// </summary>
        /// <param name = "dwFlags"><dd> <p>Bitwise OR of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.TimerFlags"/></strong> enumeration.</p> </dd></param>
        /// <param name = "llClockTime"><dd> <p>The time at which the timer should fire, in units of the clock's frequency. The time is either absolute or relative to the current time, depending on the value of <em>dwFlags</em>.</p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface. The callback's <strong>Invoke</strong> method is called at the time specified in the <em>llClockTime</em> parameter.</p> </dd></param>
        /// <param name = "unkStateRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</p> </dd></param>
        /// <param name = "unkKeyOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a cancellation object. The caller must release the interface. To cancel the timer, pass this reference to the <strong>IMFTimer::CancelTimer</strong> method. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The clock was shut down.</p> </td></tr> <tr><td> <dl> <dt><strong>MF_S_CLOCK_STOPPED</strong></dt> </dl> </td><td> <p>The method succeeded, but the clock is stopped.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the clock is stopped, the method returns MF_S_CLOCK_STOPPED. The callback will not be invoked until the clock is started.</p>
        /// </remarks>
        /// <doc-id>ms696252</doc-id>
        /// <unmanaged>HRESULT IMFTimer::SetTimer([In] DWORD dwFlags,[In] longlong llClockTime,[In] IMFAsyncCallback* pCallback,[In] IUnknown* punkState,[In] IUnknown** ppunkKey)</unmanaged>
        /// <unmanaged-short>IMFTimer::SetTimer</unmanaged-short>
        public unsafe void SetTimer(System.Int32 dwFlags, System.Int64 llClockTime, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown unkStateRef, out SharpDX.IUnknown unkKeyOut)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            System.IntPtr unkKeyOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwFlags, llClockTime, (void *)callbackRef_, (void *)unkStateRef_, &unkKeyOut_, (*(void ***)this._nativePointer)[3]);
            if (unkKeyOut_ != System.IntPtr.Zero)
                unkKeyOut = new SharpDX.ComObject(unkKeyOut_);
            else
                unkKeyOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Cancels a timer that was set using the <strong>IMFTimer::SetTimer</strong> method.</p>
        /// </summary>
        /// <param name = "unkKeyRef">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Because the timer is dispatched asynchronously, the application's timer callback might get invoked even if this method succeeds.</p>
        /// </remarks>
        /// <doc-id>ms696276</doc-id>
        /// <unmanaged>HRESULT IMFTimer::CancelTimer([In] IUnknown* punkKey)</unmanaged>
        /// <unmanaged-short>IMFTimer::CancelTimer</unmanaged-short>
        public unsafe void CancelTimer(SharpDX.IUnknown unkKeyRef)
        {
            System.IntPtr unkKeyRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            unkKeyRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkKeyRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)unkKeyRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("DE9A6157-F660-4643-B56A-DF9F7998C7CD")]
    public partial class TopoLoader : SharpDX.ComObject
    {
        public TopoLoader(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TopoLoader(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TopoLoader(nativePtr);
        /// <summary>
        /// <p> Creates a fully loaded topology from the input partial topology. </p>
        /// </summary>
        /// <param name = "inputTopoRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.Topology"/></strong> interface of the partial topology to be resolved.</p> </dd></param>
        /// <param name = "outputTopoOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.Topology"/></strong> interface of the completed topology. The caller must release the interface.</p> </dd></param>
        /// <param name = "currentTopoRef"><dd> <p> A reference to the <strong><see cref = "SharpDX.MediaFoundation.Topology"/></strong> interface of the previous full topology. The topology loader can re-use objects from this topology in the new topology. This parameter can be <strong><c>null</c></strong>. See Remarks. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TopoSinkActivatesUnsupported"/></strong></dt> </dl> </td><td> <p>One or more output nodes contain <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> references. The caller must bind the output nodes to media sinks. See  Binding Output Nodes to Media Sinks.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> This method creates any intermediate transforms that are needed to complete the topology. It also sets the input and output media types on all of the objects in the topology. If the method succeeds, the full topology is returned in the <em>ppOutputTopo</em> parameter. </p><p> You can use the <em>pCurrentTopo</em> parameter to provide a full topology that was previously loaded. If this topology contains objects that are needed in the new topology, the topology loader can re-use them without creating them again. This caching can potentially make the process faster. The objects from <em>pCurrentTopo</em> will not be reconfigured, so you can specify a topology that is actively streaming data. For example, while a topology is still running, you can pre-load the next topology. </p><p> Before calling this method, you must ensure that the output nodes in the partial topology have valid <strong><see cref = "SharpDX.MediaFoundation.StreamSink"/></strong> references, not <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> references. The Media Session automatically performs this action inside the <strong>IMFMediaSession::SetTopology</strong> method. However, if you call <strong>Load</strong> before calling <strong>SetTopology</strong>, you must bind the output nodes manually. For more information, see Binding Output Nodes to Media Sinks. </p>
        /// </remarks>
        /// <doc-id>ms693561</doc-id>
        /// <unmanaged>HRESULT IMFTopoLoader::Load([In] IMFTopology* pInputTopo,[Out] IMFTopology** ppOutputTopo,[In] IMFTopology* pCurrentTopo)</unmanaged>
        /// <unmanaged-short>IMFTopoLoader::Load</unmanaged-short>
        public unsafe void Load(SharpDX.MediaFoundation.Topology inputTopoRef, out SharpDX.MediaFoundation.Topology outputTopoOut, SharpDX.MediaFoundation.Topology currentTopoRef)
        {
            System.IntPtr inputTopoRef_ = System.IntPtr.Zero;
            System.IntPtr outputTopoOut_ = System.IntPtr.Zero;
            System.IntPtr currentTopoRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            inputTopoRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Topology>(inputTopoRef);
            currentTopoRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Topology>(currentTopoRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)inputTopoRef_, &outputTopoOut_, (void *)currentTopoRef_, (*(void ***)this._nativePointer)[3]);
            if (outputTopoOut_ != System.IntPtr.Zero)
                outputTopoOut = new SharpDX.MediaFoundation.Topology(outputTopoOut_);
            else
                outputTopoOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("83CF873A-F6DA-4bc8-823F-BACFD55DC433")]
    public partial class Topology : SharpDX.MediaFoundation.MediaAttributes
    {
        public Topology(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Topology(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Topology(nativePtr);
        /// <summary>
        /// <p> Gets the identifier of the topology.</p>
        /// </summary>
        /// <doc-id>ms705620</doc-id>
        /// <unmanaged>GetTopologyID</unmanaged>
        /// <unmanaged-short>GetTopologyID</unmanaged-short>
        public System.Int64 TopologyID
        {
            get
            {
                GetTopologyID(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Gets the number of nodes in the topology. </p>
        /// </summary>
        /// <doc-id>ms700175</doc-id>
        /// <unmanaged>GetNodeCount</unmanaged>
        /// <unmanaged-short>GetNodeCount</unmanaged-short>
        public System.Int16 NodeCount
        {
            get
            {
                GetNodeCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Gets the source nodes in the topology. </p>
        /// </summary>
        /// <doc-id>ms701611</doc-id>
        /// <unmanaged>GetSourceNodeCollection</unmanaged>
        /// <unmanaged-short>GetSourceNodeCollection</unmanaged-short>
        public SharpDX.MediaFoundation.Collection SourceNodeCollection
        {
            get
            {
                GetSourceNodeCollection(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Gets the output nodes in the topology. </p>
        /// </summary>
        /// <doc-id>ms694029</doc-id>
        /// <unmanaged>GetOutputNodeCollection</unmanaged>
        /// <unmanaged-short>GetOutputNodeCollection</unmanaged-short>
        public SharpDX.MediaFoundation.Collection OutputNodeCollection
        {
            get
            {
                GetOutputNodeCollection(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Gets the identifier of the topology.</p>
        /// </summary>
        /// <param name = "iDRef"><dd> <p> Receives the identifier, as a <strong>TOPOID</strong> value. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>ms705620</doc-id>
        /// <unmanaged>HRESULT IMFTopology::GetTopologyID([Out] unsigned longlong* pID)</unmanaged>
        /// <unmanaged-short>IMFTopology::GetTopologyID</unmanaged-short>
        internal unsafe void GetTopologyID(out System.Int64 iDRef)
        {
            SharpDX.Result __result__;
            fixed (void *iDRef_ = &iDRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, iDRef_, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Adds a node to the topology.</p>
        /// </summary>
        /// <param name = "nodeRef"><dd> <p>Pointer to the node's <strong><see cref = "SharpDX.MediaFoundation.TopologyNode"/></strong> interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p><em>pNode</em> is invalid, possibly because the node already exists in the topology.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697365</doc-id>
        /// <unmanaged>HRESULT IMFTopology::AddNode([In] IMFTopologyNode* pNode)</unmanaged>
        /// <unmanaged-short>IMFTopology::AddNode</unmanaged-short>
        public unsafe void AddNode(SharpDX.MediaFoundation.TopologyNode nodeRef)
        {
            System.IntPtr nodeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            nodeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.TopologyNode>(nodeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)nodeRef_, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Removes a node from the topology.</p>
        /// </summary>
        /// <param name = "nodeRef"><dd> <p>Pointer to the node's <strong><see cref = "SharpDX.MediaFoundation.TopologyNode"/></strong> interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>The specified node is not a member of this topology.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method does not destroy the node, so the <strong><see cref = "SharpDX.MediaFoundation.TopologyNode"/></strong> reference is still valid after the method returns.</p><p>The method breaks any connections between the specified node and other nodes.</p>
        /// </remarks>
        /// <doc-id>ms694226</doc-id>
        /// <unmanaged>HRESULT IMFTopology::RemoveNode([In] IMFTopologyNode* pNode)</unmanaged>
        /// <unmanaged-short>IMFTopology::RemoveNode</unmanaged-short>
        public unsafe void RemoveNode(SharpDX.MediaFoundation.TopologyNode nodeRef)
        {
            System.IntPtr nodeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            nodeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.TopologyNode>(nodeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)nodeRef_, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the number of nodes in the topology. </p>
        /// </summary>
        /// <param name = "wNodesRef"><dd> <p> Receives the number of nodes. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>ms700175</doc-id>
        /// <unmanaged>HRESULT IMFTopology::GetNodeCount([Out] unsigned short* pwNodes)</unmanaged>
        /// <unmanaged-short>IMFTopology::GetNodeCount</unmanaged-short>
        internal unsafe void GetNodeCount(out System.Int16 wNodesRef)
        {
            SharpDX.Result __result__;
            fixed (void *wNodesRef_ = &wNodesRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, wNodesRef_, (*(void ***)this._nativePointer)[36]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets a node in the topology, specified by index. </p>
        /// </summary>
        /// <param name = "wIndex"><dd> <p> The zero-based index of the node. To get the number of nodes in the topology, call <strong>IMFTopology::GetNodeCount</strong>. </p> </dd></param>
        /// <param name = "nodeOut"><dd> <p> Receives a reference to the node's <strong><see cref = "SharpDX.MediaFoundation.TopologyNode"/></strong> interface. The caller must release the reference. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p> The index is less than zero. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidIndex"/></strong></dt> </dl> </td><td> <p> No node can be found at the index <em>wIndex</em>. </p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms701569</doc-id>
        /// <unmanaged>HRESULT IMFTopology::GetNode([In] unsigned short wIndex,[Out] IMFTopologyNode** ppNode)</unmanaged>
        /// <unmanaged-short>IMFTopology::GetNode</unmanaged-short>
        public unsafe void GetNode(System.Int16 wIndex, out SharpDX.MediaFoundation.TopologyNode nodeOut)
        {
            System.IntPtr nodeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, wIndex, &nodeOut_, (*(void ***)this._nativePointer)[37]);
            if (nodeOut_ != System.IntPtr.Zero)
                nodeOut = new SharpDX.MediaFoundation.TopologyNode(nodeOut_);
            else
                nodeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Removes all nodes from the topology.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You do not need to clear a topology before disposing of it. The <strong>Clear</strong> method is called automatically when the topology is destroyed.</p>
        /// </remarks>
        /// <doc-id>ms700800</doc-id>
        /// <unmanaged>HRESULT IMFTopology::Clear()</unmanaged>
        /// <unmanaged-short>IMFTopology::Clear</unmanaged-short>
        public unsafe void Clear()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[38]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Converts this topology into a copy of another topology. </p>
        /// </summary>
        /// <param name = "topologyRef"><dd> <p> A reference to the <strong><see cref = "SharpDX.MediaFoundation.Topology"/></strong> interface of the topology to clone. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method does the following:</p><ul> <li> Removes all of the nodes from this topology. </li> <li> Clones the nodes from <em>pTopology</em> and adds them to this topology. The cloned nodes have the same node identifiers as the nodes from <em>pTopology</em>. </li> <li> Connects the cloned nodes to match the connections in <em>pTopology</em>. </li> <li> Copies the attributes from <em>pTopology</em> to this topology. </li> <li> Copies the topology identifier from <em>pTopology</em> to this topology.</li> </ul>
        /// </remarks>
        /// <doc-id>ms702242</doc-id>
        /// <unmanaged>HRESULT IMFTopology::CloneFrom([In, Optional] IMFTopology* pTopology)</unmanaged>
        /// <unmanaged-short>IMFTopology::CloneFrom</unmanaged-short>
        public unsafe void CloneFrom(SharpDX.MediaFoundation.Topology topologyRef)
        {
            System.IntPtr topologyRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            topologyRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Topology>(topologyRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)topologyRef_, (*(void ***)this._nativePointer)[39]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a node in the topology, specified by node identifier.</p>
        /// </summary>
        /// <param name = "qwTopoNodeID"><dd> <p> The identifier of the node to retrieve. To get a node's identifier, call <strong>IMFTopologyNode::GetTopoNodeID</strong>. </p> </dd></param>
        /// <param name = "nodeOut"><dd> <p> Receives a reference to the node's <strong><see cref = "SharpDX.MediaFoundation.TopologyNode"/></strong> interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotFound"/></strong></dt> </dl> </td><td> <p> The topology does not contain a node with this identifier. </p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms696224</doc-id>
        /// <unmanaged>HRESULT IMFTopology::GetNodeByID([In] unsigned longlong qwTopoNodeID,[Out] IMFTopologyNode** ppNode)</unmanaged>
        /// <unmanaged-short>IMFTopology::GetNodeByID</unmanaged-short>
        public unsafe void GetNodeByID(System.Int64 qwTopoNodeID, out SharpDX.MediaFoundation.TopologyNode nodeOut)
        {
            System.IntPtr nodeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, qwTopoNodeID, &nodeOut_, (*(void ***)this._nativePointer)[40]);
            if (nodeOut_ != System.IntPtr.Zero)
                nodeOut = new SharpDX.MediaFoundation.TopologyNode(nodeOut_);
            else
                nodeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the source nodes in the topology. </p>
        /// </summary>
        /// <param name = "collectionOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.Collection"/></strong> interface. The caller must release the reference. The collection contains <strong><see cref = "SharpDX.IUnknown"/></strong> references to all of the source nodes in the topology. Each reference can be queried for the <strong><see cref = "SharpDX.MediaFoundation.TopologyNode"/></strong> interface. The collection might be empty.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>ms701611</doc-id>
        /// <unmanaged>HRESULT IMFTopology::GetSourceNodeCollection([Out] IMFCollection** ppCollection)</unmanaged>
        /// <unmanaged-short>IMFTopology::GetSourceNodeCollection</unmanaged-short>
        internal unsafe void GetSourceNodeCollection(out SharpDX.MediaFoundation.Collection collectionOut)
        {
            System.IntPtr collectionOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &collectionOut_, (*(void ***)this._nativePointer)[41]);
            if (collectionOut_ != System.IntPtr.Zero)
                collectionOut = new SharpDX.MediaFoundation.Collection(collectionOut_);
            else
                collectionOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the output nodes in the topology. </p>
        /// </summary>
        /// <param name = "collectionOut"><dd> <p> Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.Collection"/></strong> interface. The caller must release the reference. The collection contains <strong><see cref = "SharpDX.IUnknown"/></strong> references to all of the output nodes in the topology. Each reference can be queried for the <strong><see cref = "SharpDX.MediaFoundation.TopologyNode"/></strong> interface. The collection might be empty. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>ms694029</doc-id>
        /// <unmanaged>HRESULT IMFTopology::GetOutputNodeCollection([Out] IMFCollection** ppCollection)</unmanaged>
        /// <unmanaged-short>IMFTopology::GetOutputNodeCollection</unmanaged-short>
        internal unsafe void GetOutputNodeCollection(out SharpDX.MediaFoundation.Collection collectionOut)
        {
            System.IntPtr collectionOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &collectionOut_, (*(void ***)this._nativePointer)[42]);
            if (collectionOut_ != System.IntPtr.Zero)
                collectionOut = new SharpDX.MediaFoundation.Collection(collectionOut_);
            else
                collectionOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("83CF873A-F6DA-4bc8-823F-BACFD55DC430")]
    public partial class TopologyNode : SharpDX.MediaFoundation.MediaAttributes
    {
        public TopologyNode(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TopologyNode(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TopologyNode(nativePtr);
        /// <summary>
        /// <p> </p><p>Sets the object associated with this node.</p>
        /// </summary>
        /// <remarks>
        /// <p>All node types support this method, but the object reference is not used by every node type.</p><table> <tr><th>Node type</th><th>Object reference</th></tr> <tr><td>Source node.</td><td>Not used.</td></tr> <tr><td>Transform node.</td><td> <strong><see cref = "SharpDX.MediaFoundation.Transform"/></strong> or <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> interface.</td></tr> <tr><td>Output node</td><td> <strong><see cref = "SharpDX.MediaFoundation.StreamSink"/></strong> or <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> interface.</td></tr> <tr><td>Tee node.</td><td>Not used.</td></tr> </table><p>?</p><p>If the object supports <strong><see cref = "SharpDX.ComPersistBase"/></strong>, <strong>IPersistStorage</strong>, or <strong>IPersistPropertyBag</strong>, the method gets the object's CLSID and sets the <strong><see cref = "TransformObjectid"/></strong> attribute on the node.</p>
        /// </remarks>
        /// <doc-id>ms702992</doc-id>
        /// <unmanaged>SetObject</unmanaged>
        /// <unmanaged-short>SetObject</unmanaged-short>
        public SharpDX.IUnknown Object
        {
            set => SetObject(value);
        }

        /// <summary>
        /// <p> Gets the object associated with this node. </p>
        /// </summary>
        /// <doc-id>ms693569</doc-id>
        /// <unmanaged>GetObjectW</unmanaged>
        /// <unmanaged-short>GetObjectW</unmanaged-short>
        public SharpDX.IUnknown ObjectW
        {
            get
            {
                GetObjectW(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the node type.</p>
        /// </summary>
        /// <doc-id>ms697514</doc-id>
        /// <unmanaged>GetNodeType</unmanaged>
        /// <unmanaged-short>GetNodeType</unmanaged-short>
        public SharpDX.MediaFoundation.TopologyType NodeType
        {
            get
            {
                GetNodeType(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Retrieves or sets the identifier of the node.</p>
        /// </summary>
        /// <remarks>
        /// <p> When a node is first created, it is assigned an identifier. Node identifiers are unique within a topology, but can be reused across several topologies. The topology loader uses the identifier to look up nodes in the previous topology, so that it can reuse objects from the previous topology. </p><p> To find a node in a topology by its identifier, call <strong>IMFTopology::GetNodeByID</strong>. </p>
        /// </remarks>
        /// <doc-id>ms701602</doc-id>
        /// <unmanaged>GetTopoNodeID / SetTopoNodeID</unmanaged>
        /// <unmanaged-short>GetTopoNodeID</unmanaged-short>
        public System.Int64 TopoNodeID
        {
            get
            {
                GetTopoNodeID(out var __output__);
                return __output__;
            }

            set => SetTopoNodeID(value);
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of input streams that currently exist on this node.</p>
        /// </summary>
        /// <remarks>
        /// <p>The input streams may or may not be connected to output streams on other nodes. To get the node that is connected to a specified input stream, call <strong>IMFTopologyNode::GetInput</strong>.</p><p>The <strong>IMFTopologyNode::ConnectOutput</strong> and <strong>IMFTopologyNode::SetInputPrefType</strong> methods add new input streams as needed.</p>
        /// </remarks>
        /// <doc-id>ms700165</doc-id>
        /// <unmanaged>GetInputCount</unmanaged>
        /// <unmanaged-short>GetInputCount</unmanaged-short>
        public System.Int32 InputCount
        {
            get
            {
                GetInputCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of output streams that currently exist on this node.</p>
        /// </summary>
        /// <remarks>
        /// <p>The output streams may or may not be connected to input streams on other nodes. To get the node that is connected to a specific output stream on this node, call <strong>IMFTopologyNode::GetOutput</strong>.</p><p>The <strong>IMFTopologyNode::ConnectOutput</strong> and <strong>IMFTopologyNode::SetOutputPrefType</strong> methods add new input streams as needed.</p>
        /// </remarks>
        /// <doc-id>ms704019</doc-id>
        /// <unmanaged>GetOutputCount</unmanaged>
        /// <unmanaged-short>GetOutputCount</unmanaged-short>
        public System.Int32 OutputCount
        {
            get
            {
                GetOutputCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Sets the object associated with this node.</p>
        /// </summary>
        /// <param name = "objectRef"><dd> <p>A reference to the object's <strong><see cref = "SharpDX.IUnknown"/></strong> interface. Use the value <strong><c>null</c></strong> to clear an object that was previous set.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>All node types support this method, but the object reference is not used by every node type.</p><table> <tr><th>Node type</th><th>Object reference</th></tr> <tr><td>Source node.</td><td>Not used.</td></tr> <tr><td>Transform node.</td><td> <strong><see cref = "SharpDX.MediaFoundation.Transform"/></strong> or <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> interface.</td></tr> <tr><td>Output node</td><td> <strong><see cref = "SharpDX.MediaFoundation.StreamSink"/></strong> or <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> interface.</td></tr> <tr><td>Tee node.</td><td>Not used.</td></tr> </table><p>?</p><p>If the object supports <strong><see cref = "SharpDX.ComPersistBase"/></strong>, <strong>IPersistStorage</strong>, or <strong>IPersistPropertyBag</strong>, the method gets the object's CLSID and sets the <strong><see cref = "TransformObjectid"/></strong> attribute on the node.</p>
        /// </remarks>
        /// <doc-id>ms702992</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::SetObject([In, Optional] IUnknown* pObject)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::SetObject</unmanaged-short>
        internal unsafe void SetObject(SharpDX.IUnknown objectRef)
        {
            System.IntPtr objectRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            objectRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(objectRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)objectRef_, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the object associated with this node. </p>
        /// </summary>
        /// <param name = "objectOut"><dd> <p> Receives a reference to the object's <strong><see cref = "SharpDX.IUnknown"/></strong> interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_FAIL</strong></dt> </dl> </td><td> <p> There is no object associated with this node. </p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms693569</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::GetObjectW([Out] IUnknown** ppObject)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::GetObjectW</unmanaged-short>
        internal unsafe void GetObjectW(out SharpDX.IUnknown objectOut)
        {
            System.IntPtr objectOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &objectOut_, (*(void ***)this._nativePointer)[34]);
            if (objectOut_ != System.IntPtr.Zero)
                objectOut = new SharpDX.ComObject(objectOut_);
            else
                objectOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the node type.</p>
        /// </summary>
        /// <param name = "typeRef"><dd> <p>Receives the node type, specified as a member of the <strong><see cref = "SharpDX.MediaFoundation.TopologyType"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697514</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::GetNodeType([Out] MF_TOPOLOGY_TYPE* pType)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::GetNodeType</unmanaged-short>
        internal unsafe void GetNodeType(out SharpDX.MediaFoundation.TopologyType typeRef)
        {
            SharpDX.Result __result__;
            fixed (void *typeRef_ = &typeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, typeRef_, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Retrieves the identifier of the node.</p>
        /// </summary>
        /// <param name = "iDRef"><dd> <p>Receives the identifier.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> When a node is first created, it is assigned an identifier. Node identifiers are unique within a topology, but can be reused across several topologies. The topology loader uses the identifier to look up nodes in the previous topology, so that it can reuse objects from the previous topology. </p><p> To find a node in a topology by its identifier, call <strong>IMFTopology::GetNodeByID</strong>. </p>
        /// </remarks>
        /// <doc-id>ms701602</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::GetTopoNodeID([Out] unsigned longlong* pID)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::GetTopoNodeID</unmanaged-short>
        internal unsafe void GetTopoNodeID(out System.Int64 iDRef)
        {
            SharpDX.Result __result__;
            fixed (void *iDRef_ = &iDRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, iDRef_, (*(void ***)this._nativePointer)[36]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Sets the identifier for the node.</p>
        /// </summary>
        /// <param name = "ullTopoID"><dd> <p> The identifier for the node. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p> The <strong>TOPOID</strong> has already been set for this object. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> When a node is first created, it is assigned an identifier. Typically there is no reason for an application to override the identifier. Within a topology, each node identifier should be unique. </p>
        /// </remarks>
        /// <doc-id>bb970438</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::SetTopoNodeID([In] unsigned longlong ullTopoID)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::SetTopoNodeID</unmanaged-short>
        internal unsafe void SetTopoNodeID(System.Int64 ullTopoID)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, ullTopoID, (*(void ***)this._nativePointer)[37]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of input streams that currently exist on this node.</p>
        /// </summary>
        /// <param name = "cInputsRef"><dd> <p>Receives the number of input streams.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The input streams may or may not be connected to output streams on other nodes. To get the node that is connected to a specified input stream, call <strong>IMFTopologyNode::GetInput</strong>.</p><p>The <strong>IMFTopologyNode::ConnectOutput</strong> and <strong>IMFTopologyNode::SetInputPrefType</strong> methods add new input streams as needed.</p>
        /// </remarks>
        /// <doc-id>ms700165</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::GetInputCount([Out] DWORD* pcInputs)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::GetInputCount</unmanaged-short>
        internal unsafe void GetInputCount(out System.Int32 cInputsRef)
        {
            SharpDX.Result __result__;
            fixed (void *cInputsRef_ = &cInputsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cInputsRef_, (*(void ***)this._nativePointer)[38]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the number of output streams that currently exist on this node.</p>
        /// </summary>
        /// <param name = "cOutputsRef"><dd> <p>Receives the number of output streams.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The output streams may or may not be connected to input streams on other nodes. To get the node that is connected to a specific output stream on this node, call <strong>IMFTopologyNode::GetOutput</strong>.</p><p>The <strong>IMFTopologyNode::ConnectOutput</strong> and <strong>IMFTopologyNode::SetOutputPrefType</strong> methods add new input streams as needed.</p>
        /// </remarks>
        /// <doc-id>ms704019</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::GetOutputCount([Out] DWORD* pcOutputs)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::GetOutputCount</unmanaged-short>
        internal unsafe void GetOutputCount(out System.Int32 cOutputsRef)
        {
            SharpDX.Result __result__;
            fixed (void *cOutputsRef_ = &cOutputsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cOutputsRef_, (*(void ***)this._nativePointer)[39]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Connects an output stream from this node to the input stream of another node.</p>
        /// </summary>
        /// <param name = "dwOutputIndex"><dd> <p>Zero-based index of the output stream on this node.</p> </dd></param>
        /// <param name = "downstreamNodeRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.TopologyNode"/></strong> interface of the node to connect to.</p> </dd></param>
        /// <param name = "dwInputIndexOnDownstreamNode"><dd> <p>Zero-based index of the input stream on the other node.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_FAIL</strong></dt> </dl> </td><td> <p>The method failed.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid parameter.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Node connections represent data flow from one node to the next. The streams are logical, and are specified by index.</p><p>If the node is already connected at the specified output, the method breaks the existing connection. If <em>dwOutputIndex</em> or <em>dwInputIndexOnDownstreamNode</em> specify streams that do not exist yet, the method adds as many streams as needed.</p><p>This method checks for certain invalid conditions:</p><ul> <li> <p>An output node cannot have any output connections. If you call this method on an output node, the method returns E_FAIL.</p> </li> <li> <p>A node cannot be connected to itself. If <em>pDownstreamNode</em> specifies the same node as the method call, the method returns E_INVALIDARG.</p> </li> </ul><p>However, if the method succeeds, it does not guarantee that the node connection is valid. It is possible to create a partial topology that the topology loader cannot resolve. If so, the <strong>IMFTopoLoader::Load</strong> method will fail.</p><p>To break an existing node connection, call <strong>IMFTopologyNode::DisconnectOutput</strong>.</p>
        /// </remarks>
        /// <doc-id>ms695284</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::ConnectOutput([In] DWORD dwOutputIndex,[In] IMFTopologyNode* pDownstreamNode,[In] DWORD dwInputIndexOnDownstreamNode)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::ConnectOutput</unmanaged-short>
        public unsafe void ConnectOutput(System.Int32 dwOutputIndex, SharpDX.MediaFoundation.TopologyNode downstreamNodeRef, System.Int32 dwInputIndexOnDownstreamNode)
        {
            System.IntPtr downstreamNodeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            downstreamNodeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.TopologyNode>(downstreamNodeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputIndex, (void *)downstreamNodeRef_, dwInputIndexOnDownstreamNode, (*(void ***)this._nativePointer)[40]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Disconnects an output stream on this node.</p>
        /// </summary>
        /// <param name = "dwOutputIndex"><dd> <p>Zero-based index of the output stream to disconnect.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>The <em>dwOutputIndex</em> parameter is out of range.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotFound"/></strong></dt> </dl> </td><td> <p>The specified output stream is not connected to another node.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If the specified output stream is connected to another node, this method breaks the connection.</p>
        /// </remarks>
        /// <doc-id>ms698991</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::DisconnectOutput([In] DWORD dwOutputIndex)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::DisconnectOutput</unmanaged-short>
        public unsafe void DisconnectOutput(System.Int32 dwOutputIndex)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputIndex, (*(void ***)this._nativePointer)[41]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the node that is connected to a specified input stream on this node.</p>
        /// </summary>
        /// <param name = "dwInputIndex"><dd> <p>Zero-based index of an input stream on this node.</p> </dd></param>
        /// <param name = "upstreamNodeOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.TopologyNode"/></strong> interface of the node that is connected to the specified input stream. The caller must release the interface.</p> </dd></param>
        /// <param name = "dwOutputIndexOnUpstreamNodeRef"><dd> <p>Receives the index of the output stream that is connected to this node's input stream.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>The index is out of range.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotFound"/></strong></dt> </dl> </td><td> <p>The specified input stream is not connected to another node.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms697020</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::GetInput([In] DWORD dwInputIndex,[Out] IMFTopologyNode** ppUpstreamNode,[Out] DWORD* pdwOutputIndexOnUpstreamNode)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::GetInput</unmanaged-short>
        public unsafe void GetInput(System.Int32 dwInputIndex, out SharpDX.MediaFoundation.TopologyNode upstreamNodeOut, out System.Int32 dwOutputIndexOnUpstreamNodeRef)
        {
            System.IntPtr upstreamNodeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (void *dwOutputIndexOnUpstreamNodeRef_ = &dwOutputIndexOnUpstreamNodeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputIndex, &upstreamNodeOut_, dwOutputIndexOnUpstreamNodeRef_, (*(void ***)this._nativePointer)[42]);
            if (upstreamNodeOut_ != System.IntPtr.Zero)
                upstreamNodeOut = new SharpDX.MediaFoundation.TopologyNode(upstreamNodeOut_);
            else
                upstreamNodeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the node that is connected to a specified output stream on this node.</p>
        /// </summary>
        /// <param name = "dwOutputIndex"><dd> <p>Zero-based index of an output stream on this node.</p> </dd></param>
        /// <param name = "downstreamNodeOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.TopologyNode"/></strong> interface of the node that is connected to the specified output stream. The caller must release the interface.</p> </dd></param>
        /// <param name = "dwInputIndexOnDownstreamNodeRef"><dd> <p>Receives the index of the input stream that is connected to this node's output stream.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>The index is out of range.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotFound"/></strong></dt> </dl> </td><td> <p>The specified input stream is not connected to another node.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970327</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::GetOutput([In] DWORD dwOutputIndex,[Out] IMFTopologyNode** ppDownstreamNode,[Out] DWORD* pdwInputIndexOnDownstreamNode)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::GetOutput</unmanaged-short>
        public unsafe void GetOutput(System.Int32 dwOutputIndex, out SharpDX.MediaFoundation.TopologyNode downstreamNodeOut, out System.Int32 dwInputIndexOnDownstreamNodeRef)
        {
            System.IntPtr downstreamNodeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            fixed (void *dwInputIndexOnDownstreamNodeRef_ = &dwInputIndexOnDownstreamNodeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputIndex, &downstreamNodeOut_, dwInputIndexOnDownstreamNodeRef_, (*(void ***)this._nativePointer)[43]);
            if (downstreamNodeOut_ != System.IntPtr.Zero)
                downstreamNodeOut = new SharpDX.MediaFoundation.TopologyNode(downstreamNodeOut_);
            else
                downstreamNodeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the preferred media type for an output stream on this node.</p>
        /// </summary>
        /// <param name = "dwOutputIndex"><dd> <p>Zero-based index of the output stream.</p> </dd></param>
        /// <param name = "typeRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of the media type.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p>This node is an output node.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The preferred type is a hint for the topology loader.</p><p>Do not call this method after loading a topology or setting a topology on the Media Session. Changing the preferred type on a running topology can cause connection errors.</p><p>If no output stream exists at the specified index, the method creates new streams up to and including the specified index number.</p><p>Output nodes cannot have outputs. If this method is called on an output node, it returns E_NOTIMPL</p>
        /// </remarks>
        /// <doc-id>ms701546</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::SetOutputPrefType([In] DWORD dwOutputIndex,[In] IMFMediaType* pType)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::SetOutputPrefType</unmanaged-short>
        public unsafe void SetOutputPrefType(System.Int32 dwOutputIndex, SharpDX.MediaFoundation.MediaType typeRef)
        {
            System.IntPtr typeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            typeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(typeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputIndex, (void *)typeRef_, (*(void ***)this._nativePointer)[44]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the preferred media type for an output stream on this node.</p>
        /// </summary>
        /// <param name = "dwOutputIndex"><dd> <p>Zero-based index of the output stream.</p> </dd></param>
        /// <param name = "typeOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of the media type. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_FAIL</strong></dt> </dl> </td><td> <p>This node does not have a preferred output type.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid stream index.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p>This node is an output node.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Output nodes cannot have outputs. If this method is called on an output node, it returns E_NOTIMPL.</p><p>The preferred output type provides a hint to the topology loader. In a fully resolved topology, there is no guarantee that every topology node will have a preferred output type. To get the actual media type for a node, you must get a reference to the node's underlying object. (For more information, see <strong><see cref = "SharpDX.MediaFoundation.TopologyType"/></strong> enumeration.)</p>
        /// </remarks>
        /// <doc-id>ms701571</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::GetOutputPrefType([In] DWORD dwOutputIndex,[Out] IMFMediaType** ppType)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::GetOutputPrefType</unmanaged-short>
        public unsafe void GetOutputPrefType(System.Int32 dwOutputIndex, out SharpDX.MediaFoundation.MediaType typeOut)
        {
            System.IntPtr typeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputIndex, &typeOut_, (*(void ***)this._nativePointer)[45]);
            if (typeOut_ != System.IntPtr.Zero)
                typeOut = new SharpDX.MediaFoundation.MediaType(typeOut_);
            else
                typeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the preferred media type for an input stream on this node.</p>
        /// </summary>
        /// <param name = "dwInputIndex"><dd> <p>Zero-based index of the input stream.</p> </dd></param>
        /// <param name = "typeRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of the media type.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p>This node is a source node.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The preferred type is a hint for the topology loader.</p><p>Do not call this method after loading a topology or setting a topology on the Media Session. Changing the preferred type on a running topology can cause connection errors.</p><p>If no input stream exists at the specified index, the method creates new streams up to and including the specified index number.</p><p>Source nodes cannot have inputs. If this method is called on a source node, it returns E_NOTIMPL.</p>
        /// </remarks>
        /// <doc-id>ms696223</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::SetInputPrefType([In] DWORD dwInputIndex,[In] IMFMediaType* pType)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::SetInputPrefType</unmanaged-short>
        public unsafe void SetInputPrefType(System.Int32 dwInputIndex, SharpDX.MediaFoundation.MediaType typeRef)
        {
            System.IntPtr typeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            typeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(typeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputIndex, (void *)typeRef_, (*(void ***)this._nativePointer)[46]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the preferred media type for an input stream on this node.</p>
        /// </summary>
        /// <param name = "dwInputIndex"><dd> <p>Zero-based index of the input stream.</p> </dd></param>
        /// <param name = "typeOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of the media type. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_FAIL</strong></dt> </dl> </td><td> <p>This node does not have a preferred input type.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid stream index.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p>This node is a source node.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Source nodes cannot have inputs. If this method is called on a source node, it returns E_NOTIMPL.</p><p>The preferred input type provides a hint to the topology loader. In a fully resolved topology, there is no guarantee that every topology node will have a preferred input type. To get the actual media type for a node, you must get a reference to the node's underlying object. (For more information, see <strong><see cref = "SharpDX.MediaFoundation.TopologyType"/></strong> enumeration.)</p>
        /// </remarks>
        /// <doc-id>ms696221</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::GetInputPrefType([In] DWORD dwInputIndex,[Out] IMFMediaType** ppType)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::GetInputPrefType</unmanaged-short>
        public unsafe void GetInputPrefType(System.Int32 dwInputIndex, out SharpDX.MediaFoundation.MediaType typeOut)
        {
            System.IntPtr typeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputIndex, &typeOut_, (*(void ***)this._nativePointer)[47]);
            if (typeOut_ != System.IntPtr.Zero)
                typeOut = new SharpDX.MediaFoundation.MediaType(typeOut_);
            else
                typeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Copies the data from another topology node into this node.</p>
        /// </summary>
        /// <param name = "nodeRef"><dd> <p> A reference to the <strong><see cref = "SharpDX.MediaFoundation.TopologyNode"/></strong> interface of the node to copy. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p> The node types do not match. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> The two nodes must have the same node type. To get the node type, call <strong>IMFTopologyNode::GetNodeType</strong>. </p><p> This method copies the object reference, preferred types, and attributes from <em>pNode</em> to this node. It also copies the <strong>TOPOID</strong> that uniquely identifies each node in a topology. It does not duplicate any of the connections from <em>pNode</em> to other nodes. </p><p> The purpose of this method is to copy nodes from one topology to another. Do not use duplicate nodes within the same topology. </p>
        /// </remarks>
        /// <doc-id>ms700790</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNode::CloneFrom([In, Optional] IMFTopologyNode* pNode)</unmanaged>
        /// <unmanaged-short>IMFTopologyNode::CloneFrom</unmanaged-short>
        public unsafe void CloneFrom(SharpDX.MediaFoundation.TopologyNode nodeRef)
        {
            System.IntPtr nodeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            nodeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.TopologyNode>(nodeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)nodeRef_, (*(void ***)this._nativePointer)[48]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("676aa6dd-238a-410d-bb99-65668d01605a")]
    public partial class TopologyNodeAttributeEditor : SharpDX.ComObject
    {
        public TopologyNodeAttributeEditor(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TopologyNodeAttributeEditor(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TopologyNodeAttributeEditor(nativePtr);
        /// <summary>
        /// <p> </p><p>Updates the attributes of one or more nodes in the current topology.</p>
        /// </summary>
        /// <param name = "topoId"><dd> <p>Reserved.</p> </dd></param>
        /// <param name = "cUpdates"><dd> <p>The number of elements in the <em>pUpdates</em> array.</p> </dd></param>
        /// <param name = "updatesRef"><dd> <p>Pointer to an array of <strong><see cref = "SharpDX.MediaFoundation.ToponodeAttributeUpdate"/></strong> structures. Each element of the array updates one attribute on a node.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Currently the only attribute that can be updated is the <strong><see cref = "Mediastop"/></strong> attribute. The method ignores any other attributes.</p>
        /// </remarks>
        /// <doc-id>aa371868</doc-id>
        /// <unmanaged>HRESULT IMFTopologyNodeAttributeEditor::UpdateNodeAttributes([In] unsigned longlong TopoId,[In] DWORD cUpdates,[In, Buffer] MFTOPONODE_ATTRIBUTE_UPDATE* pUpdates)</unmanaged>
        /// <unmanaged-short>IMFTopologyNodeAttributeEditor::UpdateNodeAttributes</unmanaged-short>
        public unsafe void UpdateNodeAttributes(System.Int64 topoId, System.Int32 cUpdates, SharpDX.MediaFoundation.ToponodeAttributeUpdate[] updatesRef)
        {
            SharpDX.Result __result__;
            fixed (void *updatesRef_ = updatesRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, topoId, cUpdates, updatesRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("fa993889-4383-415a-a930-dd472a8cf6f7")]
    public partial class TopologyServiceLookup : SharpDX.ComObject
    {
        public TopologyServiceLookup(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TopologyServiceLookup(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TopologyServiceLookup(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves an interface from the enhanced video renderer (EVR), or from the video mixer or video presenter.</p>
        /// </summary>
        /// <param name = "type"><dd> <p>Specifies the scope of the search. Currently this parameter is ignored. Use the value MF_SERVICE_LOOKUP_GLOBAL.</p> </dd></param>
        /// <param name = "dwIndex"><dd> <p>Reserved, must be zero.</p> </dd></param>
        /// <param name = "guidService"><dd> <p>Service <see cref = "System.Guid"/> of the requested interface.</p> </dd></param>
        /// <param name = "riid"><dd> <p>Interface identifier of the requested interface.</p> </dd></param>
        /// <param name = "vObjectsOut"><dd> <p>Array of interface references. If the method succeeds, each member of the array contains either a valid interface reference or <strong><c>null</c></strong>. The caller must release the interface references when the EVR calls <strong>IMFTopologyServiceLookupClient::ReleaseServicePointers</strong> (or earlier). If the method fails, every member of the array is <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "nObjectsRef"><dd> <p>Pointer to a value that specifies the size of the <em>ppvObjects</em> array. The value must be at least 1. In the current implementation, there is no reason to specify an array size larger than one element. The value is not changed on output.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid argument.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOINTERFACE</strong></dt> </dl> </td><td> <p>The requested interface is not available.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotAccepting"/></strong></dt> </dl> </td><td> <p>The method was not called from inside the <strong>IMFTopologyServiceLookupClient::InitServicePointers</strong> method. See Remarks.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedService"/></strong></dt> </dl> </td><td> <p>The object does not support the specified service <see cref = "System.Guid"/>.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method can be called only from inside the <strong>IMFTopologyServiceLookupClient::InitServicePointers</strong> method. At any other time, the method returns <see cref = "NotAccepting"/>.</p><p>The presenter can use this method to query the EVR and the mixer. The mixer can use it to query the EVR and the presenter. Which objects are queried depends on the caller and the service <see cref = "System.Guid"/>, as shown in the following table.</p><table> <tr><th>Caller</th><th>Service <see cref = "System.Guid"/></th><th>Objects queried</th></tr> <tr><td>Presenter</td><td>MR_VIDEO_RENDER_SERVICE</td><td>EVR</td></tr> <tr><td>Presenter</td><td>MR_VIDEO_MIXER_SERVICE</td><td>Mixer</td></tr> <tr><td>Mixer</td><td>MR_VIDEO_RENDER_SERVICE</td><td>Presenter and EVR</td></tr> </table><p>?</p><p>The following interfaces are available from the EVR:</p><ul> <li> <p><strong>IMediaEventSink</strong>. This interface is documented in the DirectShow SDK documentation.</p> </li> <li> <p> <strong><see cref = "SharpDX.MediaFoundation.Clock"/></strong> interface. This interface is available if the EVR has access to a clock (reference clock in DirectShow or presentation clock in Media Foundation). This interface might not be available. Presenter and mixers must be able to process data without a clock. If the <strong><see cref = "SharpDX.MediaFoundation.Clock"/></strong> interface is available, you can also get these related interfaces:</p> <ul> <li> <p> <strong><see cref = "SharpDX.MediaFoundation.Timer"/></strong> </p> </li> <li> <p> <strong><see cref = "SharpDX.MediaFoundation.PresentationClock"/></strong> (Media Foundation EVR only)</p> </li> </ul> </li> </ul><p>The following interfaces are available from the mixer:</p><ul> <li> <p> <strong><see cref = "SharpDX.MediaFoundation.Transform"/></strong> </p> </li> <li> <p> <strong><see cref = "SharpDX.MediaFoundation.VideoDeviceID"/></strong> </p> </li> </ul>
        /// </remarks>
        /// <doc-id>bb970504</doc-id>
        /// <unmanaged>HRESULT IMFTopologyServiceLookup::LookupService([In] MF_SERVICE_LOOKUP_TYPE Type,[In] DWORD dwIndex,[In] const GUID&amp; guidService,[In] const GUID&amp; riid,[Out, Buffer] void** ppvObjects,[InOut] DWORD* pnObjects)</unmanaged>
        /// <unmanaged-short>IMFTopologyServiceLookup::LookupService</unmanaged-short>
        public unsafe void LookupService(SharpDX.MediaFoundation.ServiceLookupType type, System.Int32 dwIndex, System.Guid guidService, System.Guid riid, System.IntPtr vObjectsOut, ref System.Int32 nObjectsRef)
        {
            SharpDX.Result __result__;
            fixed (void *nObjectsRef_ = &nObjectsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)type), dwIndex, &guidService, &riid, (void *)vObjectsOut, nObjectsRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("fa99388a-4383-415a-a930-dd472a8cf6f7")]
    public partial class TopologyServiceLookupClient : SharpDX.ComObject
    {
        public TopologyServiceLookupClient(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TopologyServiceLookupClient(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TopologyServiceLookupClient(nativePtr);
        /// <summary>
        /// <p> </p><p>Signals the mixer or presenter to query the enhanced video renderer (EVR) for interface references.</p>
        /// </summary>
        /// <param name = "lookupRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.TopologyServiceLookup"/></strong> interface. To query the EVR for an interface, call <strong>IMFTopologyServiceLookup::LookupService</strong>.</p> </dd></param>
        /// <returns><p>The method returns an <see cref = "SharpDX.Result"/>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The <strong><see cref = "SharpDX.MediaFoundation.TopologyServiceLookup"/></strong> reference is guaranteed to be valid only during the call to <strong>InitServicePointers</strong>. The mixer or presenter should not store a reference to this interface after the method returns.</p><p>When the EVR calls <strong>IMFTopologyServiceLookupClient::ReleaseServicePointers</strong>, the mixer or presenter should release any references it obtained from the EVR.</p>
        /// </remarks>
        /// <doc-id>bb970502</doc-id>
        /// <unmanaged>HRESULT IMFTopologyServiceLookupClient::InitServicePointers([In] IMFTopologyServiceLookup* pLookup)</unmanaged>
        /// <unmanaged-short>IMFTopologyServiceLookupClient::InitServicePointers</unmanaged-short>
        public unsafe void InitServicePointers(SharpDX.MediaFoundation.TopologyServiceLookup lookupRef)
        {
            System.IntPtr lookupRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            lookupRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.TopologyServiceLookup>(lookupRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)lookupRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Signals the object to release the interface references obtained from the enhanced video renderer (EVR).</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>After this method is called, any interface references obtained during the previous call to <strong>IMFTopologyServiceLookupClient::InitServicePointers</strong> are no longer valid. The object must release them.</p>
        /// </remarks>
        /// <doc-id>ms693584</doc-id>
        /// <unmanaged>HRESULT IMFTopologyServiceLookupClient::ReleaseServicePointers()</unmanaged>
        /// <unmanaged-short>IMFTopologyServiceLookupClient::ReleaseServicePointers</unmanaged-short>
        public unsafe void ReleaseServicePointers()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("245BF8E9-0755-40f7-88A5-AE0F18D55E17")]
    public partial class TrackedSample : SharpDX.ComObject
    {
        public TrackedSample(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TrackedSample(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TrackedSample(nativePtr);
        /// <summary>
        /// <p> </p><p>Sets the owner for the sample.</p>
        /// </summary>
        /// <param name = "sampleAllocatorRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface.</p> </dd></param>
        /// <param name = "unkStateRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotAccepting"/></strong></dt> </dl> </td><td> <p>The owner was already set. This method cannot be called twice on the sample.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>When this method is called, the sample holds an additional reference count on itself. When every other object releases its reference counts on the sample, the sample invokes the <em>pSampleAllocator</em> callback method. To get a reference to the sample, call <strong>IMFAsyncResult::GetObject</strong> on the asynchronous result object given to the callback's <strong>IMFAsyncCallback::Invoke</strong> method.</p><p>After the callback is invoked, the sample clears the callback. To reinstate the callback, you must call <strong>SetAllocator</strong> again.</p><p>It is safe to pass in the sample's <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> interface reference as the state object (<em>pUnkState</em>) for the callback. If <em>pUnkState</em> points to the sample, the <strong>SetAllocator</strong> method accounts for the additional reference count on <em>pUnkState</em>.</p>
        /// </remarks>
        /// <doc-id>ms704797</doc-id>
        /// <unmanaged>HRESULT IMFTrackedSample::SetAllocator([In] IMFAsyncCallback* pSampleAllocator,[In] IUnknown* pUnkState)</unmanaged>
        /// <unmanaged-short>IMFTrackedSample::SetAllocator</unmanaged-short>
        public unsafe void SetAllocator(SharpDX.MediaFoundation.IAsyncCallback sampleAllocatorRef, SharpDX.IUnknown unkStateRef)
        {
            System.IntPtr sampleAllocatorRef_ = System.IntPtr.Zero;
            System.IntPtr unkStateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            sampleAllocatorRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(sampleAllocatorRef);
            unkStateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(unkStateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)sampleAllocatorRef_, (void *)unkStateRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("4ADFDBA3-7AB0-4953-A62B-461E7FF3DA1E")]
    public partial class TranscodeProfile : SharpDX.ComObject
    {
        public TranscodeProfile(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TranscodeProfile(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TranscodeProfile(nativePtr);
        /// <summary>
        /// <p>Gets or sets the audio stream settings that are currently set in the transcode profile. </p>
        /// </summary>
        /// <remarks>
        /// <p>If there are no audio attributes set in the transcode profile, the call to <strong>GetAudioAttributes</strong> succeeds and  <em>ppAttrs</em> receives <strong><c>null</c></strong>.</p><p>To get a specific attribute value, the caller must call the appropriate <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> method depending on the data type of the attribute, and specify the attribute name. The following topics describe the audio attributes:</p><ul> <li> Audio Media Types </li> <li> <see cref = "TranscodeEncodingprofile"/> </li> <li> <see cref = "TranscodeQualityvsspeed"/> </li> </ul>
        /// </remarks>
        /// <doc-id>dd369140</doc-id>
        /// <unmanaged>GetAudioAttributes / SetAudioAttributes</unmanaged>
        /// <unmanaged-short>GetAudioAttributes</unmanaged-short>
        public SharpDX.MediaFoundation.MediaAttributes AudioAttributes
        {
            get
            {
                GetAudioAttributes(out var __output__);
                return __output__;
            }

            set => SetAudioAttributes(value);
        }

        /// <summary>
        /// <p>Gets or sets the video stream settings that are currently set in the transcode profile.</p>
        /// </summary>
        /// <remarks>
        /// <p>If there are no container attributes set in the transcode profile, the <strong>GetVideoAttributes</strong> method  succeeds and  <em>ppAttrs</em> receives <strong><c>null</c></strong>.</p><p>To get a specific attribute value, the caller must call the appropriate <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> method depending on the data type of the attribute, and specify the attribute name. The following list shows the video attributes:</p><ul> <li> Video Media Types </li> <li> <see cref = "TranscodeEncodingprofile"/> </li> <li> <see cref = "TranscodeQualityvsspeed"/> </li> <li> <see cref = "TranscodeDonotInsertEncoder"/> </li> </ul>
        /// </remarks>
        /// <doc-id>dd369142</doc-id>
        /// <unmanaged>GetVideoAttributes / SetVideoAttributes</unmanaged>
        /// <unmanaged-short>GetVideoAttributes</unmanaged-short>
        public SharpDX.MediaFoundation.MediaAttributes VideoAttributes
        {
            get
            {
                GetVideoAttributes(out var __output__);
                return __output__;
            }

            set => SetVideoAttributes(value);
        }

        /// <summary>
        /// <p>Gets or sets the container settings that are currently set in the transcode profile.</p>
        /// </summary>
        /// <remarks>
        /// <p>If there are no container attributes set in the transcode profile, the call to <strong>GetContainerAttributes</strong> succeeds and  <em>ppAttrs</em> receives <strong><c>null</c></strong>.</p><p> To get a specific attribute value, the caller must call the appropriate <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> method depending on the data type of the attribute. The following list shows the container attributes:</p><ul> <li> <see cref = "TranscodeContainertype"/> </li> <li> <see cref = "TranscodeSkipMetadataTransfer"/> </li> <li> <see cref = "TranscodeTopologymode"/> </li> </ul>
        /// </remarks>
        /// <doc-id>dd369141</doc-id>
        /// <unmanaged>GetContainerAttributes / SetContainerAttributes</unmanaged>
        /// <unmanaged-short>GetContainerAttributes</unmanaged-short>
        public SharpDX.MediaFoundation.MediaAttributes ContainerAttributes
        {
            get
            {
                GetContainerAttributes(out var __output__);
                return __output__;
            }

            set => SetContainerAttributes(value);
        }

        /// <summary>
        /// <p>Sets audio stream configuration settings  in the transcode profile.</p><p>To get a list of compatible audio media types supported by the Media Foundation transform (MFT) encoder , call  <strong>MFTranscodeGetAudioOutputAvailableTypes</strong>. You can get the attributes that are set on the required media type and set them on the transcode profile. To set the audio attributes properly, create a new attribute store and copy the attribute store from the required media media type by calling <strong>IMFAttributes::CopyAllItems</strong>. This makes sure that the caller does not hold the references to the media type retrieved from the encoder. For example code, see <strong>MFCreateTranscodeProfile</strong>.</p>
        /// </summary>
        /// <param name = "attrsRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd369143</doc-id>
        /// <unmanaged>HRESULT IMFTranscodeProfile::SetAudioAttributes([In, Optional] IMFAttributes* pAttrs)</unmanaged>
        /// <unmanaged-short>IMFTranscodeProfile::SetAudioAttributes</unmanaged-short>
        internal unsafe void SetAudioAttributes(SharpDX.MediaFoundation.MediaAttributes attrsRef)
        {
            System.IntPtr attrsRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            attrsRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(attrsRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)attrsRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the audio stream settings that are currently set in the transcode profile. </p>
        /// </summary>
        /// <param name = "attrsOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface of the attribute store containing the current audio stream settings. Caller must release the interface reference.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>If there are no audio attributes set in the transcode profile, the call to <strong>GetAudioAttributes</strong> succeeds and  <em>ppAttrs</em> receives <strong><c>null</c></strong>.</p><p>To get a specific attribute value, the caller must call the appropriate <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> method depending on the data type of the attribute, and specify the attribute name. The following topics describe the audio attributes:</p><ul> <li> Audio Media Types </li> <li> <see cref = "TranscodeEncodingprofile"/> </li> <li> <see cref = "TranscodeQualityvsspeed"/> </li> </ul>
        /// </remarks>
        /// <doc-id>dd369140</doc-id>
        /// <unmanaged>HRESULT IMFTranscodeProfile::GetAudioAttributes([Out, Optional] IMFAttributes** ppAttrs)</unmanaged>
        /// <unmanaged-short>IMFTranscodeProfile::GetAudioAttributes</unmanaged-short>
        internal unsafe void GetAudioAttributes(out SharpDX.MediaFoundation.MediaAttributes attrsOut)
        {
            System.IntPtr attrsOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &attrsOut_, (*(void ***)this._nativePointer)[4]);
            if (attrsOut_ != System.IntPtr.Zero)
                attrsOut = new SharpDX.MediaFoundation.MediaAttributes(attrsOut_);
            else
                attrsOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets video stream configuration settings  in the transcode profile.</p><p> For example code, see <strong>MFCreateTranscodeProfile</strong>.</p>
        /// </summary>
        /// <param name = "attrsRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd369145</doc-id>
        /// <unmanaged>HRESULT IMFTranscodeProfile::SetVideoAttributes([In, Optional] IMFAttributes* pAttrs)</unmanaged>
        /// <unmanaged-short>IMFTranscodeProfile::SetVideoAttributes</unmanaged-short>
        internal unsafe void SetVideoAttributes(SharpDX.MediaFoundation.MediaAttributes attrsRef)
        {
            System.IntPtr attrsRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            attrsRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(attrsRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)attrsRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the video stream settings that are currently set in the transcode profile.</p>
        /// </summary>
        /// <param name = "attrsOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface of the attribute store containing the current video stream settings. Caller must release the interface reference.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>If there are no container attributes set in the transcode profile, the <strong>GetVideoAttributes</strong> method  succeeds and  <em>ppAttrs</em> receives <strong><c>null</c></strong>.</p><p>To get a specific attribute value, the caller must call the appropriate <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> method depending on the data type of the attribute, and specify the attribute name. The following list shows the video attributes:</p><ul> <li> Video Media Types </li> <li> <see cref = "TranscodeEncodingprofile"/> </li> <li> <see cref = "TranscodeQualityvsspeed"/> </li> <li> <see cref = "TranscodeDonotInsertEncoder"/> </li> </ul>
        /// </remarks>
        /// <doc-id>dd369142</doc-id>
        /// <unmanaged>HRESULT IMFTranscodeProfile::GetVideoAttributes([Out, Optional] IMFAttributes** ppAttrs)</unmanaged>
        /// <unmanaged-short>IMFTranscodeProfile::GetVideoAttributes</unmanaged-short>
        internal unsafe void GetVideoAttributes(out SharpDX.MediaFoundation.MediaAttributes attrsOut)
        {
            System.IntPtr attrsOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &attrsOut_, (*(void ***)this._nativePointer)[6]);
            if (attrsOut_ != System.IntPtr.Zero)
                attrsOut = new SharpDX.MediaFoundation.MediaAttributes(attrsOut_);
            else
                attrsOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets container configuration settings  in the transcode profile.</p><p> For example code, see <strong>MFCreateTranscodeProfile</strong>.</p>
        /// </summary>
        /// <param name = "attrsRef">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd369144</doc-id>
        /// <unmanaged>HRESULT IMFTranscodeProfile::SetContainerAttributes([In, Optional] IMFAttributes* pAttrs)</unmanaged>
        /// <unmanaged-short>IMFTranscodeProfile::SetContainerAttributes</unmanaged-short>
        internal unsafe void SetContainerAttributes(SharpDX.MediaFoundation.MediaAttributes attrsRef)
        {
            System.IntPtr attrsRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            attrsRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(attrsRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)attrsRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the container settings that are currently set in the transcode profile.</p>
        /// </summary>
        /// <param name = "attrsOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface of the attribute store containing the current container type for the output file. Caller must release the interface reference.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>If there are no container attributes set in the transcode profile, the call to <strong>GetContainerAttributes</strong> succeeds and  <em>ppAttrs</em> receives <strong><c>null</c></strong>.</p><p> To get a specific attribute value, the caller must call the appropriate <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> method depending on the data type of the attribute. The following list shows the container attributes:</p><ul> <li> <see cref = "TranscodeContainertype"/> </li> <li> <see cref = "TranscodeSkipMetadataTransfer"/> </li> <li> <see cref = "TranscodeTopologymode"/> </li> </ul>
        /// </remarks>
        /// <doc-id>dd369141</doc-id>
        /// <unmanaged>HRESULT IMFTranscodeProfile::GetContainerAttributes([Out, Optional] IMFAttributes** ppAttrs)</unmanaged>
        /// <unmanaged-short>IMFTranscodeProfile::GetContainerAttributes</unmanaged-short>
        internal unsafe void GetContainerAttributes(out SharpDX.MediaFoundation.MediaAttributes attrsOut)
        {
            System.IntPtr attrsOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &attrsOut_, (*(void ***)this._nativePointer)[8]);
            if (attrsOut_ != System.IntPtr.Zero)
                attrsOut = new SharpDX.MediaFoundation.MediaAttributes(attrsOut_);
            else
                attrsOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("8CFFCD2E-5A03-4a3a-AFF7-EDCD107C620E")]
    public partial class TranscodeSinkInfoProvider : SharpDX.ComObject
    {
        public TranscodeSinkInfoProvider(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TranscodeSinkInfoProvider(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TranscodeSinkInfoProvider(nativePtr);
        /// <summary>
        /// <p>Sets the name of the encoded output file.</p>
        /// </summary>
        /// <remarks>
        /// <p> The media sink will create a local file with the specified file name.</p><p>Alternately, you can call <strong>IMFTranscodeSinkInfoProvider::SetOutputByteStream</strong> to specify a byte stream  that will receive the transcoded data. These two methods are mutually exclusive.</p>
        /// </remarks>
        /// <doc-id>dd369149</doc-id>
        /// <unmanaged>SetOutputFile</unmanaged>
        /// <unmanaged-short>SetOutputFile</unmanaged-short>
        public System.String OutputFile
        {
            set => SetOutputFile(value);
        }

        /// <summary>
        /// <p>Sets an output byte stream for the transcode media sink.</p>
        /// </summary>
        /// <remarks>
        /// <p>Call this method to provide a writeable byte stream  that will receive the transcoded data.</p><p>Alternatively, you can provide the name of an  output file, by calling <strong>IMFTranscodeSinkInfoProvider::SetOutputFile</strong>. These two methods are mutually exclusive.</p><p>The <em>pByteStreamActivate</em> parameter must specify an activation object that creates a writeable byte stream. Internally, the transcode media sink calls <strong>IMFActivate::ActivateObject</strong> to create the byte stream, as follows:</p><code><see cref = "SharpDX.MediaFoundation.IByteStream"/> *pByteStream = <c>null</c>; <see cref = "SharpDX.Result"/> hr = pByteStreamActivate-&gt;ActivateObject(IID_IMFByteStream, (void**)&amp;pByteStream);</code><p>Currently, Microsoft Media Foundation does not provide any byte-stream activation objects. To use this method, an application must provide a custom implementation of <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong>.</p>
        /// </remarks>
        /// <doc-id>dd369148</doc-id>
        /// <unmanaged>SetOutputByteStream</unmanaged>
        /// <unmanaged-short>SetOutputByteStream</unmanaged-short>
        public SharpDX.MediaFoundation.Activate OutputByteStream
        {
            set => SetOutputByteStream(value);
        }

        /// <summary>
        /// <p>Sets the transcoding profile on the transcode sink activation object.</p>
        /// </summary>
        /// <remarks>
        /// <p>Before calling this method, initialize the profile object as follows:</p><ul> <li>Set the <see cref = "TranscodeContainertype"/> attribute to specify the container type of the output file.</li> <li>If the output file will have a video stream, set video attributes by calling the <strong>IMFTranscodeProfile::SetVideoAttributes</strong> method.</li> <li>If the output file will have an audio stream, set audio attributes by calling the <strong>IMFTranscodeProfile::SetAudioAttributes</strong> method.</li> </ul>
        /// </remarks>
        /// <doc-id>dd369150</doc-id>
        /// <unmanaged>SetProfile</unmanaged>
        /// <unmanaged-short>SetProfile</unmanaged-short>
        public SharpDX.MediaFoundation.TranscodeProfile Profile
        {
            set => SetProfile(value);
        }

        /// <summary>
        /// <p> Gets the media types for the audio and video streams specified in the transcode profile.</p>
        /// </summary>
        /// <remarks>
        /// <p>Before calling this method, call <strong>IMFTranscodeSinkInfoProvider::SetProfile</strong> to set the transcode profile. The <strong>GetSinkInfo</strong> method  uses the profile to create media types for the audio and video streams. </p>
        /// </remarks>
        /// <doc-id>dd369147</doc-id>
        /// <unmanaged>GetSinkInfo</unmanaged>
        /// <unmanaged-short>GetSinkInfo</unmanaged-short>
        public SharpDX.MediaFoundation.TranscodeSinkInformation SinkInfo
        {
            get
            {
                GetSinkInfo(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Sets the name of the encoded output file.</p>
        /// </summary>
        /// <param name = "wszFileNameRef"><dd> <p>Pointer to a null-terminated string that contains the name of the output file.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> The media sink will create a local file with the specified file name.</p><p>Alternately, you can call <strong>IMFTranscodeSinkInfoProvider::SetOutputByteStream</strong> to specify a byte stream  that will receive the transcoded data. These two methods are mutually exclusive.</p>
        /// </remarks>
        /// <doc-id>dd369149</doc-id>
        /// <unmanaged>HRESULT IMFTranscodeSinkInfoProvider::SetOutputFile([In] const wchar_t* pwszFileName)</unmanaged>
        /// <unmanaged-short>IMFTranscodeSinkInfoProvider::SetOutputFile</unmanaged-short>
        internal unsafe void SetOutputFile(System.String wszFileNameRef)
        {
            SharpDX.Result __result__;
            fixed (char *wszFileNameRef_ = wszFileNameRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wszFileNameRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets an output byte stream for the transcode media sink.</p>
        /// </summary>
        /// <param name = "byteStreamActivateRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong> interface of a byte-stream activation object. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Call this method to provide a writeable byte stream  that will receive the transcoded data.</p><p>Alternatively, you can provide the name of an  output file, by calling <strong>IMFTranscodeSinkInfoProvider::SetOutputFile</strong>. These two methods are mutually exclusive.</p><p>The <em>pByteStreamActivate</em> parameter must specify an activation object that creates a writeable byte stream. Internally, the transcode media sink calls <strong>IMFActivate::ActivateObject</strong> to create the byte stream, as follows:</p><code><see cref = "SharpDX.MediaFoundation.IByteStream"/> *pByteStream = <c>null</c>; <see cref = "SharpDX.Result"/> hr = pByteStreamActivate-&gt;ActivateObject(IID_IMFByteStream, (void**)&amp;pByteStream);</code><p>Currently, Microsoft Media Foundation does not provide any byte-stream activation objects. To use this method, an application must provide a custom implementation of <strong><see cref = "SharpDX.MediaFoundation.Activate"/></strong>.</p>
        /// </remarks>
        /// <doc-id>dd369148</doc-id>
        /// <unmanaged>HRESULT IMFTranscodeSinkInfoProvider::SetOutputByteStream([In] IMFActivate* pByteStreamActivate)</unmanaged>
        /// <unmanaged-short>IMFTranscodeSinkInfoProvider::SetOutputByteStream</unmanaged-short>
        internal unsafe void SetOutputByteStream(SharpDX.MediaFoundation.Activate byteStreamActivateRef)
        {
            System.IntPtr byteStreamActivateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            byteStreamActivateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Activate>(byteStreamActivateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)byteStreamActivateRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the transcoding profile on the transcode sink activation object.</p>
        /// </summary>
        /// <param name = "profileRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.TranscodeProfile"/></strong> interface. To get a reference to this interface, call <strong>MFCreateTranscodeProfile</strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Before calling this method, initialize the profile object as follows:</p><ul> <li>Set the <see cref = "TranscodeContainertype"/> attribute to specify the container type of the output file.</li> <li>If the output file will have a video stream, set video attributes by calling the <strong>IMFTranscodeProfile::SetVideoAttributes</strong> method.</li> <li>If the output file will have an audio stream, set audio attributes by calling the <strong>IMFTranscodeProfile::SetAudioAttributes</strong> method.</li> </ul>
        /// </remarks>
        /// <doc-id>dd369150</doc-id>
        /// <unmanaged>HRESULT IMFTranscodeSinkInfoProvider::SetProfile([In] IMFTranscodeProfile* pProfile)</unmanaged>
        /// <unmanaged-short>IMFTranscodeSinkInfoProvider::SetProfile</unmanaged-short>
        internal unsafe void SetProfile(SharpDX.MediaFoundation.TranscodeProfile profileRef)
        {
            System.IntPtr profileRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            profileRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.TranscodeProfile>(profileRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)profileRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the media types for the audio and video streams specified in the transcode profile.</p>
        /// </summary>
        /// <param name = "sinkInfoRef"><dd> <p>A reference to an <strong><see cref = "SharpDX.MediaFoundation.TranscodeSinkInformation"/></strong> structure.</p> <p>If the method succeeds, the method assigns <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> references to the <strong>pAudioMediaType</strong> and <strong>pVideoMediaType</strong> members of this structure. The method might set either member to <strong><c>null</c></strong>. If either member is non-<c>null</c> after the method returns, the caller must release the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> references.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Before calling this method, call <strong>IMFTranscodeSinkInfoProvider::SetProfile</strong> to set the transcode profile. The <strong>GetSinkInfo</strong> method  uses the profile to create media types for the audio and video streams. </p>
        /// </remarks>
        /// <doc-id>dd369147</doc-id>
        /// <unmanaged>HRESULT IMFTranscodeSinkInfoProvider::GetSinkInfo([Out] MF_TRANSCODE_SINK_INFO* pSinkInfo)</unmanaged>
        /// <unmanaged-short>IMFTranscodeSinkInfoProvider::GetSinkInfo</unmanaged-short>
        internal unsafe void GetSinkInfo(out SharpDX.MediaFoundation.TranscodeSinkInformation sinkInfoRef)
        {
            SharpDX.MediaFoundation.TranscodeSinkInformation.__Native sinkInfoRef_ = default (SharpDX.MediaFoundation.TranscodeSinkInformation.__Native);
            sinkInfoRef = default (SharpDX.MediaFoundation.TranscodeSinkInformation);
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &sinkInfoRef_, (*(void ***)this._nativePointer)[6]);
            sinkInfoRef.__MarshalFrom(ref sinkInfoRef_);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("bf94c121-5b05-4e6f-8000-ba598961414d")]
    public partial class Transform : SharpDX.ComObject
    {
        public Transform(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Transform(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Transform(nativePtr);
        /// <summary>
        /// <p> Gets the global attribute store for this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <remarks>
        /// <p> Use the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> reference retrieved by this method to get or set attributes that apply to the entire MFT. To get the attribute store for an input stream, call <strong>IMFTransform::GetInputStreamAttributes</strong>. To get the attribute store for an output stream, call <strong>IMFTransform::GetOutputStreamAttributes</strong>. </p><p> Implementation of this method is optional unless the MFT needs to support a particular set of attributes. Exception: Hardware-based MFTs must implement this method. See Hardware MFTs.</p>
        /// </remarks>
        /// <doc-id>ms703141</doc-id>
        /// <unmanaged>GetAttributes</unmanaged>
        /// <unmanaged-short>GetAttributes</unmanaged-short>
        public SharpDX.MediaFoundation.MediaAttributes Attributes
        {
            get
            {
                GetAttributes(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Queries whether the Media Foundation transform (MFT) is ready to produce output data. </p>
        /// </summary>
        /// <remarks>
        /// <p> If the method returns the <strong>MFT_OUTPUT_STATUS_SAMPLE_READY</strong> flag, it means you can generate one or more output samples by calling <strong>IMFTransform::ProcessOutput</strong>. </p><p> MFTs are not required to implement this method. If the method returns <strong>E_NOTIMPL</strong>, you must call <strong>ProcessOutput</strong> to determine whether the transform has output data. </p><p> If the MFT has more than one output stream, but it does not produce samples at the same time for each stream, it can set the <strong>MFT_OUTPUT_STATUS_SAMPLE_READY</strong> flag when just one stream is ready. However, if the MFT normally produces samples at the same time for each output stream, it should not set this flag until all streams are ready. </p><p> After the client has set valid media types on all of the streams, the MFT should always be in one of two states: Able to accept more input, or able to produce more output. </p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTGetOutputStatus</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms696269</doc-id>
        /// <unmanaged>GetOutputStatus</unmanaged>
        /// <unmanaged-short>GetOutputStatus</unmanaged-short>
        public System.Int32 OutputStatus
        {
            get
            {
                GetOutputStatus(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Gets the minimum and maximum number of input and output streams for this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "dwInputMinimumRef"><dd> <p> Receives the minimum number of input streams. </p> </dd></param>
        /// <param name = "dwInputMaximumRef"><dd> <p> Receives the maximum number of input streams. If there is no maximum, receives the value <strong>MFT_STREAMS_UNLIMITED</strong>. </p> </dd></param>
        /// <param name = "dwOutputMinimumRef"><dd> <p> Receives the minimum number of output streams. </p> </dd></param>
        /// <param name = "dwOutputMaximumRef"><dd> <p> Receives the maximum number of output streams. If there is no maximum, receives the value <strong>MFT_STREAMS_UNLIMITED</strong>. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> If the MFT has a fixed number of streams, the minimum and maximum values are the same. </p><p> It is not recommended to create an MFT that supports zero inputs or zero outputs. An MFT with no inputs or no outputs may not be compatible with the rest of the Media Foundation pipeline. You should create a Media Foundation sink or source for this purpose instead. </p><p> When an MFT is first created, it is not guaranteed to have the minimum number of streams. To find the actual number of streams, call <strong>IMFTransform::GetStreamCount</strong>. </p><p> This method should not be called with <strong><c>null</c></strong> parameters, although in practice some implementations may allow <strong><c>null</c></strong> parameters. </p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTGetStreamLimits</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms697040</doc-id>
        /// <unmanaged>HRESULT IMFTransform::GetStreamLimits([Out] DWORD* pdwInputMinimum,[Out] DWORD* pdwInputMaximum,[Out] DWORD* pdwOutputMinimum,[Out] DWORD* pdwOutputMaximum)</unmanaged>
        /// <unmanaged-short>IMFTransform::GetStreamLimits</unmanaged-short>
        public unsafe void GetStreamLimits(out System.Int32 dwInputMinimumRef, out System.Int32 dwInputMaximumRef, out System.Int32 dwOutputMinimumRef, out System.Int32 dwOutputMaximumRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwOutputMaximumRef_ = &dwOutputMaximumRef)
                fixed (void *dwOutputMinimumRef_ = &dwOutputMinimumRef)
                    fixed (void *dwInputMaximumRef_ = &dwInputMaximumRef)
                        fixed (void *dwInputMinimumRef_ = &dwInputMinimumRef)
                            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputMinimumRef_, dwInputMaximumRef_, dwOutputMinimumRef_, dwOutputMaximumRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the current number of input and output streams on this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "cInputStreamsRef"><dd> <p> Receives the number of input streams. </p> </dd></param>
        /// <param name = "cOutputStreamsRef"><dd> <p> Receives the number of output streams. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p> The number of streams includes unselected streams?that is, streams with no media type or a <strong><c>null</c></strong> media type.</p><p> This method should not be called with <strong><c>null</c></strong> parameters, although in practice some implementations may allow <strong><c>null</c></strong> parameters. </p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTGetStreamCount</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms697018</doc-id>
        /// <unmanaged>HRESULT IMFTransform::GetStreamCount([Out] DWORD* pcInputStreams,[Out] DWORD* pcOutputStreams)</unmanaged>
        /// <unmanaged-short>IMFTransform::GetStreamCount</unmanaged-short>
        public unsafe void GetStreamCount(out System.Int32 cInputStreamsRef, out System.Int32 cOutputStreamsRef)
        {
            SharpDX.Result __result__;
            fixed (void *cOutputStreamsRef_ = &cOutputStreamsRef)
                fixed (void *cInputStreamsRef_ = &cInputStreamsRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cInputStreamsRef_, cOutputStreamsRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the stream identifiers for the input and output streams on this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "dwInputIDArraySize"><dd> <p> Number of elements in the <em>pdwInputIDs</em> array. </p> </dd></param>
        /// <param name = "dwInputIDsRef"><dd> <p> Pointer to an array allocated by the caller. The method fills the array with the input stream identifiers. The array size must be at least equal to the number of input streams. To get the number of input streams, call <strong>IMFTransform::GetStreamCount</strong>. </p> <p>If the caller passes an array that is larger than the number of input streams, the MFT must not write values into the extra array entries.</p> </dd></param>
        /// <param name = "dwOutputIDArraySize"><dd> <p> Number of elements in the <em>pdwOutputIDs</em> array. </p> </dd></param>
        /// <param name = "dwOutputIDsRef"><dd> <p> Pointer to an array allocated by the caller. The method fills the array with the output stream identifiers. The array size must be at least equal to the number of output streams. To get the number of output streams, call <strong>GetStreamCount</strong>. </p> <p>If the caller passes an array that is larger than the number of output streams, the MFT must not write values into the extra array entries.</p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p> Not implemented. See Remarks. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "BufferTooSmall"/></strong></dt> </dl> </td><td> <p> One or both of the arrays is too small. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> Stream identifiers are necessary because some MFTs can add or remove streams, so the index of a stream may not be unique. Therefore, <strong><see cref = "SharpDX.MediaFoundation.Transform"/></strong> methods that operate on streams take stream identifiers. </p><p>This method can return <strong>E_NOTIMPL</strong> if both of the following conditions are true:</p><ul> <li> The transform has a fixed number of streams. </li> <li> The streams are numbered consecutively from 0 to n ? 1, where n is the number of input streams or output streams. In other words, the first input stream is 0, the second is 1, and so on; and the first output stream is 0, the second is 1, and so on. </li> </ul><p>This method must be implemented if any of the following conditions is true:</p><ul> <li> The MFT can add or remove output streams. </li> <li> The MFT allows the client to add or remove input streams. </li> <li> The stream identifiers are not consecutive. </li> </ul><p> All input stream identifiers must be unique within an MFT, and all output stream identifiers must be unique. However, an input stream and an output stream can share the same identifier. </p><p> If the client adds an input stream, the client assigns the identifier, so the MFT must allow arbitrary identifiers, as long as they are unique. If the MFT creates an output stream, the MFT assigns the identifier. </p><p> By convention, if an MFT has exactly one fixed input stream and one fixed output stream, it should assign the identifier 0 to both streams. </p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTGetStreamIDs</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms693988</doc-id>
        /// <unmanaged>HRESULT IMFTransform::GetStreamIDs([In] DWORD dwInputIDArraySize,[Out, Buffer] DWORD* pdwInputIDs,[In] DWORD dwOutputIDArraySize,[Out, Buffer] DWORD* pdwOutputIDs)</unmanaged>
        /// <unmanaged-short>IMFTransform::GetStreamIDs</unmanaged-short>
        internal unsafe SharpDX.Result GetStreamIDs(System.Int32 dwInputIDArraySize, System.Int32[] dwInputIDsRef, System.Int32 dwOutputIDArraySize, System.Int32[] dwOutputIDsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwOutputIDsRef_ = dwOutputIDsRef)
                fixed (void *dwInputIDsRef_ = dwInputIDsRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputIDArraySize, dwInputIDsRef_, dwOutputIDArraySize, dwOutputIDsRef_, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// <p> Gets the buffer requirements and other information for an input stream on this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "dwInputStreamID"><dd> <p> Input stream identifier. To get the list of stream identifiers, call <strong>IMFTransform::GetStreamIDs</strong>. </p> </dd></param>
        /// <param name = "streamInfoRef"><dd> <p> Pointer to an <strong><see cref = "SharpDX.MediaFoundation.TInputStreamInformation"/></strong> structure. The method fills the structure with information about the input stream. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream identifier. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>It is valid to call this method before setting the media types.</p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTGetInputStreamInfo</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms703894</doc-id>
        /// <unmanaged>HRESULT IMFTransform::GetInputStreamInfo([In] DWORD dwInputStreamID,[Out] MFT_INPUT_STREAM_INFO* pStreamInfo)</unmanaged>
        /// <unmanaged-short>IMFTransform::GetInputStreamInfo</unmanaged-short>
        public unsafe void GetInputStreamInfo(System.Int32 dwInputStreamID, out SharpDX.MediaFoundation.TInputStreamInformation streamInfoRef)
        {
            streamInfoRef = default (SharpDX.MediaFoundation.TInputStreamInformation);
            SharpDX.Result __result__;
            fixed (void *streamInfoRef_ = &streamInfoRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamID, streamInfoRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the buffer requirements and other information for an output stream on this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "dwOutputStreamID"><dd> <p> Output stream identifier. To get the list of stream identifiers, call <strong>IMFTransform::GetStreamIDs</strong>. </p> </dd></param>
        /// <param name = "streamInfoRef"><dd> <p> Pointer to an <strong><see cref = "SharpDX.MediaFoundation.TOutputStreamInformation"/></strong> structure. The method fills the structure with information about the output stream. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream number. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>It is valid to call this method before setting the media types.</p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTGetOutputStreamInfo</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms693880</doc-id>
        /// <unmanaged>HRESULT IMFTransform::GetOutputStreamInfo([In] DWORD dwOutputStreamID,[Out] MFT_OUTPUT_STREAM_INFO* pStreamInfo)</unmanaged>
        /// <unmanaged-short>IMFTransform::GetOutputStreamInfo</unmanaged-short>
        public unsafe void GetOutputStreamInfo(System.Int32 dwOutputStreamID, out SharpDX.MediaFoundation.TOutputStreamInformation streamInfoRef)
        {
            streamInfoRef = default (SharpDX.MediaFoundation.TOutputStreamInformation);
            SharpDX.Result __result__;
            fixed (void *streamInfoRef_ = &streamInfoRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputStreamID, streamInfoRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the global attribute store for this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "attributesRef"><dd> <p> Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p> The MFT does not support attributes. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> Use the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> reference retrieved by this method to get or set attributes that apply to the entire MFT. To get the attribute store for an input stream, call <strong>IMFTransform::GetInputStreamAttributes</strong>. To get the attribute store for an output stream, call <strong>IMFTransform::GetOutputStreamAttributes</strong>. </p><p> Implementation of this method is optional unless the MFT needs to support a particular set of attributes. Exception: Hardware-based MFTs must implement this method. See Hardware MFTs.</p>
        /// </remarks>
        /// <doc-id>ms703141</doc-id>
        /// <unmanaged>HRESULT IMFTransform::GetAttributes([Out] IMFAttributes** pAttributes)</unmanaged>
        /// <unmanaged-short>IMFTransform::GetAttributes</unmanaged-short>
        internal unsafe void GetAttributes(out SharpDX.MediaFoundation.MediaAttributes attributesRef)
        {
            System.IntPtr attributesRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &attributesRef_, (*(void ***)this._nativePointer)[8]);
            if (attributesRef_ != System.IntPtr.Zero)
                attributesRef = new SharpDX.MediaFoundation.MediaAttributes(attributesRef_);
            else
                attributesRef = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the attribute store for an input stream on this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "dwInputStreamID"><dd> <p> Input stream identifier. To get the list of stream identifiers, call <strong>IMFTransform::GetStreamIDs</strong>. </p> </dd></param>
        /// <param name = "attributesRef"><dd> <p> Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p> The MFT does not support input stream attributes. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream identifier. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> Implementation of this method is optional unless the MFT needs to support a particular set of attributes. </p><p> To get the attribute store for the entire MFT, call <strong>IMFTransform::GetAttributes</strong>. </p>
        /// </remarks>
        /// <doc-id>ms695366</doc-id>
        /// <unmanaged>HRESULT IMFTransform::GetInputStreamAttributes([In] DWORD dwInputStreamID,[Out] IMFAttributes** pAttributes)</unmanaged>
        /// <unmanaged-short>IMFTransform::GetInputStreamAttributes</unmanaged-short>
        public unsafe void GetInputStreamAttributes(System.Int32 dwInputStreamID, out SharpDX.MediaFoundation.MediaAttributes attributesRef)
        {
            System.IntPtr attributesRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamID, &attributesRef_, (*(void ***)this._nativePointer)[9]);
            if (attributesRef_ != System.IntPtr.Zero)
                attributesRef = new SharpDX.MediaFoundation.MediaAttributes(attributesRef_);
            else
                attributesRef = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the attribute store for an output stream on this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "dwOutputStreamID"><dd> <p> Output stream identifier. To get the list of stream identifiers, call <strong>IMFTransform::GetStreamIDs</strong>. </p> </dd></param>
        /// <param name = "attributesRef"><dd> <p> Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p> The MFT does not support output stream attributes. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream identifier. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> Implementation of this method is optional unless the MFT needs to support a particular set of attributes. </p><p> To get the attribute store for the entire MFT, call <strong>IMFTransform::GetAttributes</strong>. </p>
        /// </remarks>
        /// <doc-id>ms703886</doc-id>
        /// <unmanaged>HRESULT IMFTransform::GetOutputStreamAttributes([In] DWORD dwOutputStreamID,[Out] IMFAttributes** pAttributes)</unmanaged>
        /// <unmanaged-short>IMFTransform::GetOutputStreamAttributes</unmanaged-short>
        public unsafe void GetOutputStreamAttributes(System.Int32 dwOutputStreamID, out SharpDX.MediaFoundation.MediaAttributes attributesRef)
        {
            System.IntPtr attributesRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputStreamID, &attributesRef_, (*(void ***)this._nativePointer)[10]);
            if (attributesRef_ != System.IntPtr.Zero)
                attributesRef = new SharpDX.MediaFoundation.MediaAttributes(attributesRef_);
            else
                attributesRef = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Removes an input stream from this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "dwStreamID"><dd> <p> Identifier of the input stream to remove. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p> The transform has a fixed number of input streams. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p> The stream is not removable, or the transform currently has the minimum number of input streams it can support. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream identifier. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformInputRemaining"/></strong></dt> </dl> </td><td> <p> The transform has unprocessed input buffers for the specified stream. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> If the transform has a fixed number of input streams, the method returns <strong>E_NOTIMPL</strong>. </p><p> An MFT might support this method but not allow certain input streams to be removed. If an input stream can be removed, the <strong>IMFTransform::GetInputStreamInfo</strong> method returns the <strong>MFT_INPUT_STREAM_REMOVABLE</strong> flag for that stream. Otherwise, the stream cannot be removed, and the method returns <strong><see cref = "InvalidRequest"/></strong>. The method also fails if the MFT currently has the minimum number of input streams that it requires. To find the minimum number of streams, call <strong>IMFTransform::GetStreamLimits</strong>. </p><p> If the transform still has unprocessed input for that stream, the method might succeed or it might return <strong><see cref = "TransformInputRemaining"/></strong>. If the method succeeds, the MFT will continue to process the remaining input after the stream is removed. If the method returns <strong><see cref = "TransformInputRemaining"/></strong>, you must clear the input buffers before removing the stream. To clear the input buffers, either call <strong>IMFTransform::ProcessOutput</strong> or else call <strong>IMFTransform::ProcessMessage</strong> with the <strong>MFT_MESSAGE_COMMAND_FLUSH</strong> to flush the MFT. Then call the <strong>DeleteInputStream</strong> again. An MFT should never discard input buffers when <strong>DeleteInputStream</strong> is called. </p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTDeleteInputStream</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms703159</doc-id>
        /// <unmanaged>HRESULT IMFTransform::DeleteInputStream([In] DWORD dwStreamID)</unmanaged>
        /// <unmanaged-short>IMFTransform::DeleteInputStream</unmanaged-short>
        public unsafe void DeleteInputStream(System.Int32 dwStreamID)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamID, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Adds one or more new input streams to this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "cStreams"><dd> <p> Number of streams to add. </p> </dd></param>
        /// <param name = "adwStreamIDs"><dd> <p> Array of stream identifiers. The new stream identifiers must not match any existing input streams. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p> Invalid argument. </p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p> The MFT has a fixed number of input streams. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> If the new streams exceed the maximum number of input streams for this transform, the method returns <strong>E_INVALIDARG.</strong> To find the maximum number of input streams, call <strong>IMFTransform::GetStreamLimits</strong>. </p><p> If any of the new stream identifiers conflicts with an existing input stream, the method returns <strong>E_INVALIDARG</strong>. </p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTAddInputStreams</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms696211</doc-id>
        /// <unmanaged>HRESULT IMFTransform::AddInputStreams([In] DWORD cStreams,[In] DWORD* adwStreamIDs)</unmanaged>
        /// <unmanaged-short>IMFTransform::AddInputStreams</unmanaged-short>
        public unsafe void AddInputStreams(System.Int32 cStreams, System.Int32 adwStreamIDs)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cStreams, &adwStreamIDs, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets an available media type for an input stream on this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "dwInputStreamID"><dd> <p> Input stream identifier. To get the list of stream identifiers, call <strong>IMFTransform::GetStreamIDs</strong>. </p> </dd></param>
        /// <param name = "dwTypeIndex"><dd> <p> Index of the media type to retrieve. Media types are indexed from zero and returned in approximate order of preference. </p> </dd></param>
        /// <param name = "typeOut"><dd> <p> Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p> The MFT does not have a list of available input types. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream identifier. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoMoreTypes"/></strong></dt> </dl> </td><td> <p> The <em>dwTypeIndex</em> parameter is out of range. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformTypeNotSet"/></strong></dt> </dl> </td><td> <p> You must set the output types before setting the input types. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> The MFT defines a list of available media types for each input stream and orders them by preference. This method enumerates the available media types for an input stream. To enumerate the available types, increment <em>dwTypeIndex</em> until the method returns <strong><see cref = "NoMoreTypes"/></strong>. </p><p> Setting the media type on one stream might change the available types for another stream, or change the preference order. However, an MFT is not required to update the list of available types dynamically. The only guaranteed way to test whether you can set a particular input type is to call <strong>IMFTransform::SetInputType</strong>. </p><p> In some cases, an MFT cannot return a list of input types until one or more output types are set. If so, the method returns <strong><see cref = "TransformTypeNotSet"/></strong>. </p><p> An MFT is not required to implement this method. However, most MFTs should implement this method, unless the supported types are simple and can be discovered through the <strong>MFTGetInfo</strong> function.</p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTGetInputAvailableType</strong>. See Creating Hybrid DMO/MFT Objects.</p><p>For encoders, after the output type is set, <strong>GetInputAvailableType</strong> must return a list of input types that are compatible with the current output type. This means that all types returned by <strong>GetInputAvailableType</strong> after the output type is set must be valid types for <strong>SetInputType</strong>.</p><p>Encoders should reject input types if the attributes of the input media type and output media type do not match, such as resolution setting with <see cref = "FrameSize"/>, nominal range setting with <see cref = "VideoNominalRange"/>, or frame rate setting with <see cref = "FrameSize"/></p>
        /// </remarks>
        /// <doc-id>ms704814</doc-id>
        /// <unmanaged>HRESULT IMFTransform::GetInputAvailableType([In] DWORD dwInputStreamID,[In] DWORD dwTypeIndex,[Out] IMFMediaType** ppType)</unmanaged>
        /// <unmanaged-short>IMFTransform::GetInputAvailableType</unmanaged-short>
        public unsafe void GetInputAvailableType(System.Int32 dwInputStreamID, System.Int32 dwTypeIndex, out SharpDX.MediaFoundation.MediaType typeOut)
        {
            System.IntPtr typeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamID, dwTypeIndex, &typeOut_, (*(void ***)this._nativePointer)[13]);
            if (typeOut_ != System.IntPtr.Zero)
                typeOut = new SharpDX.MediaFoundation.MediaType(typeOut_);
            else
                typeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets an available media type for an output stream on this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "dwOutputStreamID"><dd> <p> Output stream identifier. To get the list of stream identifiers, call <strong>IMFTransform::GetStreamIDs</strong>. </p> </dd></param>
        /// <param name = "dwTypeIndex"><dd> <p> Index of the media type to retrieve. Media types are indexed from zero and returned in approximate order of preference. </p> </dd></param>
        /// <param name = "typeOut"><dd> <p> Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p> The MFT does not have a list of available output types. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream identifier. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoMoreTypes"/></strong></dt> </dl> </td><td> <p> The <em>dwTypeIndex</em> parameter is out of range. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformTypeNotSet"/></strong></dt> </dl> </td><td> <p> You must set the input types before setting the output types. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> The MFT defines a list of available media types for each output stream and orders them by preference. This method enumerates the available media types for an output stream. To enumerate the available types, increment <em>dwTypeIndex</em> until the method returns MF_<strong>E_NO_MORE_TYPES</strong>. </p><p> Setting the media type on one stream can change the available types for another stream (or change the preference order). However, an MFT is not required to update the list of available types dynamically. The only guaranteed way to test whether you can set a particular input type is to call <strong>IMFTransform::SetOutputType</strong>. </p><p> In some cases, an MFT cannot return a list of output types until one or more input types are set. If so, the method returns <strong><see cref = "TransformTypeNotSet"/></strong>. </p><p> An MFT is not required to implement this method. However, most MFTs should implement this method, unless the supported types are simple and can be discovered through the <strong>MFTGetInfo</strong> function. </p><p> This method can return a <em>partial</em> media type. A partial media type contains an incomplete description of a format, and is used to provide a hint to the caller. For example, a partial type might include just the major type and subtype GUIDs. However, after the client sets the input types on the MFT, the MFT should generally return at least one complete output type, which can be used without further modification. For more information, see Complete and Partial Media Types.</p><p>Some MFTs cannot provide an accurate list of output types until the MFT receives the first input sample. For example, the MFT might need to read the first packet header to deduce the format. An MFT should handle this situation as follows:</p><ol> <li> Before the MFT receives any input, it offers a list of one or more output types that it could possibly produce. For example, an MPEG-2 decoder might return a media type that describes the MPEG-2 main profile/main level. </li> <li> The client selects one of these types (generally the first) and sets it on the output stream. </li> <li> The client delivers the first input sample by calling <strong>IMFTransform::ProcessInput</strong>. </li> <li> If the output type does not conform to the input data, the transform signals a format change in the <strong>ProcessOutput</strong> method. For more information about format changes, see <strong>IMFTransform::ProcessOutput</strong>. </li> <li> The calls <strong>GetOutputAvailableType</strong> again. At this point, the method should return an updated list of types that reflects the input data. </li> <li> The client selects a new output type from this list and calls <strong>SetOutputType</strong>. </li> </ol><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTGetOutputAvailableType</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms703812</doc-id>
        /// <unmanaged>HRESULT IMFTransform::GetOutputAvailableType([In] DWORD dwOutputStreamID,[In] DWORD dwTypeIndex,[Out] IMFMediaType** ppType)</unmanaged>
        /// <unmanaged-short>IMFTransform::GetOutputAvailableType</unmanaged-short>
        internal unsafe SharpDX.Result GetOutputAvailableType(System.Int32 dwOutputStreamID, System.Int32 dwTypeIndex, out SharpDX.MediaFoundation.MediaType typeOut)
        {
            System.IntPtr typeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputStreamID, dwTypeIndex, &typeOut_, (*(void ***)this._nativePointer)[14]);
            if (typeOut_ != System.IntPtr.Zero)
                typeOut = new SharpDX.MediaFoundation.MediaType(typeOut_);
            else
                typeOut = null;
            return __result__;
        }

        /// <summary>
        /// <p> Sets, tests, or clears the media type for an input stream on this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "dwInputStreamID"><dd> <p> Input stream identifier. To get the list of stream identifiers, call <strong>IMFTransform::GetStreamIDs</strong>. </p> </dd></param>
        /// <param name = "typeRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface, or <strong><c>null</c></strong>. </p> </dd></param>
        /// <param name = "dwFlags"><dd> <p> Zero or more flags from the <strong>_MFT_SET_TYPE_FLAGS</strong> enumeration. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidMediaType"/></strong></dt> </dl> </td><td> <p> The MFT cannot use the proposed media type. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream identifier. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidType"/></strong></dt> </dl> </td><td> <p> The proposed type is not valid. This error code indicates that the media type itself is not configured correctly; for example, it might contain mutually contradictory attributes. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformCannotChangeMediaTypeWhileProcessing"/></strong></dt> </dl> </td><td> <p> The MFT cannot switch types while processing data. Try draining or flushing the MFT. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformTypeNotSet"/></strong></dt> </dl> </td><td> <p> You must set the output types before setting the input types. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedD3DType"/></strong></dt> </dl> </td><td> <p> The MFT could not find a suitable DirectX Video Acceleration (DXVA) configuration. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method can be used to set, test without setting, or clear the media type:</p><ul> <li> To set the media type, set <em>dwFlags</em> to zero and set <em>pType</em> to a non-<strong><c>null</c></strong> reference that specifies the media type. </li> <li> To test the media type without setting it, set <em>dwFlags</em> to <strong>MFT_SET_TYPE_TEST_ONLY</strong> and set <em>pType</em> to a non-<strong><c>null</c></strong> reference that specifies the media type. If the media type is acceptable, the method return <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns <strong><see cref = "InvalidMediaType"/></strong>. Regardless of the return value, the current media type does not change. </li> <li> To clear the media type, set <em>pType</em> to <strong><c>null</c></strong>. </li> </ul><p> Setting the media type on one stream may change the acceptable types on another stream. </p><p> An MFT may require the caller to set one or more output types before setting the input type. If so, the method returns <strong><see cref = "TransformTypeNotSet"/></strong>. </p><p> If the MFT supports DirectX Video Acceleration (DXVA) but is unable to find a suitable DXVA configuration (for example, if the graphics driver does not have the right capabilities), the method should return <strong><see cref = "UnsupportedD3DType"/></strong>. For more information, see Supporting DXVA 2.0 in Media Foundation. </p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTSetInputType</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms700113</doc-id>
        /// <unmanaged>HRESULT IMFTransform::SetInputType([In] DWORD dwInputStreamID,[In, Optional] IMFMediaType* pType,[In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IMFTransform::SetInputType</unmanaged-short>
        public unsafe void SetInputType(System.Int32 dwInputStreamID, SharpDX.MediaFoundation.MediaType typeRef, System.Int32 dwFlags)
        {
            System.IntPtr typeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            typeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(typeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamID, (void *)typeRef_, dwFlags, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Sets, tests, or clears the media type for an output stream on this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "dwOutputStreamID"><dd> <p> Output stream identifier. To get the list of stream identifiers, call <strong>IMFTransform::GetStreamIDs</strong>. </p> </dd></param>
        /// <param name = "typeRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface, or <strong><c>null</c></strong>. </p> </dd></param>
        /// <param name = "dwFlags"><dd> <p> Zero or more flags from the <strong>_MFT_SET_TYPE_FLAGS</strong> enumeration. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidMediaType"/></strong></dt> </dl> </td><td> <p> The transform cannot use the proposed media type. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream identifier. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidType"/></strong></dt> </dl> </td><td> <p> The proposed type is not valid. This error code indicates that the media type itself is not configured correctly; for example, it might contain mutually contradictory flags. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformCannotChangeMediaTypeWhileProcessing"/></strong></dt> </dl> </td><td> <p> The MFT cannot switch types while processing data. Try draining or flushing the MFT. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformTypeNotSet"/></strong></dt> </dl> </td><td> <p> You must set the input types before setting the output types. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedD3DType"/></strong></dt> </dl> </td><td> <p> The MFT could not find a suitable DirectX Video Acceleration (DXVA) configuration. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method can be used to set, test without setting, or clear the media type:</p><ul> <li> To set the media type, set <em>dwFlags</em> to zero and set <em>pType</em> to a non-<strong><c>null</c></strong> reference that specifies the media type. </li> <li> To test the media type without setting it, set <em>dwFlags</em> to <strong>MFT_SET_TYPE_TEST_ONLY</strong> and set <em>pType</em> to a non-<strong><c>null</c></strong> reference that specifies the media type. If the media type is acceptable, the method return <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns <strong><see cref = "InvalidMediaType"/></strong>. Regardless of the return value, the current media type does not change. </li> <li> To clear the media type, set <em>pType</em> to <strong><c>null</c></strong>. </li> </ul><p> Setting the media type on one stream may change the acceptable types on another stream. </p><p> An MFT may require the caller to set one or more input types before setting the output type. If so, the method returns <strong><see cref = "TransformTypeNotSet"/></strong>. </p><p>If the MFT supports DirectX Video Acceleration (DXVA) but is unable to find a suitable DXVA configuration (for example, if the graphics driver does not have the right capabilities), the method should return <strong><see cref = "UnsupportedD3DType"/></strong>. For more information, see Supporting DXVA 2.0 in Media Foundation.</p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTSetOutputType</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms702016</doc-id>
        /// <unmanaged>HRESULT IMFTransform::SetOutputType([In] DWORD dwOutputStreamID,[In, Optional] IMFMediaType* pType,[In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IMFTransform::SetOutputType</unmanaged-short>
        public unsafe void SetOutputType(System.Int32 dwOutputStreamID, SharpDX.MediaFoundation.MediaType typeRef, System.Int32 dwFlags)
        {
            System.IntPtr typeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            typeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(typeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputStreamID, (void *)typeRef_, dwFlags, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the current media type for an input stream on this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "dwInputStreamID"><dd> <p> Input stream identifier. To get the list of stream identifiers, call <strong>IMFTransform::GetStreamIDs</strong>. </p> </dd></param>
        /// <param name = "typeOut"><dd> <p> Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream identifier. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformTypeNotSet"/></strong></dt> </dl> </td><td> <p> The input media type has not been set. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> If the specified input stream does not yet have a media type, the method returns <strong><see cref = "TransformTypeNotSet"/></strong>. Most MFTs do not set any default media types when first created. Instead, the client must set the media type by calling <strong>IMFTransform::SetInputType</strong>. </p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTGetInputCurrentType</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms705607</doc-id>
        /// <unmanaged>HRESULT IMFTransform::GetInputCurrentType([In] DWORD dwInputStreamID,[Out] IMFMediaType** ppType)</unmanaged>
        /// <unmanaged-short>IMFTransform::GetInputCurrentType</unmanaged-short>
        public unsafe void GetInputCurrentType(System.Int32 dwInputStreamID, out SharpDX.MediaFoundation.MediaType typeOut)
        {
            System.IntPtr typeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamID, &typeOut_, (*(void ***)this._nativePointer)[17]);
            if (typeOut_ != System.IntPtr.Zero)
                typeOut = new SharpDX.MediaFoundation.MediaType(typeOut_);
            else
                typeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the current media type for an output stream on this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "dwOutputStreamID"><dd> <p> Output stream identifier. To get the list of stream identifiers, call <strong>IMFTransform::GetStreamIDs</strong>. </p> </dd></param>
        /// <param name = "typeOut"><dd> <p> Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream identifier. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformTypeNotSet"/></strong></dt> </dl> </td><td> <p> The output media type has not been set. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> If the specified output stream does not yet have a media type, the method returns <strong><see cref = "TransformTypeNotSet"/></strong>. Most MFTs do not set any default media types when first created. Instead, the client must set the media type by calling <strong>IMFTransform::SetOutputType</strong>. </p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTGetOutputCurrentType</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms696985</doc-id>
        /// <unmanaged>HRESULT IMFTransform::GetOutputCurrentType([In] DWORD dwOutputStreamID,[Out] IMFMediaType** ppType)</unmanaged>
        /// <unmanaged-short>IMFTransform::GetOutputCurrentType</unmanaged-short>
        public unsafe void GetOutputCurrentType(System.Int32 dwOutputStreamID, out SharpDX.MediaFoundation.MediaType typeOut)
        {
            System.IntPtr typeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwOutputStreamID, &typeOut_, (*(void ***)this._nativePointer)[18]);
            if (typeOut_ != System.IntPtr.Zero)
                typeOut = new SharpDX.MediaFoundation.MediaType(typeOut_);
            else
                typeOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Queries whether an input stream on this Media Foundation transform (MFT) can accept more data. </p>
        /// </summary>
        /// <param name = "dwInputStreamID"><dd> <p> Input stream identifier. To get the list of stream identifiers, call <strong>IMFTransform::GetStreamIDs</strong>. </p> </dd></param>
        /// <param name = "dwFlagsRef"><dd> <p> Receives a member of the <strong>_MFT_INPUT_STATUS_FLAGS</strong> enumeration, or zero. If the value is <strong>MFT_INPUT_STATUS_ACCEPT_DATA</strong>, the stream specified in <em>dwInputStreamID</em> can accept more input data. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream identifier. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformTypeNotSet"/></strong></dt> </dl> </td><td> <p> The media type is not set on one or more streams. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> If the method returns the <strong>MFT_INPUT_STATUS_ACCEPT_DATA</strong> flag, you can deliver an input sample to the specified stream by calling <strong>IMFTransform::ProcessInput</strong>. If the method succeeds but does not return any flags in the <em>pdwFlags</em> parameter, it means the input stream already has as much data as it can accept. </p><p> Use this method to test whether the input stream is ready to accept more data, without incurring the overhead of allocating a new sample and calling <strong>ProcessInput</strong>. </p><p> After the client has set valid media types on all of the streams, the MFT should always be in one of two states: Able to accept more input, or able to produce more output (or both). </p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTGetInputStatus</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms697478</doc-id>
        /// <unmanaged>HRESULT IMFTransform::GetInputStatus([In] DWORD dwInputStreamID,[Out] DWORD* pdwFlags)</unmanaged>
        /// <unmanaged-short>IMFTransform::GetInputStatus</unmanaged-short>
        public unsafe void GetInputStatus(System.Int32 dwInputStreamID, out System.Int32 dwFlagsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwFlagsRef_ = &dwFlagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamID, dwFlagsRef_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Queries whether the Media Foundation transform (MFT) is ready to produce output data. </p>
        /// </summary>
        /// <param name = "dwFlagsRef"><dd> <p> Receives a member of the <strong>_MFT_OUTPUT_STATUS_FLAGS</strong> enumeration, or zero. If the value is <strong>MFT_OUTPUT_STATUS_SAMPLE_READY</strong>, the MFT can produce an output sample. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p> Not implemented. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformTypeNotSet"/></strong></dt> </dl> </td><td> <p> The media type is not set on one or more streams. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> If the method returns the <strong>MFT_OUTPUT_STATUS_SAMPLE_READY</strong> flag, it means you can generate one or more output samples by calling <strong>IMFTransform::ProcessOutput</strong>. </p><p> MFTs are not required to implement this method. If the method returns <strong>E_NOTIMPL</strong>, you must call <strong>ProcessOutput</strong> to determine whether the transform has output data. </p><p> If the MFT has more than one output stream, but it does not produce samples at the same time for each stream, it can set the <strong>MFT_OUTPUT_STATUS_SAMPLE_READY</strong> flag when just one stream is ready. However, if the MFT normally produces samples at the same time for each output stream, it should not set this flag until all streams are ready. </p><p> After the client has set valid media types on all of the streams, the MFT should always be in one of two states: Able to accept more input, or able to produce more output. </p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTGetOutputStatus</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms696269</doc-id>
        /// <unmanaged>HRESULT IMFTransform::GetOutputStatus([Out] DWORD* pdwFlags)</unmanaged>
        /// <unmanaged-short>IMFTransform::GetOutputStatus</unmanaged-short>
        internal unsafe void GetOutputStatus(out System.Int32 dwFlagsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwFlagsRef_ = &dwFlagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwFlagsRef_, (*(void ***)this._nativePointer)[20]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Sets the range of time stamps the client needs for output. </p>
        /// </summary>
        /// <param name = "hnsLowerBound"><dd> <p> Specifies the earliest time stamp. The Media Foundation transform (MFT) will accept input until it can produce an output sample that begins at this time; or until it can produce a sample that ends at this time or later. If there is no lower bound, use the value <strong>MFT_OUTPUT_BOUND_LOWER_UNBOUNDED</strong>. </p> </dd></param>
        /// <param name = "hnsUpperBound"><dd> <p> Specifies the latest time stamp. The MFT will not produce an output sample with time stamps later than this time. If there is no upper bound, use the value <strong>MFT_OUTPUT_BOUND_UPPER_UNBOUNDED</strong>. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p> Not implemented. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformTypeNotSet"/></strong></dt> </dl> </td><td> <p> The media type is not set on one or more streams. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> This method can be used to optimize preroll, especially in formats that have gaps between time stamps, or formats where the data must start on a sync point, such as MPEG-2. Calling this method is optional, and implementation of this method by an MFT is optional. If the MFT does not implement the method, the return value is <strong>E_NOTIMPL</strong>.</p><p> If an MFT implements this method, it must limit its output data to the range of times specified by <em>hnsLowerBound</em> and <em>hnsUpperBound</em>. The MFT discards any input data that is not needed to produce output within this range. If the sample boundaries do not exactly match the range, the MFT should split the output samples, if possible. Otherwise, the output samples can overlap the range. </p><p> For example, suppose the output range is 100 to 150 milliseconds (ms), and the output format is video with each frame lasting 33 ms. A sample with a time stamp of 67 ms overlaps the range (67 + 33 = 100) and is produced as output. A sample with a time stamp of  66 ms is discarded (66 + 33 = 99). Similarly, a sample with a time stamp of 150 ms is produced as output, but a sample with a time stamp of 151 is discarded.</p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTSetOutputBounds</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms693812</doc-id>
        /// <unmanaged>HRESULT IMFTransform::SetOutputBounds([In] longlong hnsLowerBound,[In] longlong hnsUpperBound)</unmanaged>
        /// <unmanaged-short>IMFTransform::SetOutputBounds</unmanaged-short>
        public unsafe void SetOutputBounds(System.Int64 hnsLowerBound, System.Int64 hnsUpperBound)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, hnsLowerBound, hnsUpperBound, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Sends an event to an input stream on this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "dwInputStreamID"><dd> <p> Input stream identifier. To get the list of stream identifiers, call <strong>IMFTransform::GetStreamIDs</strong>. </p> </dd></param>
        /// <param name = "eventRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaEvent"/></strong> interface of an event object. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_NOTIMPL</strong></dt> </dl> </td><td> <p> Not implemented. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream number. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformTypeNotSet"/></strong></dt> </dl> </td><td> <p> The media type is not set on one or more streams. </p> </td></tr> <tr><td> <dl> <dt><strong>MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT</strong></dt> </dl> </td><td> <p> The pipeline should not propagate the event. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> An MFT can handle sending the event downstream, or it can let the pipeline do this, as indicated by the return value: </p><ul> <li><strong>E_NOTIMPL</strong>: The MFT ignores all events, and the pipeline should send all events downstream. After the pipeline receives this return value, it might not call <strong>ProcessEvent</strong> again. </li> <li><strong><see cref = "SharpDX.Result.Ok"/></strong>: The MFT has examined this event, but the pipeline should send the event downstream. Internally, the MFT might respond to the event in some way, or it might ignore the event. </li> <li><strong>MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT</strong>: The pipeline should not propagate this event downstream. Either the MFT will send the event downstream, or else the MFT will consume the event and not send it downstream. The MFT should only consume the event if the event should stop at this MFT and not travel any further downstream. But in most cases, the event should travel downstream. </li> </ul><p> To send the event downstream, the MFT adds the event to the collection object that is provided by the client in the <strong>pEvents</strong> member of the <strong><see cref = "SharpDX.MediaFoundation.TOutputDataBuffer"/></strong> structure, when the client calls <strong>IMFTransform::ProcessOutput</strong>. </p><p> Events must be serialized with the samples that come before and after them. Attach the event to the output sample that follows the event. (The pipeline will process the event first, and then the sample.) If an MFT holds back one or more samples between calls to <strong>IMFTransform::ProcessInput</strong> and <strong>ProcessOutput</strong>, the MFT should handle sending all events downstream, because in this situation the pipeline cannot correlate input samples with output samples. </p><p> If an MFT does not hold back samples and does not need to examine any events, it can return <strong>E_NOTIMPL</strong>. </p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTProcessEvent</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms695394</doc-id>
        /// <unmanaged>HRESULT IMFTransform::ProcessEvent([In] DWORD dwInputStreamID,[In, Optional] IMFMediaEvent* pEvent)</unmanaged>
        /// <unmanaged-short>IMFTransform::ProcessEvent</unmanaged-short>
        public unsafe void ProcessEvent(System.Int32 dwInputStreamID, SharpDX.MediaFoundation.MediaEvent eventRef)
        {
            System.IntPtr eventRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            eventRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaEvent>(eventRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamID, (void *)eventRef_, (*(void ***)this._nativePointer)[22]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Sends a message to the Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "eMessage"><dd> <p> The message to send, specified as a member of the <strong><see cref = "SharpDX.MediaFoundation.TMessageType"/></strong> enumeration. </p> </dd></param>
        /// <param name = "ulParam"><dd> <p> Message parameter. The meaning of this parameter depends on the message type. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream number. Applies to the <strong>MFT_MESSAGE_NOTIFY_END_OF_STREAM</strong> message. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformTypeNotSet"/></strong></dt> </dl> </td><td> <p> The media type is not set on one or more streams. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> Before calling this method, set the media types on all input and output streams. </p><p> The MFT might ignore certain message types. If so, the method returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. An error code indicates that the transform handles this message type but was unable to process the message in this instance. </p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTProcessMessage</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms701863</doc-id>
        /// <unmanaged>HRESULT IMFTransform::ProcessMessage([In] MFT_MESSAGE_TYPE eMessage,[In] ULONG_PTR ulParam)</unmanaged>
        /// <unmanaged-short>IMFTransform::ProcessMessage</unmanaged-short>
        public unsafe void ProcessMessage(SharpDX.MediaFoundation.TMessageType eMessage, System.IntPtr ulParam)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)eMessage), (void *)ulParam, (*(void ***)this._nativePointer)[23]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Delivers data to an input stream on this Media Foundation transform (MFT). </p>
        /// </summary>
        /// <param name = "dwInputStreamID"><dd> <p> Input stream identifier. To get the list of stream identifiers, call <strong>IMFTransform::GetStreamIDs</strong>. </p> </dd></param>
        /// <param name = "sampleRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> interface of the input sample. The sample must contain at least one media buffer that contains valid input data. </p> </dd></param>
        /// <param name = "dwFlags"><dd> <p> Reserved. Must be zero. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p> Invalid argument. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream identifier. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoSampleDuration"/></strong></dt> </dl> </td><td> <p>The input sample requires a valid sample duration. To set the duration, call <strong>IMFSample::SetSampleDuration</strong>. </p> <p>Some MFTs require that input samples have valid durations. Some MFTs do not require sample durations.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NoSampleTimestamp"/></strong></dt> </dl> </td><td> <p>The input sample requires a time stamp. To set the time stamp, call <strong>IMFSample::SetSampleTime</strong>. </p> <p>Some MFTs require that input samples have valid time stamps. Some MFTs do not require time stamps.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotAccepting"/></strong></dt> </dl> </td><td> <p> The transform cannot process more input at this time. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformTypeNotSet"/></strong></dt> </dl> </td><td> <p> The media type is not set on one or more streams. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "UnsupportedD3DType"/></strong></dt> </dl> </td><td> <p> The media type is not supported for DirectX Video Acceleration (DXVA). A DXVA-enabled decoder might return this error code. </p> </td></tr> </table><p>?</p><strong>Note</strong>??If you are converting a DirectX Media Object (DMO) to an MFT, be aware that <strong>S_FALSE</strong> is not a valid return code for <strong>IMFTransform::ProcessInput</strong>, unlike the <strong>IMediaObject::ProcessInput</strong> method.?</returns>
        /// <remarks>
        /// <p> In most cases, if the method succeeds, the MFT stores the sample and holds a reference count on the <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> reference. Do not re-use the sample until the MFT releases the sample. Instead of storing the sample, however, an MFT might copy the sample data into a new buffer. In that case, the MFT should set the <strong>MFT_INPUT_STREAM_DOES_NOT_ADDREF</strong> flag in the <strong>IMFTransform::GetInputStreamInfo</strong> method. </p><p> If the MFT already has enough input data to produce an output sample, it does not accept new input data, and <strong>ProcessInput</strong> returns <strong><see cref = "NotAccepting"/></strong>. At that point, the client should clear the pending input data by doing one of the following: </p><ul> <li> Generate new output by calling <strong>IMFTransform::ProcessOutput</strong>. </li> <li> Flush the input data by calling <strong>IMFTransform::ProcessMessage</strong> with the MFT_<strong>MESSAGE_COMMAND_FLUSH</strong> message. </li> </ul><p> An exception to this rule is the <strong>MFT_OUTPUT_STREAM_LAZY_READ</strong> flag. When this flag is present, the transform will discard stored samples if you give it more input. For more information, see <strong>IMFTransform::GetOutputStreamInfo</strong>. A transform should never queue any more input data than is required to produce the correct output. </p><p> An MFT can process the input data in the <strong>ProcessInput</strong> method. However, most MFTs wait until the client calls <strong>ProcessOutput</strong>. </p><p> After the client has set valid media types on all of the streams, the MFT should always be in one of two states: Able to accept more input, or able to produce more output. It should never be in both states or neither state. An MFT should only accept as much input as it needs to generate at least one output sample, at which point <strong>ProcessInput</strong> returns <strong><see cref = "NotAccepting"/></strong>. When <strong>ProcessInput</strong> returns <strong><see cref = "NotAccepting"/></strong>, the client can assume that the MFT is ready to produce output. </p><p> If an MFT encounters a non-fatal error in the input data, it can simply drop the data and attempt to recover when it gets the more input data. To request more input data, the MFT returns <strong><see cref = "TransformNeedMoreInput"/></strong> from the <strong>IMFTransform::ProcessOutput</strong> method. If the MFT drops any data, it should set the <strong><see cref = "Discontinuity"/></strong> attribute attribute on the next output sample, to notify the caller that there is a gap in the data stream. </p><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including mftransform.h, this method is renamed <strong>MFTProcessInput</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms703131</doc-id>
        /// <unmanaged>HRESULT IMFTransform::ProcessInput([In] DWORD dwInputStreamID,[In] IMFSample* pSample,[In] DWORD dwFlags)</unmanaged>
        /// <unmanaged-short>IMFTransform::ProcessInput</unmanaged-short>
        public unsafe void ProcessInput(System.Int32 dwInputStreamID, SharpDX.MediaFoundation.Sample sampleRef, System.Int32 dwFlags)
        {
            System.IntPtr sampleRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            sampleRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Sample>(sampleRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwInputStreamID, (void *)sampleRef_, dwFlags, (*(void ***)this._nativePointer)[24]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Generates output from the current input data. </p>
        /// </summary>
        /// <param name = "dwFlags"><dd> <p> Bitwise <strong>OR</strong> of zero or more flags from the <strong>_MFT_PROCESS_OUTPUT_FLAGS</strong> enumeration. </p> </dd></param>
        /// <param name = "cOutputBufferCount"><dd> <p> Number of elements in the <em>pOutputSamples</em> array. The value must be at least 1. </p> </dd></param>
        /// <param name = "outputSamplesRef"><dd> <p> Pointer to an array of <strong><see cref = "SharpDX.MediaFoundation.TOutputDataBuffer"/></strong> structures, allocated by the caller. The MFT uses this array to return output data to the caller. </p> </dd></param>
        /// <param name = "dwStatusRef"><dd> <p> Receives a bitwise <strong>OR</strong> of zero or more flags from the <strong>_MFT_PROCESS_OUTPUT_STATUS</strong> enumeration. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_UNEXPECTED</strong></dt> </dl> </td><td> <p>The <strong>ProcessOutput</strong> method was called on an asynchronous MFT that was not expecting this method call.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream identifier in the <strong>dwStreamID</strong> member of one or more <strong><see cref = "SharpDX.MediaFoundation.TOutputDataBuffer"/></strong> structures. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformNeedMoreInput"/></strong></dt> </dl> </td><td> <p> The transform cannot produce output data until it receives more input data. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformStreamChange"/></strong></dt> </dl> </td><td> <p> The format has changed on an output stream, or there is a new preferred format, or there is a new output stream. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "TransformTypeNotSet"/></strong></dt> </dl> </td><td> <p> You must set the media type on one or more streams of the MFT. </p> </td></tr> </table><p>?</p><strong>Note</strong>??If you are converting a DirectX Media Object (DMO) to an MFT, be aware that <strong>S_FALSE</strong> is not a valid return code for <strong>IMFTransform::ProcessOutput</strong>, unlike the <strong>IMediaObject::ProcessOutput</strong> method.?</returns>
        /// <remarks>
        /// <p> The size of the <em>pOutputSamples</em> array must be equal to or greater than the number of <em>selected</em> output streams. The number of selected output streams equals the total number of output streams minus the number of <em>deselected</em> streams. A stream is deselected if it has the <strong>MFT_OUTPUT_STREAM_OPTIONAL</strong> flag and the caller does not set a media type (or sets the media type to <strong><c>null</c></strong>). For more information, see <strong>_MFT_OUTPUT_STREAM_INFO_FLAGS</strong> enumeration. </p><p>This method generates output samples and can also generate events. If the method succeeds, at least one of the following conditions is true:</p><ul> <li> One or more samples in the <em>pOutputSamples</em> array contains output data. </li> <li> One or more members of the <em>pOutputSamples</em> array contains a non-empty collection of events. </li> </ul><p>If <strong>MFT_UNIQUE_METHOD_NAMES</strong> is defined before including Mftransform.h, this method is renamed <strong>MFTProcessOutput</strong>. See Creating Hybrid DMO/MFT Objects.</p>
        /// </remarks>
        /// <doc-id>ms704014</doc-id>
        /// <unmanaged>HRESULT IMFTransform::ProcessOutput([In] DWORD dwFlags,[In] DWORD cOutputBufferCount,[In] MFT_OUTPUT_DATA_BUFFER* pOutputSamples,[Out] DWORD* pdwStatus)</unmanaged>
        /// <unmanaged-short>IMFTransform::ProcessOutput</unmanaged-short>
        internal unsafe SharpDX.Result ProcessOutput(SharpDX.MediaFoundation.TransformProcessOutputFlags dwFlags, System.Int32 cOutputBufferCount, ref SharpDX.MediaFoundation.TOutputDataBuffer outputSamplesRef, out SharpDX.MediaFoundation.TransformProcessOutputStatus dwStatusRef)
        {
            SharpDX.MediaFoundation.TOutputDataBuffer.__Native outputSamplesRef_ = default (SharpDX.MediaFoundation.TOutputDataBuffer.__Native);
            SharpDX.Result __result__;
            outputSamplesRef.__MarshalTo(ref outputSamplesRef_);
            fixed (void *dwStatusRef_ = &dwStatusRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)dwFlags), cOutputBufferCount, &outputSamplesRef_, dwStatusRef_, (*(void ***)this._nativePointer)[25]);
            outputSamplesRef.__MarshalFree(ref outputSamplesRef_);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("542612C4-A1B8-4632-B521-DE11EA64A0B0")]
    public partial class TrustedInput : SharpDX.ComObject
    {
        public TrustedInput(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TrustedInput(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TrustedInput(nativePtr);
        /// <summary>
        /// <p> </p><p>Retrieves the input trust authority (ITA) for a specified stream.</p>
        /// </summary>
        /// <param name = "dwStreamID"><dd> <p>The stream identifier for which the ITA is being requested.</p> </dd></param>
        /// <param name = "riid"><dd> <p>The interface identifier (IID) of the interface being requested. Currently the only supported value is IID_IMFInputTrustAuthority.</p> </dd></param>
        /// <param name = "unkObjectOut"><dd> <p>Receives a reference to the ITA's <strong><see cref = "SharpDX.IUnknown"/></strong> interface. The caller must release the interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_NOINTERFACE</strong></dt> </dl> </td><td> <p>The ITA does not expose the requested interface.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970501</doc-id>
        /// <unmanaged>HRESULT IMFTrustedInput::GetInputTrustAuthority([In] DWORD dwStreamID,[In] const GUID&amp; riid,[Out] IUnknown** ppunkObject)</unmanaged>
        /// <unmanaged-short>IMFTrustedInput::GetInputTrustAuthority</unmanaged-short>
        public unsafe void GetInputTrustAuthority(System.Int32 dwStreamID, System.Guid riid, out SharpDX.IUnknown unkObjectOut)
        {
            System.IntPtr unkObjectOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamID, &riid, &unkObjectOut_, (*(void ***)this._nativePointer)[3]);
            if (unkObjectOut_ != System.IntPtr.Zero)
                unkObjectOut = new SharpDX.ComObject(unkObjectOut_);
            else
                unkObjectOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("D19F8E95-B126-4446-890C-5DCB7AD71453")]
    public partial class TrustedOutput : SharpDX.ComObject
    {
        public TrustedOutput(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TrustedOutput(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TrustedOutput(nativePtr);
        /// <summary>
        /// <p> Gets the number of output trust authorities (OTAs) provided by this trusted output. Each OTA reports a single action.</p>
        /// </summary>
        /// <doc-id>bb970384</doc-id>
        /// <unmanaged>GetOutputTrustAuthorityCount</unmanaged>
        /// <unmanaged-short>GetOutputTrustAuthorityCount</unmanaged-short>
        public System.Int32 OutputTrustAuthorityCount
        {
            get
            {
                GetOutputTrustAuthorityCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Queries whether this output is a policy sink, meaning it handles the rights and restrictions required by the input trust authority (ITA).</p>
        /// </summary>
        /// <remarks>
        /// <p>A trusted output is generally considered to be a policy sink if it does not pass the media content that it receives anywhere else; or, if it does pass the media content elsewhere, either it protects the content using some proprietary method such as encryption, or it sufficiently devalues the content so as not to require protection.</p>
        /// </remarks>
        /// <doc-id>bb970324</doc-id>
        /// <unmanaged>IsFinal</unmanaged>
        /// <unmanaged-short>IsFinal</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsFinal
        {
            get
            {
                IsFinal_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> Gets the number of output trust authorities (OTAs) provided by this trusted output. Each OTA reports a single action.</p>
        /// </summary>
        /// <param name = "cOutputTrustAuthoritiesRef"><dd> <p> Receives the number of OTAs. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>bb970384</doc-id>
        /// <unmanaged>HRESULT IMFTrustedOutput::GetOutputTrustAuthorityCount([Out] DWORD* pcOutputTrustAuthorities)</unmanaged>
        /// <unmanaged-short>IMFTrustedOutput::GetOutputTrustAuthorityCount</unmanaged-short>
        internal unsafe void GetOutputTrustAuthorityCount(out System.Int32 cOutputTrustAuthoritiesRef)
        {
            SharpDX.Result __result__;
            fixed (void *cOutputTrustAuthoritiesRef_ = &cOutputTrustAuthoritiesRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cOutputTrustAuthoritiesRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets an output trust authority (OTA), specified by index.</p>
        /// </summary>
        /// <param name = "dwIndex"><dd> <p> Zero-based index of the OTA to retrieve. To get the number of OTAs provided by this object, call <strong>IMFTrustedOutput::GetOutputTrustAuthorityCount</strong>. </p> </dd></param>
        /// <param name = "authorityOut"><dd> <p> Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.OutputTrustAuthority"/></strong> interface of the OTA. The caller must release the interface. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>bb970401</doc-id>
        /// <unmanaged>HRESULT IMFTrustedOutput::GetOutputTrustAuthorityByIndex([In] DWORD dwIndex,[Out] IMFOutputTrustAuthority** ppauthority)</unmanaged>
        /// <unmanaged-short>IMFTrustedOutput::GetOutputTrustAuthorityByIndex</unmanaged-short>
        public unsafe void GetOutputTrustAuthorityByIndex(System.Int32 dwIndex, out SharpDX.MediaFoundation.OutputTrustAuthority authorityOut)
        {
            System.IntPtr authorityOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwIndex, &authorityOut_, (*(void ***)this._nativePointer)[4]);
            if (authorityOut_ != System.IntPtr.Zero)
                authorityOut = new SharpDX.MediaFoundation.OutputTrustAuthority(authorityOut_);
            else
                authorityOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Queries whether this output is a policy sink, meaning it handles the rights and restrictions required by the input trust authority (ITA).</p>
        /// </summary>
        /// <param name = "fIsFinalRef"><dd> <p>Receives a Boolean value. If <strong>TRUE</strong>, this object is a policy sink. If <strong><see cref = "SharpDX.Result.False"/></strong>, the policy must be enforced further downstream.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>A trusted output is generally considered to be a policy sink if it does not pass the media content that it receives anywhere else; or, if it does pass the media content elsewhere, either it protects the content using some proprietary method such as encryption, or it sufficiently devalues the content so as not to require protection.</p>
        /// </remarks>
        /// <doc-id>bb970324</doc-id>
        /// <unmanaged>HRESULT IMFTrustedOutput::IsFinal([Out] BOOL* pfIsFinal)</unmanaged>
        /// <unmanaged-short>IMFTrustedOutput::IsFinal</unmanaged-short>
        internal unsafe void IsFinal_(out SharpDX.Mathematics.Interop.RawBool fIsFinalRef)
        {
            fIsFinalRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fIsFinalRef_ = &fIsFinalRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fIsFinalRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("83A4CE40-7710-494b-A893-A472049AF630")]
    public partial class TrustedVideoPlugin : SharpDX.ComObject
    {
        public TrustedVideoPlugin(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TrustedVideoPlugin(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TrustedVideoPlugin(nativePtr);
        /// <summary>
        /// <p> Limits the effective video resolution. </p>
        /// </summary>
        /// <remarks>
        /// <p>This method limits the effective resolution of the video image. The actual resolution on the target device might be higher, due to stretching the image.</p><p>The EVR might call this method at any time if the <strong>IEVRTrustedVideoPlugin::CanConstrict</strong> method returns <strong>TRUE</strong>.</p>
        /// </remarks>
        /// <doc-id>aa473833</doc-id>
        /// <unmanaged>SetConstriction</unmanaged>
        /// <unmanaged-short>SetConstriction</unmanaged-short>
        public System.Int32 Constriction
        {
            set => SetConstriction(value);
        }

        /// <summary>
        /// <p> Queries whether the plug-in has any transient vulnerabilities at this time. </p>
        /// </summary>
        /// <param name = "yesRef"><dd> <p>Receives a Boolean value. If <strong>TRUE</strong>, the plug-in has no transient vulnerabilities at the moment and can receive protected content. If <strong><see cref = "SharpDX.Result.False"/></strong>, the plug-in has a transient vulnerability. If the method fails, the EVR treats the value as <strong><see cref = "SharpDX.Result.False"/></strong> (untrusted).</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method provides a way for the plug-in to report temporary conditions that would cause the input trust authority (ITA) to distrust the plug-in. For example, if an EVR presenter is in windowed mode, it is vulnerable to GDI screen captures.</p><p>To disable screen capture in Direct3D, the plug-in must do the following:</p><ul> <li> <p>Create the Direct3D device in full-screen exlusive mode.</p> </li> <li> <p>Specify the D3DCREATE_DISABLE_PRINTSCREEN flag when you create the device. For more information, see <strong>IDirect3D9::CreateDevice</strong> in the DirectX documentation.</p> </li> </ul><p>In addition, the graphics adapter must support the Windows Vista Display Driver Model (WDDM) and the Direct3D extensions for Windows Vista (sometimes called D3D9Ex or D3D9L).</p><p>If these conditions are met, the presenter can return <strong>TRUE</strong> in the <em>pYes</em> parameter. Otherwise, it should return <strong><see cref = "SharpDX.Result.False"/></strong>.</p><p>The EVR calls this method whenever the device changes. If the plug-in returns <strong><see cref = "SharpDX.Result.False"/></strong>, the EVR treats this condition as if the plug-in had a new output connector of unknown type. The policy object can then allow or block playback, depending on the ITA's policy.</p><p>This method should be used only to report transient conditions. A plug-in that is never in a trusted state should not implement the <strong><see cref = "SharpDX.MediaFoundation.TrustedVideoPlugin"/></strong> interface at all.</p>
        /// </remarks>
        /// <doc-id>aa473794</doc-id>
        /// <unmanaged>HRESULT IEVRTrustedVideoPlugin::IsInTrustedVideoMode([In] BOOL* pYes)</unmanaged>
        /// <unmanaged-short>IEVRTrustedVideoPlugin::IsInTrustedVideoMode</unmanaged-short>
        public unsafe void IsInTrustedVideoMode(SharpDX.Mathematics.Interop.RawBool yesRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &yesRef, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Queries whether the plug-in can limit the effective video resolution. </p>
        /// </summary>
        /// <param name = "yesRef"><dd> <p>Receives a Boolean value. If <strong>TRUE</strong>, the plug-in can limit the effective video resolution. Otherwise, the plug-in cannot limit the video resolution. If the method fails, the EVR treats the value as <strong><see cref = "SharpDX.Result.False"/></strong> (not supported).</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Constriction is a protection mechanism that limits the effective resolution of the video frame to a specified maximum number of pixels.</p><p>Video constriction can be implemented by either the mixer or the presenter.</p><p>If the method returns <strong>TRUE</strong>, the EVR might call <strong>IEVRTrustedVideoPlugin::SetConstriction</strong> at any time.</p>
        /// </remarks>
        /// <doc-id>aa473782</doc-id>
        /// <unmanaged>HRESULT IEVRTrustedVideoPlugin::CanConstrict([In] BOOL* pYes)</unmanaged>
        /// <unmanaged-short>IEVRTrustedVideoPlugin::CanConstrict</unmanaged-short>
        public unsafe void CanConstrict(SharpDX.Mathematics.Interop.RawBool yesRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &yesRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Limits the effective video resolution. </p>
        /// </summary>
        /// <param name = "dwKPix"><dd> <p>Maximum number of source pixels that may appear in the final video image, in thousands of pixels. If the value is zero, the video is disabled. If the value is MAXDWORD (0xFFFFFFFF), video constriction is removed and the video may be rendered at full resolution.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method limits the effective resolution of the video image. The actual resolution on the target device might be higher, due to stretching the image.</p><p>The EVR might call this method at any time if the <strong>IEVRTrustedVideoPlugin::CanConstrict</strong> method returns <strong>TRUE</strong>.</p>
        /// </remarks>
        /// <doc-id>aa473833</doc-id>
        /// <unmanaged>HRESULT IEVRTrustedVideoPlugin::SetConstriction([In] DWORD dwKPix)</unmanaged>
        /// <unmanaged-short>IEVRTrustedVideoPlugin::SetConstriction</unmanaged-short>
        internal unsafe void SetConstriction(System.Int32 dwKPix)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwKPix, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Enables or disables the ability of the plug-in to export the video image. </p>
        /// </summary>
        /// <param name = "bDisable"><dd> <p>Boolean value. Specify <strong>TRUE</strong> to disable image exporting, or <strong><see cref = "SharpDX.Result.False"/></strong> to enable it.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>An EVR plug-in might expose a way for the application to get a copy of the video frames. For example, the standard EVR presenter implements <strong>IMFVideoDisplayControl::GetCurrentImage</strong>.</p><p>If the plug-in supports image exporting, this method enables or disables it. Before this method has been called for the first time, the EVR assumes that the mechanism is enabled.</p><p>If the plug-in does not support image exporting, this method should return <see cref = "SharpDX.Result.Ok"/> and ignore the value of <em>bDisable</em>. If the method fails, the EVR treats it as a failure to enforce the policy, which will probably cause playback to stop.</p><p>While image exporting is disabled, any associated export method, such as <strong>GetCurrentImage</strong>, should return <see cref = "LicenseIncorrectRights"/>.</p>
        /// </remarks>
        /// <doc-id>aa473830</doc-id>
        /// <unmanaged>HRESULT IEVRTrustedVideoPlugin::DisableImageExport([In] BOOL bDisable)</unmanaged>
        /// <unmanaged-short>IEVRTrustedVideoPlugin::DisableImageExport</unmanaged-short>
        public unsafe void DisableImageExport(SharpDX.Mathematics.Interop.RawBool bDisable)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, bDisable, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("A38D9567-5A9C-4f3c-B293-8EB415B279BA")]
    public partial class VideoDeviceID : SharpDX.ComObject
    {
        public VideoDeviceID(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator VideoDeviceID(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new VideoDeviceID(nativePtr);
        /// <summary>
        /// <p> </p><p>Returns the identifier of the video device supported by an EVR mixer or presenter.</p>
        /// </summary>
        /// <remarks>
        /// <p>If a mixer or presenter uses Direct3D 9, it must return the value IID_IDirect3DDevice9 in <em>pDeviceID</em>. The EVR's default mixer and presenter both return this value. If you write a custom mixer or presenter, it can return some other value. However, the mixer and presenter must use matching device identifiers.</p>
        /// </remarks>
        /// <doc-id>ms704630</doc-id>
        /// <unmanaged>GetDeviceID</unmanaged>
        /// <unmanaged-short>GetDeviceID</unmanaged-short>
        public System.Guid DeviceID
        {
            get
            {
                GetDeviceID(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p> </p><p>Returns the identifier of the video device supported by an EVR mixer or presenter.</p>
        /// </summary>
        /// <param name = "deviceIDRef"><dd> <p>Receives the device identifier. Generally, the value is IID_IDirect3DDevice9.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If a mixer or presenter uses Direct3D 9, it must return the value IID_IDirect3DDevice9 in <em>pDeviceID</em>. The EVR's default mixer and presenter both return this value. If you write a custom mixer or presenter, it can return some other value. However, the mixer and presenter must use matching device identifiers.</p>
        /// </remarks>
        /// <doc-id>ms704630</doc-id>
        /// <unmanaged>HRESULT IMFVideoDeviceID::GetDeviceID([Out] GUID* pDeviceID)</unmanaged>
        /// <unmanaged-short>IMFVideoDeviceID::GetDeviceID</unmanaged-short>
        internal unsafe void GetDeviceID(out System.Guid deviceIDRef)
        {
            deviceIDRef = default (System.Guid);
            SharpDX.Result __result__;
            fixed (void *deviceIDRef_ = &deviceIDRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, deviceIDRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a490b1e4-ab84-4d31-a1b2-181e03b1077a")]
    public partial class VideoDisplayControl : SharpDX.ComObject
    {
        public VideoDisplayControl(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator VideoDisplayControl(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new VideoDisplayControl(nativePtr);
        /// <summary>
        /// <p> Queries how the enhanced video renderer (EVR) handles the aspect ratio of the source video. </p>
        /// </summary>
        /// <doc-id>ms702253</doc-id>
        /// <unmanaged>GetAspectRatioMode / SetAspectRatioMode</unmanaged>
        /// <unmanaged-short>GetAspectRatioMode</unmanaged-short>
        public System.Int32 AspectRatioMode
        {
            get
            {
                GetAspectRatioMode(out var __output__);
                return __output__;
            }

            set => SetAspectRatioMode(value);
        }

        /// <summary>
        /// <p>Gets or sets the clipping window for the video. </p>
        /// </summary>
        /// <remarks>
        /// <p>There is no default clipping window. The application must set the clipping window.</p>
        /// </remarks>
        /// <doc-id>ms694138</doc-id>
        /// <unmanaged>GetVideoWindow / SetVideoWindow</unmanaged>
        /// <unmanaged-short>GetVideoWindow</unmanaged-short>
        public System.IntPtr VideoWindow
        {
            get
            {
                GetVideoWindow(out var __output__);
                return __output__;
            }

            set => SetVideoWindow(value);
        }

        /// <summary>
        /// <p>Gets or sets the border color for the video. </p>
        /// </summary>
        /// <remarks>
        /// <p>The border color is used for areas where the enhanced video renderer (EVR) does not draw any video.</p><p>The border color is not used for letterboxing. To get the letterbox color, call <strong>IMFVideoProcessor::GetBackgroundColor</strong>.</p>
        /// </remarks>
        /// <doc-id>ms694894</doc-id>
        /// <unmanaged>GetBorderColor / SetBorderColor</unmanaged>
        /// <unmanaged-short>GetBorderColor</unmanaged-short>
        public System.Int32 BorderColor
        {
            get
            {
                GetBorderColor(out var __output__);
                return __output__;
            }

            set => SetBorderColor(value);
        }

        /// <summary>
        /// <p>Gets or sets various video rendering settings. </p>
        /// </summary>
        /// <doc-id>ms701592</doc-id>
        /// <unmanaged>GetRenderingPrefs / SetRenderingPrefs</unmanaged>
        /// <unmanaged-short>GetRenderingPrefs</unmanaged-short>
        public System.Int32 RenderingPrefs
        {
            get
            {
                GetRenderingPrefs(out var __output__);
                return __output__;
            }

            set => SetRenderingPrefs(value);
        }

        /// <summary>
        /// <p> Queries whether the enhanced video renderer (EVR) is currently in full-screen mode. </p>
        /// </summary>
        /// <doc-id>ms704817</doc-id>
        /// <unmanaged>GetFullscreen / SetFullscreen</unmanaged>
        /// <unmanaged-short>GetFullscreen</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool Fullscreen
        {
            get
            {
                GetFullscreen(out var __output__);
                return __output__;
            }

            set => SetFullscreen(value);
        }

        /// <summary>
        /// <p> Gets the size and aspect ratio of the video, prior to any stretching by the video renderer. </p>
        /// </summary>
        /// <param name = "szVideoRef"><dd> <p>Receives the size of the native video rectangle. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "szARVideoRef"><dd> <p>Receives the aspect ratio of the video. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>At least one of the parameters must be non-<strong><c>null</c></strong>.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>If no media types have been set on any video streams, the method succeeds but all parameters are set to zero.</p><p>You can set <em>pszVideo</em> or <em>pszARVideo</em> to <strong><c>null</c></strong>, but not both.</p>
        /// </remarks>
        /// <doc-id>ms694294</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::GetNativeVideoSize([InOut, Optional] SIZE* pszVideo,[InOut, Optional] SIZE* pszARVideo)</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::GetNativeVideoSize</unmanaged-short>
        public unsafe void GetNativeVideoSize(System.IntPtr szVideoRef, System.IntPtr szARVideoRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szVideoRef, (void *)szARVideoRef, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the range of sizes that the enhanced video renderer (EVR) can display without significantly degrading performance or image quality. </p>
        /// </summary>
        /// <param name = "szMinRef"><dd> <p>Receives the minimum ideal size. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "szMaxRef"><dd> <p>Receives the maximum ideal size. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>At least one parameter must be non-<strong><c>null</c></strong>.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>You can set <em>pszMin</em> or <em>pszMax</em> to <strong><c>null</c></strong>, but not both.</p>
        /// </remarks>
        /// <doc-id>ms703076</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::GetIdealVideoSize([InOut, Optional] SIZE* pszMin,[InOut, Optional] SIZE* pszMax)</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::GetIdealVideoSize</unmanaged-short>
        public unsafe void GetIdealVideoSize(System.IntPtr szMinRef, System.IntPtr szMaxRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)szMinRef, (void *)szMaxRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the source and destination rectangles for the video.</p>
        /// </summary>
        /// <param name = "nrcSourceRef"><dd> <p>Pointer to an <strong><see cref = "SharpDX.MediaFoundation.VideoNormalizedRect"/></strong> structure that specifies the source rectangle. This parameter can be <strong><c>null</c></strong>. If this parameter is <strong><c>null</c></strong>, the source rectangle does not change.</p> </dd></param>
        /// <param name = "rcDestRef"><dd> <p>Specifies the destination rectangle. This parameter can be <strong><c>null</c></strong>. If this parameter is <strong><c>null</c></strong>, the destination rectangle does not change.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>At least one parameter must be non-<strong><c>null</c></strong>.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The source rectangle defines which portion of the video is displayed. It is specified in <em>normalized</em> coordinates. For more information, see <strong><see cref = "SharpDX.MediaFoundation.VideoNormalizedRect"/></strong> structure. To display the entire video image, set the source rectangle to {0, 0, 1, 1}. The default source rectangle is {0, 0, 1, 1}.</p><p>The destination rectangle defines a rectangle within the clipping window where the video appears. It is specified in pixels, relative to the client area of the window. To fill the entire window, set the destination rectangle to {0, 0, <em>width</em>, <em>height</em>}, where <em>width</em> and <em>height</em> are dimensions of the window client area. The default destination rectangle is {0, 0, 0, 0}.</p><p>To update just one of these rectangles, set the other parameter to <strong><c>null</c></strong>. You can set <em>pnrcSource</em> or <em>prcDest</em> to <strong><c>null</c></strong>, but not both.</p><p>Before setting the destination rectangle (<em>prcDest</em>), you must set the video window by calling <strong>IMFVideoDisplayControl::SetVideoWindow</strong>. (For the Media Foundation version of the EVR, you can also provide the video window in the <strong>MFCreateVideoRendererActivate</strong> function.) If no video window was provided, <strong>SetVideoPosition</strong> returns E_POINTER.</p>
        /// </remarks>
        /// <doc-id>ms697352</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::SetVideoPosition([In, Optional] const MFVideoNormalizedRect* pnrcSource,[In, Optional] const RECT* prcDest)</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::SetVideoPosition</unmanaged-short>
        public unsafe void SetVideoPosition(SharpDX.MediaFoundation.VideoNormalizedRect? nrcSourceRef, SharpDX.Mathematics.Interop.RawRectangle? rcDestRef)
        {
            SharpDX.MediaFoundation.VideoNormalizedRect nrcSourceRef_;
            SharpDX.Mathematics.Interop.RawRectangle rcDestRef_;
            SharpDX.Result __result__;
            if (nrcSourceRef != null)
                nrcSourceRef_ = nrcSourceRef.Value;
            if (rcDestRef != null)
                rcDestRef_ = rcDestRef.Value;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, nrcSourceRef == null ? (void *)0 : &nrcSourceRef_, rcDestRef == null ? (void *)0 : &rcDestRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the source and destination rectangles for the video. </p>
        /// </summary>
        /// <param name = "nrcSourceRef"><dd> <p>Pointer to an <strong><see cref = "SharpDX.MediaFoundation.VideoNormalizedRect"/></strong> structure that receives the source rectangle.</p> </dd></param>
        /// <param name = "rcDestRef"><dd> <p>Receives the current destination rectangle.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>One or more required parameters are <strong><c>null</c></strong>.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970409</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::GetVideoPosition([Out] MFVideoNormalizedRect* pnrcSource,[Out] RECT* prcDest)</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::GetVideoPosition</unmanaged-short>
        public unsafe void GetVideoPosition(out SharpDX.MediaFoundation.VideoNormalizedRect nrcSourceRef, out SharpDX.Mathematics.Interop.RawRectangle rcDestRef)
        {
            nrcSourceRef = default (SharpDX.MediaFoundation.VideoNormalizedRect);
            rcDestRef = default (SharpDX.Mathematics.Interop.RawRectangle);
            SharpDX.Result __result__;
            fixed (void *rcDestRef_ = &rcDestRef)
                fixed (void *nrcSourceRef_ = &nrcSourceRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, nrcSourceRef_, rcDestRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Specifies how the enhanced video renderer (EVR) handles the aspect ratio of the source video.</p>
        /// </summary>
        /// <param name = "dwAspectRatioMode"><dd> <p>Bitwise <strong>OR</strong> of one or more flags from the <strong><see cref = "SharpDX.MediaFoundation.VideoAspectRatioMode"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid flags.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms704027</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::SetAspectRatioMode([In] DWORD dwAspectRatioMode)</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::SetAspectRatioMode</unmanaged-short>
        internal unsafe void SetAspectRatioMode(System.Int32 dwAspectRatioMode)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwAspectRatioMode, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Queries how the enhanced video renderer (EVR) handles the aspect ratio of the source video. </p>
        /// </summary>
        /// <param name = "dwAspectRatioModeRef"><dd> <p>Receives a bitwise <strong>OR</strong> of one or more flags from the <strong><see cref = "SharpDX.MediaFoundation.VideoAspectRatioMode"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms702253</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::GetAspectRatioMode([Out] DWORD* pdwAspectRatioMode)</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::GetAspectRatioMode</unmanaged-short>
        internal unsafe void GetAspectRatioMode(out System.Int32 dwAspectRatioModeRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwAspectRatioModeRef_ = &dwAspectRatioModeRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwAspectRatioModeRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the source and destination rectangles for the video.</p>
        /// </summary>
        /// <param name = "hwndVideo"><dd> <p>Pointer to an <strong><see cref = "SharpDX.MediaFoundation.VideoNormalizedRect"/></strong> structure that specifies the source rectangle. This parameter can be <strong><c>null</c></strong>. If this parameter is <strong><c>null</c></strong>, the source rectangle does not change.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_POINTER</strong></dt> </dl> </td><td> <p>At least one parameter must be non-<strong><c>null</c></strong>.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The source rectangle defines which portion of the video is displayed. It is specified in <em>normalized</em> coordinates. For more information, see <strong><see cref = "SharpDX.MediaFoundation.VideoNormalizedRect"/></strong> structure. To display the entire video image, set the source rectangle to {0, 0, 1, 1}. The default source rectangle is {0, 0, 1, 1}.</p><p>The destination rectangle defines a rectangle within the clipping window where the video appears. It is specified in pixels, relative to the client area of the window. To fill the entire window, set the destination rectangle to {0, 0, <em>width</em>, <em>height</em>}, where <em>width</em> and <em>height</em> are dimensions of the window client area. The default destination rectangle is {0, 0, 0, 0}.</p><p>To update just one of these rectangles, set the other parameter to <strong><c>null</c></strong>. You can set <em>pnrcSource</em> or <em>prcDest</em> to <strong><c>null</c></strong>, but not both.</p><p>Before setting the destination rectangle (<em>prcDest</em>), you must set the video window by calling <strong>IMFVideoDisplayControl::SetVideoWindow</strong>. (For the Media Foundation version of the EVR, you can also provide the video window in the <strong>MFCreateVideoRendererActivate</strong> function.) If no video window was provided, <strong>SetVideoPosition</strong> returns E_POINTER.</p>
        /// </remarks>
        /// <doc-id>ms697352</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::SetVideoWindow([In] HWND hwndVideo)</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::SetVideoWindow</unmanaged-short>
        internal unsafe void SetVideoWindow(System.IntPtr hwndVideo)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hwndVideo, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the clipping window for the video. </p>
        /// </summary>
        /// <param name = "hwndVideoRef"><dd> <p>Receives a handle to the window where the enhanced video renderer (EVR) will draw the video.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>There is no default clipping window. The application must set the clipping window.</p>
        /// </remarks>
        /// <doc-id>ms694138</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::GetVideoWindow([Out] HWND* phwndVideo)</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::GetVideoWindow</unmanaged-short>
        internal unsafe void GetVideoWindow(out System.IntPtr hwndVideoRef)
        {
            SharpDX.Result __result__;
            fixed (void *hwndVideoRef_ = &hwndVideoRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, hwndVideoRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Repaints the current video frame. Call this method whenever the application receives a WM_PAINT message.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The EVR cannot repaint the frame at this time. This error can occur while the EVR is switching between full-screen and windowed mode. The caller can safely ignore this error.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms703113</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::RepaintVideo()</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::RepaintVideo</unmanaged-short>
        public unsafe void RepaintVideo()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets a copy of the current image being displayed by the video renderer. </p>
        /// </summary>
        /// <param name = "bihRef"><dd> <p>Pointer to a <strong><see cref = "SharpDX.Win32.BitmapInfoHeader"/></strong> structure that receives a description of the bitmap. Set the <strong>biSize</strong> member of the structure to <code>sizeof(<see cref = "SharpDX.Win32.BitmapInfoHeader"/>)</code> before calling the method.</p> </dd></param>
        /// <param name = "dibRef"><dd> <p>Receives a reference to a buffer that contains a packed Windows device-independent bitmap (DIB). The caller must free the memory for the bitmap by calling <strong>CoTaskMemFree</strong>.</p> </dd></param>
        /// <param name = "cbDibRef"><dd> <p>Receives the size of the buffer returned in <em>pDib</em>, in bytes.</p> </dd></param>
        /// <param name = "timeStampRef"><dd> <p>Receives the time stamp of the captured image.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "LicenseIncorrectRights"/></strong></dt> </dl> </td><td> <p>The content is protected and the license does not permit capturing the image.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method can be called at any time. However, calling the method too frequently degrades the video playback performance.</p><p>This method retrieves a copy of the final composited image, which includes any substreams, alpha-blended bitmap, aspect ratio correction, background color, and so forth.</p><p>In windowed mode, the bitmap is the size of the destination rectangle specified in <strong>IMFVideoDisplayControl::SetVideoPosition</strong>. In full-screen mode, the bitmap is the size of the display.</p>
        /// </remarks>
        /// <doc-id>ms695342</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::GetCurrentImage([InOut] BITMAPINFOHEADER* pBih,[Buffer, Optional] unsigned char** pDib,[Out] DWORD* pcbDib,[InOut, Optional] longlong* pTimeStamp)</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::GetCurrentImage</unmanaged-short>
        public unsafe void GetCurrentImage(ref SharpDX.Win32.BitmapInfoHeader bihRef, System.Byte[] dibRef, out System.Int32 cbDibRef, System.IntPtr timeStampRef)
        {
            SharpDX.Result __result__;
            fixed (void *cbDibRef_ = &cbDibRef)
                fixed (void *dibRef_ = dibRef)
                    fixed (void *bihRef_ = &bihRef)
                        __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, bihRef_, dibRef_, cbDibRef_, (void *)timeStampRef, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets the border color for the video.</p>
        /// </summary>
        /// <param name = "clr"><dd> <p>Specifies the border color as a <strong><see cref = "System.Int32"/></strong> value.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>By default, if the video window straddles two monitors, the enhanced video renderer (EVR) clips the video to one monitor and draws the border color on the remaining portion of the window. (To change the clipping behavior, call <strong>IMFVideoDisplayControl::SetRenderingPrefs</strong>.)</p><p>The border color is not used for letterboxing. To change the letterbox color, call <strong>IMFVideoProcessor::SetBackgroundColor</strong>.</p>
        /// </remarks>
        /// <doc-id>ms697024</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::SetBorderColor([In] COLORREF Clr)</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::SetBorderColor</unmanaged-short>
        internal unsafe void SetBorderColor(System.Int32 clr)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, clr, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets the border color for the video. </p>
        /// </summary>
        /// <param name = "clrRef"><dd> <p>Receives the border color, as a <strong><see cref = "System.Int32"/></strong> value.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The border color is used for areas where the enhanced video renderer (EVR) does not draw any video.</p><p>The border color is not used for letterboxing. To get the letterbox color, call <strong>IMFVideoProcessor::GetBackgroundColor</strong>.</p>
        /// </remarks>
        /// <doc-id>ms694894</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::GetBorderColor([Out] COLORREF* pClr)</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::GetBorderColor</unmanaged-short>
        internal unsafe void GetBorderColor(out System.Int32 clrRef)
        {
            SharpDX.Result __result__;
            fixed (void *clrRef_ = &clrRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, clrRef_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Sets various preferences related to video rendering.</p>
        /// </summary>
        /// <param name = "dwRenderFlags"><dd> <p>Bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.VideoRenderPrefs"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Invalid flags.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms698981</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::SetRenderingPrefs([In] DWORD dwRenderFlags)</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::SetRenderingPrefs</unmanaged-short>
        internal unsafe void SetRenderingPrefs(System.Int32 dwRenderFlags)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwRenderFlags, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Gets various video rendering settings. </p>
        /// </summary>
        /// <param name = "dwRenderFlagsRef"><dd> <p>Receives a bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.VideoRenderPrefs"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms701592</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::GetRenderingPrefs([Out] DWORD* pdwRenderFlags)</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::GetRenderingPrefs</unmanaged-short>
        internal unsafe void GetRenderingPrefs(out System.Int32 dwRenderFlagsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwRenderFlagsRef_ = &dwRenderFlagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwRenderFlagsRef_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[This API is not supported and may be altered or unavailable in the future. ]</p><p> Sets or unsets full-screen rendering mode.</p><p>To implement full-screen playback, an application should simply resize the video window to cover the entire area of the monitor. Also set the window to be a topmost window, so that the application receives all mouse-click messages. For more information about topmost windows, see the documentation for the <strong>SetWindowPos</strong> function.</p>
        /// </summary>
        /// <param name = "fFullscreen">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p> The video renderer has been shut down. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> The default EVR presenter implements full-screen mode using Direct3D exclusive mode. </p><p> If you use this  method  to switch to full-screen mode, set the application window to be a topmost window and resize the window to cover the entire monitor. This ensures that the application window receives all mouse-click messages. Also set the keyboard focus to the application window. When you switch out of full-screen mode, restore the window's original size and position. </p><p> By default, the cursor is still visible in full-screen mode. To hide the cursor, call <strong>ShowCursor</strong>. </p><p>The transition to and from full-screen mode occurs asynchronously. To get the current mode, call <strong>IMFVideoDisplayControl::GetFullscreen</strong>.</p>
        /// </remarks>
        /// <doc-id>ms701561</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::SetFullscreen([In] BOOL fFullscreen)</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::SetFullscreen</unmanaged-short>
        internal unsafe void SetFullscreen(SharpDX.Mathematics.Interop.RawBool fFullscreen)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, fFullscreen, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Queries whether the enhanced video renderer (EVR) is currently in full-screen mode. </p>
        /// </summary>
        /// <param name = "fFullscreenRef"><dd> <p>Receives a Boolean value. If <strong>TRUE</strong>, the EVR is in full-screen mode. If <strong><see cref = "SharpDX.Result.False"/></strong>, the EVR will display the video inside the application-provided clipping window.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The EVR is currently switching between full-screen and windowed mode.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms704817</doc-id>
        /// <unmanaged>HRESULT IMFVideoDisplayControl::GetFullscreen([Out] BOOL* pfFullscreen)</unmanaged>
        /// <unmanaged-short>IMFVideoDisplayControl::GetFullscreen</unmanaged-short>
        internal unsafe void GetFullscreen(out SharpDX.Mathematics.Interop.RawBool fFullscreenRef)
        {
            fFullscreenRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *fFullscreenRef_ = &fFullscreenRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, fFullscreenRef_, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("b99f381f-a8f9-47a2-a5af-ca3a225a3890")]
    public partial class VideoMediaType : SharpDX.MediaFoundation.MediaType
    {
        public VideoMediaType(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator VideoMediaType(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new VideoMediaType(nativePtr);
        /// <summary>
        /// <p>Represents a description of a video format.</p>
        /// </summary>
        /// <remarks>
        /// <p>If the major type of a media type is <see cref = "Video"/>, you can query the media type object for the <strong><see cref = "SharpDX.MediaFoundation.VideoMediaType"/></strong> interface.</p><p>Applications should avoid using this interface except when a method or function requires an <strong><see cref = "SharpDX.MediaFoundation.VideoMediaType"/></strong> reference as a parameter. You can get all of the format information from a video media type through the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface, which <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> inherits.</p>
        /// </remarks>
        /// <doc-id>aa473814</doc-id>
        /// <unmanaged>GetVideoFormat</unmanaged>
        /// <unmanaged-short>GetVideoFormat</unmanaged-short>
        public SharpDX.MediaFoundation.VideoFormat VideoFormat
        {
            get => GetVideoFormat();
        }

        /// <summary>
        /// <p>Represents a description of a video format.</p>
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <remarks>
        /// <p>If the major type of a media type is <see cref = "Video"/>, you can query the media type object for the <strong><see cref = "SharpDX.MediaFoundation.VideoMediaType"/></strong> interface.</p><p>Applications should avoid using this interface except when a method or function requires an <strong><see cref = "SharpDX.MediaFoundation.VideoMediaType"/></strong> reference as a parameter. You can get all of the format information from a video media type through the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface, which <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> inherits.</p>
        /// </remarks>
        /// <doc-id>aa473814</doc-id>
        /// <unmanaged>const MFVIDEOFORMAT* IMFVideoMediaType::GetVideoFormat()</unmanaged>
        /// <unmanaged-short>IMFVideoMediaType::GetVideoFormat</unmanaged-short>
        internal unsafe SharpDX.MediaFoundation.VideoFormat GetVideoFormat()
        {
            SharpDX.MediaFoundation.VideoFormat __result__;
            SharpDX.MediaFoundation.VideoFormat.__Native __result__native = default (SharpDX.MediaFoundation.VideoFormat.__Native);
            __result__ = default (SharpDX.MediaFoundation.VideoFormat);
            SharpDX.MediaFoundation.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__native, (*(void ***)this._nativePointer)[38]);
            __result__.__MarshalFrom(ref __result__native);
            return __result__;
        }

        /// <summary>
        /// <p>[This API is not supported and may be altered or unavailable in the future. Instead, applications should set the <strong><see cref = "DefaultStride"/></strong> attribute on the media type to specify the surface stride and then call <strong>IMFMediaType::GetRepresentation</strong>.]</p><p> Retrieves an alternative representation of the media type.</p>
        /// </summary>
        /// <param name = "guidRepresentation">No documentation.</param>
        /// <param name = "vRepresentationOut">No documentation.</param>
        /// <param name = "lStride">No documentation.</param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is equivalent to <strong>IMFMediaType::GetRepresentation</strong> but includes the <em>lStride</em> parameter.</p><p>Instead of calling this method, applications should set the <strong><see cref = "DefaultStride"/></strong> attribute on the media type to specify the surface stride and then call <strong>IMFMediaType::GetRepresentation</strong>.</p>
        /// </remarks>
        /// <doc-id>bb970371</doc-id>
        /// <unmanaged>HRESULT IMFVideoMediaType::GetVideoRepresentation([In] GUID guidRepresentation,[Out] void** ppvRepresentation,[In] LONG lStride)</unmanaged>
        /// <unmanaged-short>IMFVideoMediaType::GetVideoRepresentation</unmanaged-short>
        public unsafe void GetVideoRepresentation(System.Guid guidRepresentation, out System.IntPtr vRepresentationOut, System.Int32 lStride)
        {
            SharpDX.Result __result__;
            fixed (void *vRepresentationOut_ = &vRepresentationOut)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, guidRepresentation, vRepresentationOut_, lStride, (*(void ***)this._nativePointer)[39]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("A5C6C53F-C202-4aa5-9695-175BA8C508A5")]
    public partial class VideoMixerControl : SharpDX.ComObject
    {
        public VideoMixerControl(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator VideoMixerControl(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new VideoMixerControl(nativePtr);
        /// <summary>
        /// <p> </p><p>Sets the z-order of a video stream.</p>
        /// </summary>
        /// <param name = "dwStreamID"><dd> <p>Identifier of the stream. For the EVR media sink, the stream identifier is defined when the <strong>IMFMediaSink::AddStreamSink</strong> method is called. For the DirectShow EVR filter, the stream identifier corresponds to the pin index. The reference stream is always stream 0.</p> </dd></param>
        /// <param name = "dwZ"><dd> <p>Z-order value. The z-order of the reference stream must be zero. The maximum z-order value is the number of streams minus one.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>The value of <em>dwZ</em> is larger than the maximum z-order value.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>Invalid z-order for this stream. For the reference stream, <em>dwZ</em> must be zero. For all other streams, <em>dwZ</em> must be greater than zero.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>Invalid stream identifier.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The EVR draws the video streams in the order of their z-order values, starting with zero. The reference stream must be first in the z-order, and the remaining streams can be in any order.</p>
        /// </remarks>
        /// <doc-id>ms697453</doc-id>
        /// <unmanaged>HRESULT IMFVideoMixerControl::SetStreamZOrder([In] DWORD dwStreamID,[In] DWORD dwZ)</unmanaged>
        /// <unmanaged-short>IMFVideoMixerControl::SetStreamZOrder</unmanaged-short>
        public unsafe void SetStreamZOrder(System.Int32 dwStreamID, System.Int32 dwZ)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamID, dwZ, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the z-order of a video stream.</p>
        /// </summary>
        /// <param name = "dwStreamID"><dd> <p>Identifier of the stream. For the EVR media sink, the stream identifier is defined when the <strong>IMFMediaSink::AddStreamSink</strong> method is called. For the DirectShow EVR filter, the stream identifier corresponds to the pin index. The reference stream is always stream 0.</p> </dd></param>
        /// <param name = "dwZRef"><dd> <p>Receives the z-order value.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>Invalid stream identifier.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms701614</doc-id>
        /// <unmanaged>HRESULT IMFVideoMixerControl::GetStreamZOrder([In] DWORD dwStreamID,[Out] DWORD* pdwZ)</unmanaged>
        /// <unmanaged-short>IMFVideoMixerControl::GetStreamZOrder</unmanaged-short>
        public unsafe void GetStreamZOrder(System.Int32 dwStreamID, out System.Int32 dwZRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwZRef_ = &dwZRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamID, dwZRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Sets the position of a video stream within the composition rectangle. </p>
        /// </summary>
        /// <param name = "dwStreamID"><dd> <p>Identifier of the stream. For the EVR media sink, the stream identifier is defined when the <strong>IMFMediaSink::AddStreamSink</strong> method is called. For the DirectShow EVR filter, the stream identifier corresponds to the pin index. The reference stream is always stream 0.</p> </dd></param>
        /// <param name = "nrcOutputRef"><dd> <p>Pointer to an <strong><see cref = "SharpDX.MediaFoundation.VideoNormalizedRect"/></strong> structure that defines the bounding rectangle for the video stream.</p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p> The coordinates of the bounding rectangle given in <em>pnrcOutput</em> are not valid. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p> Invalid stream identifier. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p> The mixer draws each video stream inside a bounding rectangle that is specified relative to the final video image. This bounding rectangle is given in <em>normalized</em> coordinates. For more information, see <strong><see cref = "SharpDX.MediaFoundation.VideoNormalizedRect"/></strong> structure. </p><p> The coordinates of the bounding rectangle must fall within the range [0.0, 1.0]. Also, the X and Y coordinates of the upper-left corner cannot exceed the X and Y coordinates of the lower-right corner. In other words, the bounding rectangle must fit entirely within the composition rectangle and cannot be flipped vertically or horizontally. </p><p>The following diagram shows how the EVR mixes substreams.</p><p>The output rectangle for the stream is specified by calling <strong>SetStreamOutputRect</strong>. The source rectangle is specified by calling <strong>IMFVideoDisplayControl::SetVideoPosition</strong>. The mixer applies the output rectangle first, when it mixes the streams into a single bounding rectangle. This bounding rectangle is called <em>composition space</em>. Then the presenter applies the source rectangle to the composited image.</p>
        /// </remarks>
        /// <doc-id>ms698959</doc-id>
        /// <unmanaged>HRESULT IMFVideoMixerControl::SetStreamOutputRect([In] DWORD dwStreamID,[In] const MFVideoNormalizedRect* pnrcOutput)</unmanaged>
        /// <unmanaged-short>IMFVideoMixerControl::SetStreamOutputRect</unmanaged-short>
        public unsafe void SetStreamOutputRect(System.Int32 dwStreamID, SharpDX.MediaFoundation.VideoNormalizedRect nrcOutputRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamID, &nrcOutputRef, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the position of a video stream within the composition rectangle.</p>
        /// </summary>
        /// <param name = "dwStreamID"><dd> <p>The identifier of the stream. For the EVR media sink, the stream identifier is defined when the <strong>IMFMediaSink::AddStreamSink</strong> method is called. For the DirectShow EVR filter, the stream identifier corresponds to the pin index. The reference stream is always stream 0.</p> </dd></param>
        /// <param name = "nrcOutputRef"><dd> <p>Pointer to an <strong><see cref = "SharpDX.MediaFoundation.VideoNormalizedRect"/></strong> structure that receives the bounding rectangle, in normalized coordinates.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidStreamNumber"/></strong></dt> </dl> </td><td> <p>Invalid stream identifier.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms698911</doc-id>
        /// <unmanaged>HRESULT IMFVideoMixerControl::GetStreamOutputRect([In] DWORD dwStreamID,[Out] MFVideoNormalizedRect* pnrcOutput)</unmanaged>
        /// <unmanaged-short>IMFVideoMixerControl::GetStreamOutputRect</unmanaged-short>
        public unsafe void GetStreamOutputRect(System.Int32 dwStreamID, out SharpDX.MediaFoundation.VideoNormalizedRect nrcOutputRef)
        {
            nrcOutputRef = default (SharpDX.MediaFoundation.VideoNormalizedRect);
            SharpDX.Result __result__;
            fixed (void *nrcOutputRef_ = &nrcOutputRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwStreamID, nrcOutputRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("8459616d-966e-4930-b658-54fa7e5a16d3")]
    public partial class VideoMixerControl2 : SharpDX.MediaFoundation.VideoMixerControl
    {
        public VideoMixerControl2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator VideoMixerControl2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new VideoMixerControl2(nativePtr);
        /// <summary>
        /// <p>Gets or sets the current preferences for video deinterlacing.</p>
        /// </summary>
        /// <doc-id>dd374896</doc-id>
        /// <unmanaged>GetMixingPrefs / SetMixingPrefs</unmanaged>
        /// <unmanaged-short>GetMixingPrefs</unmanaged-short>
        public System.Int32 MixingPrefs
        {
            get
            {
                GetMixingPrefs(out var __output__);
                return __output__;
            }

            set => SetMixingPrefs(value);
        }

        /// <summary>
        /// <p>Sets the preferences for video deinterlacing.</p>
        /// </summary>
        /// <param name = "dwMixFlags"><dd> <p>Bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.VideoMixPrefs"/></strong> enumeration. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd374898</doc-id>
        /// <unmanaged>HRESULT IMFVideoMixerControl2::SetMixingPrefs([In] DWORD dwMixFlags)</unmanaged>
        /// <unmanaged-short>IMFVideoMixerControl2::SetMixingPrefs</unmanaged-short>
        internal unsafe void SetMixingPrefs(System.Int32 dwMixFlags)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwMixFlags, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the current preferences for video deinterlacing.</p>
        /// </summary>
        /// <param name = "dwMixFlagsRef"><dd> <p>Receives a bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref = "SharpDX.MediaFoundation.VideoMixPrefs"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dd374896</doc-id>
        /// <unmanaged>HRESULT IMFVideoMixerControl2::GetMixingPrefs([Out] DWORD* pdwMixFlags)</unmanaged>
        /// <unmanaged-short>IMFVideoMixerControl2::GetMixingPrefs</unmanaged-short>
        internal unsafe void GetMixingPrefs(out System.Int32 dwMixFlagsRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwMixFlagsRef_ = &dwMixFlagsRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwMixFlagsRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("1F6A9F17-E70B-4e24-8AE4-0B2C3BA7A4AE")]
    public partial class VideoPositionMapper : SharpDX.ComObject
    {
        public VideoPositionMapper(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator VideoPositionMapper(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new VideoPositionMapper(nativePtr);
        /// <summary>
        /// <p>Maps output image coordinates to input image coordinates. This method provides the reverse transformation for components that map coordinates on the input image to different coordinates on the output image. </p>
        /// </summary>
        /// <param name = "xOut"><dd> <p> X-coordinate of the output image, normalized to the range [0...1]. </p> </dd></param>
        /// <param name = "yOut"><dd> <p> Y-coordinate of the output image, normalized to the range [0...1]. </p> </dd></param>
        /// <param name = "dwOutputStreamIndex"><dd> <p> Output stream index for the coordinate mapping. </p> </dd></param>
        /// <param name = "dwInputStreamIndex"><dd> <p> Input stream index for the coordinate mapping. </p> </dd></param>
        /// <param name = "xInRef"><dd> <p> Receives the mapped x-coordinate of the input image, normalized to the range [0...1]. </p> </dd></param>
        /// <param name = "yInRef"><dd> <p> Receives the mapped y-coordinate of the input image, normalized to the range [0...1]. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p> The video renderer has been shut down. </p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>In the following diagram, R(dest) is the destination rectangle for the video. You can obtain this rectangle by calling <strong>IMFVideoDisplayControl::GetVideoPosition</strong>. The rectangle R1 is a substream within the video. The point P has pixel coordinates (x,y) relative to R(dest).</p><p></p><p>The position of P relative to R(dest) in <em>normalized</em> coordinates is calculated as follows:</p><code>float xn = float(x + 0.5) / widthDest;
        /// float xy = float(y + 0.5) / heightDest;
        /// </code><p>where <em>widthDest</em> and <em>heightDest</em> are the width and height of R(dest) in pixels.</p><p>To calculate the position of P relative to R1, call <strong>MapOutputCoordinateToInputStream</strong> as follows:</p><code>float x1 = 0, y1 = 0;
        /// hr = pMap-&gt;MapOutputCoordinateToInputStream(xn, yn, 0, dwInputStreamIndex, &amp;x1, &amp;y1);</code><p>The values returned in <em>x1</em> and <em>y1</em> are normalized to the range [0...1]. To convert back to pixel coordinates, scale these values by the size of R1:</p><code>int scaledx = int(floor(x1 * widthR1));
        /// int scaledy = int(floor(xy * heightR1));</code><p>Note that <em>x1</em> and <em>y1</em> might fall outside the range [0...1] if P lies outside of R1.</p>
        /// </remarks>
        /// <doc-id>ms703892</doc-id>
        /// <unmanaged>HRESULT IMFVideoPositionMapper::MapOutputCoordinateToInputStream([In] float xOut,[In] float yOut,[In] DWORD dwOutputStreamIndex,[In] DWORD dwInputStreamIndex,[Out] float* pxIn,[Out] float* pyIn)</unmanaged>
        /// <unmanaged-short>IMFVideoPositionMapper::MapOutputCoordinateToInputStream</unmanaged-short>
        public unsafe void MapOutputCoordinateToInputStream(System.Single xOut, System.Single yOut, System.Int32 dwOutputStreamIndex, System.Int32 dwInputStreamIndex, out System.Single xInRef, out System.Single yInRef)
        {
            SharpDX.Result __result__;
            fixed (void *yInRef_ = &yInRef)
                fixed (void *xInRef_ = &xInRef)
                    __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, xOut, yOut, dwOutputStreamIndex, dwInputStreamIndex, xInRef_, yInRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("29AFF080-182A-4a5d-AF3B-448F3A6346CB")]
    public partial interface VideoPresenter : SharpDX.MediaFoundation.ClockStateSink
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("A3F675D5-6119-4f7f-A100-1D8B280F0EFB")]
    public partial class VideoProcessorControl : SharpDX.ComObject
    {
        public VideoProcessorControl(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator VideoProcessorControl(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new VideoProcessorControl(nativePtr);
        /// <summary>
        /// <p>Sets the border color.</p>
        /// </summary>
        /// <doc-id>hh448070</doc-id>
        /// <unmanaged>SetBorderColor</unmanaged>
        /// <unmanaged-short>SetBorderColor</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawColorBGRA BorderColor
        {
            set => SetBorderColor(value);
        }

        /// <summary>
        /// <p>Sets the source rectangle. The source rectangle is the portion of the input frame that is blitted to the destination surface.</p>
        /// </summary>
        /// <remarks>
        /// <p>See <strong>Video Processor MFT</strong> for info regarding source and destination rectangles in the <strong>Video Processor MFT</strong>.   </p>
        /// </remarks>
        /// <doc-id>hh448075</doc-id>
        /// <unmanaged>SetSourceRectangle</unmanaged>
        /// <unmanaged-short>SetSourceRectangle</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawRectangle SourceRectangle
        {
            set => SetSourceRectangle(value);
        }

        /// <summary>
        /// <p>Sets the destination rectangle. The destination rectangle is the portion of the output surface where the source rectangle is blitted.</p>
        /// </summary>
        /// <remarks>
        /// <p>See <strong>Video Processor MFT</strong> for info regarding source and destination rectangles in the <strong>Video Processor MFT</strong>.   </p>
        /// </remarks>
        /// <doc-id>hh448072</doc-id>
        /// <unmanaged>SetDestinationRectangle</unmanaged>
        /// <unmanaged-short>SetDestinationRectangle</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawRectangle DestinationRectangle
        {
            set => SetDestinationRectangle(value);
        }

        /// <summary>
        /// <p>Specifies whether to flip the video image.</p>
        /// </summary>
        /// <doc-id>hh448073</doc-id>
        /// <unmanaged>SetMirror</unmanaged>
        /// <unmanaged-short>SetMirror</unmanaged-short>
        public SharpDX.MediaFoundation.VideoProcessorMirror Mirror
        {
            set => SetMirror(value);
        }

        /// <summary>
        /// <p>Specifies whether to rotate the video to the correct orientation.</p>
        /// </summary>
        /// <remarks>
        /// <p>The original orientation of the video is specified by the <see cref = "VideoRotation"/> attribute of the input media type.</p><p> If <em>eRotation</em> is <strong>ROTATION_NONE</strong>, the video processor does not correct the orientation of the output video. If the original video is rotated, and <em>eRotation</em> is <strong>ROTATION_NORMAL</strong>, the video processor corrects the orientation, so that the ouput video is not rotated. The video processor letterboxes the output as needed.</p>
        /// </remarks>
        /// <doc-id>hh448074</doc-id>
        /// <unmanaged>SetRotation</unmanaged>
        /// <unmanaged-short>SetRotation</unmanaged-short>
        public SharpDX.MediaFoundation.VideoProcessorRotation Rotation
        {
            set => SetRotation(value);
        }

        /// <summary>
        /// <p>Specifies the amount of downsampling to perform on the output.</p>
        /// </summary>
        /// <doc-id>hh448071</doc-id>
        /// <unmanaged>SetConstrictionSize</unmanaged>
        /// <unmanaged-short>SetConstrictionSize</unmanaged-short>
        public SharpDX.Size2 ConstrictionSize
        {
            set => SetConstrictionSize(value);
        }

        /// <summary>
        /// <p>Sets the border color.</p>
        /// </summary>
        /// <param name = "borderColorRef"><dd> <p>A reference to an <strong><see cref = "SharpDX.Mathematics.Interop.RawColorBGRA"/></strong> structure that specifies the border color as an ARGB (alpha, red, green, blue) value.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh448070</doc-id>
        /// <unmanaged>HRESULT IMFVideoProcessorControl::SetBorderColor([In, Optional] MFARGB* pBorderColor)</unmanaged>
        /// <unmanaged-short>IMFVideoProcessorControl::SetBorderColor</unmanaged-short>
        internal unsafe void SetBorderColor(SharpDX.Mathematics.Interop.RawColorBGRA? borderColorRef)
        {
            SharpDX.Mathematics.Interop.RawColorBGRA borderColorRef_;
            SharpDX.Result __result__;
            if (borderColorRef != null)
                borderColorRef_ = borderColorRef.Value;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, borderColorRef == null ? (void *)0 : &borderColorRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the source rectangle. The source rectangle is the portion of the input frame that is blitted to the destination surface.</p>
        /// </summary>
        /// <param name = "srcRectRef"><dd> <p>A reference to a <strong><see cref = "SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure that specifies the source rectangle.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>See <strong>Video Processor MFT</strong> for info regarding source and destination rectangles in the <strong>Video Processor MFT</strong>.   </p>
        /// </remarks>
        /// <doc-id>hh448075</doc-id>
        /// <unmanaged>HRESULT IMFVideoProcessorControl::SetSourceRectangle([In, Optional] RECT* pSrcRect)</unmanaged>
        /// <unmanaged-short>IMFVideoProcessorControl::SetSourceRectangle</unmanaged-short>
        internal unsafe void SetSourceRectangle(SharpDX.Mathematics.Interop.RawRectangle? srcRectRef)
        {
            SharpDX.Mathematics.Interop.RawRectangle srcRectRef_;
            SharpDX.Result __result__;
            if (srcRectRef != null)
                srcRectRef_ = srcRectRef.Value;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, srcRectRef == null ? (void *)0 : &srcRectRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the destination rectangle. The destination rectangle is the portion of the output surface where the source rectangle is blitted.</p>
        /// </summary>
        /// <param name = "dstRectRef"><dd> <p>A reference to a <strong><see cref = "SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure that specifies the destination rectangle.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>See <strong>Video Processor MFT</strong> for info regarding source and destination rectangles in the <strong>Video Processor MFT</strong>.   </p>
        /// </remarks>
        /// <doc-id>hh448072</doc-id>
        /// <unmanaged>HRESULT IMFVideoProcessorControl::SetDestinationRectangle([In, Optional] RECT* pDstRect)</unmanaged>
        /// <unmanaged-short>IMFVideoProcessorControl::SetDestinationRectangle</unmanaged-short>
        internal unsafe void SetDestinationRectangle(SharpDX.Mathematics.Interop.RawRectangle? dstRectRef)
        {
            SharpDX.Mathematics.Interop.RawRectangle dstRectRef_;
            SharpDX.Result __result__;
            if (dstRectRef != null)
                dstRectRef_ = dstRectRef.Value;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dstRectRef == null ? (void *)0 : &dstRectRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Specifies whether to flip the video image.</p>
        /// </summary>
        /// <param name = "eMirror"><dd> <p>An <strong><see cref = "SharpDX.MediaFoundation.VideoProcessorMirror"/></strong> value that specifies whether to flip the video image, either horizontally or vertically.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh448073</doc-id>
        /// <unmanaged>HRESULT IMFVideoProcessorControl::SetMirror([In] MF_VIDEO_PROCESSOR_MIRROR eMirror)</unmanaged>
        /// <unmanaged-short>IMFVideoProcessorControl::SetMirror</unmanaged-short>
        internal unsafe void SetMirror(SharpDX.MediaFoundation.VideoProcessorMirror eMirror)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)eMirror), (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Specifies whether to rotate the video to the correct orientation.</p>
        /// </summary>
        /// <param name = "eRotation"><dd> <p>A <strong><see cref = "SharpDX.MediaFoundation.VideoProcessorRotation"/></strong> value that specifies whether to rotate the image.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>The original orientation of the video is specified by the <see cref = "VideoRotation"/> attribute of the input media type.</p><p> If <em>eRotation</em> is <strong>ROTATION_NONE</strong>, the video processor does not correct the orientation of the output video. If the original video is rotated, and <em>eRotation</em> is <strong>ROTATION_NORMAL</strong>, the video processor corrects the orientation, so that the ouput video is not rotated. The video processor letterboxes the output as needed.</p>
        /// </remarks>
        /// <doc-id>hh448074</doc-id>
        /// <unmanaged>HRESULT IMFVideoProcessorControl::SetRotation([In] MF_VIDEO_PROCESSOR_ROTATION eRotation)</unmanaged>
        /// <unmanaged-short>IMFVideoProcessorControl::SetRotation</unmanaged-short>
        internal unsafe void SetRotation(SharpDX.MediaFoundation.VideoProcessorRotation eRotation)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)eRotation), (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Specifies the amount of downsampling to perform on the output.</p>
        /// </summary>
        /// <param name = "constrictionSizeRef"><dd> <p>The sampling size. To disable constriction, set this parameter to <strong><c>null</c></strong>.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh448071</doc-id>
        /// <unmanaged>HRESULT IMFVideoProcessorControl::SetConstrictionSize([In, Optional] SIZE* pConstrictionSize)</unmanaged>
        /// <unmanaged-short>IMFVideoProcessorControl::SetConstrictionSize</unmanaged-short>
        internal unsafe void SetConstrictionSize(SharpDX.Size2? constrictionSizeRef)
        {
            SharpDX.Size2 constrictionSizeRef_;
            SharpDX.Result __result__;
            if (constrictionSizeRef != null)
                constrictionSizeRef_ = constrictionSizeRef.Value;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, constrictionSizeRef == null ? (void *)0 : &constrictionSizeRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("BDE633D3-E1DC-4a7f-A693-BBAE399C4A20")]
    public partial class VideoProcessorControl2 : SharpDX.MediaFoundation.VideoProcessorControl
    {
        public VideoProcessorControl2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator VideoProcessorControl2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new VideoProcessorControl2(nativePtr);
        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Overrides the rotation operation that is performed in the video processor.</p>
        /// </summary>
        /// <doc-id>dn800744</doc-id>
        /// <unmanaged>SetRotationOverride</unmanaged>
        /// <unmanaged-short>SetRotationOverride</unmanaged-short>
        public System.Int32 RotationOverride
        {
            set => SetRotationOverride(value);
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Returns the list of supported effects in the currently configured video processor.</p>
        /// </summary>
        /// <doc-id>dn800743</doc-id>
        /// <unmanaged>GetSupportedHardwareEffects</unmanaged>
        /// <unmanaged-short>GetSupportedHardwareEffects</unmanaged-short>
        public System.Int32 SupportedHardwareEffects
        {
            get
            {
                GetSupportedHardwareEffects(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Overrides the rotation operation that is performed in the video processor.</p>
        /// </summary>
        /// <param name = "uiRotation"><dd>  <p>Rotation value in degrees.  Typically, you can only use values from the <strong><see cref = "SharpDX.MediaFoundation.VideoRotationFormat"/></strong> enumeration.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800744</doc-id>
        /// <unmanaged>HRESULT IMFVideoProcessorControl2::SetRotationOverride([In] unsigned int uiRotation)</unmanaged>
        /// <unmanaged-short>IMFVideoProcessorControl2::SetRotationOverride</unmanaged-short>
        internal unsafe void SetRotationOverride(System.Int32 uiRotation)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, uiRotation, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Enables effects that were implemented with <strong>IDirectXVideoProcessor::VideoProcessorBlt</strong>. </p>
        /// </summary>
        /// <param name = "fEnabled">No documentation.</param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800742</doc-id>
        /// <unmanaged>HRESULT IMFVideoProcessorControl2::EnableHardwareEffects([In] BOOL fEnabled)</unmanaged>
        /// <unmanaged-short>IMFVideoProcessorControl2::EnableHardwareEffects</unmanaged-short>
        public unsafe void EnableHardwareEffects(SharpDX.Mathematics.Interop.RawBool fEnabled)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint0(this._nativePointer, fEnabled, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Returns the list of supported effects in the currently configured video processor.</p>
        /// </summary>
        /// <param name = "uiSupportRef"><dd>  <p>A combination of <strong><see cref = "SharpDX.Direct3D11.VideoProcessorAutoStreamCaps"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies the list of suppported effect capabilities.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>dn800743</doc-id>
        /// <unmanaged>HRESULT IMFVideoProcessorControl2::GetSupportedHardwareEffects([Out] unsigned int* puiSupport)</unmanaged>
        /// <unmanaged-short>IMFVideoProcessorControl2::GetSupportedHardwareEffects</unmanaged-short>
        internal unsafe void GetSupportedHardwareEffects(out System.Int32 uiSupportRef)
        {
            SharpDX.Result __result__;
            fixed (void *uiSupportRef_ = &uiSupportRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, uiSupportRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("DFDFD197-A9CA-43d8-B341-6AF3503792CD")]
    public partial class VideoRenderer : SharpDX.ComObject
    {
        public VideoRenderer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator VideoRenderer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new VideoRenderer(nativePtr);
        /// <summary>
        /// <p> </p><p>Sets a new mixer or presenter for the enhanced video renderer (EVR).</p>
        /// </summary>
        /// <param name = "videoMixerRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.Transform"/></strong> interface of the mixer to use. This parameter can be <strong><c>null</c></strong>. If this parameter is <strong><c>null</c></strong>, the EVR uses its default mixer.</p> </dd></param>
        /// <param name = "videoPresenterRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.VideoPresenter"/></strong> interface of the presenter to use. This parameter can be <strong><c>null</c></strong>. If this parameter is <strong><c>null</c></strong>, the EVR uses its default presenter.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>Either the mixer or the presenter is invalid.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidRequest"/></strong></dt> </dl> </td><td> <p>The mixer and presenter cannot be replaced in the current state. (EVR media sink.)</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "Shutdown"/></strong></dt> </dl> </td><td> <p>The video renderer has been shut down.</p> </td></tr> <tr><td> <dl> <dt><strong>VFW_E_WRONG_STATE</strong></dt> </dl> </td><td> <p>One or more input pins are connected. (DirectShow EVR filter.)</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method directly after creating the EVR, before you do any of the following:</p><ul> <li> <p>Call <strong>IMFGetService::GetService</strong> on the EVR.</p> </li> <li> <p>Call <strong>IEVRFilterConfig::SetNumberOfStreams</strong> on the EVR.</p> </li> <li> <p>Connect any pins on the EVR filter, or set any media types on EVR media sink.</p> </li> </ul><p>The EVR filter returns VFW_E_WRONG_STATE if any of the filter's pins are connected. The EVR media sink returns <see cref = "InvalidRequest"/> if a media type is set on any of the streams, or the presentation clock is running or paused.</p><p>The device identifiers for the mixer and the presenter must match. The <strong>IMFVideoDeviceID::GetDeviceID</strong> method returns the device identifier. If they do not match, the method returns E_INVALIDARG.</p><p>If the video renderer is in the protected media path (PMP), the mixer and presenter objects must be certified safe components and pass any trust authority verification that is being enforced. Otherwise, this method will fail.</p>
        /// </remarks>
        /// <doc-id>ms704667</doc-id>
        /// <unmanaged>HRESULT IMFVideoRenderer::InitializeRenderer([In, Optional] IMFTransform* pVideoMixer,[In, Optional] IMFVideoPresenter* pVideoPresenter)</unmanaged>
        /// <unmanaged-short>IMFVideoRenderer::InitializeRenderer</unmanaged-short>
        public unsafe void InitializeRenderer(SharpDX.MediaFoundation.Transform videoMixerRef, SharpDX.MediaFoundation.VideoPresenter videoPresenterRef)
        {
            System.IntPtr videoMixerRef_ = System.IntPtr.Zero;
            System.IntPtr videoPresenterRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            videoMixerRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Transform>(videoMixerRef);
            videoPresenterRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.VideoPresenter>(videoPresenterRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)videoMixerRef_, (void *)videoPresenterRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("86cbc910-e533-4751-8e3b-f19b5b806a03")]
    public partial class VideoSampleAllocator : SharpDX.ComObject
    {
        public VideoSampleAllocator(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator VideoSampleAllocator(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new VideoSampleAllocator(nativePtr);
        /// <summary>
        /// <p> </p><p>Specifies the Direct3D device manager for the video media sink to use.</p>
        /// </summary>
        /// <remarks>
        /// <p>The media sink uses the Direct3D device manager to obtain a reference to the Direct3D device, which it uses to allocate Direct3D surfaces. The device manager enables multiple objects in the pipeline (such as a video renderer and a video decoder) to share the same Direct3D device.</p>
        /// </remarks>
        /// <doc-id>aa473819</doc-id>
        /// <unmanaged>SetDirectXManager</unmanaged>
        /// <unmanaged-short>SetDirectXManager</unmanaged-short>
        public SharpDX.IUnknown DirectXManager
        {
            set => SetDirectXManager(value);
        }

        /// <summary>
        /// <p> </p><p>Specifies the Direct3D device manager for the video media sink to use.</p>
        /// </summary>
        /// <param name = "managerRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of the Direct3D device manager. The media sink queries this reference for the <strong>IDirect3DDeviceManager9</strong> interface.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>The media sink uses the Direct3D device manager to obtain a reference to the Direct3D device, which it uses to allocate Direct3D surfaces. The device manager enables multiple objects in the pipeline (such as a video renderer and a video decoder) to share the same Direct3D device.</p>
        /// </remarks>
        /// <doc-id>aa473819</doc-id>
        /// <unmanaged>HRESULT IMFVideoSampleAllocator::SetDirectXManager([In] IUnknown* pManager)</unmanaged>
        /// <unmanaged-short>IMFVideoSampleAllocator::SetDirectXManager</unmanaged-short>
        internal unsafe void SetDirectXManager(SharpDX.IUnknown managerRef)
        {
            System.IntPtr managerRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            managerRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(managerRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)managerRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Releases all of the video samples that have been allocated.</p>
        /// </summary>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>aa473807</doc-id>
        /// <unmanaged>HRESULT IMFVideoSampleAllocator::UninitializeSampleAllocator()</unmanaged>
        /// <unmanaged-short>IMFVideoSampleAllocator::UninitializeSampleAllocator</unmanaged-short>
        public unsafe void UninitializeSampleAllocator()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Specifies the number of samples to allocate and the media type for the samples. </p>
        /// </summary>
        /// <param name = "cRequestedFrames"><dd> <p> Number of samples to allocate.		 </p> </dd></param>
        /// <param name = "mediaTypeRef"><dd> <p> Pointer to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of a media type that describes the video format. </p> </dd></param>
        /// <returns><p> The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table. </p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "InvalidMediaType"/></strong></dt> </dl> </td><td> <p>Invalid media type.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970496</doc-id>
        /// <unmanaged>HRESULT IMFVideoSampleAllocator::InitializeSampleAllocator([In] DWORD cRequestedFrames,[In] IMFMediaType* pMediaType)</unmanaged>
        /// <unmanaged-short>IMFVideoSampleAllocator::InitializeSampleAllocator</unmanaged-short>
        public unsafe void InitializeSampleAllocator(System.Int32 cRequestedFrames, SharpDX.MediaFoundation.MediaType mediaTypeRef)
        {
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            mediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(mediaTypeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cRequestedFrames, (void *)mediaTypeRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a video sample from the allocator. </p>
        /// </summary>
        /// <param name = "sampleOut"><dd> <p>Receives a reference to the <strong><see cref = "SharpDX.MediaFoundation.Sample"/></strong> interface. The caller must release the interface. </p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p> The method succeeded. </p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "NotInitializeD"/></strong></dt> </dl> </td><td> <p>The allocator was not initialized. Call <strong>IMFVideoSampleAllocator::InitializeSampleAllocator</strong> or <strong>InitializeSampleAllocatorEx::InitializeSampleAllocatorEx</strong>.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "SampleallocatorEmpty"/></strong></dt> </dl> </td><td> <p> No samples are available. </p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>bb970553</doc-id>
        /// <unmanaged>HRESULT IMFVideoSampleAllocator::AllocateSample([In] IMFSample** ppSample)</unmanaged>
        /// <unmanaged-short>IMFVideoSampleAllocator::AllocateSample</unmanaged-short>
        public unsafe void AllocateSample(out SharpDX.MediaFoundation.Sample sampleOut)
        {
            System.IntPtr sampleOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &sampleOut_, (*(void ***)this._nativePointer)[6]);
            if (sampleOut_ != System.IntPtr.Zero)
                sampleOut = new SharpDX.MediaFoundation.Sample(sampleOut_);
            else
                sampleOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("992388B4-3372-4f67-8B6F-C84C071F4751")]
    public partial class VideoSampleAllocatorCallback : SharpDX.ComObject
    {
        public VideoSampleAllocatorCallback(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator VideoSampleAllocatorCallback(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new VideoSampleAllocatorCallback(nativePtr);
        /// <summary>
        /// <p>Sets the callback object that receives notification whenever a video sample is returned to the allocator.</p>
        /// </summary>
        /// <remarks>
        /// <p>To get a video sample from the allocator, call the <strong>IMFVideoSampleAllocator::AllocateSample</strong> method. When the sample is released, it returns to the pool of available samples. When this happens, the allocator invokes the <strong>IMFVideoSampleAllocatorNotify::NotifyRelease</strong> callback.</p><p>The allocator holds at most one callback reference. Calling this method again replaces the previous callback reference.</p>
        /// </remarks>
        /// <doc-id>dd374904</doc-id>
        /// <unmanaged>SetCallback</unmanaged>
        /// <unmanaged-short>SetCallback</unmanaged-short>
        public SharpDX.MediaFoundation.VideoSampleAllocatorNotify Callback
        {
            set => SetCallback(value);
        }

        /// <summary>
        /// <p>Sets the callback object that receives notification whenever a video sample is returned to the allocator.</p>
        /// </summary>
        /// <param name = "notifyRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.VideoSampleAllocatorNotify"/></strong> interface that receives notification, or <strong><c>null</c></strong> to remove the callback.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>To get a video sample from the allocator, call the <strong>IMFVideoSampleAllocator::AllocateSample</strong> method. When the sample is released, it returns to the pool of available samples. When this happens, the allocator invokes the <strong>IMFVideoSampleAllocatorNotify::NotifyRelease</strong> callback.</p><p>The allocator holds at most one callback reference. Calling this method again replaces the previous callback reference.</p>
        /// </remarks>
        /// <doc-id>dd374904</doc-id>
        /// <unmanaged>HRESULT IMFVideoSampleAllocatorCallback::SetCallback([In] IMFVideoSampleAllocatorNotify* pNotify)</unmanaged>
        /// <unmanaged-short>IMFVideoSampleAllocatorCallback::SetCallback</unmanaged-short>
        internal unsafe void SetCallback(SharpDX.MediaFoundation.VideoSampleAllocatorNotify notifyRef)
        {
            System.IntPtr notifyRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            notifyRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.VideoSampleAllocatorNotify>(notifyRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)notifyRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the number of video samples that are currently available for use.</p>
        /// </summary>
        /// <param name = "lSamplesRef"><dd> <p>Receives the number of available samples.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>To get a video sample from the allocator, call the <strong>IMFVideoSampleAllocator::AllocateSample</strong> method. The <strong>AllocateSample</strong> method removes a sample from the sample pool and returns it to the caller. When a sample is released, it returns to the pool. The <strong>GetFreeSampleCount</strong> method returns the count of samples that remain in the sample pool.</p>
        /// </remarks>
        /// <doc-id>dd374902</doc-id>
        /// <unmanaged>HRESULT IMFVideoSampleAllocatorCallback::GetFreeSampleCount([In] LONG* plSamples)</unmanaged>
        /// <unmanaged-short>IMFVideoSampleAllocatorCallback::GetFreeSampleCount</unmanaged-short>
        public unsafe void GetFreeSampleCount(System.Int32 lSamplesRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, &lSamplesRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("545b3a48-3283-4f62-866f-a62d8f598f9f")]
    public partial class VideoSampleAllocatorEx : SharpDX.MediaFoundation.VideoSampleAllocator
    {
        public VideoSampleAllocatorEx(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator VideoSampleAllocatorEx(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new VideoSampleAllocatorEx(nativePtr);
        /// <summary>
        /// <p>Initializes the video sample allocator object.</p>
        /// </summary>
        /// <param name = "cInitialSamples"><dd> <p>The initial number of samples to allocate. </p> </dd></param>
        /// <param name = "cMaximumSamples"><dd> <p>The maximum number of samples to allocate.</p> </dd></param>
        /// <param name = "attributesRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaAttributes"/></strong> interface. You can use this interface to configure the allocator. Currently, the following configuration attributes are defined:</p> <ul> <li> <see cref = "BuffersPerSample"/> </li> <li> <see cref = "D3D11Bindflags"/> </li> <li> <see cref = "D3D11Usage"/> </li> <li> MF_SA_D3D11_SHARED </li> <li> MF_SA_D3D11_SHARED_WITHOUT_MUTEX </li> </ul> </dd></param>
        /// <param name = "mediaTypeRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.MediaType"/></strong> interface of a media type that describes the video format. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>hh448077</doc-id>
        /// <unmanaged>HRESULT IMFVideoSampleAllocatorEx::InitializeSampleAllocatorEx([In] DWORD cInitialSamples,[In] DWORD cMaximumSamples,[In, Optional] IMFAttributes* pAttributes,[In] IMFMediaType* pMediaType)</unmanaged>
        /// <unmanaged-short>IMFVideoSampleAllocatorEx::InitializeSampleAllocatorEx</unmanaged-short>
        public unsafe void InitializeSampleAllocatorEx(System.Int32 cInitialSamples, System.Int32 cMaximumSamples, SharpDX.MediaFoundation.MediaAttributes attributesRef, SharpDX.MediaFoundation.MediaType mediaTypeRef)
        {
            System.IntPtr attributesRef_ = System.IntPtr.Zero;
            System.IntPtr mediaTypeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            attributesRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaAttributes>(attributesRef);
            mediaTypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.MediaType>(mediaTypeRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, cInitialSamples, cMaximumSamples, (void *)attributesRef_, (void *)mediaTypeRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("A792CDBE-C374-4e89-8335-278E7B9956A4")]
    public partial class VideoSampleAllocatorNotify : SharpDX.ComObject
    {
        public VideoSampleAllocatorNotify(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator VideoSampleAllocatorNotify(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new VideoSampleAllocatorNotify(nativePtr);
        /// <summary>
        /// <p>Called when a video sample is returned to the allocator.</p>
        /// </summary>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>To get a video sample from the allocator, call the <strong>IMFVideoSampleAllocator::AllocateSample</strong> method. When the sample is released and then returned to the pool of available samples, the allocator invokes the <strong>NotifyRelease</strong> method. </p>
        /// </remarks>
        /// <doc-id>dd374908</doc-id>
        /// <unmanaged>HRESULT IMFVideoSampleAllocatorNotify::NotifyRelease()</unmanaged>
        /// <unmanaged-short>IMFVideoSampleAllocatorNotify::NotifyRelease</unmanaged-short>
        public unsafe void NotifyRelease()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3978AA1A-6D5B-4B7F-A340-90899189AE34")]
    public partial class VideoSampleAllocatorNotifyEx : SharpDX.MediaFoundation.VideoSampleAllocatorNotify
    {
        public VideoSampleAllocatorNotifyEx(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator VideoSampleAllocatorNotifyEx(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new VideoSampleAllocatorNotifyEx(nativePtr);
        /// <summary>
        /// <p>Called when allocator samples are released for pruning by the allocator, or when the allocator is removed.</p>
        /// </summary>
        /// <param name = "midlIMFVideoSampleAllocatorNotifyEx0000"><dd> <p>The sample to be pruned.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>mt627757</doc-id>
        /// <unmanaged>HRESULT IMFVideoSampleAllocatorNotifyEx::NotifyPrune([In] IMFSample* __MIDL__IMFVideoSampleAllocatorNotifyEx0000)</unmanaged>
        /// <unmanaged-short>IMFVideoSampleAllocatorNotifyEx::NotifyPrune</unmanaged-short>
        public unsafe void NotifyPrune(SharpDX.MediaFoundation.Sample midlIMFVideoSampleAllocatorNotifyEx0000)
        {
            System.IntPtr midlIMFVideoSampleAllocatorNotifyEx0000_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            midlIMFVideoSampleAllocatorNotifyEx0000_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.Sample>(midlIMFVideoSampleAllocatorNotifyEx0000);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)midlIMFVideoSampleAllocatorNotifyEx0000_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("35FE1BB8-A3A9-40fe-BBEC-EB569C9CCCA3")]
    public partial class WorkQueueServices : SharpDX.ComObject
    {
        public WorkQueueServices(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator WorkQueueServices(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new WorkQueueServices(nativePtr);
        /// <summary>
        /// <p> </p><p>Registers the topology work queues with the Multimedia Class Scheduler Service (MMCSS).</p>
        /// </summary>
        /// <param name = "callbackRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface. </p> </dd></param>
        /// <param name = "stateRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>Each source node in the topology defines one branch of the topology. The branch includes every topology node that receives data from that node. An application can assign each branch of a topology its own work queue and then associate those work queues with MMCSS tasks. </p><p>To use this method, perform the following steps.</p><ol> <li>Create the topology.</li> <li>Set the following attributes on the source nodes in the topology.<ul> <li> <strong><see cref = "WorkqueueId"/></strong>. Specifies an identifier for the work queue. The Media Session will allocate a new work queue.</li> <li> <strong><see cref = "WorkqueueMmcssClass"/></strong>. Specifies the MMCSS class. </li> <li> <strong><see cref = "WorkqueueMmcssTaskid"/></strong>. Specifies the MMCSS task identifier (optional). If this attribute is not set, MMCSS assigns a new task identifier. </li> </ul> </li> <li>Queue the topology by calling <strong>IMFMediaSession::SetTopology</strong>.</li> <li>Wait for the MESessionTopologyStatus event with the <strong>MF_TOPOSTATUS_READY</strong> status.</li> <li>Call <strong>BeginRegisterTopologyWorkQueuesWithMMCSS</strong>. This method registers all of the topology work queues with MMCSS.</li> </ol><p>The <strong>BeginRegisterTopologyWorkQueuesWithMMCSS</strong> method is asynchronous. When the operation completes, the callback object's <strong>IMFAsyncCallback::Invoke</strong> method is called. Within the callback method, call <strong>IMFWorkQueueServices::EndRegisterTopologyWorkQueuesWithMMCSS</strong> to complete the asynchronous request. After this operation completes, the Media Session automatically registers the work queues for every new topology that is queued on the Media Session. The application does not need to call the method again for new topologies.</p><p>To unregister the topology work queues from MMCSS, call <strong>IMFWorkQueueServices::BeginUnregisterTopologyWorkQueuesWithMMCSS</strong>.</p>
        /// </remarks>
        /// <doc-id>ms697485</doc-id>
        /// <unmanaged>HRESULT IMFWorkQueueServices::BeginRegisterTopologyWorkQueuesWithMMCSS([In] IMFAsyncCallback* pCallback,[In] IUnknown* pState)</unmanaged>
        /// <unmanaged-short>IMFWorkQueueServices::BeginRegisterTopologyWorkQueuesWithMMCSS</unmanaged-short>
        public unsafe void BeginRegisterTopologyWorkQueuesWithMMCSS(SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown stateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr stateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            stateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(stateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)callbackRef_, (void *)stateRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Completes an asynchronous request to register the topology work queues with the Multimedia Class Scheduler Service (MMCSS).</p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the <strong>IMFAsyncCallback::Invoke</strong> method.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method when the <strong>IMFWorkQueueServices::BeginRegisterTopologyWorkQueuesWithMMCSS</strong> method completes asynchronously.</p>
        /// </remarks>
        /// <doc-id>ms696983</doc-id>
        /// <unmanaged>HRESULT IMFWorkQueueServices::EndRegisterTopologyWorkQueuesWithMMCSS([In] IMFAsyncResult* pResult)</unmanaged>
        /// <unmanaged-short>IMFWorkQueueServices::EndRegisterTopologyWorkQueuesWithMMCSS</unmanaged-short>
        public unsafe void EndRegisterTopologyWorkQueuesWithMMCSS(SharpDX.MediaFoundation.AsyncResult resultRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Unregisters the topology work queues from the Multimedia Class Scheduler Service (MMCSS).</p>
        /// </summary>
        /// <param name = "callbackRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface.</p> </dd></param>
        /// <param name = "stateRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is asynchronous. When the operation completes, the callback object's <strong>IMFAsyncCallback::Invoke</strong> method is called. At that point, the application should call <strong>IMFWorkQueueServices::EndUnregisterTopologyWorkQueuesWithMMCSS</strong> to complete the asynchronous request.</p>
        /// </remarks>
        /// <doc-id>ms702139</doc-id>
        /// <unmanaged>HRESULT IMFWorkQueueServices::BeginUnregisterTopologyWorkQueuesWithMMCSS([In] IMFAsyncCallback* pCallback,[In] IUnknown* pState)</unmanaged>
        /// <unmanaged-short>IMFWorkQueueServices::BeginUnregisterTopologyWorkQueuesWithMMCSS</unmanaged-short>
        public unsafe void BeginUnregisterTopologyWorkQueuesWithMMCSS(SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown stateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr stateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            stateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(stateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)callbackRef_, (void *)stateRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Completes an asynchronous request to unregister the topology work queues from the Multimedia Class Scheduler Service (MMCSS).</p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the <strong>IMFAsyncCallback::Invoke</strong> method.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method when the <strong>IMFWorkQueueServices::BeginRegisterTopologyWorkQueuesWithMMCSS</strong> method completes asynchronously.</p>
        /// </remarks>
        /// <doc-id>ms698872</doc-id>
        /// <unmanaged>HRESULT IMFWorkQueueServices::EndUnregisterTopologyWorkQueuesWithMMCSS([In] IMFAsyncResult* pResult)</unmanaged>
        /// <unmanaged-short>IMFWorkQueueServices::EndUnregisterTopologyWorkQueuesWithMMCSS</unmanaged-short>
        public unsafe void EndUnregisterTopologyWorkQueuesWithMMCSS(SharpDX.MediaFoundation.AsyncResult resultRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the Multimedia Class Scheduler Service (MMCSS) class for a specified branch of the current topology.</p>
        /// </summary>
        /// <param name = "dwTopologyWorkQueueId"><dd> <p>Identifies the work queue assigned to this topology branch. The application defines this value by setting the <strong><see cref = "WorkqueueId"/></strong> attribute on the source node for the branch.</p> </dd></param>
        /// <param name = "wszClassRef"><dd> <p>Pointer to a buffer that receives the name of the MMCSS class. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "cchClassRef"><dd> <p>On input, specifies the size of the <em>pwszClass</em> buffer, in characters. On output, receives the required size of the buffer, in characters. The size includes the terminating null character.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong>E_INVALIDARG</strong></dt> </dl> </td><td> <p>There is no work queue with the specified identifier.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "BufferTooSmall"/></strong></dt> </dl> </td><td> <p>The <em>pwszClass</em> buffer is too small to receive the class name.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms704762</doc-id>
        /// <unmanaged>HRESULT IMFWorkQueueServices::GetTopologyWorkQueueMMCSSClass([In] DWORD dwTopologyWorkQueueId,[Out, Buffer] wchar_t* pwszClass,[InOut] DWORD* pcchClass)</unmanaged>
        /// <unmanaged-short>IMFWorkQueueServices::GetTopologyWorkQueueMMCSSClass</unmanaged-short>
        public unsafe void GetTopologyWorkQueueMMCSSClass(System.Int32 dwTopologyWorkQueueId, System.IntPtr wszClassRef, ref System.Int32 cchClassRef)
        {
            SharpDX.Result __result__;
            fixed (void *cchClassRef_ = &cchClassRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwTopologyWorkQueueId, (void *)wszClassRef, cchClassRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the Multimedia Class Scheduler Service (MMCSS) task identifier for a specified branch of the current topology.</p>
        /// </summary>
        /// <param name = "dwTopologyWorkQueueId"><dd> <p>Identifies the work queue assigned to this topology branch. The application defines this value by setting the <strong><see cref = "WorkqueueId"/></strong> attribute on the source node for the branch.</p> </dd></param>
        /// <param name = "dwTaskIdRef"><dd> <p>Receives the task identifier.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms694202</doc-id>
        /// <unmanaged>HRESULT IMFWorkQueueServices::GetTopologyWorkQueueMMCSSTaskId([In] DWORD dwTopologyWorkQueueId,[Out] DWORD* pdwTaskId)</unmanaged>
        /// <unmanaged-short>IMFWorkQueueServices::GetTopologyWorkQueueMMCSSTaskId</unmanaged-short>
        public unsafe void GetTopologyWorkQueueMMCSSTaskId(System.Int32 dwTopologyWorkQueueId, out System.Int32 dwTaskIdRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwTaskIdRef_ = &dwTaskIdRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwTopologyWorkQueueId, dwTaskIdRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> Associates a platform work queue with a Multimedia Class Scheduler Service (MMCSS) task. </p>
        /// </summary>
        /// <param name = "dwPlatformWorkQueue"><dd> <p> The platform work queue to register with MMCSS. See Work Queue Identifiers. To register all of the standard work queues to the same MMCSS task, set this parameter to <strong>MFASYNC_CALLBACK_QUEUE_ALL</strong>.</p> </dd></param>
        /// <param name = "wszClass"><dd> <p>The name of the MMCSS task to be performed. </p> </dd></param>
        /// <param name = "dwTaskId"><dd> <p> The unique task identifier. To obtain a new task identifier, set this value to zero. </p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface. </p> </dd></param>
        /// <param name = "stateRef"><dd> <p>A reference to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked. </p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <remarks>
        /// <p>This method is asynchronous. When the operation completes, the callback object's <strong>IMFAsyncCallback::Invoke</strong> method is called. At that point, the application should call <strong>IMFWorkQueueServices::EndRegisterPlatformWorkQueueWithMMCSS</strong> to complete the asynchronous request.</p><p>To unregister the work queue from the MMCSS class, call <strong>IMFWorkQueueServices::BeginUnregisterPlatformWorkQueueWithMMCSS</strong>.</p>
        /// </remarks>
        /// <doc-id>ms702114</doc-id>
        /// <unmanaged>HRESULT IMFWorkQueueServices::BeginRegisterPlatformWorkQueueWithMMCSS([In] DWORD dwPlatformWorkQueue,[In] const wchar_t* wszClass,[In] DWORD dwTaskId,[In] IMFAsyncCallback* pCallback,[In] IUnknown* pState)</unmanaged>
        /// <unmanaged-short>IMFWorkQueueServices::BeginRegisterPlatformWorkQueueWithMMCSS</unmanaged-short>
        public unsafe void BeginRegisterPlatformWorkQueueWithMMCSS(System.Int32 dwPlatformWorkQueue, System.String wszClass, System.Int32 dwTaskId, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown stateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr stateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            stateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(stateRef);
            fixed (char *wszClass_ = wszClass)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwPlatformWorkQueue, (void *)wszClass_, dwTaskId, (void *)callbackRef_, (void *)stateRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Completes an asynchronous request to associate a platform work queue with a Multimedia Class Scheduler Service (MMCSS) task.</p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the <strong>IMFAsyncCallback::Invoke</strong> method.</p> </dd></param>
        /// <param name = "dwTaskIdRef"><dd> <p>The unique task identifier.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this function when the <strong>IMFWorkQueueServices::BeginRegisterPlatformWorkQueueWithMMCSS</strong> method completes asynchronously.</p><p>To unregister the work queue from the MMCSS class, call <strong>IMFWorkQueueServices::BeginUnregisterPlatformWorkQueueWithMMCSS</strong>.</p>
        /// </remarks>
        /// <doc-id>ms702284</doc-id>
        /// <unmanaged>HRESULT IMFWorkQueueServices::EndRegisterPlatformWorkQueueWithMMCSS([In] IMFAsyncResult* pResult,[Out] DWORD* pdwTaskId)</unmanaged>
        /// <unmanaged-short>IMFWorkQueueServices::EndRegisterPlatformWorkQueueWithMMCSS</unmanaged-short>
        public unsafe void EndRegisterPlatformWorkQueueWithMMCSS(SharpDX.MediaFoundation.AsyncResult resultRef, out System.Int32 dwTaskIdRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            fixed (void *dwTaskIdRef_ = &dwTaskIdRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, dwTaskIdRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Unregisters a platform work queue from a Multimedia Class Scheduler Service (MMCSS) task.</p>
        /// </summary>
        /// <param name = "dwPlatformWorkQueue"><dd> <p>Platform work queue to register with MMCSS. See <strong>IMFWorkQueueServices::BeginRegisterPlatformWorkQueueWithMMCSS</strong>.</p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.IAsyncCallback"/></strong> interface of a callback object. The caller must implement this interface.</p> </dd></param>
        /// <param name = "stateRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.IUnknown"/></strong> interface of a state object, defined by the caller. This parameter can be <strong><c>null</c></strong>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>This method is asynchronous. When the operation completes, the callback object's <strong>IMFAsyncCallback::Invoke</strong> method is called. At that point, the application should call <strong>IMFWorkQueueServices::EndUnregisterPlatformWorkQueueWithMMCSS</strong> to complete the asynchronous request.</p>
        /// </remarks>
        /// <doc-id>ms704603</doc-id>
        /// <unmanaged>HRESULT IMFWorkQueueServices::BeginUnregisterPlatformWorkQueueWithMMCSS([In] DWORD dwPlatformWorkQueue,[In] IMFAsyncCallback* pCallback,[In] IUnknown* pState)</unmanaged>
        /// <unmanaged-short>IMFWorkQueueServices::BeginUnregisterPlatformWorkQueueWithMMCSS</unmanaged-short>
        public unsafe void BeginUnregisterPlatformWorkQueueWithMMCSS(System.Int32 dwPlatformWorkQueue, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown stateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr stateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            stateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(stateRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwPlatformWorkQueue, (void *)callbackRef_, (void *)stateRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Completes an asynchronous request to unregister a platform work queue from a Multimedia Class Scheduler Service (MMCSS) task.</p>
        /// </summary>
        /// <param name = "resultRef"><dd> <p>Pointer to the <strong><see cref = "SharpDX.MediaFoundation.AsyncResult"/></strong> interface. Pass in the same reference that your callback object received in the <strong>IMFAsyncCallback::Invoke</strong> method.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Call this method when the <strong>IMFWorkQueueServices::BeginUnregisterPlatformWorkQueueWithMMCSS</strong> method completes asynchronously.</p>
        /// </remarks>
        /// <doc-id>ms704734</doc-id>
        /// <unmanaged>HRESULT IMFWorkQueueServices::EndUnregisterPlatformWorkQueueWithMMCSS([In] IMFAsyncResult* pResult)</unmanaged>
        /// <unmanaged-short>IMFWorkQueueServices::EndUnregisterPlatformWorkQueueWithMMCSS</unmanaged-short>
        public unsafe void EndUnregisterPlatformWorkQueueWithMMCSS(SharpDX.MediaFoundation.AsyncResult resultRef)
        {
            System.IntPtr resultRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resultRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.AsyncResult>(resultRef);
            __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resultRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the Multimedia Class Scheduler Service (MMCSS) class for a specified platform work queue.</p>
        /// </summary>
        /// <param name = "dwPlatformWorkQueueId"><dd> <p>Platform work queue to query. See <strong>IMFWorkQueueServices::BeginRegisterPlatformWorkQueueWithMMCSS</strong>.</p> </dd></param>
        /// <param name = "wszClassRef"><dd> <p>Pointer to a buffer that receives the name of the MMCSS class. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>
        /// <param name = "cchClassRef"><dd> <p>On input, specifies the size of the pwszClass buffer, in characters. On output, receives the required size of the buffer, in characters. The size includes the terminating null character.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> <tr><td> <dl> <dt><strong><see cref = "BufferTooSmall"/></strong></dt> </dl> </td><td> <p>The <em>pwszClass</em> buffer is too small to receive the class name.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms705624</doc-id>
        /// <unmanaged>HRESULT IMFWorkQueueServices::GetPlaftormWorkQueueMMCSSClass([In] DWORD dwPlatformWorkQueueId,[Out, Buffer] wchar_t* pwszClass,[InOut] DWORD* pcchClass)</unmanaged>
        /// <unmanaged-short>IMFWorkQueueServices::GetPlaftormWorkQueueMMCSSClass</unmanaged-short>
        public unsafe void GetPlaftormWorkQueueMMCSSClass(System.Int32 dwPlatformWorkQueueId, System.IntPtr wszClassRef, ref System.Int32 cchClassRef)
        {
            SharpDX.Result __result__;
            fixed (void *cchClassRef_ = &cchClassRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwPlatformWorkQueueId, (void *)wszClassRef, cchClassRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p> </p><p>Retrieves the Multimedia Class Scheduler Service (MMCSS) task identifier for a specified platform work queue.</p>
        /// </summary>
        /// <param name = "dwPlatformWorkQueueId"><dd> <p>Platform work queue to query. See <strong>IMFWorkQueueServices::BeginRegisterPlatformWorkQueueWithMMCSS</strong>.</p> </dd></param>
        /// <param name = "dwTaskIdRef"><dd> <p>Receives the task identifier.</p> </dd></param>
        /// <returns><p>The method returns an <strong><see cref = "SharpDX.Result"/></strong>. Possible values include, but are not limited to, those in the following table.</p><table> <tr><th>Return code</th><th>Description</th></tr> <tr><td> <dl> <dt><strong><see cref = "SharpDX.Result.Ok"/></strong></dt> </dl> </td><td> <p>The method succeeded.</p> </td></tr> </table><p>?</p></returns>
        /// <doc-id>ms700183</doc-id>
        /// <unmanaged>HRESULT IMFWorkQueueServices::GetPlatformWorkQueueMMCSSTaskId([In] DWORD dwPlatformWorkQueueId,[Out] DWORD* pdwTaskId)</unmanaged>
        /// <unmanaged-short>IMFWorkQueueServices::GetPlatformWorkQueueMMCSSTaskId</unmanaged-short>
        public unsafe void GetPlatformWorkQueueMMCSSTaskId(System.Int32 dwPlatformWorkQueueId, out System.Int32 dwTaskIdRef)
        {
            SharpDX.Result __result__;
            fixed (void *dwTaskIdRef_ = &dwTaskIdRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwPlatformWorkQueueId, dwTaskIdRef_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("96bf961b-40fe-42f1-ba9d-320238b49700")]
    public partial class WorkQueueServicesEx : SharpDX.MediaFoundation.WorkQueueServices
    {
        public WorkQueueServicesEx(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator WorkQueueServicesEx(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new WorkQueueServicesEx(nativePtr);
        /// <summary>
        /// <p>Retrieves the Multimedia Class Scheduler Service (MMCSS)  string associated with the given topology work queue.</p>
        /// </summary>
        /// <param name = "dwTopologyWorkQueueId"><dd> <p>The id of the topology work queue. </p> </dd></param>
        /// <param name = "lPriorityRef"><dd> <p>Pointer to the buffer the work queue's MMCSS task id will be copied to.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>jj128328</doc-id>
        /// <unmanaged>HRESULT IMFWorkQueueServicesEx::GetTopologyWorkQueueMMCSSPriority([In] DWORD dwTopologyWorkQueueId,[Out] LONG* plPriority)</unmanaged>
        /// <unmanaged-short>IMFWorkQueueServicesEx::GetTopologyWorkQueueMMCSSPriority</unmanaged-short>
        public unsafe void GetTopologyWorkQueueMMCSSPriority(System.Int32 dwTopologyWorkQueueId, out System.Int32 lPriorityRef)
        {
            SharpDX.Result __result__;
            fixed (void *lPriorityRef_ = &lPriorityRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwTopologyWorkQueueId, lPriorityRef_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Registers a platform work queue with Multimedia Class Scheduler Service (MMCSS) using the specified class and task id.</p>
        /// </summary>
        /// <param name = "dwPlatformWorkQueue"><dd> <p>The id of one of the standard platform work queues.</p> </dd></param>
        /// <param name = "wszClass"><dd> <p>The MMCSS class which the work queue should be registered with.</p> </dd></param>
        /// <param name = "dwTaskId"><dd> <p> The task id which the work queue should be registered with. If <em>dwTaskId</em> is 0, a new MMCSS bucket will be created.</p> </dd></param>
        /// <param name = "lPriority"><dd> <p>The priority.</p> </dd></param>
        /// <param name = "callbackRef"><dd> <p>Standard callback used for async operations in Media Foundation.</p> </dd></param>
        /// <param name = "stateRef"><dd> <p>Standard state used for async operations in Media Foundation.</p> </dd></param>
        /// <returns><p>If this method succeeds, it returns <strong><see cref = "SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref = "SharpDX.Result"/></strong> error code.</p></returns>
        /// <doc-id>jj128326</doc-id>
        /// <unmanaged>HRESULT IMFWorkQueueServicesEx::BeginRegisterPlatformWorkQueueWithMMCSSEx([In] DWORD dwPlatformWorkQueue,[In] const wchar_t* wszClass,[In] DWORD dwTaskId,[In] LONG lPriority,[In] IMFAsyncCallback* pCallback,[In] IUnknown* pState)</unmanaged>
        /// <unmanaged-short>IMFWorkQueueServicesEx::BeginRegisterPlatformWorkQueueWithMMCSSEx</unmanaged-short>
        public unsafe void BeginRegisterPlatformWorkQueueWithMMCSSEx(System.Int32 dwPlatformWorkQueue, System.String wszClass, System.Int32 dwTaskId, System.Int32 lPriority, SharpDX.MediaFoundation.IAsyncCallback callbackRef, SharpDX.IUnknown stateRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            System.IntPtr stateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            callbackRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.MediaFoundation.IAsyncCallback>(callbackRef);
            stateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.IUnknown>(stateRef);
            fixed (char *wszClass_ = wszClass)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwPlatformWorkQueue, (void *)wszClass_, dwTaskId, lPriority, (void *)callbackRef_, (void *)stateRef_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the priority of the Multimedia Class Scheduler Service (MMCSS)  priority associated with the specified platform work queue.</p>
        /// </summary>
        /// <param name = "dwPlatformWorkQueueId"><dd> <p>Topology work queue id for which the info will be returned.</p> </dd></param>
        /// <param name = "lPriorityRef"><dd></dd></param>
        /// <returns><p>Pointer to a buffer allocated by the caller that the work queue's MMCSS task id will be copied to.</p></returns>
        /// <doc-id>jj128327</doc-id>
        /// <unmanaged>HRESULT IMFWorkQueueServicesEx::GetPlatformWorkQueueMMCSSPriority([In] DWORD dwPlatformWorkQueueId,[Out] LONG* plPriority)</unmanaged>
        /// <unmanaged-short>IMFWorkQueueServicesEx::GetPlatformWorkQueueMMCSSPriority</unmanaged-short>
        public unsafe void GetPlatformWorkQueueMMCSSPriority(System.Int32 dwPlatformWorkQueueId, out System.Int32 lPriorityRef)
        {
            SharpDX.Result __result__;
            fixed (void *lPriorityRef_ = &lPriorityRef)
                __result__ = SharpDX.MediaFoundation.LocalInterop.CalliStdCallint(this._nativePointer, dwPlatformWorkQueueId, lPriorityRef_, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }
    }
}