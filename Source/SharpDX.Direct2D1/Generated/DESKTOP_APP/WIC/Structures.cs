// <auto-generated/>

namespace SharpDX.WIC
{
    /// <summary>
    /// <p>Contains members that identify a pattern within an image file which can be used to identify a particular format.</p>
    /// </summary>
    /// <doc-id>ee719813</doc-id>
    /// <unmanaged>WICBitmapPattern</unmanaged>
    /// <unmanaged-short>WICBitmapPattern</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct BitmapPattern
    {
        /// <summary>
        /// <dd> <p>The offset the pattern is located in the file.</p> </dd>
        /// </summary>
        /// <doc-id>ee719813</doc-id>
        /// <unmanaged>Position</unmanaged>
        /// <unmanaged-short>Position</unmanaged-short>
        public System.Int64 Position;
        /// <summary>
        /// <dd> <p>The pattern length.</p> </dd>
        /// </summary>
        /// <doc-id>ee719813</doc-id>
        /// <unmanaged>Length</unmanaged>
        /// <unmanaged-short>Length</unmanaged-short>
        public System.Int32 Length;
        /// <summary>
        /// <dd> <p>The actual pattern.</p> </dd>
        /// </summary>
        /// <doc-id>ee719813</doc-id>
        /// <unmanaged>Pattern</unmanaged>
        /// <unmanaged-short>Pattern</unmanaged-short>
        public System.IntPtr Pattern;
        /// <summary>
        /// <dd> <p>The pattern mask.</p> </dd>
        /// </summary>
        /// <doc-id>ee719813</doc-id>
        /// <unmanaged>Mask</unmanaged>
        /// <unmanaged-short>Mask</unmanaged-short>
        public System.IntPtr Mask;
        /// <summary>
        /// <dd> <p>The end of the stream.</p> </dd>
        /// </summary>
        /// <doc-id>ee719813</doc-id>
        /// <unmanaged>EndOfStream</unmanaged>
        /// <unmanaged-short>EndOfStream</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool EndOfStream;
    }

    /// <summary>
    /// <p>Specifies the pixel format, buffer, stride and size of a component plane for a planar pixel format.</p>
    /// </summary>
    /// <doc-id>dn302099</doc-id>
    /// <unmanaged>WICBitmapPlane</unmanaged>
    /// <unmanaged-short>WICBitmapPlane</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct BitmapPlane
    {
        /// <summary>
        /// <dd> <p>Describes the pixel format of the plane. </p> </dd>
        /// </summary>
        /// <doc-id>dn302099</doc-id>
        /// <unmanaged>Format</unmanaged>
        /// <unmanaged-short>Format</unmanaged-short>
        public System.Guid Format;
        /// <summary>
        /// <dd> <p>Pointer to the buffer that holds the plane?s pixel components.</p> </dd>
        /// </summary>
        /// <doc-id>dn302099</doc-id>
        /// <unmanaged>pbBuffer</unmanaged>
        /// <unmanaged-short>pbBuffer</unmanaged-short>
        public System.IntPtr PbBuffer;
        /// <summary>
        /// <dd> <p>The stride of the buffer ponted to by <em>pbData</em>.  Stride indicates the total number of bytes to go from the beginning of one scanline to the beginning of the next scanline.</p> </dd>
        /// </summary>
        /// <doc-id>dn302099</doc-id>
        /// <unmanaged>cbStride</unmanaged>
        /// <unmanaged-short>cbStride</unmanaged-short>
        public System.Int32 CbStride;
        /// <summary>
        /// <dd> <p>The total size of the buffer pointed to by <em>pbBuffer</em>.</p> </dd>
        /// </summary>
        /// <doc-id>dn302099</doc-id>
        /// <unmanaged>cbBufferSize</unmanaged>
        /// <unmanaged-short>cbBufferSize</unmanaged-short>
        public System.Int32 CbBufferSize;
    }

    /// <summary>
    /// <p>Specifies the pixel format and size of a component plane.</p>
    /// </summary>
    /// <doc-id>dn302100</doc-id>
    /// <unmanaged>WICBitmapPlaneDescription</unmanaged>
    /// <unmanaged-short>WICBitmapPlaneDescription</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct BitmapPlaneDescription
    {
        /// <summary>
        /// <dd> <p>Describes the pixel format of the plane. </p> </dd>
        /// </summary>
        /// <doc-id>dn302100</doc-id>
        /// <unmanaged>Format</unmanaged>
        /// <unmanaged-short>Format</unmanaged-short>
        public System.Guid Format;
        /// <summary>
        /// <dd> <p>Component width of the plane.</p> </dd>
        /// </summary>
        /// <doc-id>dn302100</doc-id>
        /// <unmanaged>Width</unmanaged>
        /// <unmanaged-short>Width</unmanaged-short>
        public System.Int32 Width;
        /// <summary>
        /// <dd> <p>Component height of the plane.</p> </dd>
        /// </summary>
        /// <doc-id>dn302100</doc-id>
        /// <unmanaged>Height</unmanaged>
        /// <unmanaged-short>Height</unmanaged-short>
        public System.Int32 Height;
    }

    /// <summary>
    /// <p>Specifies the <strong><see cref = "SharpDX.DXGI.Format"/></strong> and block information of a DDS format.</p>
    /// </summary>
    /// <doc-id>dn302103</doc-id>
    /// <unmanaged>WICDdsFormatInfo</unmanaged>
    /// <unmanaged-short>WICDdsFormatInfo</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct DdsFormatInfo
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn302103</doc-id>
        /// <unmanaged>DxgiFormat</unmanaged>
        /// <unmanaged-short>DxgiFormat</unmanaged-short>
        public SharpDX.DXGI.Format DxgiFormat;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn302103</doc-id>
        /// <unmanaged>BytesPerBlock</unmanaged>
        /// <unmanaged-short>BytesPerBlock</unmanaged-short>
        public System.Int32 BytesPerBlock;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn302103</doc-id>
        /// <unmanaged>BlockWidth</unmanaged>
        /// <unmanaged-short>BlockWidth</unmanaged-short>
        public System.Int32 BlockWidth;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn302103</doc-id>
        /// <unmanaged>BlockHeight</unmanaged>
        /// <unmanaged-short>BlockHeight</unmanaged-short>
        public System.Int32 BlockHeight;
    }

    /// <summary>
    /// <p>Specifies the DDS image dimension, <strong><see cref = "SharpDX.DXGI.Format"/></strong> and alpha mode of contained data.</p>
    /// </summary>
    /// <doc-id>dn302104</doc-id>
    /// <unmanaged>WICDdsParameters</unmanaged>
    /// <unmanaged-short>WICDdsParameters</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct DdsParameters
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn302104</doc-id>
        /// <unmanaged>Width</unmanaged>
        /// <unmanaged-short>Width</unmanaged-short>
        public System.Int32 Width;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn302104</doc-id>
        /// <unmanaged>Height</unmanaged>
        /// <unmanaged-short>Height</unmanaged-short>
        public System.Int32 Height;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn302104</doc-id>
        /// <unmanaged>Depth</unmanaged>
        /// <unmanaged-short>Depth</unmanaged-short>
        public System.Int32 Depth;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn302104</doc-id>
        /// <unmanaged>MipLevels</unmanaged>
        /// <unmanaged-short>MipLevels</unmanaged-short>
        public System.Int32 MipLevels;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn302104</doc-id>
        /// <unmanaged>ArraySize</unmanaged>
        /// <unmanaged-short>ArraySize</unmanaged-short>
        public System.Int32 ArraySize;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn302104</doc-id>
        /// <unmanaged>DxgiFormat</unmanaged>
        /// <unmanaged-short>DxgiFormat</unmanaged-short>
        public SharpDX.DXGI.Format DxgiFormat;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn302104</doc-id>
        /// <unmanaged>Dimension</unmanaged>
        /// <unmanaged-short>Dimension</unmanaged-short>
        public SharpDX.WIC.DdsDimension Dimension;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn302104</doc-id>
        /// <unmanaged>AlphaMode</unmanaged>
        /// <unmanaged-short>AlphaMode</unmanaged-short>
        public SharpDX.WIC.DdsAlphaMode AlphaMode;
    }

    /// <summary>
    /// <p>This defines parameters that you can use to override the default parameters normally used when encoding an image. </p>
    /// </summary>
    /// <remarks>
    /// <p>If this parameter is not passed to the encoding API, the encoder uses these settings.</p><ul> <li>A pixel format of (<strong>DXGI_FORMAT_B8G8R8A8_UNORM</strong>, <strong>D2D1_ALPHA_MODE_PREMULTIPLIED</strong>).</li> <li>An x and y DPI of 96.</li> <li>The entire image bounds will be used for encoding.</li> </ul><strong>Note</strong>??The parameters as specified can't result in a scale. The encoder can use a larger portion of the input image based on the passed in DPI and the pixel width and height.?
    /// </remarks>
    /// <doc-id>jj125331</doc-id>
    /// <unmanaged>WICImageParameters</unmanaged>
    /// <unmanaged-short>WICImageParameters</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct ImageParameters
    {
        /// <summary>
        /// <dd> <p>The pixel format to which the image is processed before it is written to the encoder.</p> </dd>
        /// </summary>
        /// <doc-id>jj125331</doc-id>
        /// <unmanaged>PixelFormat</unmanaged>
        /// <unmanaged-short>PixelFormat</unmanaged-short>
        public SharpDX.Direct2D1.PixelFormat PixelFormat;
        /// <summary>
        /// <dd> <p>The DPI in the x dimension.</p> </dd>
        /// </summary>
        /// <doc-id>jj125331</doc-id>
        /// <unmanaged>DpiX</unmanaged>
        /// <unmanaged-short>DpiX</unmanaged-short>
        public System.Single DpiX;
        /// <summary>
        /// <dd> <p>The DPI in the y dimension.</p> </dd>
        /// </summary>
        /// <doc-id>jj125331</doc-id>
        /// <unmanaged>DpiY</unmanaged>
        /// <unmanaged-short>DpiY</unmanaged-short>
        public System.Single DpiY;
        /// <summary>
        /// <dd> <p>The top corner in pixels of the image space to be encoded to the destination.</p> </dd>
        /// </summary>
        /// <doc-id>jj125331</doc-id>
        /// <unmanaged>Top</unmanaged>
        /// <unmanaged-short>Top</unmanaged-short>
        public System.Single Top;
        /// <summary>
        /// <dd> <p>The left corner in pixels of the image space to be encoded to the destination.</p> </dd>
        /// </summary>
        /// <doc-id>jj125331</doc-id>
        /// <unmanaged>Left</unmanaged>
        /// <unmanaged-short>Left</unmanaged-short>
        public System.Single Left;
        /// <summary>
        /// <dd> <p>The width in pixels of the part of the image to write.</p> </dd>
        /// </summary>
        /// <doc-id>jj125331</doc-id>
        /// <unmanaged>PixelWidth</unmanaged>
        /// <unmanaged-short>PixelWidth</unmanaged-short>
        public System.Int32 PixelWidth;
        /// <summary>
        /// <dd> <p>The height in pixels of the part of the image to write.</p> </dd>
        /// </summary>
        /// <doc-id>jj125331</doc-id>
        /// <unmanaged>PixelHeight</unmanaged>
        /// <unmanaged-short>PixelHeight</unmanaged-short>
        public System.Int32 PixelHeight;
    }

    /// <summary>
    /// <p>Represents a JPEG frame header.</p>
    /// </summary>
    /// <remarks>
    /// <p>Get the frame header for an image by calling <strong>IWICJpegFrameDecode::GetFrameHeader</strong>.</p>
    /// </remarks>
    /// <doc-id>dn903878</doc-id>
    /// <unmanaged>WICJpegFrameHeader</unmanaged>
    /// <unmanaged-short>WICJpegFrameHeader</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct JpegFrameHeader
    {
        /// <summary>
        /// <dd> <p>The width of the JPEG frame.</p> </dd>
        /// </summary>
        /// <doc-id>dn903878</doc-id>
        /// <unmanaged>Width</unmanaged>
        /// <unmanaged-short>Width</unmanaged-short>
        public System.Int32 Width;
        /// <summary>
        /// <dd> <p>The height of the JPEG frame.</p> </dd>
        /// </summary>
        /// <doc-id>dn903878</doc-id>
        /// <unmanaged>Height</unmanaged>
        /// <unmanaged-short>Height</unmanaged-short>
        public System.Int32 Height;
        /// <summary>
        /// <dd> <p>The transfer matrix of the JPEG frame.</p> </dd>
        /// </summary>
        /// <doc-id>dn903878</doc-id>
        /// <unmanaged>TransferMatrix</unmanaged>
        /// <unmanaged-short>TransferMatrix</unmanaged-short>
        public SharpDX.WIC.JpegTransferMatrix TransferMatrix;
        /// <summary>
        /// <dd> <p>The scan type of the JPEG frame.</p> </dd>
        /// </summary>
        /// <doc-id>dn903878</doc-id>
        /// <unmanaged>ScanType</unmanaged>
        /// <unmanaged-short>ScanType</unmanaged-short>
        public SharpDX.WIC.JpegScanType ScanType;
        /// <summary>
        /// <dd> <p>The number of components in the frame.</p> </dd>
        /// </summary>
        /// <doc-id>dn903878</doc-id>
        /// <unmanaged>cComponents</unmanaged>
        /// <unmanaged-short>cComponents</unmanaged-short>
        public System.Int32 CComponents;
        /// <summary>
        /// <dd> <p>The component identifiers.</p> </dd>
        /// </summary>
        /// <doc-id>dn903878</doc-id>
        /// <unmanaged>ComponentIdentifiers</unmanaged>
        /// <unmanaged-short>ComponentIdentifiers</unmanaged-short>
        public System.Int32 ComponentIdentifiers;
        /// <summary>
        /// <dd> <p>The sample factors. Use one of the following constants, described in <strong><see cref = "SharpDX.WIC.JpegFrameDecode"/> Constants</strong>.</p> <ul> <li>WIC_JPEG_SAMPLE_FACTORS_ONE</li> <li>WIC_JPEG_SAMPLE_FACTORS_THREE_420</li> <li>WIC_JPEG_SAMPLE_FACTORS_THREE_422</li> <li>WIC_JPEG_SAMPLE_FACTORS_THREE_440</li> <li>WIC_JPEG_SAMPLE_FACTORS_THREE_444</li> </ul> </dd>
        /// </summary>
        /// <doc-id>dn903878</doc-id>
        /// <unmanaged>SampleFactors</unmanaged>
        /// <unmanaged-short>SampleFactors</unmanaged-short>
        public System.Int32 SampleFactors;
        /// <summary>
        /// <dd> <p>The format of the quantization table indices. Use one of the following constants, described in <strong><see cref = "SharpDX.WIC.JpegFrameDecode"/> Constants</strong>.</p> <ul> <li>WIC_JPEG_QUANTIZATION_BASELINE_ONE</li> <li>WIC_JPEG_QUANTIZATION_BASELINE_THREE </li> </ul> </dd>
        /// </summary>
        /// <doc-id>dn903878</doc-id>
        /// <unmanaged>QuantizationTableIndices</unmanaged>
        /// <unmanaged-short>QuantizationTableIndices</unmanaged-short>
        public System.Int32 QuantizationTableIndices;
    }

    /// <summary>
    /// <p>Represents a JPEG frame header.</p>
    /// </summary>
    /// <remarks>
    /// <p>Get the scan header for an image by calling <strong>IWICJpegFrameDecode::GetScanHeader</strong>.</p>
    /// </remarks>
    /// <doc-id>dn903883</doc-id>
    /// <unmanaged>WICJpegScanHeader</unmanaged>
    /// <unmanaged-short>WICJpegScanHeader</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct JpegScanHeader
    {
        /// <summary>
        /// <dd> <p>The number of components in the scan.</p> </dd>
        /// </summary>
        /// <doc-id>dn903883</doc-id>
        /// <unmanaged>cComponents</unmanaged>
        /// <unmanaged-short>cComponents</unmanaged-short>
        public System.Int32 CComponents;
        /// <summary>
        /// <dd> <p>The interval of reset markers within the scan.</p> </dd>
        /// </summary>
        /// <doc-id>dn903883</doc-id>
        /// <unmanaged>RestartInterval</unmanaged>
        /// <unmanaged-short>RestartInterval</unmanaged-short>
        public System.Int32 RestartInterval;
        /// <summary>
        /// <dd> <p>The component identifiers.</p> </dd>
        /// </summary>
        /// <doc-id>dn903883</doc-id>
        /// <unmanaged>ComponentSelectors</unmanaged>
        /// <unmanaged-short>ComponentSelectors</unmanaged-short>
        public System.Int32 ComponentSelectors;
        /// <summary>
        /// <dd> <p>The format of the quantization table indices. Use one of the following constants, described in <strong><see cref = "SharpDX.WIC.JpegFrameDecode"/> Constants</strong>.</p> <ul> <li>WIC_JPEG_HUFFMAN_BASELINE_ONE</li> <li>WIC_JPEG_HUFFMAN_BASELINE_THREE </li> </ul> </dd>
        /// </summary>
        /// <doc-id>dn903883</doc-id>
        /// <unmanaged>HuffmanTableIndices</unmanaged>
        /// <unmanaged-short>HuffmanTableIndices</unmanaged-short>
        public System.Int32 HuffmanTableIndices;
        /// <summary>
        /// <dd> <p>The start of the spectral selection.</p> </dd>
        /// </summary>
        /// <doc-id>dn903883</doc-id>
        /// <unmanaged>StartSpectralSelection</unmanaged>
        /// <unmanaged-short>StartSpectralSelection</unmanaged-short>
        public System.Byte StartSpectralSelection;
        /// <summary>
        /// <dd> <p>The end of the spectral selection.</p> </dd>
        /// </summary>
        /// <doc-id>dn903883</doc-id>
        /// <unmanaged>EndSpectralSelection</unmanaged>
        /// <unmanaged-short>EndSpectralSelection</unmanaged-short>
        public System.Byte EndSpectralSelection;
        /// <summary>
        /// <dd> <p>The successive approximation high.</p> </dd>
        /// </summary>
        /// <doc-id>dn903883</doc-id>
        /// <unmanaged>SuccessiveApproximationHigh</unmanaged>
        /// <unmanaged-short>SuccessiveApproximationHigh</unmanaged-short>
        public System.Byte SuccessiveApproximationHigh;
        /// <summary>
        /// <dd> <p>The successive approximation low.</p> </dd>
        /// </summary>
        /// <doc-id>dn903883</doc-id>
        /// <unmanaged>SuccessiveApproximationLow</unmanaged>
        /// <unmanaged-short>SuccessiveApproximationLow</unmanaged-short>
        public System.Byte SuccessiveApproximationLow;
    }

    /// <summary>
    /// <p>Defines raw codec capabilites.</p>
    /// </summary>
    /// <doc-id>ee719857</doc-id>
    /// <unmanaged>WICRawCapabilitiesInfo</unmanaged>
    /// <unmanaged-short>WICRawCapabilitiesInfo</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct RawCapabilitiesInfo
    {
        /// <summary>
        /// <dd> <p>Size of the <strong><see cref = "SharpDX.WIC.RawCapabilitiesInfo"/></strong> structure.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>cbSize</unmanaged>
        /// <unmanaged-short>cbSize</unmanaged-short>
        public System.Int32 CbSize;
        /// <summary>
        /// <dd> <p>The codec's major version.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>CodecMajorVersion</unmanaged>
        /// <unmanaged-short>CodecMajorVersion</unmanaged-short>
        public System.Int32 CodecMajorVersion;
        /// <summary>
        /// <dd> <p>The codec's minor version.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>CodecMinorVersion</unmanaged>
        /// <unmanaged-short>CodecMinorVersion</unmanaged-short>
        public System.Int32 CodecMinorVersion;
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.WIC.RawCapabilities"/></strong> of exposure compensation support.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>ExposureCompensationSupport</unmanaged>
        /// <unmanaged-short>ExposureCompensationSupport</unmanaged-short>
        public SharpDX.WIC.RawCapabilities ExposureCompensationSupport;
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.WIC.RawCapabilities"/></strong> of contrast support.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>ContrastSupport</unmanaged>
        /// <unmanaged-short>ContrastSupport</unmanaged-short>
        public SharpDX.WIC.RawCapabilities ContrastSupport;
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.WIC.RawCapabilities"/></strong> of RGB white point support.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>RGBWhitePointSupport</unmanaged>
        /// <unmanaged-short>RGBWhitePointSupport</unmanaged-short>
        public SharpDX.WIC.RawCapabilities RGBWhitePointSupport;
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.WIC.RawCapabilities"/></strong> of <strong><see cref = "SharpDX.WIC.NamedWhitePoint"/></strong> support.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>NamedWhitePointSupport</unmanaged>
        /// <unmanaged-short>NamedWhitePointSupport</unmanaged-short>
        public SharpDX.WIC.RawCapabilities NamedWhitePointSupport;
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.WIC.NamedWhitePoint"/></strong> mask.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>NamedWhitePointSupportMask</unmanaged>
        /// <unmanaged-short>NamedWhitePointSupportMask</unmanaged-short>
        public System.Int32 NamedWhitePointSupportMask;
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.WIC.RawCapabilities"/></strong> of kelvin white point support.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>KelvinWhitePointSupport</unmanaged>
        /// <unmanaged-short>KelvinWhitePointSupport</unmanaged-short>
        public SharpDX.WIC.RawCapabilities KelvinWhitePointSupport;
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.WIC.RawCapabilities"/></strong> of gamma support.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>GammaSupport</unmanaged>
        /// <unmanaged-short>GammaSupport</unmanaged-short>
        public SharpDX.WIC.RawCapabilities GammaSupport;
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.WIC.RawCapabilities"/></strong> of tint support.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>TintSupport</unmanaged>
        /// <unmanaged-short>TintSupport</unmanaged-short>
        public SharpDX.WIC.RawCapabilities TintSupport;
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.WIC.RawCapabilities"/></strong> of saturation support.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>SaturationSupport</unmanaged>
        /// <unmanaged-short>SaturationSupport</unmanaged-short>
        public SharpDX.WIC.RawCapabilities SaturationSupport;
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.WIC.RawCapabilities"/></strong> of sharpness support.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>SharpnessSupport</unmanaged>
        /// <unmanaged-short>SharpnessSupport</unmanaged-short>
        public SharpDX.WIC.RawCapabilities SharpnessSupport;
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.WIC.RawCapabilities"/></strong> of noise reduction support.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>NoiseReductionSupport</unmanaged>
        /// <unmanaged-short>NoiseReductionSupport</unmanaged-short>
        public SharpDX.WIC.RawCapabilities NoiseReductionSupport;
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.WIC.RawCapabilities"/></strong> of destination color profile support.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>DestinationColorProfileSupport</unmanaged>
        /// <unmanaged-short>DestinationColorProfileSupport</unmanaged-short>
        public SharpDX.WIC.RawCapabilities DestinationColorProfileSupport;
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.WIC.RawCapabilities"/></strong> of tone curve support.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>ToneCurveSupport</unmanaged>
        /// <unmanaged-short>ToneCurveSupport</unmanaged-short>
        public SharpDX.WIC.RawCapabilities ToneCurveSupport;
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.WIC.RawRotationCapabilities"/></strong> of rotation support.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>RotationSupport</unmanaged>
        /// <unmanaged-short>RotationSupport</unmanaged-short>
        public SharpDX.WIC.RawRotationCapabilities RotationSupport;
        /// <summary>
        /// <dd> <p>The <strong><see cref = "SharpDX.WIC.RawCapabilities"/></strong> of <strong><see cref = "SharpDX.WIC.RawRenderMode"/></strong> support.</p> </dd>
        /// </summary>
        /// <doc-id>ee719857</doc-id>
        /// <unmanaged>RenderModeSupport</unmanaged>
        /// <unmanaged-short>RenderModeSupport</unmanaged-short>
        public SharpDX.WIC.RawCapabilities RenderModeSupport;
    }

    /// <summary>
    /// <p>Represents a raw image tone curve.</p>
    /// </summary>
    /// <doc-id>ee719861</doc-id>
    /// <unmanaged>WICRawToneCurve</unmanaged>
    /// <unmanaged-short>WICRawToneCurve</unmanaged-short>
    public partial struct RawToneCurve
    {
        /// <summary>
        /// <dd> <p>The number of tone curve points.</p> </dd>
        /// </summary>
        /// <doc-id>ee719861</doc-id>
        /// <unmanaged>cPoints</unmanaged>
        /// <unmanaged-short>cPoints</unmanaged-short>
        public System.Int32 CPoints;
        /// <summary>
        /// <dd> <p>The array of tone curve points.</p> </dd>
        /// </summary>
        /// <doc-id>ee719861</doc-id>
        /// <unmanaged>aPoints</unmanaged>
        /// <unmanaged-short>aPoints</unmanaged-short>
        public SharpDX.WIC.RawToneCurvePoint[] APoints
        {
            get => _APoints ?? (_APoints = new SharpDX.WIC.RawToneCurvePoint[1]);
            private set => _APoints = value;
        }

        internal SharpDX.WIC.RawToneCurvePoint[] _APoints;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.Int32 CPoints;
            public SharpDX.WIC.RawToneCurvePoint APoints;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            CPoints = @ref.CPoints;
            fixed (void *__to = &APoints[0], __from = &@ref.APoints)
                SharpDX.Utilities.CopyMemory((System.IntPtr)__to, (System.IntPtr)__from, 1 * sizeof (SharpDX.WIC.RawToneCurvePoint));
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.CPoints = CPoints;
            fixed (void *__from = &APoints[0], __to = &@ref.APoints)
                SharpDX.Utilities.CopyMemory((System.IntPtr)__to, (System.IntPtr)__from, 1 * sizeof (SharpDX.WIC.RawToneCurvePoint));
        }
    }

    /// <summary>
    /// <p>Represents a raw image tone curve point.</p>
    /// </summary>
    /// <doc-id>ee719862</doc-id>
    /// <unmanaged>WICRawToneCurvePoint</unmanaged>
    /// <unmanaged-short>WICRawToneCurvePoint</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct RawToneCurvePoint
    {
        /// <summary>
        /// <dd> <p>The tone curve input.</p> </dd>
        /// </summary>
        /// <doc-id>ee719862</doc-id>
        /// <unmanaged>Input</unmanaged>
        /// <unmanaged-short>Input</unmanaged-short>
        public System.Double Input;
        /// <summary>
        /// <dd> <p>The tone curve output.</p> </dd>
        /// </summary>
        /// <doc-id>ee719862</doc-id>
        /// <unmanaged>Output</unmanaged>
        /// <unmanaged-short>Output</unmanaged-short>
        public System.Double Output;
    }
}