// <auto-generated/>

namespace SharpDX.WIC
{
    /// <summary>
    /// <p>Specifies the identifiers of the metadata items in an 8BIM IPTC digest metadata block.</p>
    /// </summary>
    /// <doc-id>ee719802</doc-id>
    /// <unmanaged>WIC8BIMIptcDigestProperties</unmanaged>
    /// <unmanaged-short>WIC8BIMIptcDigestProperties</unmanaged-short>
    public enum BIMIptcDigestProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_LPSTR] A name that identifies the 8BIM block.</p> </dd>
        /// </summary>
        /// <doc-id>ee719802</doc-id>
        /// <unmanaged>WIC8BIMIptcDigestPString</unmanaged>
        /// <unmanaged-short>WIC8BIMIptcDigestPString</unmanaged-short>
        PString = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>[VT_BLOB] The embedded IPTC digest value.</p> </dd>
        /// </summary>
        /// <doc-id>ee719802</doc-id>
        /// <unmanaged>WIC8BIMIptcDigestIptcDigest</unmanaged>
        /// <unmanaged-short>WIC8BIMIptcDigestIptcDigest</unmanaged-short>
        IptcDigest = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Specifies the identifiers of the metadata items in an 8BIM IPTC block.</p>
    /// </summary>
    /// <doc-id>ee719803</doc-id>
    /// <unmanaged>WIC8BIMIptcProperties</unmanaged>
    /// <unmanaged-short>WIC8BIMIptcProperties</unmanaged-short>
    public enum BIMIptcProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_LPSTR] A name that identifies the 8BIM block.</p> </dd>
        /// </summary>
        /// <doc-id>ee719803</doc-id>
        /// <unmanaged>WIC8BIMIptcPString</unmanaged>
        /// <unmanaged-short>WIC8BIMIptcPString</unmanaged-short>
        PString = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>[VT_UNKNOWN] The IPTC block embedded in this 8BIM IPTC block.</p> </dd>
        /// </summary>
        /// <doc-id>ee719803</doc-id>
        /// <unmanaged>WIC8BIMIptcEmbeddedIPTC</unmanaged>
        /// <unmanaged-short>WIC8BIMIptcEmbeddedIPTC</unmanaged-short>
        EmbeddedIPTC = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the identifiers of the metadata items in an 8BIMResolutionInfo block.</p>
    /// </summary>
    /// <doc-id>ee719804</doc-id>
    /// <unmanaged>WIC8BIMResolutionInfoProperties</unmanaged>
    /// <unmanaged-short>WIC8BIMResolutionInfoProperties</unmanaged-short>
    public enum BIMResolutionInfoProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_LPSTR] A name that identifies the 8BIM block.</p> </dd>
        /// </summary>
        /// <doc-id>ee719804</doc-id>
        /// <unmanaged>WIC8BIMResolutionInfoPString</unmanaged>
        /// <unmanaged-short>WIC8BIMResolutionInfoPString</unmanaged-short>
        PString = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>[VT_UI4] The horizontal resolution of the image.</p> </dd>
        /// </summary>
        /// <doc-id>ee719804</doc-id>
        /// <unmanaged>WIC8BIMResolutionInfoHResolution</unmanaged>
        /// <unmanaged-short>WIC8BIMResolutionInfoHResolution</unmanaged-short>
        HResolution = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>[VT_UI2] The units that the horizontal resolution is specified in; a 1 indicates pixels per inch and a 2 indicates pixels per centimeter.</p> </dd>
        /// </summary>
        /// <doc-id>ee719804</doc-id>
        /// <unmanaged>WIC8BIMResolutionInfoHResolutionUnit</unmanaged>
        /// <unmanaged-short>WIC8BIMResolutionInfoHResolutionUnit</unmanaged-short>
        HResolutionUnit = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>[VT_UI2] The units that the image width is specified in; a 1 indicates inches, a 2 indicates centimeters, a 3 indicates points, a 4 specifies picas, and a 5 specifies columns.</p> </dd>
        /// </summary>
        /// <doc-id>ee719804</doc-id>
        /// <unmanaged>WIC8BIMResolutionInfoWidthUnit</unmanaged>
        /// <unmanaged-short>WIC8BIMResolutionInfoWidthUnit</unmanaged-short>
        WidthUnit = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>[VT_UI4] The vertical resolution of the image.</p> </dd>
        /// </summary>
        /// <doc-id>ee719804</doc-id>
        /// <unmanaged>WIC8BIMResolutionInfoVResolution</unmanaged>
        /// <unmanaged-short>WIC8BIMResolutionInfoVResolution</unmanaged-short>
        VResolution = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>[VT_UI2] The units that the vertical resolution is specified in; a 1 indicates pixels per inch and a 2 indicates pixels per centimeter.</p> </dd>
        /// </summary>
        /// <doc-id>ee719804</doc-id>
        /// <unmanaged>WIC8BIMResolutionInfoVResolutionUnit</unmanaged>
        /// <unmanaged-short>WIC8BIMResolutionInfoVResolutionUnit</unmanaged-short>
        VResolutionUnit = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>[VT_UI2] The units that the image height is specified in; a 1 indicates inches, a 2 indicates centimeters, a 3 indicates points, a 4 specifies picas, and a 5 specifies columns.</p> </dd>
        /// </summary>
        /// <doc-id>ee719804</doc-id>
        /// <unmanaged>WIC8BIMResolutionInfoHeightUnit</unmanaged>
        /// <unmanaged-short>WIC8BIMResolutionInfoHeightUnit</unmanaged-short>
        HeightUnit = unchecked ((System.Int32)(7))}

    /// <summary>
    /// <p>Specifies the desired alpha channel usage.</p>
    /// </summary>
    /// <doc-id>ee719805</doc-id>
    /// <unmanaged>WICBitmapAlphaChannelOption</unmanaged>
    /// <unmanaged-short>WICBitmapAlphaChannelOption</unmanaged-short>
    public enum BitmapAlphaChannelOption : System.Int32
    {
        /// <summary>
        /// <dd> <p>Use alpha channel.</p> </dd>
        /// </summary>
        /// <doc-id>ee719805</doc-id>
        /// <unmanaged>WICBitmapUseAlpha</unmanaged>
        /// <unmanaged-short>WICBitmapUseAlpha</unmanaged-short>
        UseAlpha = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Use a pre-multiplied alpha channel.</p> </dd>
        /// </summary>
        /// <doc-id>ee719805</doc-id>
        /// <unmanaged>WICBitmapUsePremultipliedAlpha</unmanaged>
        /// <unmanaged-short>WICBitmapUsePremultipliedAlpha</unmanaged-short>
        UsePremultipliedAlpha = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Ignore alpha channel.</p> </dd>
        /// </summary>
        /// <doc-id>ee719805</doc-id>
        /// <unmanaged>WICBitmapIgnoreAlpha</unmanaged>
        /// <unmanaged-short>WICBitmapIgnoreAlpha</unmanaged-short>
        IgnoreAlpha = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Specifies the desired cache usage.</p>
    /// </summary>
    /// <remarks>
    /// <p>The <strong>CreateBitmap</strong> of the <strong><see cref = "SharpDX.WIC.ImagingFactory"/></strong> interface does not support WICBitmapNoCache when the <em>pixelFormat</em> is a native pixel format provided by Windows Imaging Component (WIC).</p>
    /// </remarks>
    /// <doc-id>ee719806</doc-id>
    /// <unmanaged>WICBitmapCreateCacheOption</unmanaged>
    /// <unmanaged-short>WICBitmapCreateCacheOption</unmanaged-short>
    public enum BitmapCreateCacheOption : System.Int32
    {
        /// <summary>
        /// <dd> <p>Do not cache the bitmap.</p> </dd>
        /// </summary>
        /// <doc-id>ee719806</doc-id>
        /// <unmanaged>WICBitmapNoCache</unmanaged>
        /// <unmanaged-short>WICBitmapNoCache</unmanaged-short>
        NoCache = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Cache the bitmap when needed.</p> </dd>
        /// </summary>
        /// <doc-id>ee719806</doc-id>
        /// <unmanaged>WICBitmapCacheOnDemand</unmanaged>
        /// <unmanaged-short>WICBitmapCacheOnDemand</unmanaged-short>
        CacheOnDemand = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Cache the bitmap at initialization.</p> </dd>
        /// </summary>
        /// <doc-id>ee719806</doc-id>
        /// <unmanaged>WICBitmapCacheOnLoad</unmanaged>
        /// <unmanaged-short>WICBitmapCacheOnLoad</unmanaged-short>
        CacheOnLoad = unchecked ((System.Int32)(2))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies the capabilities of the decoder.</p>
    /// </summary>
    /// <doc-id>ee719807</doc-id>
    /// <unmanaged>WICBitmapDecoderCapabilities</unmanaged>
    /// <unmanaged-short>WICBitmapDecoderCapabilities</unmanaged-short>
    public enum BitmapDecoderCapabilities : System.Int32
    {
        /// <summary>
        /// <dd> <p>Decoder recognizes the image was encoded with an encoder produced by the same vendor. </p> <p></p> </dd>
        /// </summary>
        /// <doc-id>ee719807</doc-id>
        /// <unmanaged>WICBitmapDecoderCapabilitySameEncoder</unmanaged>
        /// <unmanaged-short>WICBitmapDecoderCapabilitySameEncoder</unmanaged-short>
        SameEncoder = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Decoder can decode all the images within an image container.</p> </dd>
        /// </summary>
        /// <doc-id>ee719807</doc-id>
        /// <unmanaged>WICBitmapDecoderCapabilityCanDecodeAllImages</unmanaged>
        /// <unmanaged-short>WICBitmapDecoderCapabilityCanDecodeAllImages</unmanaged-short>
        CanDecodeAllImages = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Decoder can decode some of the images within an image container.</p> </dd>
        /// </summary>
        /// <doc-id>ee719807</doc-id>
        /// <unmanaged>WICBitmapDecoderCapabilityCanDecodeSomeImages</unmanaged>
        /// <unmanaged-short>WICBitmapDecoderCapabilityCanDecodeSomeImages</unmanaged-short>
        CanDecodeSomeImages = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Decoder can enumerate the metadata blocks within a container format.</p> </dd>
        /// </summary>
        /// <doc-id>ee719807</doc-id>
        /// <unmanaged>WICBitmapDecoderCapabilityCanEnumerateMetadata</unmanaged>
        /// <unmanaged-short>WICBitmapDecoderCapabilityCanEnumerateMetadata</unmanaged-short>
        CanEnumerateMetadata = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>Decoder can find and decode a thumbnail.</p> </dd>
        /// </summary>
        /// <doc-id>ee719807</doc-id>
        /// <unmanaged>WICBitmapDecoderCapabilityCanDecodeThumbnail</unmanaged>
        /// <unmanaged-short>WICBitmapDecoderCapabilityCanDecodeThumbnail</unmanaged-short>
        CanDecodeThumbnail = unchecked ((System.Int32)(16)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Specifies the type of dither algorithm to apply when converting between image formats.</p>
    /// </summary>
    /// <doc-id>ee719808</doc-id>
    /// <unmanaged>WICBitmapDitherType</unmanaged>
    /// <unmanaged-short>WICBitmapDitherType</unmanaged-short>
    public enum BitmapDitherType : System.Int32
    {
        /// <summary>
        /// <dd> <p>A solid color algorithm without dither.</p> </dd>
        /// </summary>
        /// <doc-id>ee719808</doc-id>
        /// <unmanaged>WICBitmapDitherTypeNone</unmanaged>
        /// <unmanaged-short>WICBitmapDitherTypeNone</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>A solid color algorithm without dither.</p> </dd>
        /// </summary>
        /// <doc-id>ee719808</doc-id>
        /// <unmanaged>WICBitmapDitherTypeSolid</unmanaged>
        /// <unmanaged-short>WICBitmapDitherTypeSolid</unmanaged-short>
        Solid = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>A 4x4 ordered dither algorithm. </p> </dd>
        /// </summary>
        /// <doc-id>ee719808</doc-id>
        /// <unmanaged>WICBitmapDitherTypeOrdered4x4</unmanaged>
        /// <unmanaged-short>WICBitmapDitherTypeOrdered4x4</unmanaged-short>
        Ordered4x4 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>An 8x8 ordered dither algorithm.</p> </dd>
        /// </summary>
        /// <doc-id>ee719808</doc-id>
        /// <unmanaged>WICBitmapDitherTypeOrdered8x8</unmanaged>
        /// <unmanaged-short>WICBitmapDitherTypeOrdered8x8</unmanaged-short>
        Ordered8x8 = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>A 16x16 ordered dither algorithm.</p> </dd>
        /// </summary>
        /// <doc-id>ee719808</doc-id>
        /// <unmanaged>WICBitmapDitherTypeOrdered16x16</unmanaged>
        /// <unmanaged-short>WICBitmapDitherTypeOrdered16x16</unmanaged-short>
        Ordered16x16 = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>A 4x4 spiral dither algorithm.</p> </dd>
        /// </summary>
        /// <doc-id>ee719808</doc-id>
        /// <unmanaged>WICBitmapDitherTypeSpiral4x4</unmanaged>
        /// <unmanaged-short>WICBitmapDitherTypeSpiral4x4</unmanaged-short>
        Spiral4x4 = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>An 8x8 spiral dither algorithm.</p> </dd>
        /// </summary>
        /// <doc-id>ee719808</doc-id>
        /// <unmanaged>WICBitmapDitherTypeSpiral8x8</unmanaged>
        /// <unmanaged-short>WICBitmapDitherTypeSpiral8x8</unmanaged-short>
        Spiral8x8 = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>A 4x4 dual spiral dither algorithm.</p> </dd>
        /// </summary>
        /// <doc-id>ee719808</doc-id>
        /// <unmanaged>WICBitmapDitherTypeDualSpiral4x4</unmanaged>
        /// <unmanaged-short>WICBitmapDitherTypeDualSpiral4x4</unmanaged-short>
        DualSpiral4x4 = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>An 8x8 dual spiral dither algorithm.</p> </dd>
        /// </summary>
        /// <doc-id>ee719808</doc-id>
        /// <unmanaged>WICBitmapDitherTypeDualSpiral8x8</unmanaged>
        /// <unmanaged-short>WICBitmapDitherTypeDualSpiral8x8</unmanaged-short>
        DualSpiral8x8 = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>An error diffusion algorithm.</p> </dd>
        /// </summary>
        /// <doc-id>ee719808</doc-id>
        /// <unmanaged>WICBitmapDitherTypeErrorDiffusion</unmanaged>
        /// <unmanaged-short>WICBitmapDitherTypeErrorDiffusion</unmanaged-short>
        ErrorDiffusion = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p>Specifies the cache options available for an encoder.</p>
    /// </summary>
    /// <doc-id>ee719809</doc-id>
    /// <unmanaged>WICBitmapEncoderCacheOption</unmanaged>
    /// <unmanaged-short>WICBitmapEncoderCacheOption</unmanaged-short>
    internal enum BitmapEncoderCacheOption : System.Int32
    {
        /// <summary>
        /// <dd> <p>The encoder is cached in memory. This option is not supported.</p> </dd>
        /// </summary>
        /// <doc-id>ee719809</doc-id>
        /// <unmanaged>WICBitmapEncoderCacheInMemory</unmanaged>
        /// <unmanaged-short>WICBitmapEncoderCacheInMemory</unmanaged-short>
        InMemory = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The encoder is cached to a temporary file. This option is not supported.</p> </dd>
        /// </summary>
        /// <doc-id>ee719809</doc-id>
        /// <unmanaged>WICBitmapEncoderCacheTempFile</unmanaged>
        /// <unmanaged-short>WICBitmapEncoderCacheTempFile</unmanaged-short>
        TempFile = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The encoder is not cached.</p> </dd>
        /// </summary>
        /// <doc-id>ee719809</doc-id>
        /// <unmanaged>WICBitmapEncoderNoCache</unmanaged>
        /// <unmanaged-short>WICBitmapEncoderNoCache</unmanaged-short>
        NoCache = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Specifies the sampling or filtering mode to use when scaling an image.</p>
    /// </summary>
    /// <doc-id>ee719810</doc-id>
    /// <unmanaged>WICBitmapInterpolationMode</unmanaged>
    /// <unmanaged-short>WICBitmapInterpolationMode</unmanaged-short>
    public enum BitmapInterpolationMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>A nearest neighbor interpolation algorithm. Also known as nearest pixel or point interpolation. </p> <p>The output pixel is assigned the value of the pixel that the point falls within. No other pixels are considered.</p> </dd>
        /// </summary>
        /// <doc-id>ee719810</doc-id>
        /// <unmanaged>WICBitmapInterpolationModeNearestNeighbor</unmanaged>
        /// <unmanaged-short>WICBitmapInterpolationModeNearestNeighbor</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>A bilinear interpolation algorithm. </p> <p>The output pixel values are computed as a weighted average of the nearest four pixels in a 2x2 grid.</p> </dd>
        /// </summary>
        /// <doc-id>ee719810</doc-id>
        /// <unmanaged>WICBitmapInterpolationModeLinear</unmanaged>
        /// <unmanaged-short>WICBitmapInterpolationModeLinear</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>A bicubic interpolation algorithm. </p> <p>Destination pixel values are computed as a weighted average of the nearest sixteen pixels in a 4x4 grid. </p> </dd>
        /// </summary>
        /// <doc-id>ee719810</doc-id>
        /// <unmanaged>WICBitmapInterpolationModeCubic</unmanaged>
        /// <unmanaged-short>WICBitmapInterpolationModeCubic</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>A Fant resampling algorithm. </p> <p>Destination pixel values are computed as a weighted average of the all the pixels that map to the new pixel.</p> </dd>
        /// </summary>
        /// <doc-id>ee719810</doc-id>
        /// <unmanaged>WICBitmapInterpolationModeFant</unmanaged>
        /// <unmanaged-short>WICBitmapInterpolationModeFant</unmanaged-short>
        Fant = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>A high quality bicubic interpolation algorithm. Destination pixel values are computed using a much denser sampling  kernel than regular cubic. The kernel is resized in response to the scale factor, making it suitable for downscaling by factors greater than 2.</p> <strong>Note</strong>??This value is supported beginning with Windows?10. ? </dd>
        /// </summary>
        /// <doc-id>ee719810</doc-id>
        /// <unmanaged>WICBitmapInterpolationModeHighQualityCubic</unmanaged>
        /// <unmanaged-short>WICBitmapInterpolationModeHighQualityCubic</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p>Specifies access to an <strong><see cref = "SharpDX.WIC.Bitmap"/></strong>.</p>
    /// </summary>
    /// <doc-id>ee719811</doc-id>
    /// <unmanaged>WICBitmapLockFlags</unmanaged>
    /// <unmanaged-short>WICBitmapLockFlags</unmanaged-short>
    public enum BitmapLockFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ee719811</doc-id>
        /// <unmanaged>WICBitmapLockRead</unmanaged>
        /// <unmanaged-short>WICBitmapLockRead</unmanaged-short>
        Read = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ee719811</doc-id>
        /// <unmanaged>WICBitmapLockWrite</unmanaged>
        /// <unmanaged-short>WICBitmapLockWrite</unmanaged-short>
        Write = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Specifies the type of palette used for an indexed image format.</p>
    /// </summary>
    /// <doc-id>ee719812</doc-id>
    /// <unmanaged>WICBitmapPaletteType</unmanaged>
    /// <unmanaged-short>WICBitmapPaletteType</unmanaged-short>
    public enum BitmapPaletteType : System.Int32
    {
        /// <summary>
        /// <dd> <p>An arbitrary custom palette provided by caller.</p> </dd>
        /// </summary>
        /// <doc-id>ee719812</doc-id>
        /// <unmanaged>WICBitmapPaletteTypeCustom</unmanaged>
        /// <unmanaged-short>WICBitmapPaletteTypeCustom</unmanaged-short>
        Custom = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>An optimal palette generated using a median-cut algorithm. Derived from the colors in an image.</p> </dd>
        /// </summary>
        /// <doc-id>ee719812</doc-id>
        /// <unmanaged>WICBitmapPaletteTypeMedianCut</unmanaged>
        /// <unmanaged-short>WICBitmapPaletteTypeMedianCut</unmanaged-short>
        MedianCut = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>A black and white palette.</p> </dd>
        /// </summary>
        /// <doc-id>ee719812</doc-id>
        /// <unmanaged>WICBitmapPaletteTypeFixedBW</unmanaged>
        /// <unmanaged-short>WICBitmapPaletteTypeFixedBW</unmanaged-short>
        FixedBW = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>A palette that has its 8-color on-off primaries and the 16 system colors added. With duplicates removed, 16 colors are available.</p> </dd>
        /// </summary>
        /// <doc-id>ee719812</doc-id>
        /// <unmanaged>WICBitmapPaletteTypeFixedHalftone8</unmanaged>
        /// <unmanaged-short>WICBitmapPaletteTypeFixedHalftone8</unmanaged-short>
        FixedHalftone8 = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>A palette that has 3 intensity levels of each primary: 27-color on-off primaries and the 16 system colors added. With duplicates removed, 35 colors are available.</p> </dd>
        /// </summary>
        /// <doc-id>ee719812</doc-id>
        /// <unmanaged>WICBitmapPaletteTypeFixedHalftone27</unmanaged>
        /// <unmanaged-short>WICBitmapPaletteTypeFixedHalftone27</unmanaged-short>
        FixedHalftone27 = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>A palette that has 4 intensity levels of each primary: 64-color on-off primaries and the 16 system colors added. With duplicates removed, 72 colors are available.</p> </dd>
        /// </summary>
        /// <doc-id>ee719812</doc-id>
        /// <unmanaged>WICBitmapPaletteTypeFixedHalftone64</unmanaged>
        /// <unmanaged-short>WICBitmapPaletteTypeFixedHalftone64</unmanaged-short>
        FixedHalftone64 = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>A palette that has 5 intensity levels of each primary: 125-color on-off primaries and the 16 system colors added. With duplicates removed, 133 colors are available.</p> </dd>
        /// </summary>
        /// <doc-id>ee719812</doc-id>
        /// <unmanaged>WICBitmapPaletteTypeFixedHalftone125</unmanaged>
        /// <unmanaged-short>WICBitmapPaletteTypeFixedHalftone125</unmanaged-short>
        FixedHalftone125 = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>A palette that has 6 intensity levels of each primary: 216-color on-off primaries and the 16 system colors added. With duplicates removed, 224 colors are available. This is the same as <strong>WICBitmapPaletteFixedHalftoneWeb</strong>.</p> </dd>
        /// </summary>
        /// <doc-id>ee719812</doc-id>
        /// <unmanaged>WICBitmapPaletteTypeFixedHalftone216</unmanaged>
        /// <unmanaged-short>WICBitmapPaletteTypeFixedHalftone216</unmanaged-short>
        FixedHalftone216 = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>A palette that has 6 intensity levels of each primary: 216-color on-off primaries and the 16 system colors added. With duplicates removed, 224 colors are available. This is the same as <strong>WICBitmapPaletteTypeFixedHalftone216</strong>.</p> </dd>
        /// </summary>
        /// <doc-id>ee719812</doc-id>
        /// <unmanaged>WICBitmapPaletteTypeFixedWebPalette</unmanaged>
        /// <unmanaged-short>WICBitmapPaletteTypeFixedWebPalette</unmanaged-short>
        FixedWebPalette = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>A palette that has its 252-color on-off primaries and the 16 system colors added. With duplicates removed, 256 colors are available.</p> </dd>
        /// </summary>
        /// <doc-id>ee719812</doc-id>
        /// <unmanaged>WICBitmapPaletteTypeFixedHalftone252</unmanaged>
        /// <unmanaged-short>WICBitmapPaletteTypeFixedHalftone252</unmanaged-short>
        FixedHalftone252 = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>A palette that has its 256-color on-off primaries and the 16 system colors added. With duplicates removed, 256 colors are available.</p> </dd>
        /// </summary>
        /// <doc-id>ee719812</doc-id>
        /// <unmanaged>WICBitmapPaletteTypeFixedHalftone256</unmanaged>
        /// <unmanaged-short>WICBitmapPaletteTypeFixedHalftone256</unmanaged-short>
        FixedHalftone256 = unchecked ((System.Int32)(9)),
        /// <summary>
        /// <dd> <p>A palette that has 4 shades of gray.</p> </dd>
        /// </summary>
        /// <doc-id>ee719812</doc-id>
        /// <unmanaged>WICBitmapPaletteTypeFixedGray4</unmanaged>
        /// <unmanaged-short>WICBitmapPaletteTypeFixedGray4</unmanaged-short>
        FixedGray4 = unchecked ((System.Int32)(10)),
        /// <summary>
        /// <dd> <p>A palette that has 16 shades of gray.</p> </dd>
        /// </summary>
        /// <doc-id>ee719812</doc-id>
        /// <unmanaged>WICBitmapPaletteTypeFixedGray16</unmanaged>
        /// <unmanaged-short>WICBitmapPaletteTypeFixedGray16</unmanaged-short>
        FixedGray16 = unchecked ((System.Int32)(11)),
        /// <summary>
        /// <dd> <p>A palette that has 256 shades of gray.</p> </dd>
        /// </summary>
        /// <doc-id>ee719812</doc-id>
        /// <unmanaged>WICBitmapPaletteTypeFixedGray256</unmanaged>
        /// <unmanaged-short>WICBitmapPaletteTypeFixedGray256</unmanaged-short>
        FixedGray256 = unchecked ((System.Int32)(12))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies the flip and rotation transforms.</p>
    /// </summary>
    /// <doc-id>ee719814</doc-id>
    /// <unmanaged>WICBitmapTransformOptions</unmanaged>
    /// <unmanaged-short>WICBitmapTransformOptions</unmanaged-short>
    public enum BitmapTransformOptions : System.Int32
    {
        /// <summary>
        /// <dd> <p>A rotation of 0 degrees.</p> </dd>
        /// </summary>
        /// <doc-id>ee719814</doc-id>
        /// <unmanaged>WICBitmapTransformRotate0</unmanaged>
        /// <unmanaged-short>WICBitmapTransformRotate0</unmanaged-short>
        Rotate0 = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>A clockwise rotation of 90 degrees.</p> </dd>
        /// </summary>
        /// <doc-id>ee719814</doc-id>
        /// <unmanaged>WICBitmapTransformRotate90</unmanaged>
        /// <unmanaged-short>WICBitmapTransformRotate90</unmanaged-short>
        Rotate90 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>A clockwise rotation of 180 degrees.</p> </dd>
        /// </summary>
        /// <doc-id>ee719814</doc-id>
        /// <unmanaged>WICBitmapTransformRotate180</unmanaged>
        /// <unmanaged-short>WICBitmapTransformRotate180</unmanaged-short>
        Rotate180 = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>A clockwise rotation of 270 degrees.</p> </dd>
        /// </summary>
        /// <doc-id>ee719814</doc-id>
        /// <unmanaged>WICBitmapTransformRotate270</unmanaged>
        /// <unmanaged-short>WICBitmapTransformRotate270</unmanaged-short>
        Rotate270 = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>A horizontal flip. Pixels are flipped around the vertical y-axis.</p> </dd>
        /// </summary>
        /// <doc-id>ee719814</doc-id>
        /// <unmanaged>WICBitmapTransformFlipHorizontal</unmanaged>
        /// <unmanaged-short>WICBitmapTransformFlipHorizontal</unmanaged-short>
        FlipHorizontal = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>A vertical flip. Pixels are flipped around the horizontal x-axis.</p> </dd>
        /// </summary>
        /// <doc-id>ee719814</doc-id>
        /// <unmanaged>WICBitmapTransformFlipVertical</unmanaged>
        /// <unmanaged-short>WICBitmapTransformFlipVertical</unmanaged-short>
        FlipVertical = unchecked ((System.Int32)(16))}

    /// <summary>
    /// <p>Specifies the color context types.</p>
    /// </summary>
    /// <doc-id>ee719815</doc-id>
    /// <unmanaged>WICColorContextType</unmanaged>
    /// <unmanaged-short>WICColorContextType</unmanaged-short>
    public enum ColorContextType : System.Int32
    {
        /// <summary>
        /// <dd> <p>An uninitialized color context.</p> </dd>
        /// </summary>
        /// <doc-id>ee719815</doc-id>
        /// <unmanaged>WICColorContextUninitialized</unmanaged>
        /// <unmanaged-short>WICColorContextUninitialized</unmanaged-short>
        Uninitialized = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>A color context that is a full ICC color profile.</p> </dd>
        /// </summary>
        /// <doc-id>ee719815</doc-id>
        /// <unmanaged>WICColorContextProfile</unmanaged>
        /// <unmanaged-short>WICColorContextProfile</unmanaged-short>
        Profile = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>A color context that is one of a number of set color spaces (sRGB, AdobeRGB) that are defined in the EXIF specification.</p> </dd>
        /// </summary>
        /// <doc-id>ee719815</doc-id>
        /// <unmanaged>WICColorContextExifColorSpace</unmanaged>
        /// <unmanaged-short>WICColorContextExifColorSpace</unmanaged-short>
        ExifColorSpace = unchecked ((System.Int32)(2))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies component enumeration options.</p>
    /// </summary>
    /// <doc-id>ee719816</doc-id>
    /// <unmanaged>WICComponentEnumerateOptions</unmanaged>
    /// <unmanaged-short>WICComponentEnumerateOptions</unmanaged-short>
    public enum ComponentEnumerateOptions : System.Int32
    {
        /// <summary>
        /// <dd> <p>Enumerate any components that are not disabled. Because this value is 0x0, it is always included with the other options.</p> </dd>
        /// </summary>
        /// <doc-id>ee719816</doc-id>
        /// <unmanaged>WICComponentEnumerateDefault</unmanaged>
        /// <unmanaged-short>WICComponentEnumerateDefault</unmanaged-short>
        Default = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Force a read of the registry before enumerating components.</p> </dd>
        /// </summary>
        /// <doc-id>ee719816</doc-id>
        /// <unmanaged>WICComponentEnumerateRefresh</unmanaged>
        /// <unmanaged-short>WICComponentEnumerateRefresh</unmanaged-short>
        Refresh = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Include disabled components in the enumeration. The set of disabled components is disjoint with the set of default enumerated components</p> </dd>
        /// </summary>
        /// <doc-id>ee719816</doc-id>
        /// <unmanaged>WICComponentEnumerateDisabled</unmanaged>
        /// <unmanaged-short>WICComponentEnumerateDisabled</unmanaged-short>
        Disabled = unchecked ((System.Int32)(-2147483648)),
        /// <summary>
        /// <dd> <p>Include unsigned components in the enumeration. This option has no effect.</p> </dd>
        /// </summary>
        /// <doc-id>ee719816</doc-id>
        /// <unmanaged>WICComponentEnumerateUnsigned</unmanaged>
        /// <unmanaged-short>WICComponentEnumerateUnsigned</unmanaged-short>
        Unsigned = unchecked ((System.Int32)(1073741824)),
        /// <summary>
        /// <dd> <p>At the end of component enumeration, filter out any components that are not Windows provided.</p> </dd>
        /// </summary>
        /// <doc-id>ee719816</doc-id>
        /// <unmanaged>WICComponentEnumerateBuiltInOnly</unmanaged>
        /// <unmanaged-short>WICComponentEnumerateBuiltInOnly</unmanaged-short>
        BuiltInOnly = unchecked ((System.Int32)(536870912))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies the component signing status.</p>
    /// </summary>
    /// <doc-id>ee719817</doc-id>
    /// <unmanaged>WICComponentSigning</unmanaged>
    /// <unmanaged-short>WICComponentSigning</unmanaged-short>
    public enum ComponentSigning : System.Int32
    {
        /// <summary>
        /// <dd> <p>A signed component.</p> </dd>
        /// </summary>
        /// <doc-id>ee719817</doc-id>
        /// <unmanaged>WICComponentSigned</unmanaged>
        /// <unmanaged-short>WICComponentSigned</unmanaged-short>
        Signed = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>An unsigned component</p> </dd>
        /// </summary>
        /// <doc-id>ee719817</doc-id>
        /// <unmanaged>WICComponentUnsigned</unmanaged>
        /// <unmanaged-short>WICComponentUnsigned</unmanaged-short>
        Unsigned = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>A component is safe. </p> <p>Components that do not have a binary component to sign, such as a pixel format, should return this value.</p> </dd>
        /// </summary>
        /// <doc-id>ee719817</doc-id>
        /// <unmanaged>WICComponentSafe</unmanaged>
        /// <unmanaged-short>WICComponentSafe</unmanaged-short>
        Safe = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>A component has been disabled.</p> </dd>
        /// </summary>
        /// <doc-id>ee719817</doc-id>
        /// <unmanaged>WICComponentDisabled</unmanaged>
        /// <unmanaged-short>WICComponentDisabled</unmanaged-short>
        Disabled = unchecked ((System.Int32)(-2147483648))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies the type of Windows Imaging Component (WIC) component.</p>
    /// </summary>
    /// <doc-id>ee719818</doc-id>
    /// <unmanaged>WICComponentType</unmanaged>
    /// <unmanaged-short>WICComponentType</unmanaged-short>
    public enum ComponentType : System.Int32
    {
        /// <summary>
        /// <dd> <p>A WIC decoder.</p> </dd>
        /// </summary>
        /// <doc-id>ee719818</doc-id>
        /// <unmanaged>WICDecoder</unmanaged>
        /// <unmanaged-short>WICDecoder</unmanaged-short>
        Decoder = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>A WIC encoder.</p> </dd>
        /// </summary>
        /// <doc-id>ee719818</doc-id>
        /// <unmanaged>WICEncoder</unmanaged>
        /// <unmanaged-short>WICEncoder</unmanaged-short>
        Encoder = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>A WIC pixel converter.</p> </dd>
        /// </summary>
        /// <doc-id>ee719818</doc-id>
        /// <unmanaged>WICPixelFormatConverter</unmanaged>
        /// <unmanaged-short>WICPixelFormatConverter</unmanaged-short>
        PixelFormatConverter = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>A WIC metadata reader.</p> </dd>
        /// </summary>
        /// <doc-id>ee719818</doc-id>
        /// <unmanaged>WICMetadataReader</unmanaged>
        /// <unmanaged-short>WICMetadataReader</unmanaged-short>
        MetadataReader = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>A WIC metadata writer.</p> </dd>
        /// </summary>
        /// <doc-id>ee719818</doc-id>
        /// <unmanaged>WICMetadataWriter</unmanaged>
        /// <unmanaged-short>WICMetadataWriter</unmanaged-short>
        MetadataWriter = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p>A WIC pixel format.</p> </dd>
        /// </summary>
        /// <doc-id>ee719818</doc-id>
        /// <unmanaged>WICPixelFormat</unmanaged>
        /// <unmanaged-short>WICPixelFormat</unmanaged-short>
        PixelFormat = unchecked ((System.Int32)(32)),
        /// <summary>
        /// <dd> <p>All WIC components.</p> </dd>
        /// </summary>
        /// <doc-id>ee719818</doc-id>
        /// <unmanaged>WICAllComponents</unmanaged>
        /// <unmanaged-short>WICAllComponents</unmanaged-short>
        AllComponents = unchecked ((System.Int32)(63))}

    /// <summary>
    /// <p>Specifies the the meaning of pixel color component values contained in the DDS image.</p>
    /// </summary>
    /// <doc-id>dn302101</doc-id>
    /// <unmanaged>WICDdsAlphaMode</unmanaged>
    /// <unmanaged-short>WICDdsAlphaMode</unmanaged-short>
    public enum DdsAlphaMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Alpha behavior is unspecified and must be determined by the reader.</p> </dd>
        /// </summary>
        /// <doc-id>dn302101</doc-id>
        /// <unmanaged>WICDdsAlphaModeUnknown</unmanaged>
        /// <unmanaged-short>WICDdsAlphaModeUnknown</unmanaged-short>
        DdsAlphaModeUnknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The alpha data is straight.</p> </dd>
        /// </summary>
        /// <doc-id>dn302101</doc-id>
        /// <unmanaged>WICDdsAlphaModeStraight</unmanaged>
        /// <unmanaged-short>WICDdsAlphaModeStraight</unmanaged-short>
        DdsAlphaModeStraight = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The alpha data is premultiplied.</p> </dd>
        /// </summary>
        /// <doc-id>dn302101</doc-id>
        /// <unmanaged>WICDdsAlphaModePremultiplied</unmanaged>
        /// <unmanaged-short>WICDdsAlphaModePremultiplied</unmanaged-short>
        DdsAlphaModePremultiplied = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The alpha data is opaque (UNORM value of 1). This can be used by a compliant reader as a performance optimization. For example, blending operations can be converted to copies.</p> </dd>
        /// </summary>
        /// <doc-id>dn302101</doc-id>
        /// <unmanaged>WICDdsAlphaModeOpaque</unmanaged>
        /// <unmanaged-short>WICDdsAlphaModeOpaque</unmanaged-short>
        DdsAlphaModeOpaque = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>The alpha channel contains custom data that is not alpha.</p> </dd>
        /// </summary>
        /// <doc-id>dn302101</doc-id>
        /// <unmanaged>WICDdsAlphaModeCustom</unmanaged>
        /// <unmanaged-short>WICDdsAlphaModeCustom</unmanaged-short>
        DdsAlphaModeCustom = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p>Specifies the dimension type of the data contained in DDS image.</p>
    /// </summary>
    /// <remarks>
    /// <p>Both <strong>WICDdsTexture2d</strong> and <strong>WICDdsTextureCube</strong> correspond to <strong>D3D11_RESOURCE_DIMENSION_TEXTURE2D</strong>. When using <strong>ID3D11Device::CreateTexture2D</strong>, they are distinguished by the flag <strong>D3D11_RESOURCE_MISC_TEXTURECUBE</strong> in the structure <strong><see cref = "SharpDX.Direct3D11.Texture2DDescription"/></strong>.</p>
    /// </remarks>
    /// <doc-id>dn302102</doc-id>
    /// <unmanaged>WICDdsDimension</unmanaged>
    /// <unmanaged-short>WICDdsDimension</unmanaged-short>
    public enum DdsDimension : System.Int32
    {
        /// <summary>
        /// <dd> <p>DDS image contains a 1-dimensional texture .  </p> </dd>
        /// </summary>
        /// <doc-id>dn302102</doc-id>
        /// <unmanaged>WICDdsTexture1D</unmanaged>
        /// <unmanaged-short>WICDdsTexture1D</unmanaged-short>
        DdsTexture1D = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>DDS image contains a 2-dimensional texture .  </p> </dd>
        /// </summary>
        /// <doc-id>dn302102</doc-id>
        /// <unmanaged>WICDdsTexture2D</unmanaged>
        /// <unmanaged-short>WICDdsTexture2D</unmanaged-short>
        DdsTexture2D = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>DDS image contains a 3-dimensional texture .  </p> </dd>
        /// </summary>
        /// <doc-id>dn302102</doc-id>
        /// <unmanaged>WICDdsTexture3D</unmanaged>
        /// <unmanaged-short>WICDdsTexture3D</unmanaged-short>
        DdsTexture3D = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The DDS image contains a cube texture represented as an array of 6 faces.  </p> </dd>
        /// </summary>
        /// <doc-id>dn302102</doc-id>
        /// <unmanaged>WICDdsTextureCube</unmanaged>
        /// <unmanaged-short>WICDdsTextureCube</unmanaged-short>
        DdsTextureCube = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Specifies decode options.</p>
    /// </summary>
    /// <doc-id>ee719824</doc-id>
    /// <unmanaged>WICDecodeOptions</unmanaged>
    /// <unmanaged-short>WICDecodeOptions</unmanaged-short>
    public enum DecodeOptions : System.Int32
    {
        /// <summary>
        /// <dd> <p>Cache metadata when needed.</p> </dd>
        /// </summary>
        /// <doc-id>ee719824</doc-id>
        /// <unmanaged>WICDecodeMetadataCacheOnDemand</unmanaged>
        /// <unmanaged-short>WICDecodeMetadataCacheOnDemand</unmanaged-short>
        CacheOnDemand = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Cache metadata when decoder is loaded.</p> </dd>
        /// </summary>
        /// <doc-id>ee719824</doc-id>
        /// <unmanaged>WICDecodeMetadataCacheOnLoad</unmanaged>
        /// <unmanaged-short>WICDecodeMetadataCacheOnLoad</unmanaged-short>
        CacheOnLoad = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the application extension metadata properties for a Graphics Interchange Format (GIF) image.</p>
    /// </summary>
    /// <doc-id>ee719826</doc-id>
    /// <unmanaged>WICGifApplicationExtensionProperties</unmanaged>
    /// <unmanaged-short>WICGifApplicationExtensionProperties</unmanaged-short>
    public enum GifApplicationExtensionProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_UI1 | VT_VECTOR] Indicates a string that identifies the application.</p> </dd>
        /// </summary>
        /// <doc-id>ee719826</doc-id>
        /// <unmanaged>WICGifApplicationExtensionApplication</unmanaged>
        /// <unmanaged-short>WICGifApplicationExtensionApplication</unmanaged-short>
        Application = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>[VT_UI1 | VT_VECTOR] Indicates data that is exposed by the application.</p> </dd>
        /// </summary>
        /// <doc-id>ee719826</doc-id>
        /// <unmanaged>WICGifApplicationExtensionData</unmanaged>
        /// <unmanaged-short>WICGifApplicationExtensionData</unmanaged-short>
        Data = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Specifies the comment extension metadata properties for a Graphics Interchange Format (GIF) image.</p>
    /// </summary>
    /// <doc-id>ee719827</doc-id>
    /// <unmanaged>WICGifCommentExtensionProperties</unmanaged>
    /// <unmanaged-short>WICGifCommentExtensionProperties</unmanaged-short>
    public enum GifCommentExtensionProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_LPSTR] Indicates the comment text.</p> </dd>
        /// </summary>
        /// <doc-id>ee719827</doc-id>
        /// <unmanaged>WICGifCommentExtensionText</unmanaged>
        /// <unmanaged-short>WICGifCommentExtensionText</unmanaged-short>
        Text = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the graphic control extension metadata properties that define the transitions between each frame animation for Graphics Interchange Format (GIF) images.</p>
    /// </summary>
    /// <doc-id>ee719828</doc-id>
    /// <unmanaged>WICGifGraphicControlExtensionProperties</unmanaged>
    /// <unmanaged-short>WICGifGraphicControlExtensionProperties</unmanaged-short>
    public enum GifGraphicControlExtensionProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_UI1] Indicates  the disposal requirements. 0 - no disposal, 1 - do not dispose, 2 - restore to background color, 3 - restore to previous.</p> </dd>
        /// </summary>
        /// <doc-id>ee719828</doc-id>
        /// <unmanaged>WICGifGraphicControlExtensionDisposal</unmanaged>
        /// <unmanaged-short>WICGifGraphicControlExtensionDisposal</unmanaged-short>
        Disposal = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>[VT_BOOL] Indicates the user input flag. <strong>TRUE</strong> if user input should advance to the next frame; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>.</p> </dd>
        /// </summary>
        /// <doc-id>ee719828</doc-id>
        /// <unmanaged>WICGifGraphicControlExtensionUserInputFlag</unmanaged>
        /// <unmanaged-short>WICGifGraphicControlExtensionUserInputFlag</unmanaged-short>
        UserInputFlag = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>[VT_BOOL] Indicates the transparency flag. <strong>TRUE</strong> if a transparent color in is in the color table for this frame; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>.</p> </dd>
        /// </summary>
        /// <doc-id>ee719828</doc-id>
        /// <unmanaged>WICGifGraphicControlExtensionTransparencyFlag</unmanaged>
        /// <unmanaged-short>WICGifGraphicControlExtensionTransparencyFlag</unmanaged-short>
        TransparencyFlag = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>[VT_UI2] Indicates  how long to display the next frame before advancing to the next frame, in units of 1/100th of a second.</p> </dd>
        /// </summary>
        /// <doc-id>ee719828</doc-id>
        /// <unmanaged>WICGifGraphicControlExtensionDelay</unmanaged>
        /// <unmanaged-short>WICGifGraphicControlExtensionDelay</unmanaged-short>
        Delay = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>[VT_UI1] Indicates which color in the palette should be treated as transparent.</p> </dd>
        /// </summary>
        /// <doc-id>ee719828</doc-id>
        /// <unmanaged>WICGifGraphicControlExtensionTransparentColorIndex</unmanaged>
        /// <unmanaged-short>WICGifGraphicControlExtensionTransparentColorIndex</unmanaged-short>
        TransparentColorIndex = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p>Specifies the image descriptor metadata properties for  Graphics Interchange Format (GIF) frames.</p>
    /// </summary>
    /// <doc-id>ee719829</doc-id>
    /// <unmanaged>WICGifImageDescriptorProperties</unmanaged>
    /// <unmanaged-short>WICGifImageDescriptorProperties</unmanaged-short>
    public enum GifImageDescriptorProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_UI2] Indicates the X offset at which to locate this frame within the logical screen.</p> </dd>
        /// </summary>
        /// <doc-id>ee719829</doc-id>
        /// <unmanaged>WICGifImageDescriptorLeft</unmanaged>
        /// <unmanaged-short>WICGifImageDescriptorLeft</unmanaged-short>
        Left = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>[VT_UI2] Indicates the Y offset at which to locate this frame within the logical screen.</p> </dd>
        /// </summary>
        /// <doc-id>ee719829</doc-id>
        /// <unmanaged>WICGifImageDescriptorTop</unmanaged>
        /// <unmanaged-short>WICGifImageDescriptorTop</unmanaged-short>
        Top = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>[VT_UI2] Indicates width of this frame, in pixels.</p> </dd>
        /// </summary>
        /// <doc-id>ee719829</doc-id>
        /// <unmanaged>WICGifImageDescriptorWidth</unmanaged>
        /// <unmanaged-short>WICGifImageDescriptorWidth</unmanaged-short>
        Width = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>[VT_UI2] Indicates height of this frame, in pixels.</p> </dd>
        /// </summary>
        /// <doc-id>ee719829</doc-id>
        /// <unmanaged>WICGifImageDescriptorHeight</unmanaged>
        /// <unmanaged-short>WICGifImageDescriptorHeight</unmanaged-short>
        Height = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>[VT_BOOL] Indicates the local color table flag. <strong>TRUE</strong> if global color table is present; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>.</p> </dd>
        /// </summary>
        /// <doc-id>ee719829</doc-id>
        /// <unmanaged>WICGifImageDescriptorLocalColorTableFlag</unmanaged>
        /// <unmanaged-short>WICGifImageDescriptorLocalColorTableFlag</unmanaged-short>
        LocalColorTableFlag = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>[VT_BOOL] Indicates the interlace flag. <strong>TRUE</strong> if image is interlaced; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>.</p> </dd>
        /// </summary>
        /// <doc-id>ee719829</doc-id>
        /// <unmanaged>WICGifImageDescriptorInterlaceFlag</unmanaged>
        /// <unmanaged-short>WICGifImageDescriptorInterlaceFlag</unmanaged-short>
        InterlaceFlag = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>[VT_BOOL] Indicates the sorted color table flag. <strong>TRUE</strong> if the color table is sorted from most frequently to least frequently used color; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>.</p> </dd>
        /// </summary>
        /// <doc-id>ee719829</doc-id>
        /// <unmanaged>WICGifImageDescriptorSortFlag</unmanaged>
        /// <unmanaged-short>WICGifImageDescriptorSortFlag</unmanaged-short>
        SortFlag = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>[VT_UI1] Indicates the value used to calculate the number of bytes contained in the global color table. </p> <p>To calculate the actual size of the color table, raise 2 to the value of the field + 1.</p> </dd>
        /// </summary>
        /// <doc-id>ee719829</doc-id>
        /// <unmanaged>WICGifImageDescriptorLocalColorTableSize</unmanaged>
        /// <unmanaged-short>WICGifImageDescriptorLocalColorTableSize</unmanaged-short>
        LocalColorTableSize = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p>Specifies the logical screen descriptor properties for Graphics Interchange Format (GIF) metadata.</p>
    /// </summary>
    /// <doc-id>ee719830</doc-id>
    /// <unmanaged>WICGifLogicalScreenDescriptorProperties</unmanaged>
    /// <unmanaged-short>WICGifLogicalScreenDescriptorProperties</unmanaged-short>
    public enum GifLogicalScreenDescriptorProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p> [VT_UI1 | VT_VECTOR] Indicates the signature property.</p> </dd>
        /// </summary>
        /// <doc-id>ee719830</doc-id>
        /// <unmanaged>WICGifLogicalScreenSignature</unmanaged>
        /// <unmanaged-short>WICGifLogicalScreenSignature</unmanaged-short>
        Signature = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>[VT_UI2] Indicates the width in pixels. </p> </dd>
        /// </summary>
        /// <doc-id>ee719830</doc-id>
        /// <unmanaged>WICGifLogicalScreenDescriptorWidth</unmanaged>
        /// <unmanaged-short>WICGifLogicalScreenDescriptorWidth</unmanaged-short>
        Width = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>[VT_UI2] Indicates the height in pixels. </p> </dd>
        /// </summary>
        /// <doc-id>ee719830</doc-id>
        /// <unmanaged>WICGifLogicalScreenDescriptorHeight</unmanaged>
        /// <unmanaged-short>WICGifLogicalScreenDescriptorHeight</unmanaged-short>
        Height = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>[VT_BOOL] Indicates the  global color table flag. <strong>TRUE</strong> if a global color table is present; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>.</p> </dd>
        /// </summary>
        /// <doc-id>ee719830</doc-id>
        /// <unmanaged>WICGifLogicalScreenDescriptorGlobalColorTableFlag</unmanaged>
        /// <unmanaged-short>WICGifLogicalScreenDescriptorGlobalColorTableFlag</unmanaged-short>
        GlobalColorTableFlag = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>[VT_UI1] Indicates the color resolution in bits per pixel.</p> </dd>
        /// </summary>
        /// <doc-id>ee719830</doc-id>
        /// <unmanaged>WICGifLogicalScreenDescriptorColorResolution</unmanaged>
        /// <unmanaged-short>WICGifLogicalScreenDescriptorColorResolution</unmanaged-short>
        ColorResolution = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>[VT_BOOL] Indicates the sorted color table flag. <strong>TRUE</strong> if the table is sorted; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>.</p> </dd>
        /// </summary>
        /// <doc-id>ee719830</doc-id>
        /// <unmanaged>WICGifLogicalScreenDescriptorSortFlag</unmanaged>
        /// <unmanaged-short>WICGifLogicalScreenDescriptorSortFlag</unmanaged-short>
        SortFlag = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>[VT_UI1] Indicates the value used to calculate the number of bytes contained in the global color table. </p> <p>To calculate the actual size of the color table, raise 2 to the value of the field + 1.</p> </dd>
        /// </summary>
        /// <doc-id>ee719830</doc-id>
        /// <unmanaged>WICGifLogicalScreenDescriptorGlobalColorTableSize</unmanaged>
        /// <unmanaged-short>WICGifLogicalScreenDescriptorGlobalColorTableSize</unmanaged-short>
        GlobalColorTableSize = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>[VT_UI1] Indicates the index within the color table to use for the background (pixels not defined in the image).</p> </dd>
        /// </summary>
        /// <doc-id>ee719830</doc-id>
        /// <unmanaged>WICGifLogicalScreenDescriptorBackgroundColorIndex</unmanaged>
        /// <unmanaged-short>WICGifLogicalScreenDescriptorBackgroundColorIndex</unmanaged-short>
        BackgroundColorIndex = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>[VT_UI1] Indicates the factor used to compute an approximation of the aspect ratio.</p> </dd>
        /// </summary>
        /// <doc-id>ee719830</doc-id>
        /// <unmanaged>WICGifLogicalScreenDescriptorPixelAspectRatio</unmanaged>
        /// <unmanaged-short>WICGifLogicalScreenDescriptorPixelAspectRatio</unmanaged-short>
        PixelAspectRatio = unchecked ((System.Int32)(9))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>WICHeifProperties</unmanaged>
    /// <unmanaged-short>WICHeifProperties</unmanaged-short>
    public enum HeifProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>WICHeifOrientation</unmanaged>
        /// <unmanaged-short>WICHeifOrientation</unmanaged-short>
        HeifOrientation = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the JPEG chrominance table property.</p>
    /// </summary>
    /// <doc-id>ee719831</doc-id>
    /// <unmanaged>WICJpegChrominanceProperties</unmanaged>
    /// <unmanaged-short>WICJpegChrominanceProperties</unmanaged-short>
    public enum JpegChrominanceProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_UI2|VT_VECTOR] Indicates the metadata property is a chrominance table.</p> </dd>
        /// </summary>
        /// <doc-id>ee719831</doc-id>
        /// <unmanaged>WICJpegChrominanceTable</unmanaged>
        /// <unmanaged-short>WICJpegChrominanceTable</unmanaged-short>
        Table = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the JPEG comment properties.</p>
    /// </summary>
    /// <doc-id>ee719832</doc-id>
    /// <unmanaged>WICJpegCommentProperties</unmanaged>
    /// <unmanaged-short>WICJpegCommentProperties</unmanaged-short>
    public enum JpegCommentProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates the metadata property is comment text.</p> </dd>
        /// </summary>
        /// <doc-id>ee719832</doc-id>
        /// <unmanaged>WICJpegCommentText</unmanaged>
        /// <unmanaged-short>WICJpegCommentText</unmanaged-short>
        Text = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the options for indexing a JPEG image. </p>
    /// </summary>
    /// <doc-id>dn903880</doc-id>
    /// <unmanaged>WICJpegIndexingOptions</unmanaged>
    /// <unmanaged-short>WICJpegIndexingOptions</unmanaged-short>
    public enum JpegIndexingOptions : System.Int32
    {
        /// <summary>
        /// <dd> <p>Index generation is deferred until <strong>IWICBitmapSource::CopyPixels</strong> is called on the image.</p> </dd>
        /// </summary>
        /// <doc-id>dn903880</doc-id>
        /// <unmanaged>WICJpegIndexingOptionsGenerateOnDemand</unmanaged>
        /// <unmanaged-short>WICJpegIndexingOptionsGenerateOnDemand</unmanaged-short>
        JpegIndexingOptionsGenerateOnDemand = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Index generation is performed when the when the image is initially loaded.</p> </dd>
        /// </summary>
        /// <doc-id>dn903880</doc-id>
        /// <unmanaged>WICJpegIndexingOptionsGenerateOnLoad</unmanaged>
        /// <unmanaged-short>WICJpegIndexingOptionsGenerateOnLoad</unmanaged-short>
        JpegIndexingOptionsGenerateOnLoad = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the JPEG luminance table property.</p>
    /// </summary>
    /// <doc-id>ee719833</doc-id>
    /// <unmanaged>WICJpegLuminanceProperties</unmanaged>
    /// <unmanaged-short>WICJpegLuminanceProperties</unmanaged-short>
    public enum JpegLuminanceProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_UI2|VT_VECTOR] Indicates the metadata property is a luminance table.</p> </dd>
        /// </summary>
        /// <doc-id>ee719833</doc-id>
        /// <unmanaged>WICJpegLuminanceTable</unmanaged>
        /// <unmanaged-short>WICJpegLuminanceTable</unmanaged-short>
        Table = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the memory layout of pixel data in a JPEG image scan. </p>
    /// </summary>
    /// <doc-id>dn903892</doc-id>
    /// <unmanaged>WICJpegScanType</unmanaged>
    /// <unmanaged-short>WICJpegScanType</unmanaged-short>
    public enum JpegScanType : System.Int32
    {
        /// <summary>
        /// <dd> <p>The pixel data is stored in an interleaved memory layout.</p> </dd>
        /// </summary>
        /// <doc-id>dn903892</doc-id>
        /// <unmanaged>WICJpegScanTypeInterleaved</unmanaged>
        /// <unmanaged-short>WICJpegScanTypeInterleaved</unmanaged-short>
        JpegScanTypeInterleaved = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The pixel data is stored in a planar memory layout.</p> </dd>
        /// </summary>
        /// <doc-id>dn903892</doc-id>
        /// <unmanaged>WICJpegScanTypePlanarComponents</unmanaged>
        /// <unmanaged-short>WICJpegScanTypePlanarComponents</unmanaged-short>
        JpegScanTypePlanarComponents = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The pixel data is stored in a progressive layout.</p> </dd>
        /// </summary>
        /// <doc-id>dn903892</doc-id>
        /// <unmanaged>WICJpegScanTypeProgressive</unmanaged>
        /// <unmanaged-short>WICJpegScanTypeProgressive</unmanaged-short>
        JpegScanTypeProgressive = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Specifies conversion matrix from Y'Cb'Cr' to R'G'B'. </p>
    /// </summary>
    /// <doc-id>dn903893</doc-id>
    /// <unmanaged>WICJpegTransferMatrix</unmanaged>
    /// <unmanaged-short>WICJpegTransferMatrix</unmanaged-short>
    public enum JpegTransferMatrix : System.Int32
    {
        /// <summary>
        /// <dd> <p>Specifies the identity transfer matrix.</p> </dd>
        /// </summary>
        /// <doc-id>dn903893</doc-id>
        /// <unmanaged>WICJpegTransferMatrixIdentity</unmanaged>
        /// <unmanaged-short>WICJpegTransferMatrixIdentity</unmanaged-short>
        JpegTransferMatrixIdentity = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Specifies the BT601 transfer matrix.</p> </dd>
        /// </summary>
        /// <doc-id>dn903893</doc-id>
        /// <unmanaged>WICJpegTransferMatrixBT601</unmanaged>
        /// <unmanaged-short>WICJpegTransferMatrixBT601</unmanaged-short>
        JpegTransferMatrixBT601 = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the JPEG YCrCB subsampling options. </p>
    /// </summary>
    /// <remarks>
    /// <p>The native JPEG encoder uses <strong>WICJpegYCrCbSubsampling420</strong>.</p>
    /// </remarks>
    /// <doc-id>ee719834</doc-id>
    /// <unmanaged>WICJpegYCrCbSubsamplingOption</unmanaged>
    /// <unmanaged-short>WICJpegYCrCbSubsamplingOption</unmanaged-short>
    public enum JpegYCrCbSubsamplingOption : System.Int32
    {
        /// <summary>
        /// <dd> <p>The default subsampling option. </p> </dd>
        /// </summary>
        /// <doc-id>ee719834</doc-id>
        /// <unmanaged>WICJpegYCrCbSubsamplingDefault</unmanaged>
        /// <unmanaged-short>WICJpegYCrCbSubsamplingDefault</unmanaged-short>
        Default = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Subsampling option that uses both horizontal and vertical decimation.</p> </dd>
        /// </summary>
        /// <doc-id>ee719834</doc-id>
        /// <unmanaged>WICJpegYCrCbSubsampling420</unmanaged>
        /// <unmanaged-short>WICJpegYCrCbSubsampling420</unmanaged-short>
        Mode420 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Subsampling option that uses horizontal decimation  .</p> </dd>
        /// </summary>
        /// <doc-id>ee719834</doc-id>
        /// <unmanaged>WICJpegYCrCbSubsampling422</unmanaged>
        /// <unmanaged-short>WICJpegYCrCbSubsampling422</unmanaged-short>
        Mode422 = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Subsampling option that uses no decimation.</p> </dd>
        /// </summary>
        /// <doc-id>ee719834</doc-id>
        /// <unmanaged>WICJpegYCrCbSubsampling444</unmanaged>
        /// <unmanaged-short>WICJpegYCrCbSubsampling444</unmanaged-short>
        Mode444 = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Subsampling option that uses 2x vertical downsampling only. This option is only available in Windows?8.1 and later.</p> </dd>
        /// </summary>
        /// <doc-id>ee719834</doc-id>
        /// <unmanaged>WICJpegYCrCbSubsampling440</unmanaged>
        /// <unmanaged-short>WICJpegYCrCbSubsampling440</unmanaged-short>
        Mode440 = unchecked ((System.Int32)(4))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies named white balances for raw images.</p>
    /// </summary>
    /// <doc-id>ee719842</doc-id>
    /// <unmanaged>WICNamedWhitePoint</unmanaged>
    /// <unmanaged-short>WICNamedWhitePoint</unmanaged-short>
    public enum NamedWhitePoint : System.Int32
    {
        /// <summary>
        /// <dd> <p>The default white balance.</p> </dd>
        /// </summary>
        /// <doc-id>ee719842</doc-id>
        /// <unmanaged>WICWhitePointDefault</unmanaged>
        /// <unmanaged-short>WICWhitePointDefault</unmanaged-short>
        Default = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>A daylight white balance.</p> </dd>
        /// </summary>
        /// <doc-id>ee719842</doc-id>
        /// <unmanaged>WICWhitePointDaylight</unmanaged>
        /// <unmanaged-short>WICWhitePointDaylight</unmanaged-short>
        Daylight = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>A cloudy white balance.</p> </dd>
        /// </summary>
        /// <doc-id>ee719842</doc-id>
        /// <unmanaged>WICWhitePointCloudy</unmanaged>
        /// <unmanaged-short>WICWhitePointCloudy</unmanaged-short>
        Cloudy = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>A shade white balance.</p> </dd>
        /// </summary>
        /// <doc-id>ee719842</doc-id>
        /// <unmanaged>WICWhitePointShade</unmanaged>
        /// <unmanaged-short>WICWhitePointShade</unmanaged-short>
        Shade = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>A tungsten white balance.</p> </dd>
        /// </summary>
        /// <doc-id>ee719842</doc-id>
        /// <unmanaged>WICWhitePointTungsten</unmanaged>
        /// <unmanaged-short>WICWhitePointTungsten</unmanaged-short>
        Tungsten = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p>A fluorescent white balance.</p> </dd>
        /// </summary>
        /// <doc-id>ee719842</doc-id>
        /// <unmanaged>WICWhitePointFluorescent</unmanaged>
        /// <unmanaged-short>WICWhitePointFluorescent</unmanaged-short>
        Fluorescent = unchecked ((System.Int32)(32)),
        /// <summary>
        /// <dd> <p>Daylight white balance.</p> </dd>
        /// </summary>
        /// <doc-id>ee719842</doc-id>
        /// <unmanaged>WICWhitePointFlash</unmanaged>
        /// <unmanaged-short>WICWhitePointFlash</unmanaged-short>
        Flash = unchecked ((System.Int32)(64)),
        /// <summary>
        /// <dd> <p>A flash white balance.</p> </dd>
        /// </summary>
        /// <doc-id>ee719842</doc-id>
        /// <unmanaged>WICWhitePointUnderwater</unmanaged>
        /// <unmanaged-short>WICWhitePointUnderwater</unmanaged-short>
        Underwater = unchecked ((System.Int32)(128)),
        /// <summary>
        /// <dd> <p>A custom white balance. This is typically used when using a picture (grey-card) as white balance.</p> </dd>
        /// </summary>
        /// <doc-id>ee719842</doc-id>
        /// <unmanaged>WICWhitePointCustom</unmanaged>
        /// <unmanaged-short>WICWhitePointCustom</unmanaged-short>
        Custom = unchecked ((System.Int32)(256)),
        /// <summary>
        /// <dd> <p>An automatic balance.</p> </dd>
        /// </summary>
        /// <doc-id>ee719842</doc-id>
        /// <unmanaged>WICWhitePointAutoWhiteBalance</unmanaged>
        /// <unmanaged-short>WICWhitePointAutoWhiteBalance</unmanaged-short>
        AutoWhiteBalance = unchecked ((System.Int32)(512)),
        /// <summary>
        /// <dd> <p>An "as shot" white balance.</p> </dd>
        /// </summary>
        /// <doc-id>ee719842</doc-id>
        /// <unmanaged>WICWhitePointAsShot</unmanaged>
        /// <unmanaged-short>WICWhitePointAsShot</unmanaged-short>
        AsShot = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <doc-id>ee719844</doc-id>
    /// <unmanaged>WICPixelFormatNumericRepresentation</unmanaged>
    /// <unmanaged-short>WICPixelFormatNumericRepresentation</unmanaged-short>
    public enum PixelFormatNumericRepresentation : System.Int32
    {
        /// <summary>
        /// <dd></dd>
        /// </summary>
        /// <doc-id>ee719844</doc-id>
        /// <unmanaged>WICPixelFormatNumericRepresentationUnspecified</unmanaged>
        /// <unmanaged-short>WICPixelFormatNumericRepresentationUnspecified</unmanaged-short>
        Unspecified = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd></dd>
        /// </summary>
        /// <doc-id>ee719844</doc-id>
        /// <unmanaged>WICPixelFormatNumericRepresentationIndexed</unmanaged>
        /// <unmanaged-short>WICPixelFormatNumericRepresentationIndexed</unmanaged-short>
        Indexed = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd></dd>
        /// </summary>
        /// <doc-id>ee719844</doc-id>
        /// <unmanaged>WICPixelFormatNumericRepresentationUnsignedInteger</unmanaged>
        /// <unmanaged-short>WICPixelFormatNumericRepresentationUnsignedInteger</unmanaged-short>
        UnsignedInteger = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd></dd>
        /// </summary>
        /// <doc-id>ee719844</doc-id>
        /// <unmanaged>WICPixelFormatNumericRepresentationSignedInteger</unmanaged>
        /// <unmanaged-short>WICPixelFormatNumericRepresentationSignedInteger</unmanaged-short>
        SignedInteger = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd></dd>
        /// </summary>
        /// <doc-id>ee719844</doc-id>
        /// <unmanaged>WICPixelFormatNumericRepresentationFixed</unmanaged>
        /// <unmanaged-short>WICPixelFormatNumericRepresentationFixed</unmanaged-short>
        Fixed = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd></dd>
        /// </summary>
        /// <doc-id>ee719844</doc-id>
        /// <unmanaged>WICPixelFormatNumericRepresentationFloat</unmanaged>
        /// <unmanaged-short>WICPixelFormatNumericRepresentationFloat</unmanaged-short>
        Float = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p>Specifies additional options to an <strong><see cref = "SharpDX.WIC.PlanarBitmapSourceTransform"/></strong> implementation.  </p>
    /// </summary>
    /// <doc-id>dn302105</doc-id>
    /// <unmanaged>WICPlanarOptions</unmanaged>
    /// <unmanaged-short>WICPlanarOptions</unmanaged-short>
    public enum PlanarOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn302105</doc-id>
        /// <unmanaged>WICPlanarOptionsDefault</unmanaged>
        /// <unmanaged-short>WICPlanarOptionsDefault</unmanaged-short>
        PlanarOptionsDefault = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn302105</doc-id>
        /// <unmanaged>WICPlanarOptionsPreserveSubsampling</unmanaged>
        /// <unmanaged-short>WICPlanarOptionsPreserveSubsampling</unmanaged-short>
        PlanarOptionsPreserveSubsampling = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the Portable Network Graphics (PNG) background (bKGD) chunk metadata properties.</p>
    /// </summary>
    /// <doc-id>ee719845</doc-id>
    /// <unmanaged>WICPngBkgdProperties</unmanaged>
    /// <unmanaged-short>WICPngBkgdProperties</unmanaged-short>
    public enum PngBkgdProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates the background color. There are three possible types, depending on the image's pixel format.</p> <p></p> <dl> <dt>VT_UI1</dt> <dd> <p>Specifies the index of the background color in an image with an indexed pixel format.</p> </dd> <dt>VT_UI2</dt> <dd> <p>Specifies the background color in a grayscale image.</p> </dd> <dt>VT_VECTOR|VT_UI2</dt> <dd> <p>Specifies the background color in an RGB image as three USHORT values: {0x<em>RRRR</em>, 0x<em>GGGG</em>, 0x<em>BBBB</em>}.</p> </dd> </dl> </dd>
        /// </summary>
        /// <doc-id>ee719845</doc-id>
        /// <unmanaged>WICPngBkgdBackgroundColor</unmanaged>
        /// <unmanaged-short>WICPngBkgdBackgroundColor</unmanaged-short>
        Color = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the Portable Network Graphics (PNG) cHRM chunk metadata properties for CIE XYZ chromaticity.</p>
    /// </summary>
    /// <doc-id>ee719846</doc-id>
    /// <unmanaged>WICPngChrmProperties</unmanaged>
    /// <unmanaged-short>WICPngChrmProperties</unmanaged-short>
    public enum PngChrmProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_UI4] Indicates the whitepoint x value ratio.</p> </dd>
        /// </summary>
        /// <doc-id>ee719846</doc-id>
        /// <unmanaged>WICPngChrmWhitePointX</unmanaged>
        /// <unmanaged-short>WICPngChrmWhitePointX</unmanaged-short>
        WhitePointX = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>[VT_UI4] Indicates the whitepoint y value ratio.</p> </dd>
        /// </summary>
        /// <doc-id>ee719846</doc-id>
        /// <unmanaged>WICPngChrmWhitePointY</unmanaged>
        /// <unmanaged-short>WICPngChrmWhitePointY</unmanaged-short>
        WhitePointY = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>[VT_UI4] Indicates the red x value ratio.</p> </dd>
        /// </summary>
        /// <doc-id>ee719846</doc-id>
        /// <unmanaged>WICPngChrmRedX</unmanaged>
        /// <unmanaged-short>WICPngChrmRedX</unmanaged-short>
        RedX = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>[VT_UI4] Indicates the red y value ratio.</p> </dd>
        /// </summary>
        /// <doc-id>ee719846</doc-id>
        /// <unmanaged>WICPngChrmRedY</unmanaged>
        /// <unmanaged-short>WICPngChrmRedY</unmanaged-short>
        RedY = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>[VT_UI4] Indicates the green x value ratio.</p> </dd>
        /// </summary>
        /// <doc-id>ee719846</doc-id>
        /// <unmanaged>WICPngChrmGreenX</unmanaged>
        /// <unmanaged-short>WICPngChrmGreenX</unmanaged-short>
        GreenX = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>[VT_UI4] Indicates the green y value ratio.</p> </dd>
        /// </summary>
        /// <doc-id>ee719846</doc-id>
        /// <unmanaged>WICPngChrmGreenY</unmanaged>
        /// <unmanaged-short>WICPngChrmGreenY</unmanaged-short>
        GreenY = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>[VT_UI4] Indicates the blue x value ratio.</p> </dd>
        /// </summary>
        /// <doc-id>ee719846</doc-id>
        /// <unmanaged>WICPngChrmBlueX</unmanaged>
        /// <unmanaged-short>WICPngChrmBlueX</unmanaged-short>
        BlueX = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>[VT_UI4] Indicates the blue y value ratio.</p> </dd>
        /// </summary>
        /// <doc-id>ee719846</doc-id>
        /// <unmanaged>WICPngChrmBlueY</unmanaged>
        /// <unmanaged-short>WICPngChrmBlueY</unmanaged-short>
        BlueY = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p>Specifies the Portable Network Graphics (PNG) filters available for compression optimization.</p>
    /// </summary>
    /// <doc-id>ee719847</doc-id>
    /// <unmanaged>WICPngFilterOption</unmanaged>
    /// <unmanaged-short>WICPngFilterOption</unmanaged-short>
    public enum PngFilterOption : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates an unspecified PNG filter. This enables WIC to algorithmically choose the best filtering option for the image.</p> </dd>
        /// </summary>
        /// <doc-id>ee719847</doc-id>
        /// <unmanaged>WICPngFilterUnspecified</unmanaged>
        /// <unmanaged-short>WICPngFilterUnspecified</unmanaged-short>
        Unspecified = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Indicates no PNG filter.</p> </dd>
        /// </summary>
        /// <doc-id>ee719847</doc-id>
        /// <unmanaged>WICPngFilterNone</unmanaged>
        /// <unmanaged-short>WICPngFilterNone</unmanaged-short>
        None = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Indicates a PNG sub filter.</p> </dd>
        /// </summary>
        /// <doc-id>ee719847</doc-id>
        /// <unmanaged>WICPngFilterSub</unmanaged>
        /// <unmanaged-short>WICPngFilterSub</unmanaged-short>
        Sub = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Indicates a PNG up filter.</p> </dd>
        /// </summary>
        /// <doc-id>ee719847</doc-id>
        /// <unmanaged>WICPngFilterUp</unmanaged>
        /// <unmanaged-short>WICPngFilterUp</unmanaged-short>
        Up = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Indicates a PNG average filter.</p> </dd>
        /// </summary>
        /// <doc-id>ee719847</doc-id>
        /// <unmanaged>WICPngFilterAverage</unmanaged>
        /// <unmanaged-short>WICPngFilterAverage</unmanaged-short>
        Average = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Indicates a PNG paeth filter.</p> </dd>
        /// </summary>
        /// <doc-id>ee719847</doc-id>
        /// <unmanaged>WICPngFilterPaeth</unmanaged>
        /// <unmanaged-short>WICPngFilterPaeth</unmanaged-short>
        Paeth = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>Indicates a PNG adaptive filter. This enables WIC to choose the best filtering mode on a per-scanline basis.</p> </dd>
        /// </summary>
        /// <doc-id>ee719847</doc-id>
        /// <unmanaged>WICPngFilterAdaptive</unmanaged>
        /// <unmanaged-short>WICPngFilterAdaptive</unmanaged-short>
        Adaptive = unchecked ((System.Int32)(6))}

    /// <summary>
    /// <p>Specifies the Portable Network Graphics (PNG) gAMA chunk metadata properties.</p>
    /// </summary>
    /// <doc-id>ee719848</doc-id>
    /// <unmanaged>WICPngGamaProperties</unmanaged>
    /// <unmanaged-short>WICPngGamaProperties</unmanaged-short>
    public enum PngGamaProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_UI4] Indicates the gamma value.</p> </dd>
        /// </summary>
        /// <doc-id>ee719848</doc-id>
        /// <unmanaged>WICPngGamaGamma</unmanaged>
        /// <unmanaged-short>WICPngGamaGamma</unmanaged-short>
        Gamma = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the Portable Network Graphics (PNG) hIST chunk metadata properties.</p>
    /// </summary>
    /// <doc-id>ee719849</doc-id>
    /// <unmanaged>WICPngHistProperties</unmanaged>
    /// <unmanaged-short>WICPngHistProperties</unmanaged-short>
    public enum PngHistProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_VECTOR | VT_UI2] Indicates the approximate usage frequency of each color in the color palette. </p> </dd>
        /// </summary>
        /// <doc-id>ee719849</doc-id>
        /// <unmanaged>WICPngHistFrequencies</unmanaged>
        /// <unmanaged-short>WICPngHistFrequencies</unmanaged-short>
        Frequencies = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the Portable Network Graphics (PNG) iCCP chunk metadata properties.</p>
    /// </summary>
    /// <doc-id>ee719850</doc-id>
    /// <unmanaged>WICPngIccpProperties</unmanaged>
    /// <unmanaged-short>WICPngIccpProperties</unmanaged-short>
    public enum PngIccpProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_LPSTR] Indicates the International Color Consortium (ICC) profile name.</p> </dd>
        /// </summary>
        /// <doc-id>ee719850</doc-id>
        /// <unmanaged>WICPngIccpProfileName</unmanaged>
        /// <unmanaged-short>WICPngIccpProfileName</unmanaged-short>
        ProfileName = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>[VT_VECTOR | VT_UI1] Indicates the embedded ICC profile.</p> </dd>
        /// </summary>
        /// <doc-id>ee719850</doc-id>
        /// <unmanaged>WICPngIccpProfileData</unmanaged>
        /// <unmanaged-short>WICPngIccpProfileData</unmanaged-short>
        ProfileData = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Specifies the Portable Network Graphics (PNG) iTXT chunk metadata properties.</p>
    /// </summary>
    /// <doc-id>ee719851</doc-id>
    /// <unmanaged>WICPngItxtProperties</unmanaged>
    /// <unmanaged-short>WICPngItxtProperties</unmanaged-short>
    public enum PngItxtProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_LPSTR] Indicates the keywords in the iTXT metadata chunk.</p> </dd>
        /// </summary>
        /// <doc-id>ee719851</doc-id>
        /// <unmanaged>WICPngItxtKeyword</unmanaged>
        /// <unmanaged-short>WICPngItxtKeyword</unmanaged-short>
        Keyword = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>[VT_UI1] Indicates whether the text in the iTXT chunk is compressed. 1 if the text is compressed; otherwise, 0.</p> </dd>
        /// </summary>
        /// <doc-id>ee719851</doc-id>
        /// <unmanaged>WICPngItxtCompressionFlag</unmanaged>
        /// <unmanaged-short>WICPngItxtCompressionFlag</unmanaged-short>
        CompressionFlag = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>[VT_LPSTR] Indicates the human language used by the translated keyword and the text.</p> </dd>
        /// </summary>
        /// <doc-id>ee719851</doc-id>
        /// <unmanaged>WICPngItxtLanguageTag</unmanaged>
        /// <unmanaged-short>WICPngItxtLanguageTag</unmanaged-short>
        LanguageTag = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>[VT_LPWSTR] Indicates a translation of the keyword into the language indicated by the language tag.</p> </dd>
        /// </summary>
        /// <doc-id>ee719851</doc-id>
        /// <unmanaged>WICPngItxtTranslatedKeyword</unmanaged>
        /// <unmanaged-short>WICPngItxtTranslatedKeyword</unmanaged-short>
        TranslatedKeyword = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>[VT_LPWSTR] Indicates additional text in the iTXT metadata chunk.</p> </dd>
        /// </summary>
        /// <doc-id>ee719851</doc-id>
        /// <unmanaged>WICPngItxtText</unmanaged>
        /// <unmanaged-short>WICPngItxtText</unmanaged-short>
        Text = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p>Specifies the Portable Network Graphics (PNG) sRGB chunk metadata properties.</p>
    /// </summary>
    /// <doc-id>ee719852</doc-id>
    /// <unmanaged>WICPngSrgbProperties</unmanaged>
    /// <unmanaged-short>WICPngSrgbProperties</unmanaged-short>
    public enum PngSrgbProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_UI1] Indicates the rendering intent for an sRGB color space image. The rendering intents have the following meaning.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td>0</td><td>Perceptual</td></tr> <tr><td>1</td><td>Relative colorimetric</td></tr> <tr><td>2</td><td>Saturation</td></tr> <tr><td>3</td><td>Absolute colorimetric</td></tr> </table> <p>?</p> </dd>
        /// </summary>
        /// <doc-id>ee719852</doc-id>
        /// <unmanaged>WICPngSrgbRenderingIntent</unmanaged>
        /// <unmanaged-short>WICPngSrgbRenderingIntent</unmanaged-short>
        RenderingIntent = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the Portable Network Graphics (PNG) tIME chunk metadata properties.</p>
    /// </summary>
    /// <doc-id>ee719853</doc-id>
    /// <unmanaged>WICPngTimeProperties</unmanaged>
    /// <unmanaged-short>WICPngTimeProperties</unmanaged-short>
    public enum PngTimeProperties : System.Int32
    {
        /// <summary>
        /// <dd> <p>[VT_UI2] Indicates the year of the last modification.</p> </dd>
        /// </summary>
        /// <doc-id>ee719853</doc-id>
        /// <unmanaged>WICPngTimeYear</unmanaged>
        /// <unmanaged-short>WICPngTimeYear</unmanaged-short>
        Year = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>[VT_UI1] Indicates the month of the last modification.</p> </dd>
        /// </summary>
        /// <doc-id>ee719853</doc-id>
        /// <unmanaged>WICPngTimeMonth</unmanaged>
        /// <unmanaged-short>WICPngTimeMonth</unmanaged-short>
        Month = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>[VT_UI1] Indicates day of the last modification.</p> </dd>
        /// </summary>
        /// <doc-id>ee719853</doc-id>
        /// <unmanaged>WICPngTimeDay</unmanaged>
        /// <unmanaged-short>WICPngTimeDay</unmanaged-short>
        Day = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>[VT_UI1] Indicates the hour of the last modification.</p> </dd>
        /// </summary>
        /// <doc-id>ee719853</doc-id>
        /// <unmanaged>WICPngTimeHour</unmanaged>
        /// <unmanaged-short>WICPngTimeHour</unmanaged-short>
        Hour = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>[VT_UI1] Indicates the minute of the last modification.</p> </dd>
        /// </summary>
        /// <doc-id>ee719853</doc-id>
        /// <unmanaged>WICPngTimeMinute</unmanaged>
        /// <unmanaged-short>WICPngTimeMinute</unmanaged-short>
        Minute = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>[VT_UI1] Indicates the second of the last modification.</p> </dd>
        /// </summary>
        /// <doc-id>ee719853</doc-id>
        /// <unmanaged>WICPngTimeSecond</unmanaged>
        /// <unmanaged-short>WICPngTimeSecond</unmanaged-short>
        Second = unchecked ((System.Int32)(6))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies when the progress notification callback should be called.</p>
    /// </summary>
    /// <doc-id>ee719854</doc-id>
    /// <unmanaged>WICProgressNotification</unmanaged>
    /// <unmanaged-short>WICProgressNotification</unmanaged-short>
    public enum ProgressNotification : System.Int32
    {
        /// <summary>
        /// <dd> <p>The callback should be called when codec operations begin.</p> </dd>
        /// </summary>
        /// <doc-id>ee719854</doc-id>
        /// <unmanaged>WICProgressNotificationBegin</unmanaged>
        /// <unmanaged-short>WICProgressNotificationBegin</unmanaged-short>
        Begin = unchecked ((System.Int32)(65536)),
        /// <summary>
        /// <dd> <p>The callback should be called when codec operations end.</p> </dd>
        /// </summary>
        /// <doc-id>ee719854</doc-id>
        /// <unmanaged>WICProgressNotificationEnd</unmanaged>
        /// <unmanaged-short>WICProgressNotificationEnd</unmanaged-short>
        End = unchecked ((System.Int32)(131072)),
        /// <summary>
        /// <dd> <p>The callback should be called frequently to report status.</p> </dd>
        /// </summary>
        /// <doc-id>ee719854</doc-id>
        /// <unmanaged>WICProgressNotificationFrequent</unmanaged>
        /// <unmanaged-short>WICProgressNotificationFrequent</unmanaged-short>
        Frequent = unchecked ((System.Int32)(262144)),
        /// <summary>
        /// <dd> <p>The callback should be called on all available progress notifications.</p> </dd>
        /// </summary>
        /// <doc-id>ee719854</doc-id>
        /// <unmanaged>WICProgressNotificationAll</unmanaged>
        /// <unmanaged-short>WICProgressNotificationAll</unmanaged-short>
        All = unchecked ((System.Int32)(-65536))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies the progress operations to receive notifications for.</p>
    /// </summary>
    /// <doc-id>ee719855</doc-id>
    /// <unmanaged>WICProgressOperation</unmanaged>
    /// <unmanaged-short>WICProgressOperation</unmanaged-short>
    public enum ProgressOperation : System.Int32
    {
        /// <summary>
        /// <dd> <p>Receive copy pixel operation.</p> </dd>
        /// </summary>
        /// <doc-id>ee719855</doc-id>
        /// <unmanaged>WICProgressOperationCopyPixels</unmanaged>
        /// <unmanaged-short>WICProgressOperationCopyPixels</unmanaged-short>
        CopyPixels = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Receive write pixel operation.</p> </dd>
        /// </summary>
        /// <doc-id>ee719855</doc-id>
        /// <unmanaged>WICProgressOperationWritePixels</unmanaged>
        /// <unmanaged-short>WICProgressOperationWritePixels</unmanaged-short>
        WritePixels = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Receive all progress operations available.</p> </dd>
        /// </summary>
        /// <doc-id>ee719855</doc-id>
        /// <unmanaged>WICProgressOperationAll</unmanaged>
        /// <unmanaged-short>WICProgressOperationAll</unmanaged-short>
        All = unchecked ((System.Int32)(65535))}

    /// <summary>
    /// <p>Specifies the capability support of a raw image.</p>
    /// </summary>
    /// <doc-id>ee719856</doc-id>
    /// <unmanaged>WICRawCapabilities</unmanaged>
    /// <unmanaged-short>WICRawCapabilities</unmanaged-short>
    public enum RawCapabilities : System.Int32
    {
        /// <summary>
        /// <dd> <p>The capability is not supported.</p> </dd>
        /// </summary>
        /// <doc-id>ee719856</doc-id>
        /// <unmanaged>WICRawCapabilityNotSupported</unmanaged>
        /// <unmanaged-short>WICRawCapabilityNotSupported</unmanaged-short>
        NotSupported = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The capability supports only get operations.</p> </dd>
        /// </summary>
        /// <doc-id>ee719856</doc-id>
        /// <unmanaged>WICRawCapabilityGetSupported</unmanaged>
        /// <unmanaged-short>WICRawCapabilityGetSupported</unmanaged-short>
        GetSupported = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The capability supports get and set operations.</p> </dd>
        /// </summary>
        /// <doc-id>ee719856</doc-id>
        /// <unmanaged>WICRawCapabilityFullySupported</unmanaged>
        /// <unmanaged-short>WICRawCapabilityFullySupported</unmanaged-short>
        FullySupported = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Specifies the parameter set used by a raw codec.</p>
    /// </summary>
    /// <doc-id>ee719858</doc-id>
    /// <unmanaged>WICRawParameterSet</unmanaged>
    /// <unmanaged-short>WICRawParameterSet</unmanaged-short>
    public enum RawParameterSet : System.Int32
    {
        /// <summary>
        /// <dd> <p>An as shot parameter set.</p> </dd>
        /// </summary>
        /// <doc-id>ee719858</doc-id>
        /// <unmanaged>WICAsShotParameterSet</unmanaged>
        /// <unmanaged-short>WICAsShotParameterSet</unmanaged-short>
        AsShot = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>A user adjusted parameter set.</p> </dd>
        /// </summary>
        /// <doc-id>ee719858</doc-id>
        /// <unmanaged>WICUserAdjustedParameterSet</unmanaged>
        /// <unmanaged-short>WICUserAdjustedParameterSet</unmanaged-short>
        UserAdjusted = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>A codec adjusted parameter set.</p> </dd>
        /// </summary>
        /// <doc-id>ee719858</doc-id>
        /// <unmanaged>WICAutoAdjustedParameterSet</unmanaged>
        /// <unmanaged-short>WICAutoAdjustedParameterSet</unmanaged-short>
        AutoAdjusted = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Specifies the render intent of the next <strong>CopyPixels</strong> call. </p>
    /// </summary>
    /// <doc-id>ee719859</doc-id>
    /// <unmanaged>WICRawRenderMode</unmanaged>
    /// <unmanaged-short>WICRawRenderMode</unmanaged-short>
    public enum RawRenderMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ee719859</doc-id>
        /// <unmanaged>WICRawRenderModeDraft</unmanaged>
        /// <unmanaged-short>WICRawRenderModeDraft</unmanaged-short>
        Draft = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ee719859</doc-id>
        /// <unmanaged>WICRawRenderModeNormal</unmanaged>
        /// <unmanaged-short>WICRawRenderModeNormal</unmanaged-short>
        Normal = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ee719859</doc-id>
        /// <unmanaged>WICRawRenderModeBestQuality</unmanaged>
        /// <unmanaged-short>WICRawRenderModeBestQuality</unmanaged-short>
        BestQuality = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Specifies the rotation capabilities of the codec.</p>
    /// </summary>
    /// <doc-id>ee719860</doc-id>
    /// <unmanaged>WICRawRotationCapabilities</unmanaged>
    /// <unmanaged-short>WICRawRotationCapabilities</unmanaged-short>
    public enum RawRotationCapabilities : System.Int32
    {
        /// <summary>
        /// <dd> <p>Rotation is not supported.</p> </dd>
        /// </summary>
        /// <doc-id>ee719860</doc-id>
        /// <unmanaged>WICRawRotationCapabilityNotSupported</unmanaged>
        /// <unmanaged-short>WICRawRotationCapabilityNotSupported</unmanaged-short>
        NotSupported = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Set operations for rotation is not supported.</p> </dd>
        /// </summary>
        /// <doc-id>ee719860</doc-id>
        /// <unmanaged>WICRawRotationCapabilityGetSupported</unmanaged>
        /// <unmanaged-short>WICRawRotationCapabilityGetSupported</unmanaged-short>
        GetSupported = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>90 degree rotations are supported.</p> </dd>
        /// </summary>
        /// <doc-id>ee719860</doc-id>
        /// <unmanaged>WICRawRotationCapabilityNinetyDegreesSupported</unmanaged>
        /// <unmanaged-short>WICRawRotationCapabilityNinetyDegreesSupported</unmanaged-short>
        NinetyDegreesSupported = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>All rotation angles are supported.</p> </dd>
        /// </summary>
        /// <doc-id>ee719860</doc-id>
        /// <unmanaged>WICRawRotationCapabilityFullySupported</unmanaged>
        /// <unmanaged-short>WICRawRotationCapabilityFullySupported</unmanaged-short>
        FullySupported = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Specifies the access level of a Windows Graphics Device Interface (GDI) section.</p>
    /// </summary>
    /// <doc-id>ee719864</doc-id>
    /// <unmanaged>WICSectionAccessLevel</unmanaged>
    /// <unmanaged-short>WICSectionAccessLevel</unmanaged-short>
    public enum SectionAccessLevel : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates a read only access level.</p> </dd>
        /// </summary>
        /// <doc-id>ee719864</doc-id>
        /// <unmanaged>WICSectionAccessLevelRead</unmanaged>
        /// <unmanaged-short>WICSectionAccessLevelRead</unmanaged-short>
        Read = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Indicates a read/write access level.</p> </dd>
        /// </summary>
        /// <doc-id>ee719864</doc-id>
        /// <unmanaged>WICSectionAccessLevelReadWrite</unmanaged>
        /// <unmanaged-short>WICSectionAccessLevelReadWrite</unmanaged-short>
        ReadWrite = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Specifies the Tagged Image File Format (TIFF) compression options.</p>
    /// </summary>
    /// <doc-id>ee719867</doc-id>
    /// <unmanaged>WICTiffCompressionOption</unmanaged>
    /// <unmanaged-short>WICTiffCompressionOption</unmanaged-short>
    public enum TiffCompressionOption : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates a suitable compression algorithm based on the image and pixel format.</p> </dd>
        /// </summary>
        /// <doc-id>ee719867</doc-id>
        /// <unmanaged>WICTiffCompressionDontCare</unmanaged>
        /// <unmanaged-short>WICTiffCompressionDontCare</unmanaged-short>
        DontCare = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Indicates no compression.</p> </dd>
        /// </summary>
        /// <doc-id>ee719867</doc-id>
        /// <unmanaged>WICTiffCompressionNone</unmanaged>
        /// <unmanaged-short>WICTiffCompressionNone</unmanaged-short>
        None = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Indicates a CCITT3 compression algorithm. This algorithm is only valid for 1bpp pixel formats.</p> </dd>
        /// </summary>
        /// <doc-id>ee719867</doc-id>
        /// <unmanaged>WICTiffCompressionCCITT3</unmanaged>
        /// <unmanaged-short>WICTiffCompressionCCITT3</unmanaged-short>
        CCITT3 = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Indicates a CCITT4 compression algorithm. This algorithm is only valid for 1bpp pixel formats.</p> </dd>
        /// </summary>
        /// <doc-id>ee719867</doc-id>
        /// <unmanaged>WICTiffCompressionCCITT4</unmanaged>
        /// <unmanaged-short>WICTiffCompressionCCITT4</unmanaged-short>
        CCITT4 = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Indicates a LZW compression algorithm.</p> </dd>
        /// </summary>
        /// <doc-id>ee719867</doc-id>
        /// <unmanaged>WICTiffCompressionLZW</unmanaged>
        /// <unmanaged-short>WICTiffCompressionLZW</unmanaged-short>
        LZW = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Indicates a RLE compression algorithm. This algorithm is only valid for 1bpp pixel formats.</p> </dd>
        /// </summary>
        /// <doc-id>ee719867</doc-id>
        /// <unmanaged>WICTiffCompressionRLE</unmanaged>
        /// <unmanaged-short>WICTiffCompressionRLE</unmanaged-short>
        RLE = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>Indicates a ZIP compression algorithm.</p> </dd>
        /// </summary>
        /// <doc-id>ee719867</doc-id>
        /// <unmanaged>WICTiffCompressionZIP</unmanaged>
        /// <unmanaged-short>WICTiffCompressionZIP</unmanaged-short>
        ZIP = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>Indicates an LZWH differencing algorithm.</p> </dd>
        /// </summary>
        /// <doc-id>ee719867</doc-id>
        /// <unmanaged>WICTiffCompressionLZWHDifferencing</unmanaged>
        /// <unmanaged-short>WICTiffCompressionLZWHDifferencing</unmanaged-short>
        LZWHDifferencing = unchecked ((System.Int32)(7))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>WICWebpAnimProperties</unmanaged>
    /// <unmanaged-short>WICWebpAnimProperties</unmanaged-short>
    public enum WebpAnimProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>WICWebpAnimLoopCount</unmanaged>
        /// <unmanaged-short>WICWebpAnimLoopCount</unmanaged-short>
        WebpAnimLoopCount = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>WICWebpAnmfProperties</unmanaged>
    /// <unmanaged-short>WICWebpAnmfProperties</unmanaged-short>
    public enum WebpAnmfProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>WICWebpAnmfFrameDuration</unmanaged>
        /// <unmanaged-short>WICWebpAnmfFrameDuration</unmanaged-short>
        WebpAnmfFrameDuration = unchecked ((System.Int32)(1))}
}