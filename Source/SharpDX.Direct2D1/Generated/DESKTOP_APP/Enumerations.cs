// <auto-generated/>

namespace SharpDX.Direct2D1
{
    /// <summary>
    /// <p>The interpolation mode to be used with the 2D affine transform effect to scale the image. There are 6 scale modes that range in quality and speed.</p>
    /// </summary>
    /// <doc-id>dn934205</doc-id>
    /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE</unmanaged-short>
    public enum AffineTransform2DInterpolationMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Samples the nearest single point and uses that. This mode uses less processing time, but outputs the lowest quality image.</p> </dd>
        /// </summary>
        /// <doc-id>dn934205</doc-id>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Uses a four point sample and linear interpolation. This mode uses more processing time than the nearest neighbor mode, but outputs a higher quality image.</p> </dd>
        /// </summary>
        /// <doc-id>dn934205</doc-id>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Uses a 16 sample cubic kernel for interpolation. This mode uses the most processing time, but outputs a higher quality image. </p> </dd>
        /// </summary>
        /// <doc-id>dn934205</doc-id>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Uses 4 linear samples within a single pixel for good edge anti-aliasing. This mode is good for scaling down by small amounts on images with few pixels.</p> </dd>
        /// </summary>
        /// <doc-id>dn934205</doc-id>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Uses anisotropic filtering to sample a pattern according to the transformed shape of the bitmap.</p> </dd>
        /// </summary>
        /// <doc-id>dn934205</doc-id>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Uses a variable size high quality cubic kernel to perform a pre-downscale the image if downscaling is involved in the transform matrix. Then uses the cubic interpolation mode for the final output.</p> </dd>
        /// </summary>
        /// <doc-id>dn934205</doc-id>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p>Identifiers for properties of the 2D affine transform effect.</p>
    /// </summary>
    /// <doc-id>dn934206</doc-id>
    /// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP</unmanaged>
    /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_PROP</unmanaged-short>
    public enum AffineTransform2DProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934206</doc-id>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE</unmanaged-short>
        InterpolationMode = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934206</doc-id>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934206</doc-id>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX</unmanaged-short>
        TransformMatrix = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934206</doc-id>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS</unmanaged-short>
        Sharpness = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Specifies how the alpha value of a bitmap or render target should be treated.</p>
    /// </summary>
    /// <remarks>
    /// <p>The <strong><see cref = "SharpDX.Direct2D1.AlphaMode"/></strong> enumeration is used with the <strong><see cref = "SharpDX.Direct2D1.PixelFormat"/></strong> enumeration to specify the alpha mode of a render target or bitmap. Different render targets and bitmaps support different alpha modes. For a list, see Supported Pixel Formats and Alpha Modes.</p>
    /// </remarks>
    /// <doc-id>dd368058</doc-id>
    /// <unmanaged>D2D1_ALPHA_MODE</unmanaged>
    /// <unmanaged-short>D2D1_ALPHA_MODE</unmanaged-short>
    public enum AlphaMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>The alpha value might not be meaningful.</p> </dd>
        /// </summary>
        /// <doc-id>dd368058</doc-id>
        /// <unmanaged>D2D1_ALPHA_MODE_UNKNOWN</unmanaged>
        /// <unmanaged-short>D2D1_ALPHA_MODE_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The alpha value has been premultiplied. Each color is first scaled by the alpha value. The alpha value itself is the same in both straight and premultiplied alpha. Typically, no color channel value is greater than the alpha channel value.  If a color channel value in a premultiplied format is greater than the alpha channel, the standard source-over blending math results in an additive blend.</p> </dd>
        /// </summary>
        /// <doc-id>dd368058</doc-id>
        /// <unmanaged>D2D1_ALPHA_MODE_PREMULTIPLIED</unmanaged>
        /// <unmanaged-short>D2D1_ALPHA_MODE_PREMULTIPLIED</unmanaged-short>
        Premultiplied = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The alpha value has not been premultiplied. The alpha channel indicates the transparency of the color. </p> </dd>
        /// </summary>
        /// <doc-id>dd368058</doc-id>
        /// <unmanaged>D2D1_ALPHA_MODE_STRAIGHT</unmanaged>
        /// <unmanaged-short>D2D1_ALPHA_MODE_STRAIGHT</unmanaged-short>
        Straight = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The alpha value is ignored.</p> </dd>
        /// </summary>
        /// <doc-id>dd368058</doc-id>
        /// <unmanaged>D2D1_ALPHA_MODE_IGNORE</unmanaged>
        /// <unmanaged-short>D2D1_ALPHA_MODE_IGNORE</unmanaged-short>
        Ignore = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Specifies how the edges of nontext primitives are rendered.</p>
    /// </summary>
    /// <doc-id>dd368061</doc-id>
    /// <unmanaged>D2D1_ANTIALIAS_MODE</unmanaged>
    /// <unmanaged-short>D2D1_ANTIALIAS_MODE</unmanaged-short>
    public enum AntialiasMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Edges are antialiased using the Direct2D per-primitive method of high-quality antialiasing.</p> </dd>
        /// </summary>
        /// <doc-id>dd368061</doc-id>
        /// <unmanaged>D2D1_ANTIALIAS_MODE_PER_PRIMITIVE</unmanaged>
        /// <unmanaged-short>D2D1_ANTIALIAS_MODE_PER_PRIMITIVE</unmanaged-short>
        PerPrimitive = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Objects are aliased in most cases. Objects are antialiased only when they are drawn to a render target created by the <strong>CreateDxgiSurfaceRenderTarget</strong> method and  Direct3D multisampling has been enabled on the backing DirectX Graphics Infrastructure (DXGI) surface. </p> </dd>
        /// </summary>
        /// <doc-id>dd368061</doc-id>
        /// <unmanaged>D2D1_ANTIALIAS_MODE_ALIASED</unmanaged>
        /// <unmanaged-short>D2D1_ANTIALIAS_MODE_ALIASED</unmanaged-short>
        Aliased = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies whether an arc should be greater than 180 degrees.</p>
    /// </summary>
    /// <doc-id>dd368068</doc-id>
    /// <unmanaged>D2D1_ARC_SIZE</unmanaged>
    /// <unmanaged-short>D2D1_ARC_SIZE</unmanaged-short>
    public enum ArcSize : System.Int32
    {
        /// <summary>
        /// <dd> <p> An arc's sweep should be 180 degrees or less.</p> </dd>
        /// </summary>
        /// <doc-id>dd368068</doc-id>
        /// <unmanaged>D2D1_ARC_SIZE_SMALL</unmanaged>
        /// <unmanaged-short>D2D1_ARC_SIZE_SMALL</unmanaged-short>
        Small = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> An arc's sweep should be 180 degrees or greater.</p> </dd>
        /// </summary>
        /// <doc-id>dd368068</doc-id>
        /// <unmanaged>D2D1_ARC_SIZE_LARGE</unmanaged>
        /// <unmanaged-short>D2D1_ARC_SIZE_LARGE</unmanaged-short>
        Large = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Identifiers for the properties of the Arithmetic composite effect. </p>
    /// </summary>
    /// <doc-id>dn934211</doc-id>
    /// <unmanaged>D2D1_ARITHMETICCOMPOSITE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_ARITHMETICCOMPOSITE_PROP</unmanaged-short>
    public enum ArithmeticCompositeProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934211</doc-id>
        /// <unmanaged>D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS</unmanaged>
        /// <unmanaged-short>D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS</unmanaged-short>
        Coefficients = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934211</doc-id>
        /// <unmanaged>D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Identifiers for properties of the Atlas effect. </p>
    /// </summary>
    /// <doc-id>dn934212</doc-id>
    /// <unmanaged>D2D1_ATLAS_PROP</unmanaged>
    /// <unmanaged-short>D2D1_ATLAS_PROP</unmanaged-short>
    public enum AtlasProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934212</doc-id>
        /// <unmanaged>D2D1_ATLAS_PROP_INPUT_RECT</unmanaged>
        /// <unmanaged-short>D2D1_ATLAS_PROP_INPUT_RECT</unmanaged-short>
        InputRectangle = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934212</doc-id>
        /// <unmanaged>D2D1_ATLAS_PROP_INPUT_PADDING_RECT</unmanaged>
        /// <unmanaged-short>D2D1_ATLAS_PROP_INPUT_PADDING_RECT</unmanaged-short>
        InputPaddingRectangle = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the algorithm that is used when images are scaled or rotated.</p><strong>Note</strong>??Starting in Windows?8, more interpolations modes are available.  See <strong><see cref = "SharpDX.Direct2D1.InterpolationMode"/></strong> for more info.?
    /// </summary>
    /// <remarks>
    /// <p> To stretch an image, each pixel in the original image must be mapped to a group of pixels in the larger image. To shrink an image, groups of pixels in the original image must be mapped to single pixels in the smaller image. The effectiveness of the algorithms that perform these mappings determines the quality of a scaled image. Algorithms that produce higher-quality scaled images tend to require more processing time. <strong>D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR </strong>provides faster but lower-quality interpolation, while <strong>D2D1_BITMAP_INTERPOLATION_MODE_LINEAR</strong> provides higher-quality interpolation. </p>
    /// </remarks>
    /// <doc-id>dd368073</doc-id>
    /// <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_BITMAP_INTERPOLATION_MODE</unmanaged-short>
    public enum BitmapInterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368073</doc-id>
        /// <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368073</doc-id>
        /// <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_BITMAP_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies how a bitmap can be used.</p>
    /// </summary>
    /// <remarks>
    /// <p><strong>D2D1_BITMAP_OPTIONS_NONE</strong> implies that none of the flags are set. This means that the bitmap can be used for drawing from, cannot be set as a target and cannot be read from by the CPU.</p><p><strong>D2D1_BITMAP_OPTIONS_TARGET</strong> means that the bitmap can be specified as a target in <strong>ID2D1DeviceContext::SetTarget</strong>. If you also specify the  <strong>D2D1_BITMAP_OPTIONS_CANNOT_DRAW</strong> flag the bitmap can be used a target but, it cannot be drawn from. Attempting to draw with a bitmap that has both flags set will result in the device context being put into an error state with <strong><see cref = "BitmapCannotDraw"/></strong>. </p><p><strong>D2D1_BITMAP_OPTIONS_CPU_READ</strong> means that the bitmap can be mapped by using <strong>ID2D1Bitmap1::Map</strong>. This flag requires <strong>D2D1_BITMAP_OPTIONS_CANNOT_DRAW</strong> and cannot be combined with any other flags. The bitmap must be updated with the <strong>CopyFromBitmap</strong> or <strong>CopyFromRenderTarget</strong> methods. </p><strong>Note</strong>??You should only use <strong>D2D1_BITMAP_OPTIONS_CANNOT_DRAW</strong> is when the purpose of the bitmap is to be a target only or when the bitmap will be mapped .?<p><strong>D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE</strong> means that it is possible to get a DC associated with this bitmap.  This must be used in conjunction with <strong>D2D1_BITMAP_OPTIONS_TARGET</strong>. The <strong><see cref = "SharpDX.DXGI.Format"/></strong> must be either <strong>DXGI_FORMAT_B8G8R8A8_UNORM</strong> or <strong>DXGI_FORMAT_B8G8R8A8_UNORM_SRGB</strong>.</p>
    /// </remarks>
    /// <doc-id>hh446984</doc-id>
    /// <unmanaged>D2D1_BITMAP_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_BITMAP_OPTIONS</unmanaged-short>
    public enum BitmapOptions : System.Int32
    {
        /// <summary>
        /// <dd> <p>The bitmap is created with default properties.</p> </dd>
        /// </summary>
        /// <doc-id>hh446984</doc-id>
        /// <unmanaged>D2D1_BITMAP_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The bitmap can be used as a device context target.</p> </dd>
        /// </summary>
        /// <doc-id>hh446984</doc-id>
        /// <unmanaged>D2D1_BITMAP_OPTIONS_TARGET</unmanaged>
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS_TARGET</unmanaged-short>
        Target = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The bitmap cannot be used as an input. </p> </dd>
        /// </summary>
        /// <doc-id>hh446984</doc-id>
        /// <unmanaged>D2D1_BITMAP_OPTIONS_CANNOT_DRAW</unmanaged>
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS_CANNOT_DRAW</unmanaged-short>
        CannotDraw = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The bitmap can be read from the CPU.</p> </dd>
        /// </summary>
        /// <doc-id>hh446984</doc-id>
        /// <unmanaged>D2D1_BITMAP_OPTIONS_CPU_READ</unmanaged>
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS_CPU_READ</unmanaged-short>
        CpuRead = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The bitmap works with <strong>ID2D1GdiInteropRenderTarget::GetDC</strong>.</p> <strong>Note</strong>??This flag is not available in Windows Store apps. ? </dd>
        /// </summary>
        /// <doc-id>hh446984</doc-id>
        /// <unmanaged>D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE</unmanaged>
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE</unmanaged-short>
        GdiCompatible = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p>Specifies the alpha mode of the output of the Bitmap source effect.</p>
    /// </summary>
    /// <doc-id>dn934213</doc-id>
    /// <unmanaged>D2D1_BITMAPSOURCE_ALPHA_MODE</unmanaged>
    /// <unmanaged-short>D2D1_BITMAPSOURCE_ALPHA_MODE</unmanaged-short>
    public enum BitmapSourceAlphaMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934213</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED</unmanaged-short>
        Premultiplied = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934213</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT</unmanaged-short>
        Straight = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>The interpolation mode used to scale the image in the Bitmap source effect. If the mode disables the mipmap, then BitmapSouce will cache the image at the resolution determined by the Scale and EnableDPICorrection properties. </p>
    /// </summary>
    /// <doc-id>dn934214</doc-id>
    /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE</unmanaged-short>
    public enum BitmapSourceInterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934214</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934214</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934214</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934214</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT</unmanaged-short>
        Fant = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934214</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR</unmanaged-short>
        MipmapLinear = unchecked ((System.Int32)(7))}

    /// <summary>
    /// <p> Speficies whether a flip and/or rotation operation should be performed by the Bitmap source effect </p>
    /// </summary>
    /// <doc-id>dn934215</doc-id>
    /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION</unmanaged>
    /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION</unmanaged-short>
    public enum BitmapSourceOrientation : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934215</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934215</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL</unmanaged-short>
        FlipHorizontal = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934215</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180</unmanaged-short>
        RotateClockwise180 = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934215</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL</unmanaged-short>
        RotateClockwise180FlipHorizontal = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934215</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL</unmanaged-short>
        RotateClockwise270FlipHorizontal = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934215</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90</unmanaged-short>
        RotateClockwise90 = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934215</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL</unmanaged-short>
        RotateClockwise90FlipHorizontal = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934215</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270</unmanaged-short>
        RotateClockwise270 = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p> Identifiers for properties of the Bitmap source effect. </p>
    /// </summary>
    /// <doc-id>dn934216</doc-id>
    /// <unmanaged>D2D1_BITMAPSOURCE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP</unmanaged-short>
    public enum BitmapSourceProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934216</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE</unmanaged-short>
        WicBitmapSource = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934216</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_SCALE</unmanaged-short>
        Scale = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934216</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE</unmanaged-short>
        InterpolationMode = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934216</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION</unmanaged-short>
        EnableDpiCorrection = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934216</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_ALPHA_MODE</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_ALPHA_MODE</unmanaged-short>
        AlphaMode = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934216</doc-id>
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_ORIENTATION</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_ORIENTATION</unmanaged-short>
        Orientation = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p>Specifies how one of the color sources is to be derived and optionally specifies a preblend operation on the color source.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enumeration has the same numeric values as <strong>D3D10_BLEND</strong>.</p>
    /// </remarks>
    /// <doc-id>hh404276</doc-id>
    /// <unmanaged>D2D1_BLEND</unmanaged>
    /// <unmanaged-short>D2D1_BLEND</unmanaged-short>
    public enum Blend : System.Int32
    {
        /// <summary>
        /// <dd> <p>The data source is black (0, 0, 0, 0). There is no preblend operation.</p> </dd>
        /// </summary>
        /// <doc-id>hh404276</doc-id>
        /// <unmanaged>D2D1_BLEND_ZERO</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_ZERO</unmanaged-short>
        Zero = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The data source is white (1, 1, 1, 1). There is no preblend operation.</p> </dd>
        /// </summary>
        /// <doc-id>hh404276</doc-id>
        /// <unmanaged>D2D1_BLEND_ONE</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_ONE</unmanaged-short>
        One = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The data source is color data (RGB) from the second input of the blend transform. There is not a preblend operation.</p> </dd>
        /// </summary>
        /// <doc-id>hh404276</doc-id>
        /// <unmanaged>D2D1_BLEND_SRC_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_SRC_COLOR</unmanaged-short>
        SourceColor = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>The data source is color data (RGB) from second input of the blend transform. The preblend operation inverts the data, generating 1 - RGB.</p> </dd>
        /// </summary>
        /// <doc-id>hh404276</doc-id>
        /// <unmanaged>D2D1_BLEND_INV_SRC_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_INV_SRC_COLOR</unmanaged-short>
        InverseSourceColor = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The data source is alpha data (A) from second input of the blend transform. There is no preblend operation.</p> </dd>
        /// </summary>
        /// <doc-id>hh404276</doc-id>
        /// <unmanaged>D2D1_BLEND_SRC_ALPHA</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_SRC_ALPHA</unmanaged-short>
        SourceAlpha = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>The data source is alpha data (A) from the second input of the blend transform. The preblend operation inverts the data, generating 1 - A.</p> </dd>
        /// </summary>
        /// <doc-id>hh404276</doc-id>
        /// <unmanaged>D2D1_BLEND_INV_SRC_ALPHA</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_INV_SRC_ALPHA</unmanaged-short>
        InverseSourceAlpha = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>The data source is alpha data (A) from the first input of the blend transform. There is no preblend operation.</p> </dd>
        /// </summary>
        /// <doc-id>hh404276</doc-id>
        /// <unmanaged>D2D1_BLEND_DEST_ALPHA</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_DEST_ALPHA</unmanaged-short>
        DestinationAlpha = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>The data source is alpha data (A) from the first input of the blend transform. The preblend operation inverts the data, generating 1 - A.</p> </dd>
        /// </summary>
        /// <doc-id>hh404276</doc-id>
        /// <unmanaged>D2D1_BLEND_INV_DEST_ALPHA</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_INV_DEST_ALPHA</unmanaged-short>
        InverseDestinationAlpha = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>The data source is color data from the first input of the blend transform. There is no preblend operation.</p> </dd>
        /// </summary>
        /// <doc-id>hh404276</doc-id>
        /// <unmanaged>D2D1_BLEND_DEST_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_DEST_COLOR</unmanaged-short>
        DestinationColor = unchecked ((System.Int32)(9)),
        /// <summary>
        /// <dd> <p>The data source is color data from the first input of the blend transform. The preblend operation inverts the data, generating 1 - RGB.</p> </dd>
        /// </summary>
        /// <doc-id>hh404276</doc-id>
        /// <unmanaged>D2D1_BLEND_INV_DEST_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_INV_DEST_COLOR</unmanaged-short>
        InverseDestinationColor = unchecked ((System.Int32)(10)),
        /// <summary>
        /// <dd> <p>The data source is alpha data from the second input of the blend transform. The preblend operation clamps the data to 1 or less.</p> </dd>
        /// </summary>
        /// <doc-id>hh404276</doc-id>
        /// <unmanaged>D2D1_BLEND_SRC_ALPHA_SAT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_SRC_ALPHA_SAT</unmanaged-short>
        SourceAlphaSaturate = unchecked ((System.Int32)(11)),
        /// <summary>
        /// <dd> <p>The data source is the blend factor. There is no preblend operation.</p> </dd>
        /// </summary>
        /// <doc-id>hh404276</doc-id>
        /// <unmanaged>D2D1_BLEND_BLEND_FACTOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_BLEND_FACTOR</unmanaged-short>
        BlendFactor = unchecked ((System.Int32)(14)),
        /// <summary>
        /// <dd> <p>The data source is the blend factor. The preblend operation inverts the blend factor, generating 1 - blend_factor.</p> </dd>
        /// </summary>
        /// <doc-id>hh404276</doc-id>
        /// <unmanaged>D2D1_BLEND_INV_BLEND_FACTOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_INV_BLEND_FACTOR</unmanaged-short>
        InverseBlendFactor = unchecked ((System.Int32)(15))}

    /// <summary>
    /// <p>The blend mode used for the Blend effect.</p>
    /// </summary>
    /// <doc-id>dn934217</doc-id>
    /// <unmanaged>D2D1_BLEND_MODE</unmanaged>
    /// <unmanaged-short>D2D1_BLEND_MODE</unmanaged-short>
    public enum BlendMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_MULTIPLY</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_MULTIPLY</unmanaged-short>
        Multiply = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_SCREEN</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_SCREEN</unmanaged-short>
        Screen = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_DARKEN</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_DARKEN</unmanaged-short>
        Darken = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_LIGHTEN</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_LIGHTEN</unmanaged-short>
        Lighten = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_DISSOLVE</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_DISSOLVE</unmanaged-short>
        Dissolve = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_COLOR_BURN</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_COLOR_BURN</unmanaged-short>
        ColorBurn = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_LINEAR_BURN</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_LINEAR_BURN</unmanaged-short>
        LinearBurn = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_DARKER_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_DARKER_COLOR</unmanaged-short>
        DarkerColor = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_LIGHTER_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_LIGHTER_COLOR</unmanaged-short>
        LighterColor = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_COLOR_DODGE</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_COLOR_DODGE</unmanaged-short>
        ColorDodge = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_LINEAR_DODGE</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_LINEAR_DODGE</unmanaged-short>
        LinearDodge = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_OVERLAY</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_OVERLAY</unmanaged-short>
        Overlay = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_SOFT_LIGHT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_SOFT_LIGHT</unmanaged-short>
        SoftLight = unchecked ((System.Int32)(12)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_HARD_LIGHT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_HARD_LIGHT</unmanaged-short>
        HardLight = unchecked ((System.Int32)(13)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_VIVID_LIGHT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_VIVID_LIGHT</unmanaged-short>
        VividLight = unchecked ((System.Int32)(14)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_LINEAR_LIGHT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_LINEAR_LIGHT</unmanaged-short>
        LinearLight = unchecked ((System.Int32)(15)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_PIN_LIGHT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_PIN_LIGHT</unmanaged-short>
        PinLight = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_HARD_MIX</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_HARD_MIX</unmanaged-short>
        HardMix = unchecked ((System.Int32)(17)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_DIFFERENCE</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_DIFFERENCE</unmanaged-short>
        Difference = unchecked ((System.Int32)(18)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_EXCLUSION</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_EXCLUSION</unmanaged-short>
        Exclusion = unchecked ((System.Int32)(19)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_HUE</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_HUE</unmanaged-short>
        Hue = unchecked ((System.Int32)(20)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_SATURATION</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_SATURATION</unmanaged-short>
        Saturation = unchecked ((System.Int32)(21)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(22)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_LUMINOSITY</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_LUMINOSITY</unmanaged-short>
        Luminosity = unchecked ((System.Int32)(23)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_SUBTRACT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_SUBTRACT</unmanaged-short>
        Subtract = unchecked ((System.Int32)(24)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934217</doc-id>
        /// <unmanaged>D2D1_BLEND_MODE_DIVISION</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_DIVISION</unmanaged-short>
        Division = unchecked ((System.Int32)(25))}

    /// <summary>
    /// <p>Specifies the blend operation on two color sources.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enumeration has the same numeric values as <strong>D3D10_BLEND_OP</strong>.</p>
    /// </remarks>
    /// <doc-id>hh404278</doc-id>
    /// <unmanaged>D2D1_BLEND_OPERATION</unmanaged>
    /// <unmanaged-short>D2D1_BLEND_OPERATION</unmanaged-short>
    public enum BlendOperation : System.Int32
    {
        /// <summary>
        /// <dd> <p>Add source 1 and source 2.</p> </dd>
        /// </summary>
        /// <doc-id>hh404278</doc-id>
        /// <unmanaged>D2D1_BLEND_OPERATION_ADD</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_OPERATION_ADD</unmanaged-short>
        Add = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Subtract source 1 from source 2.</p> </dd>
        /// </summary>
        /// <doc-id>hh404278</doc-id>
        /// <unmanaged>D2D1_BLEND_OPERATION_SUBTRACT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_OPERATION_SUBTRACT</unmanaged-short>
        Subtract = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Subtract source 2 from source 1.</p> </dd>
        /// </summary>
        /// <doc-id>hh404278</doc-id>
        /// <unmanaged>D2D1_BLEND_OPERATION_REV_SUBTRACT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_OPERATION_REV_SUBTRACT</unmanaged-short>
        ReverseSubtract = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Find the minimum of source 1 and source 2.</p> </dd>
        /// </summary>
        /// <doc-id>hh404278</doc-id>
        /// <unmanaged>D2D1_BLEND_OPERATION_MIN</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_OPERATION_MIN</unmanaged-short>
        Minimum = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Find the maximum of source 1 and source 2.</p> </dd>
        /// </summary>
        /// <doc-id>hh404278</doc-id>
        /// <unmanaged>D2D1_BLEND_OPERATION_MAX</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_OPERATION_MAX</unmanaged-short>
        Maximum = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p> Identifiers for properties of the Blend effect. </p>
    /// </summary>
    /// <doc-id>dn934218</doc-id>
    /// <unmanaged>D2D1_BLEND_PROP</unmanaged>
    /// <unmanaged-short>D2D1_BLEND_PROP</unmanaged-short>
    public enum BlendProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934218</doc-id>
        /// <unmanaged>D2D1_BLEND_PROP_MODE</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_PROP_MODE</unmanaged-short>
        Mode = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>The edge mode for the Border effect. </p>
    /// </summary>
    /// <doc-id>dn934219</doc-id>
    /// <unmanaged>D2D1_BORDER_EDGE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_BORDER_EDGE_MODE</unmanaged-short>
    public enum BorderEdgeMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934219</doc-id>
        /// <unmanaged>D2D1_BORDER_EDGE_MODE_CLAMP</unmanaged>
        /// <unmanaged-short>D2D1_BORDER_EDGE_MODE_CLAMP</unmanaged-short>
        Clamp = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934219</doc-id>
        /// <unmanaged>D2D1_BORDER_EDGE_MODE_WRAP</unmanaged>
        /// <unmanaged-short>D2D1_BORDER_EDGE_MODE_WRAP</unmanaged-short>
        Wrap = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934219</doc-id>
        /// <unmanaged>D2D1_BORDER_EDGE_MODE_MIRROR</unmanaged>
        /// <unmanaged-short>D2D1_BORDER_EDGE_MODE_MIRROR</unmanaged-short>
        Mirror = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p> Specifies how the Crop effect handles the crop rectangle falling on fractional pixel coordinates. </p>
    /// </summary>
    /// <doc-id>dn934220</doc-id>
    /// <unmanaged>D2D1_BORDER_MODE</unmanaged>
    /// <unmanaged-short>D2D1_BORDER_MODE</unmanaged-short>
    public enum BorderMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934220</doc-id>
        /// <unmanaged>D2D1_BORDER_MODE_SOFT</unmanaged>
        /// <unmanaged-short>D2D1_BORDER_MODE_SOFT</unmanaged-short>
        Soft = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934220</doc-id>
        /// <unmanaged>D2D1_BORDER_MODE_HARD</unmanaged>
        /// <unmanaged-short>D2D1_BORDER_MODE_HARD</unmanaged-short>
        Hard = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Identifiers for properties of the Border effect.</p>
    /// </summary>
    /// <doc-id>dn934221</doc-id>
    /// <unmanaged>D2D1_BORDER_PROP</unmanaged>
    /// <unmanaged-short>D2D1_BORDER_PROP</unmanaged-short>
    public enum BorderProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934221</doc-id>
        /// <unmanaged>D2D1_BORDER_PROP_EDGE_MODE_X</unmanaged>
        /// <unmanaged-short>D2D1_BORDER_PROP_EDGE_MODE_X</unmanaged-short>
        EdgeModeX = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934221</doc-id>
        /// <unmanaged>D2D1_BORDER_PROP_EDGE_MODE_Y</unmanaged>
        /// <unmanaged-short>D2D1_BORDER_PROP_EDGE_MODE_Y</unmanaged-short>
        EdgeModeY = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Identifiers for the properties of the Brightness effect.</p>
    /// </summary>
    /// <doc-id>dn934223</doc-id>
    /// <unmanaged>D2D1_BRIGHTNESS_PROP</unmanaged>
    /// <unmanaged-short>D2D1_BRIGHTNESS_PROP</unmanaged-short>
    public enum BrightnessProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934223</doc-id>
        /// <unmanaged>D2D1_BRIGHTNESS_PROP_WHITE_POINT</unmanaged>
        /// <unmanaged-short>D2D1_BRIGHTNESS_PROP_WHITE_POINT</unmanaged-short>
        WhitePoint = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934223</doc-id>
        /// <unmanaged>D2D1_BRIGHTNESS_PROP_BLACK_POINT</unmanaged>
        /// <unmanaged-short>D2D1_BRIGHTNESS_PROP_BLACK_POINT</unmanaged-short>
        BlackPoint = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Represents the bit depth of the imaging pipeline in Direct2D.</p>
    /// </summary>
    /// <remarks>
    /// <strong>Note</strong>?? Feature level 9 may or may not support precision types other than 8BPC.?
    /// </remarks>
    /// <doc-id>hh446986</doc-id>
    /// <unmanaged>D2D1_BUFFER_PRECISION</unmanaged>
    /// <unmanaged-short>D2D1_BUFFER_PRECISION</unmanaged-short>
    public enum BufferPrecision : System.Int32
    {
        /// <summary>
        /// <dd> <p>The buffer precision is not specified.</p> </dd>
        /// </summary>
        /// <doc-id>hh446986</doc-id>
        /// <unmanaged>D2D1_BUFFER_PRECISION_UNKNOWN</unmanaged>
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Use 8-bit normalized integer per channel.</p> </dd>
        /// </summary>
        /// <doc-id>hh446986</doc-id>
        /// <unmanaged>D2D1_BUFFER_PRECISION_8BPC_UNORM</unmanaged>
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_8BPC_UNORM</unmanaged-short>
        PerChannel8UNorm = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Use 8-bit normalized integer standard RGB data per channel.</p> </dd>
        /// </summary>
        /// <doc-id>hh446986</doc-id>
        /// <unmanaged>D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB</unmanaged>
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB</unmanaged-short>
        PerChannel8UNormSRgb = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Use 16-bit normalized integer per channel.</p> </dd>
        /// </summary>
        /// <doc-id>hh446986</doc-id>
        /// <unmanaged>D2D1_BUFFER_PRECISION_16BPC_UNORM</unmanaged>
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_16BPC_UNORM</unmanaged-short>
        PerChannel16UNorm = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Use 16-bit floats per channel.</p> </dd>
        /// </summary>
        /// <doc-id>hh446986</doc-id>
        /// <unmanaged>D2D1_BUFFER_PRECISION_16BPC_FLOAT</unmanaged>
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_16BPC_FLOAT</unmanaged-short>
        PerChannel16Float = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Use 32-bit floats per channel.</p> </dd>
        /// </summary>
        /// <doc-id>hh446986</doc-id>
        /// <unmanaged>D2D1_BUFFER_PRECISION_32BPC_FLOAT</unmanaged>
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_32BPC_FLOAT</unmanaged-short>
        PerChannel32Float = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p>Describes the shape at the end of a line or segment.</p>
    /// </summary>
    /// <remarks>
    /// <p> The following illustration shows the available cap styles for lines or segments. The red portion of the line shows the extra area added by the line cap setting. </p>
    /// </remarks>
    /// <doc-id>dd368079</doc-id>
    /// <unmanaged>D2D1_CAP_STYLE</unmanaged>
    /// <unmanaged-short>D2D1_CAP_STYLE</unmanaged-short>
    public enum CapStyle : System.Int32
    {
        /// <summary>
        /// <dd> <p>A cap that does not extend past the last point of the line. Comparable to cap used for objects other than lines. </p> </dd>
        /// </summary>
        /// <doc-id>dd368079</doc-id>
        /// <unmanaged>D2D1_CAP_STYLE_FLAT</unmanaged>
        /// <unmanaged-short>D2D1_CAP_STYLE_FLAT</unmanaged-short>
        Flat = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Half of a square that has a length equal to the line thickness.</p> </dd>
        /// </summary>
        /// <doc-id>dd368079</doc-id>
        /// <unmanaged>D2D1_CAP_STYLE_SQUARE</unmanaged>
        /// <unmanaged-short>D2D1_CAP_STYLE_SQUARE</unmanaged-short>
        Square = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>A semicircle that has a diameter equal to the line thickness.</p> </dd>
        /// </summary>
        /// <doc-id>dd368079</doc-id>
        /// <unmanaged>D2D1_CAP_STYLE_ROUND</unmanaged>
        /// <unmanaged-short>D2D1_CAP_STYLE_ROUND</unmanaged-short>
        Round = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>An isosceles right triangle whose hypotenuse is equal in length to the thickness of the line.</p> </dd>
        /// </summary>
        /// <doc-id>dd368079</doc-id>
        /// <unmanaged>D2D1_CAP_STYLE_TRIANGLE</unmanaged>
        /// <unmanaged-short>D2D1_CAP_STYLE_TRIANGLE</unmanaged-short>
        Triangle = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Describes flags that influence how the renderer interacts with a custom vertex shader.</p>
    /// </summary>
    /// <doc-id>hh404280</doc-id>
    /// <unmanaged>D2D1_CHANGE_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_CHANGE_TYPE</unmanaged-short>
    public enum ChangeType : System.Int32
    {
        /// <summary>
        /// <dd> <p>There were no changes.</p> </dd>
        /// </summary>
        /// <doc-id>hh404280</doc-id>
        /// <unmanaged>D2D1_CHANGE_TYPE_NONE</unmanaged>
        /// <unmanaged-short>D2D1_CHANGE_TYPE_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The properties of the effect changed.</p> </dd>
        /// </summary>
        /// <doc-id>hh404280</doc-id>
        /// <unmanaged>D2D1_CHANGE_TYPE_PROPERTIES</unmanaged>
        /// <unmanaged-short>D2D1_CHANGE_TYPE_PROPERTIES</unmanaged-short>
        Properties = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The context state changed.</p> </dd>
        /// </summary>
        /// <doc-id>hh404280</doc-id>
        /// <unmanaged>D2D1_CHANGE_TYPE_CONTEXT</unmanaged>
        /// <unmanaged-short>D2D1_CHANGE_TYPE_CONTEXT</unmanaged-short>
        Context = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The effect?s transform graph has changed.  This happens only when an effect supports a variable input count.</p> </dd>
        /// </summary>
        /// <doc-id>hh404280</doc-id>
        /// <unmanaged>D2D1_CHANGE_TYPE_GRAPH</unmanaged>
        /// <unmanaged-short>D2D1_CHANGE_TYPE_GRAPH</unmanaged-short>
        Graph = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Allows a caller to control the channel depth of a stage in the rendering pipeline.</p>
    /// </summary>
    /// <doc-id>hh404281</doc-id>
    /// <unmanaged>D2D1_CHANNEL_DEPTH</unmanaged>
    /// <unmanaged-short>D2D1_CHANNEL_DEPTH</unmanaged-short>
    public enum ChannelDepth : System.Int32
    {
        /// <summary>
        /// <dd> <p>The channel depth is the default. It is inherited from the inputs.</p> </dd>
        /// </summary>
        /// <doc-id>hh404281</doc-id>
        /// <unmanaged>D2D1_CHANNEL_DEPTH_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_CHANNEL_DEPTH_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The channel depth is 1.</p> </dd>
        /// </summary>
        /// <doc-id>hh404281</doc-id>
        /// <unmanaged>D2D1_CHANNEL_DEPTH_1</unmanaged>
        /// <unmanaged-short>D2D1_CHANNEL_DEPTH_1</unmanaged-short>
        One = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The channel depth is 4.</p> </dd>
        /// </summary>
        /// <doc-id>hh404281</doc-id>
        /// <unmanaged>D2D1_CHANNEL_DEPTH_4</unmanaged>
        /// <unmanaged-short>D2D1_CHANNEL_DEPTH_4</unmanaged-short>
        Four = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p>Specifies the color channel the Displacement map effect extracts the intensity from and uses it to spatially displace the image in the X or Y direction.</p>
    /// </summary>
    /// <doc-id>dn934224</doc-id>
    /// <unmanaged>D2D1_CHANNEL_SELECTOR</unmanaged>
    /// <unmanaged-short>D2D1_CHANNEL_SELECTOR</unmanaged-short>
    public enum ChannelSelector : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934224</doc-id>
        /// <unmanaged>D2D1_CHANNEL_SELECTOR_R</unmanaged>
        /// <unmanaged-short>D2D1_CHANNEL_SELECTOR_R</unmanaged-short>
        R = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934224</doc-id>
        /// <unmanaged>D2D1_CHANNEL_SELECTOR_G</unmanaged>
        /// <unmanaged-short>D2D1_CHANNEL_SELECTOR_G</unmanaged-short>
        G = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934224</doc-id>
        /// <unmanaged>D2D1_CHANNEL_SELECTOR_B</unmanaged>
        /// <unmanaged-short>D2D1_CHANNEL_SELECTOR_B</unmanaged-short>
        B = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934224</doc-id>
        /// <unmanaged>D2D1_CHANNEL_SELECTOR_A</unmanaged>
        /// <unmanaged-short>D2D1_CHANNEL_SELECTOR_A</unmanaged-short>
        A = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Identifiers for properties of the Chroma-key effect.</p>
    /// </summary>
    /// <doc-id>dn890719</doc-id>
    /// <unmanaged>D2D1_CHROMAKEY_PROP</unmanaged>
    /// <unmanaged-short>D2D1_CHROMAKEY_PROP</unmanaged-short>
    public enum ChromakeyProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890719</doc-id>
        /// <unmanaged>D2D1_CHROMAKEY_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_CHROMAKEY_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890719</doc-id>
        /// <unmanaged>D2D1_CHROMAKEY_PROP_TOLERANCE</unmanaged>
        /// <unmanaged-short>D2D1_CHROMAKEY_PROP_TOLERANCE</unmanaged-short>
        Tolerance = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890719</doc-id>
        /// <unmanaged>D2D1_CHROMAKEY_PROP_INVERT_ALPHA</unmanaged>
        /// <unmanaged-short>D2D1_CHROMAKEY_PROP_INVERT_ALPHA</unmanaged-short>
        InvertAlpha = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890719</doc-id>
        /// <unmanaged>D2D1_CHROMAKEY_PROP_FEATHER</unmanaged>
        /// <unmanaged-short>D2D1_CHROMAKEY_PROP_FEATHER</unmanaged-short>
        Feather = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Specifies the pixel snapping policy when rendering color bitmap glyphs.</p>
    /// </summary>
    /// <doc-id>mt736463</doc-id>
    /// <unmanaged>D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION</unmanaged>
    /// <unmanaged-short>D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION</unmanaged-short>
    public enum ColorBitmapGlyphSnapOption : System.Int32
    {
        /// <summary>
        /// <dd> <p>Color bitmap glyph positions are snapped to the nearest pixel if the bitmap resolution matches that of the device context.</p> </dd>
        /// </summary>
        /// <doc-id>mt736463</doc-id>
        /// <unmanaged>D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Color bitmap glyph positions are not snapped.</p> </dd>
        /// </summary>
        /// <doc-id>mt736463</doc-id>
        /// <unmanaged>D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DISABLE</unmanaged-short>
        Disable = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Describes whether a render target uses hardware or software rendering, or if Direct2D should select the rendering mode.</p>
    /// </summary>
    /// <remarks>
    /// <p>Not every render target supports hardware rendering. For more information, see the Render Targets Overview. </p>
    /// </remarks>
    /// <doc-id>dd756630</doc-id>
    /// <unmanaged>D2D1_COLOR_CONTEXT_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_COLOR_CONTEXT_TYPE</unmanaged-short>
    public enum ColorContextType : System.Int32
    {
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering, if available; otherwise, it uses software rendering.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_COLOR_CONTEXT_TYPE_ICC</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_CONTEXT_TYPE_ICC</unmanaged-short>
        Icc = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The render target uses software rendering only.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_COLOR_CONTEXT_TYPE_SIMPLE</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_CONTEXT_TYPE_SIMPLE</unmanaged-short>
        Simple = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering only. </p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_COLOR_CONTEXT_TYPE_DXGI</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_CONTEXT_TYPE_DXGI</unmanaged-short>
        Dxgi = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Defines how to interpolate between colors.</p>
    /// </summary>
    /// <doc-id>hh871441</doc-id>
    /// <unmanaged>D2D1_COLOR_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_COLOR_INTERPOLATION_MODE</unmanaged-short>
    public enum ColorInterpolationMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Colors are interpolated with straight alpha.</p> </dd>
        /// </summary>
        /// <doc-id>hh871441</doc-id>
        /// <unmanaged>D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT</unmanaged-short>
        Straight = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Colors are interpolated with premultiplied alpha.</p> </dd>
        /// </summary>
        /// <doc-id>hh871441</doc-id>
        /// <unmanaged>D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED</unmanaged-short>
        Premultiplied = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Indicates how the Color management effect should interpret alpha data that is contained in the input image. </p>
    /// </summary>
    /// <doc-id>dn934225</doc-id>
    /// <unmanaged>D2D1_COLORMANAGEMENT_ALPHA_MODE</unmanaged>
    /// <unmanaged-short>D2D1_COLORMANAGEMENT_ALPHA_MODE</unmanaged-short>
    public enum ColorManagementAlphaMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934225</doc-id>
        /// <unmanaged>D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED</unmanaged-short>
        Premultiplied = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934225</doc-id>
        /// <unmanaged>D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT</unmanaged-short>
        Straight = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p> Identifiers for the properties of the Color management effect. </p>
    /// </summary>
    /// <doc-id>dn934226</doc-id>
    /// <unmanaged>D2D1_COLORMANAGEMENT_PROP</unmanaged>
    /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP</unmanaged-short>
    public enum ColorManagementProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934226</doc-id>
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT</unmanaged-short>
        SourceColorContext = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934226</doc-id>
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT</unmanaged-short>
        SourceRenderingIntent = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934226</doc-id>
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT</unmanaged-short>
        DestinationColorContext = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934226</doc-id>
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT</unmanaged-short>
        DestinationRenderingIntent = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934226</doc-id>
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE</unmanaged-short>
        AlphaMode = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934226</doc-id>
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_QUALITY</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_QUALITY</unmanaged-short>
        Quality = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p>The quality level of the transform for the Color management effect. </p>
    /// </summary>
    /// <doc-id>dn934227</doc-id>
    /// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY</unmanaged>
    /// <unmanaged-short>D2D1_COLORMANAGEMENT_QUALITY</unmanaged-short>
    public enum ColorManagementQuality : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934227</doc-id>
        /// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY_PROOF</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_QUALITY_PROOF</unmanaged-short>
        Proof = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934227</doc-id>
        /// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY_NORMAL</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_QUALITY_NORMAL</unmanaged-short>
        Normal = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934227</doc-id>
        /// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY_BEST</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_QUALITY_BEST</unmanaged-short>
        Best = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Specifies which ICC rendering intent the Color management effect should use.</p>
    /// </summary>
    /// <doc-id>dn934228</doc-id>
    /// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT</unmanaged>
    /// <unmanaged-short>D2D1_COLORMANAGEMENT_RENDERING_INTENT</unmanaged-short>
    public enum ColorManagementRenderingIntent : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934228</doc-id>
        /// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL</unmanaged-short>
        Perceptual = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934228</doc-id>
        /// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC</unmanaged-short>
        RelativeColorimetric = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934228</doc-id>
        /// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION</unmanaged-short>
        Saturation = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934228</doc-id>
        /// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC</unmanaged-short>
        AbsoluteColorimetric = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>The alpha mode of the output of the Color matrix effect.</p>
    /// </summary>
    /// <doc-id>dn934229</doc-id>
    /// <unmanaged>D2D1_COLORMATRIX_ALPHA_MODE</unmanaged>
    /// <unmanaged-short>D2D1_COLORMATRIX_ALPHA_MODE</unmanaged-short>
    public enum ColorMatrixAlphaMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934229</doc-id>
        /// <unmanaged>D2D1_COLORMATRIX_ALPHA_MODE_PREMULTIPLIED</unmanaged>
        /// <unmanaged-short>D2D1_COLORMATRIX_ALPHA_MODE_PREMULTIPLIED</unmanaged-short>
        Premultiplied = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934229</doc-id>
        /// <unmanaged>D2D1_COLORMATRIX_ALPHA_MODE_STRAIGHT</unmanaged>
        /// <unmanaged-short>D2D1_COLORMATRIX_ALPHA_MODE_STRAIGHT</unmanaged-short>
        Straight = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Identifiers for the properties of the Color matrix effect.</p>
    /// </summary>
    /// <doc-id>dn934230</doc-id>
    /// <unmanaged>D2D1_COLORMATRIX_PROP</unmanaged>
    /// <unmanaged-short>D2D1_COLORMATRIX_PROP</unmanaged-short>
    public enum ColorMatrixProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934230</doc-id>
        /// <unmanaged>D2D1_COLORMATRIX_PROP_COLOR_MATRIX</unmanaged>
        /// <unmanaged-short>D2D1_COLORMATRIX_PROP_COLOR_MATRIX</unmanaged-short>
        ColorMatrix = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934230</doc-id>
        /// <unmanaged>D2D1_COLORMATRIX_PROP_ALPHA_MODE</unmanaged>
        /// <unmanaged-short>D2D1_COLORMATRIX_PROP_ALPHA_MODE</unmanaged-short>
        AlphaMode = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934230</doc-id>
        /// <unmanaged>D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Defines options that should be applied to the color space.</p>
    /// </summary>
    /// <doc-id>hh446992</doc-id>
    /// <unmanaged>D2D1_COLOR_SPACE</unmanaged>
    /// <unmanaged-short>D2D1_COLOR_SPACE</unmanaged-short>
    public enum ColorSpace : System.Int32
    {
        /// <summary>
        /// <dd> <p>The color space is otherwise described, such as with a color profile.</p> </dd>
        /// </summary>
        /// <doc-id>hh446992</doc-id>
        /// <unmanaged>D2D1_COLOR_SPACE_CUSTOM</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_SPACE_CUSTOM</unmanaged-short>
        Custom = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The color space is sRGB.</p> </dd>
        /// </summary>
        /// <doc-id>hh446992</doc-id>
        /// <unmanaged>D2D1_COLOR_SPACE_SRGB</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_SPACE_SRGB</unmanaged-short>
        SRgb = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The color space is scRGB.</p> </dd>
        /// </summary>
        /// <doc-id>hh446992</doc-id>
        /// <unmanaged>D2D1_COLOR_SPACE_SCRGB</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_SPACE_SCRGB</unmanaged-short>
        ScRgb = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Specifies the different methods by which two geometries can be combined.</p>
    /// </summary>
    /// <remarks>
    /// <p>The following illustration shows the different geometry combine modes.
    /// </p>
    /// </remarks>
    /// <doc-id>dd368083</doc-id>
    /// <unmanaged>D2D1_COMBINE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_COMBINE_MODE</unmanaged-short>
    public enum CombineMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>The two regions are combined by taking the union of both. Given two geometries, <em>A</em> and <em>B</em>, the resulting geometry is geometry <em>A</em> + geometry <em>B</em>.</p> </dd>
        /// </summary>
        /// <doc-id>dd368083</doc-id>
        /// <unmanaged>D2D1_COMBINE_MODE_UNION</unmanaged>
        /// <unmanaged-short>D2D1_COMBINE_MODE_UNION</unmanaged-short>
        Union = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The two regions are combined by taking their intersection. The new area consists of the overlapping region between the two geometries. </p> </dd>
        /// </summary>
        /// <doc-id>dd368083</doc-id>
        /// <unmanaged>D2D1_COMBINE_MODE_INTERSECT</unmanaged>
        /// <unmanaged-short>D2D1_COMBINE_MODE_INTERSECT</unmanaged-short>
        Intersect = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The two regions are combined by taking the area that exists in the first region but not the second and the area that exists in the second region but not the first. Given two geometries, <em>A</em> and <em>B</em>, the new region consists of (<em>A</em>-<em>B</em>) + (<em>B</em>-<em>A</em>). </p> </dd>
        /// </summary>
        /// <doc-id>dd368083</doc-id>
        /// <unmanaged>D2D1_COMBINE_MODE_XOR</unmanaged>
        /// <unmanaged-short>D2D1_COMBINE_MODE_XOR</unmanaged-short>
        Xor = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The second region is excluded from the first. Given two geometries, <em>A</em> and <em>B</em>, the area of geometry <em>B</em> is removed from the area of geometry <em>A</em>, producing a region that is <em>A</em>-<em>B</em>.</p> </dd>
        /// </summary>
        /// <doc-id>dd368083</doc-id>
        /// <unmanaged>D2D1_COMBINE_MODE_EXCLUDE</unmanaged>
        /// <unmanaged-short>D2D1_COMBINE_MODE_EXCLUDE</unmanaged-short>
        Exclude = unchecked ((System.Int32)(3))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies additional features supportable by a compatible render target when it is created.  This enumeration allows a bitwise combination of its member values.</p>
    /// </summary>
    /// <remarks>
    /// <p>Use this enumeration when creating a compatible render target with the <strong>CreateCompatibleRenderTarget</strong> method. For more information about compatible render targets, see the Render Targets Overview. </p><p>The <strong>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE</strong> option may only be requested if the parent render target was created with <strong>D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE</strong> (for most render targets) or <strong>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE</strong> (for render targets created by the <strong>CreateCompatibleRenderTarget</strong> method).</p>
    /// </remarks>
    /// <doc-id>dd368085</doc-id>
    /// <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS</unmanaged-short>
    public enum CompatibleRenderTargetOptions : System.Int32
    {
        /// <summary>
        /// <dd> <p>The render target supports no additional features.</p> </dd>
        /// </summary>
        /// <doc-id>dd368085</doc-id>
        /// <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The render target supports interoperability with the Windows Graphics Device Interface  (GDI). </p> </dd>
        /// </summary>
        /// <doc-id>dd368085</doc-id>
        /// <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE</unmanaged>
        /// <unmanaged-short>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE</unmanaged-short>
        GdiCompatible = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Used to specify the blend mode for all of the Direct2D blending operations.</p>
    /// </summary>
    /// <remarks>
    /// <p>The figure here shows an example of each of the modes with images that have an opacity of 1.0 or 0.5. </p><p></p><p>There can be slightly different interpretations of these enumeration values depending on where the value is used.</p><ul> <li> <p>With a composite effect:
    /// </p><strong>D2D1_COMPOSITE_MODE_DESTINATION_COPY</strong> is equivalent to <strong>D2D1_COMPOSITE_MODE_SOURCE_COPY</strong> with the inputs inverted.</li> <li> <p> As a parameter to <strong>ID2D1DeviceContext::DrawImage</strong>: </p><strong>D2D1_COMPOSITE_MODE_DESTINATION_COPY</strong> is a no-op since the destination is already in the selected target.</li> </ul>
    /// </remarks>
    /// <doc-id>hh446995</doc-id>
    /// <unmanaged>D2D1_COMPOSITE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_COMPOSITE_MODE</unmanaged-short>
    public enum CompositeMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>The standard source-over-destination blend mode.</p> </dd>
        /// </summary>
        /// <doc-id>hh446995</doc-id>
        /// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_OVER</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_SOURCE_OVER</unmanaged-short>
        SourceOver = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The destination is rendered over the source.</p> </dd>
        /// </summary>
        /// <doc-id>hh446995</doc-id>
        /// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_OVER</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_DESTINATION_OVER</unmanaged-short>
        DestinationOver = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Performs a logical clip of the source pixels against the destination pixels.</p> </dd>
        /// </summary>
        /// <doc-id>hh446995</doc-id>
        /// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_IN</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_SOURCE_IN</unmanaged-short>
        SourceIn = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The inverse of the <strong>D2D1_COMPOSITE_MODE_SOURCE_IN</strong> operation.</p> </dd>
        /// </summary>
        /// <doc-id>hh446995</doc-id>
        /// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_IN</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_DESTINATION_IN</unmanaged-short>
        DestinationIn = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>This is the logical inverse to <strong>D2D1_COMPOSITE_MODE_SOURCE_IN</strong>.</p> </dd>
        /// </summary>
        /// <doc-id>hh446995</doc-id>
        /// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_OUT</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_SOURCE_OUT</unmanaged-short>
        SourceOut = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The is the logical inverse to <strong>D2D1_COMPOSITE_MODE_DESTINATION_IN</strong>.</p> </dd>
        /// </summary>
        /// <doc-id>hh446995</doc-id>
        /// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_OUT</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_DESTINATION_OUT</unmanaged-short>
        DestinationOut = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>Writes the source pixels over the destination where there are destination pixels.</p> </dd>
        /// </summary>
        /// <doc-id>hh446995</doc-id>
        /// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_ATOP</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_SOURCE_ATOP</unmanaged-short>
        SourceAtop = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>The logical inverse of <strong>D2D1_COMPOSITE_MODE_SOURCE_ATOP</strong>.</p> </dd>
        /// </summary>
        /// <doc-id>hh446995</doc-id>
        /// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_ATOP</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_DESTINATION_ATOP</unmanaged-short>
        DestinationAtop = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>The source is inverted with the destination.</p> </dd>
        /// </summary>
        /// <doc-id>hh446995</doc-id>
        /// <unmanaged>D2D1_COMPOSITE_MODE_XOR</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_XOR</unmanaged-short>
        Xor = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>The channel components are summed.</p> </dd>
        /// </summary>
        /// <doc-id>hh446995</doc-id>
        /// <unmanaged>D2D1_COMPOSITE_MODE_PLUS</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_PLUS</unmanaged-short>
        Plus = unchecked ((System.Int32)(9)),
        /// <summary>
        /// <dd> <p>The source is copied to the destination; the destination pixels are ignored.</p> </dd>
        /// </summary>
        /// <doc-id>hh446995</doc-id>
        /// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_COPY</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_SOURCE_COPY</unmanaged-short>
        SourceCopy = unchecked ((System.Int32)(10)),
        /// <summary>
        /// <dd> <p>Equivalent to <strong>D2D1_COMPOSITE_MODE_SOURCE_COPY</strong>, but pixels outside of the source bounds are unchanged.
        /// </p> </dd>
        /// </summary>
        /// <doc-id>hh446995</doc-id>
        /// <unmanaged>D2D1_COMPOSITE_MODE_BOUNDED_SOURCE_COPY</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_BOUNDED_SOURCE_COPY</unmanaged-short>
        BoundedSourceCopy = unchecked ((System.Int32)(11)),
        /// <summary>
        /// <dd> <p>Destination colors are inverted according to a source mask.
        /// </p> </dd>
        /// </summary>
        /// <doc-id>hh446995</doc-id>
        /// <unmanaged>D2D1_COMPOSITE_MODE_MASK_INVERT</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_MASK_INVERT</unmanaged-short>
        MaskInvert = unchecked ((System.Int32)(12))}

    /// <summary>
    /// <p> Identifiers for properties of the Composite effect. </p>
    /// </summary>
    /// <doc-id>dn934231</doc-id>
    /// <unmanaged>D2D1_COMPOSITE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_COMPOSITE_PROP</unmanaged-short>
    public enum CompositeProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934231</doc-id>
        /// <unmanaged>D2D1_COMPOSITE_PROP_MODE</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_PROP_MODE</unmanaged-short>
        Mode = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Identifiers for properties of the Contrast effect.</p>
    /// </summary>
    /// <doc-id>dn890720</doc-id>
    /// <unmanaged>D2D1_CONTRAST_PROP</unmanaged>
    /// <unmanaged-short>D2D1_CONTRAST_PROP</unmanaged-short>
    public enum ContrastProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890720</doc-id>
        /// <unmanaged>D2D1_CONTRAST_PROP_CONTRAST</unmanaged>
        /// <unmanaged-short>D2D1_CONTRAST_PROP_CONTRAST</unmanaged-short>
        Contrast = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890720</doc-id>
        /// <unmanaged>D2D1_CONTRAST_PROP_CLAMP_INPUT</unmanaged>
        /// <unmanaged-short>D2D1_CONTRAST_PROP_CLAMP_INPUT</unmanaged-short>
        ClampInput = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Identifiers for properties of the Convolve matrix effect.</p>
    /// </summary>
    /// <doc-id>dn934232</doc-id>
    /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP</unmanaged>
    /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP</unmanaged-short>
    public enum ConvoleMatrixProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934232</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>
        KernelUnitLength = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934232</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934232</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X</unmanaged-short>
        KernelSizeX = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934232</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y</unmanaged-short>
        KernelSizeY = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934232</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX</unmanaged-short>
        KernelMatrix = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934232</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_DIVISOR</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_DIVISOR</unmanaged-short>
        Divisor = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934232</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_BIAS</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_BIAS</unmanaged-short>
        Bias = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934232</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET</unmanaged-short>
        KernelOffset = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934232</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA</unmanaged-short>
        PreserveAlpha = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934232</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934232</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(10))}

    /// <summary>
    /// <p>The interpolation mode the Convolve matrix effect uses to scale the image to the corresponding kernel unit length.  There are six scale modes that range in quality and speed.</p>
    /// </summary>
    /// <doc-id>dn934233</doc-id>
    /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE</unmanaged-short>
    public enum ConvoleMatrixScaleMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934233</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934233</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934233</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934233</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934233</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934233</doc-id>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p>Identifiers for properties of the Crop effect.</p>
    /// </summary>
    /// <doc-id>dn934234</doc-id>
    /// <unmanaged>D2D1_CROP_PROP</unmanaged>
    /// <unmanaged-short>D2D1_CROP_PROP</unmanaged-short>
    public enum CropProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934234</doc-id>
        /// <unmanaged>D2D1_CROP_PROP_RECT</unmanaged>
        /// <unmanaged-short>D2D1_CROP_PROP_RECT</unmanaged-short>
        Rectangle = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934234</doc-id>
        /// <unmanaged>D2D1_CROP_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_CROP_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>This effect combines two images by adding weighted pixels from input images. It has two inputs, named Destination and Source.</p><p>The cross fade formula is <strong>output = weight * Destination + (1 - weight) * Source</strong>.</p><p>The CLSID for this effect is <see cref = "CrossFade"/>.</p>
    /// </summary>
    /// <doc-id>mt745030</doc-id>
    /// <unmanaged>D2D1_CROSSFADE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_CROSSFADE_PROP</unmanaged-short>
    public enum CrossfadeProp : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt745030</doc-id>
        /// <unmanaged>D2D1_CROSSFADE_PROP_WEIGHT</unmanaged>
        /// <unmanaged-short>D2D1_CROSSFADE_PROP_WEIGHT</unmanaged-short>
        Weight = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Describes the sequence of dashes and gaps in a stroke. </p>
    /// </summary>
    /// <remarks>
    /// <p>The following illustration shows several available dash styles.  </p>
    /// </remarks>
    /// <doc-id>dd368087</doc-id>
    /// <unmanaged>D2D1_DASH_STYLE</unmanaged>
    /// <unmanaged-short>D2D1_DASH_STYLE</unmanaged-short>
    public enum DashStyle : System.Int32
    {
        /// <summary>
        /// <dd> <p>A solid line with no breaks.</p> </dd>
        /// </summary>
        /// <doc-id>dd368087</doc-id>
        /// <unmanaged>D2D1_DASH_STYLE_SOLID</unmanaged>
        /// <unmanaged-short>D2D1_DASH_STYLE_SOLID</unmanaged-short>
        Solid = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>A dash followed by a gap of equal length. The dash and the gap are each twice as long as the stroke thickness.</p> <p>The equivalent dash  array for  <strong>D2D1_DASH_STYLE_DASH</strong> is {2, 2}.</p> </dd>
        /// </summary>
        /// <doc-id>dd368087</doc-id>
        /// <unmanaged>D2D1_DASH_STYLE_DASH</unmanaged>
        /// <unmanaged-short>D2D1_DASH_STYLE_DASH</unmanaged-short>
        Dash = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>A dot followed by a longer gap.</p> <p>The equivalent dash  array for  <strong>D2D1_DASH_STYLE_DOT</strong> is {0, 2}.</p> </dd>
        /// </summary>
        /// <doc-id>dd368087</doc-id>
        /// <unmanaged>D2D1_DASH_STYLE_DOT</unmanaged>
        /// <unmanaged-short>D2D1_DASH_STYLE_DOT</unmanaged-short>
        Dot = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>A dash, followed by a gap, followed by a dot, followed by another gap.</p> <p>The equivalent dash array for  <strong>D2D1_DASH_STYLE_DASH_DOT</strong> is {2, 2, 0, 2}.</p> </dd>
        /// </summary>
        /// <doc-id>dd368087</doc-id>
        /// <unmanaged>D2D1_DASH_STYLE_DASH_DOT</unmanaged>
        /// <unmanaged-short>D2D1_DASH_STYLE_DASH_DOT</unmanaged-short>
        DashDot = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>A dash, followed by a gap, followed by a dot, followed by another gap, followed by another dot, followed by another gap.</p> <p>The equivalent dash array for  <strong>D2D1_DASH_STYLE_DASH_DOT_DOT</strong> is {2, 2, 0, 2, 0, 2}.</p> </dd>
        /// </summary>
        /// <doc-id>dd368087</doc-id>
        /// <unmanaged>D2D1_DASH_STYLE_DASH_DOT_DOT</unmanaged>
        /// <unmanaged-short>D2D1_DASH_STYLE_DASH_DOT_DOT</unmanaged-short>
        DashDotDot = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The dash pattern is specified by an array of floating-point values.</p> </dd>
        /// </summary>
        /// <doc-id>dd368087</doc-id>
        /// <unmanaged>D2D1_DASH_STYLE_CUSTOM</unmanaged>
        /// <unmanaged-short>D2D1_DASH_STYLE_CUSTOM</unmanaged-short>
        Custom = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p>Indicates the type of information provided by the Direct2D Debug Layer.  </p>
    /// </summary>
    /// <remarks>
    /// <p>To receive debugging messages, you must install the Direct2D Debug Layer.</p>
    /// </remarks>
    /// <doc-id>dd368090</doc-id>
    /// <unmanaged>D2D1_DEBUG_LEVEL</unmanaged>
    /// <unmanaged-short>D2D1_DEBUG_LEVEL</unmanaged-short>
    public enum DebugLevel : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368090</doc-id>
        /// <unmanaged>D2D1_DEBUG_LEVEL_NONE</unmanaged>
        /// <unmanaged-short>D2D1_DEBUG_LEVEL_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368090</doc-id>
        /// <unmanaged>D2D1_DEBUG_LEVEL_ERROR</unmanaged>
        /// <unmanaged-short>D2D1_DEBUG_LEVEL_ERROR</unmanaged-short>
        Error = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368090</doc-id>
        /// <unmanaged>D2D1_DEBUG_LEVEL_WARNING</unmanaged>
        /// <unmanaged-short>D2D1_DEBUG_LEVEL_WARNING</unmanaged-short>
        Warning = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368090</doc-id>
        /// <unmanaged>D2D1_DEBUG_LEVEL_INFORMATION</unmanaged>
        /// <unmanaged-short>D2D1_DEBUG_LEVEL_INFORMATION</unmanaged-short>
        Information = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p> Specifies how a device context is initialized for GDI rendering when it is retrieved from the render target.</p>
    /// </summary>
    /// <remarks>
    /// <p>Use this enumeration with the <strong>ID2D1GdiInteropRenderTarget::GetDC</strong> method to specify how the device context is  initialized for GDI rendering.</p>
    /// </remarks>
    /// <doc-id>dd368088</doc-id>
    /// <unmanaged>D2D1_DC_INITIALIZE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_DC_INITIALIZE_MODE</unmanaged-short>
    public enum DeviceContextInitializeMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>The current contents of the render target are copied to the device context when it is initialized. </p> </dd>
        /// </summary>
        /// <doc-id>dd368088</doc-id>
        /// <unmanaged>D2D1_DC_INITIALIZE_MODE_COPY</unmanaged>
        /// <unmanaged-short>D2D1_DC_INITIALIZE_MODE_COPY</unmanaged-short>
        Copy = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The device context is cleared to transparent black when it is initialized.</p> </dd>
        /// </summary>
        /// <doc-id>dd368088</doc-id>
        /// <unmanaged>D2D1_DC_INITIALIZE_MODE_CLEAR</unmanaged>
        /// <unmanaged-short>D2D1_DC_INITIALIZE_MODE_CLEAR</unmanaged-short>
        Clear = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>This specifies options that apply to the device context for its lifetime.</p>
    /// </summary>
    /// <doc-id>hh446998</doc-id>
    /// <unmanaged>D2D1_DEVICE_CONTEXT_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_DEVICE_CONTEXT_OPTIONS</unmanaged-short>
    public enum DeviceContextOptions : System.Int32
    {
        /// <summary>
        /// <dd> <p>The device context is created with default options.</p> </dd>
        /// </summary>
        /// <doc-id>hh446998</doc-id>
        /// <unmanaged>D2D1_DEVICE_CONTEXT_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_DEVICE_CONTEXT_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Distribute rendering work across multiple threads. Refer to Improving the performance of Direct2D apps for additional notes on the use of this flag.</p> </dd>
        /// </summary>
        /// <doc-id>hh446998</doc-id>
        /// <unmanaged>D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS</unmanaged>
        /// <unmanaged-short>D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS</unmanaged-short>
        EnableMultithreadedOptimizations = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies the optimization mode for the Directional blur effect.</p>
    /// </summary>
    /// <doc-id>dn934235</doc-id>
    /// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION</unmanaged>
    /// <unmanaged-short>D2D1_DIRECTIONALBLUR_OPTIMIZATION</unmanaged-short>
    public enum DirectionalBlurOptimization : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934235</doc-id>
        /// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED</unmanaged>
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED</unmanaged-short>
        Speed = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934235</doc-id>
        /// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED</unmanaged>
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED</unmanaged-short>
        Balanced = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934235</doc-id>
        /// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY</unmanaged>
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY</unmanaged-short>
        Quality = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p> Identifiers for properties of the Directional blur effect. </p>
    /// </summary>
    /// <doc-id>dn934236</doc-id>
    /// <unmanaged>D2D1_DIRECTIONALBLUR_PROP</unmanaged>
    /// <unmanaged-short>D2D1_DIRECTIONALBLUR_PROP</unmanaged-short>
    public enum DirectionalBlurProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934236</doc-id>
        /// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION</unmanaged>
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION</unmanaged-short>
        StandardDeviation = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934236</doc-id>
        /// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_ANGLE</unmanaged>
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_PROP_ANGLE</unmanaged-short>
        Angle = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934236</doc-id>
        /// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION</unmanaged>
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION</unmanaged-short>
        Optimization = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934236</doc-id>
        /// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Identifiers for properties of the Discrete transfer effect.</p>
    /// </summary>
    /// <doc-id>dn934237</doc-id>
    /// <unmanaged>D2D1_DISCRETETRANSFER_PROP</unmanaged>
    /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP</unmanaged-short>
    public enum DiscreteTransferProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934237</doc-id>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_RED_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_RED_TABLE</unmanaged-short>
        RedTable = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934237</doc-id>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_RED_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_RED_DISABLE</unmanaged-short>
        RedDisable = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934237</doc-id>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE</unmanaged-short>
        GreenTable = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934237</doc-id>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE</unmanaged-short>
        GreenDisable = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934237</doc-id>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE</unmanaged-short>
        BlueTable = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934237</doc-id>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE</unmanaged-short>
        BlueDisable = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934237</doc-id>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE</unmanaged-short>
        AlphaTable = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934237</doc-id>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE</unmanaged-short>
        AlphaDisable = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934237</doc-id>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p> Identifiers for properties of the Displacement map effect. </p>
    /// </summary>
    /// <doc-id>dn934238</doc-id>
    /// <unmanaged>D2D1_DISPLACEMENTMAP_PROP</unmanaged>
    /// <unmanaged-short>D2D1_DISPLACEMENTMAP_PROP</unmanaged-short>
    public enum DisplacementMapProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934238</doc-id>
        /// <unmanaged>D2D1_DISPLACEMENTMAP_PROP_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_DISPLACEMENTMAP_PROP_SCALE</unmanaged-short>
        Scale = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934238</doc-id>
        /// <unmanaged>D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT</unmanaged>
        /// <unmanaged-short>D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT</unmanaged-short>
        XChannelSelect = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934238</doc-id>
        /// <unmanaged>D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT</unmanaged>
        /// <unmanaged-short>D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT</unmanaged-short>
        YChannelSelect = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Identifiers for properties of the Distant-diffuse lighting effect.</p>
    /// </summary>
    /// <doc-id>dn934239</doc-id>
    /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP</unmanaged-short>
    public enum DistantDiffuseProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934239</doc-id>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_AZIMUTH</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_AZIMUTH</unmanaged-short>
        Azimuth = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934239</doc-id>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_ELEVATION</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_ELEVATION</unmanaged-short>
        Elevation = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934239</doc-id>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged-short>
        DiffuseConstant = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934239</doc-id>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE</unmanaged-short>
        SurfaceScale = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934239</doc-id>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934239</doc-id>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>
        KernelUnitLength = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934239</doc-id>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(6))}

    /// <summary>
    /// <p>The interpolation mode the effect uses to scale the image to the corresponding kernel unit length. There are six scale modes that range in quality and speed.</p>
    /// </summary>
    /// <doc-id>dn934240</doc-id>
    /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE</unmanaged-short>
    public enum DistantDiffuseScaleMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Samples the nearest single point and uses that. This mode uses less processing time, but outputs the lowest quality image.</p> </dd>
        /// </summary>
        /// <doc-id>dn934240</doc-id>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Uses a four point sample and linear interpolation. This mode outputs a higher quality image than nearest neighbor.</p> </dd>
        /// </summary>
        /// <doc-id>dn934240</doc-id>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Uses a 16 sample cubic kernel for interpolation. This mode uses the most processing time, but outputs a higher quality image. </p> </dd>
        /// </summary>
        /// <doc-id>dn934240</doc-id>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Uses 4 linear samples within a single pixel for good edge anti-aliasing. This mode is good for scaling down by small amounts on images with few pixels.</p> </dd>
        /// </summary>
        /// <doc-id>dn934240</doc-id>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Uses anisotropic filtering to sample a pattern according to the transformed shape of the bitmap.</p> </dd>
        /// </summary>
        /// <doc-id>dn934240</doc-id>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Uses a variable size high quality cubic kernel to perform a pre-downscale the image if downscaling is involved in the transform matrix.  Then uses the cubic interpolation mode for the final output.</p> </dd>
        /// </summary>
        /// <doc-id>dn934240</doc-id>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p> Identifiers for properties of the Distant-specular lighting effect. </p>
    /// </summary>
    /// <doc-id>dn934241</doc-id>
    /// <unmanaged>D2D1_DISTANTSPECULAR_PROP</unmanaged>
    /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP</unmanaged-short>
    public enum DistantSpecularProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934241</doc-id>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_AZIMUTH</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_AZIMUTH</unmanaged-short>
        Azimuth = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934241</doc-id>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_ELEVATION</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_ELEVATION</unmanaged-short>
        Elevation = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934241</doc-id>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged-short>
        SpecularExponent = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934241</doc-id>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged-short>
        SpecularConstant = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934241</doc-id>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE</unmanaged-short>
        SurfaceScale = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934241</doc-id>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934241</doc-id>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>
        KernelUnitLength = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934241</doc-id>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(7))}

    /// <summary>
    /// <p>The interpolation mode the Distant-specular lighting effect uses to scale the image to the corresponding kernel unit length.  There are six scale modes that range in quality and speed.</p>
    /// </summary>
    /// <doc-id>dn934242</doc-id>
    /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE</unmanaged-short>
    public enum DistantSpecularScaleMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934242</doc-id>
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934242</doc-id>
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934242</doc-id>
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934242</doc-id>
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934242</doc-id>
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934242</doc-id>
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p> The interpolation mode the DPI compensation effect uses to scale the image. </p>
    /// </summary>
    /// <doc-id>dn934243</doc-id>
    /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE</unmanaged-short>
    public enum DpiCompensationInterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934243</doc-id>
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934243</doc-id>
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934243</doc-id>
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934243</doc-id>
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934243</doc-id>
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934243</doc-id>
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p> Identifiers for properties of the DPI compensation effect. </p>
    /// </summary>
    /// <doc-id>dn934244</doc-id>
    /// <unmanaged>D2D1_DPICOMPENSATION_PROP</unmanaged>
    /// <unmanaged-short>D2D1_DPICOMPENSATION_PROP</unmanaged-short>
    public enum DpiCompensationProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934244</doc-id>
        /// <unmanaged>D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE</unmanaged-short>
        InterpolationMode = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934244</doc-id>
        /// <unmanaged>D2D1_DPICOMPENSATION_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934244</doc-id>
        /// <unmanaged>D2D1_DPICOMPENSATION_PROP_INPUT_DPI</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_PROP_INPUT_DPI</unmanaged-short>
        InputDpi = unchecked ((System.Int32)(2))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies whether text snapping is suppressed or clipping to the layout rectangle is enabled. This enumeration allows a bitwise combination of its member values.</p>
    /// </summary>
    /// <doc-id>dd368095</doc-id>
    /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS</unmanaged-short>
    public enum DrawTextOptions : System.Int32
    {
        /// <summary>
        /// <dd> <p>Text is not vertically snapped to pixel boundaries. This setting is recommended for text that is being animated. </p> </dd>
        /// </summary>
        /// <doc-id>dd368095</doc-id>
        /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_NO_SNAP</unmanaged>
        /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS_NO_SNAP</unmanaged-short>
        NoSnap = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Text is clipped to the layout rectangle.</p> </dd>
        /// </summary>
        /// <doc-id>dd368095</doc-id>
        /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_CLIP</unmanaged>
        /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS_CLIP</unmanaged-short>
        Clip = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>In Windows?8.1 and later, text is rendered using color versions of glyphs, if defined by the font.</p> </dd>
        /// </summary>
        /// <doc-id>dd368095</doc-id>
        /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT</unmanaged>
        /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT</unmanaged-short>
        EnableColorFont = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Bitmap origins of color glyph bitmaps are not snapped.</p> </dd>
        /// </summary>
        /// <doc-id>dd368095</doc-id>
        /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_DISABLE_COLOR_BITMAP_SNAPPING</unmanaged>
        /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS_DISABLE_COLOR_BITMAP_SNAPPING</unmanaged-short>
        DisableColorBitmapSnapping = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>Text is vertically snapped to pixel boundaries and is not clipped to the layout rectangle. </p> </dd>
        /// </summary>
        /// <doc-id>dd368095</doc-id>
        /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Values for the <strong>D2D1_EDGEDETECTION_PROP_MODE</strong> property of the Edge Detection effect.</p>
    /// </summary>
    /// <doc-id>dn890722</doc-id>
    /// <unmanaged>D2D1_EDGEDETECTION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_EDGEDETECTION_MODE</unmanaged-short>
    public enum EdgeDetectionMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890722</doc-id>
        /// <unmanaged>D2D1_EDGEDETECTION_MODE_SOBEL</unmanaged>
        /// <unmanaged-short>D2D1_EDGEDETECTION_MODE_SOBEL</unmanaged-short>
        StreamOutputBel = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890722</doc-id>
        /// <unmanaged>D2D1_EDGEDETECTION_MODE_PREWITT</unmanaged>
        /// <unmanaged-short>D2D1_EDGEDETECTION_MODE_PREWITT</unmanaged-short>
        Prewitt = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Identifiers for properties of the Edge Detection effect.</p>
    /// </summary>
    /// <doc-id>dn890723</doc-id>
    /// <unmanaged>D2D1_EDGEDETECTION_PROP</unmanaged>
    /// <unmanaged-short>D2D1_EDGEDETECTION_PROP</unmanaged-short>
    public enum EdgeDetectionProperty : System.Int32
    {
        /// <summary>
        /// <dd> <p>The D2D1_EDGEDETECTION_PROP_STRENGTH property is a float value modulating the response of the edge detection filter. A low strength value means that weaker edges will get filtered out,  while a high value means stronger edges will get filtered out.  The allowed range is 0.0 to 1.0.  The default value is 0.5.</p> </dd>
        /// </summary>
        /// <doc-id>dn890723</doc-id>
        /// <unmanaged>D2D1_EDGEDETECTION_PROP_STRENGTH</unmanaged>
        /// <unmanaged-short>D2D1_EDGEDETECTION_PROP_STRENGTH</unmanaged-short>
        Strength = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The D2D1_EDGEDETECTION_PROP_BLUR_RADIUS property is a float value specifying the amount of blur to apply.  Applying blur is used to remove high frequencies and reduce phantom edges.   The allowed range is 0.0 to 10.0. The default value is 0.0 (no blur applied).</p> </dd>
        /// </summary>
        /// <doc-id>dn890723</doc-id>
        /// <unmanaged>D2D1_EDGEDETECTION_PROP_BLUR_RADIUS</unmanaged>
        /// <unmanaged-short>D2D1_EDGEDETECTION_PROP_BLUR_RADIUS</unmanaged-short>
        BlurRadius = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The D2D1_EDGEDETECTION_PROP_MODE property is a <strong><see cref = "SharpDX.Direct2D1.EdgeDetectionMode"/></strong> enumeration value which mode to use for edge detection.   The default value is D2D1_EDGEDETECTION_MODE_SOBEL.</p> </dd>
        /// </summary>
        /// <doc-id>dn890723</doc-id>
        /// <unmanaged>D2D1_EDGEDETECTION_PROP_MODE</unmanaged>
        /// <unmanaged-short>D2D1_EDGEDETECTION_PROP_MODE</unmanaged-short>
        Mode = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES property is a boolean value. Edge detection only applies to the RGB channels, the alpha channel is ignored for purposes of detecting edges. If D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES is false, the output edges is fully opaque. If D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES is true, the input opacity is preserved. The default value is false.</p> </dd>
        /// </summary>
        /// <doc-id>dn890723</doc-id>
        /// <unmanaged>D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES</unmanaged>
        /// <unmanaged-short>D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES</unmanaged-short>
        OverlayEdges = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>The D2D1_EDGEDETECTION_PROP_ALPHA_MODE property is a <strong><see cref = "SharpDX.Direct2D1.AlphaMode"/></strong> enumeration value indicating the alpha mode of the input file. If the input is not opaque, this value is used to determine whether to unpremultiply the inputs. See the About Alpha Modes section of the Supported Pixel Formats and Alpha Modes topic for additional information.    The default value is D2D1_ALPHA_MODE_PREMULTIPLIED.</p> </dd>
        /// </summary>
        /// <doc-id>dn890723</doc-id>
        /// <unmanaged>D2D1_EDGEDETECTION_PROP_ALPHA_MODE</unmanaged>
        /// <unmanaged-short>D2D1_EDGEDETECTION_PROP_ALPHA_MODE</unmanaged-short>
        AlphaMode = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p>Identifiers for properties of the Emboss effect.</p>
    /// </summary>
    /// <doc-id>dn890724</doc-id>
    /// <unmanaged>D2D1_EMBOSS_PROP</unmanaged>
    /// <unmanaged-short>D2D1_EMBOSS_PROP</unmanaged-short>
    public enum EmbossProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890724</doc-id>
        /// <unmanaged>D2D1_EMBOSS_PROP_HEIGHT</unmanaged>
        /// <unmanaged-short>D2D1_EMBOSS_PROP_HEIGHT</unmanaged-short>
        Height = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890724</doc-id>
        /// <unmanaged>D2D1_EMBOSS_PROP_DIRECTION</unmanaged>
        /// <unmanaged-short>D2D1_EMBOSS_PROP_DIRECTION</unmanaged-short>
        Direction = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Identifiers for properties of the Exposure effect.</p>
    /// </summary>
    /// <doc-id>dn890725</doc-id>
    /// <unmanaged>D2D1_EXPOSURE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_EXPOSURE_PROP</unmanaged-short>
    public enum ExposureProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890725</doc-id>
        /// <unmanaged>D2D1_EXPOSURE_PROP_EXPOSURE_VALUE</unmanaged>
        /// <unmanaged-short>D2D1_EXPOSURE_PROP_EXPOSURE_VALUE</unmanaged-short>
        ExposureValue = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Specifies how a brush paints areas outside of its normal content area.</p>
    /// </summary>
    /// <remarks>
    /// <p>For an <strong><see cref = "SharpDX.Direct2D1.BitmapBrush"/></strong>, the brush's content is the brush's bitmap. For an <strong><see cref = "SharpDX.Direct2D1.LinearGradientBrush"/></strong>, the brush's content area is the gradient axis. For an <strong><see cref = "SharpDX.Direct2D1.RadialGradientBrush"/></strong>, the brush's content is the area within the gradient ellipse.  </p>
    /// </remarks>
    /// <doc-id>dd368100</doc-id>
    /// <unmanaged>D2D1_EXTEND_MODE</unmanaged>
    /// <unmanaged-short>D2D1_EXTEND_MODE</unmanaged-short>
    public enum ExtendMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Repeat the edge pixels of the brush's content for all regions outside the normal content area.</p> </dd>
        /// </summary>
        /// <doc-id>dd368100</doc-id>
        /// <unmanaged>D2D1_EXTEND_MODE_CLAMP</unmanaged>
        /// <unmanaged-short>D2D1_EXTEND_MODE_CLAMP</unmanaged-short>
        Clamp = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Repeat the brush's content.</p> </dd>
        /// </summary>
        /// <doc-id>dd368100</doc-id>
        /// <unmanaged>D2D1_EXTEND_MODE_WRAP</unmanaged>
        /// <unmanaged-short>D2D1_EXTEND_MODE_WRAP</unmanaged-short>
        Wrap = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> The same as D2D1_EXTEND_MODE_WRAP, except that alternate tiles of the brush's content are flipped. (The brush's normal content is drawn untransformed.)</p> </dd>
        /// </summary>
        /// <doc-id>dd368100</doc-id>
        /// <unmanaged>D2D1_EXTEND_MODE_MIRROR</unmanaged>
        /// <unmanaged-short>D2D1_EXTEND_MODE_MIRROR</unmanaged-short>
        Mirror = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Specifies whether Direct2D provides synchronization for an <strong><see cref = "SharpDX.Direct2D1.Factory"/></strong> and the resources it creates, so that they may be safely accessed from multiple threads. </p>
    /// </summary>
    /// <remarks>
    /// <p>When you create a factory, you can specify whether it is multithreaded or singlethreaded. A singlethreaded factory provides no serialization against any other single threaded instance within Direct2D, so this mechanism provides a very large degree of scaling on the CPU.</p><p>You can also create a multithreaded factory instance. In this case, the factory and all derived objects can be used from any thread, and each render target can be rendered to independently. Direct2D serializes calls to these objects, so a single multithreaded Direct2D instance won't scale as well on the CPU as many single threaded instances. However, the resources can be shared within the multithreaded instance.</p><p>Note the qualifier "On the CPU": GPUs generally take advantage of fine-grained parallelism more so than CPUs. For example, multithreaded calls from the CPU might still end up being serialized when being sent to the GPU; however, a whole bank of pixel and vertex shaders will run in parallel to perform the rendering.</p>
    /// </remarks>
    /// <doc-id>dd368104</doc-id>
    /// <unmanaged>D2D1_FACTORY_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_FACTORY_TYPE</unmanaged-short>
    public enum FactoryType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368104</doc-id>
        /// <unmanaged>D2D1_FACTORY_TYPE_SINGLE_THREADED</unmanaged>
        /// <unmanaged-short>D2D1_FACTORY_TYPE_SINGLE_THREADED</unmanaged-short>
        SingleThreaded = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368104</doc-id>
        /// <unmanaged>D2D1_FACTORY_TYPE_MULTI_THREADED</unmanaged>
        /// <unmanaged-short>D2D1_FACTORY_TYPE_MULTI_THREADED</unmanaged-short>
        MultiThreaded = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Defines capabilities of the underlying Direct3D device which may be queried using <strong>ID2D1EffectContext::CheckFeatureSupport</strong>.</p>
    /// </summary>
    /// <doc-id>hh871443</doc-id>
    /// <unmanaged>D2D1_FEATURE</unmanaged>
    /// <unmanaged-short>D2D1_FEATURE</unmanaged-short>
    public enum Feature : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh871443</doc-id>
        /// <unmanaged>D2D1_FEATURE_DOUBLES</unmanaged>
        /// <unmanaged-short>D2D1_FEATURE_DOUBLES</unmanaged-short>
        Doubles = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh871443</doc-id>
        /// <unmanaged>D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS</unmanaged>
        /// <unmanaged-short>D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS</unmanaged-short>
        D3D10XHardwareOptions = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Describes the minimum DirectX support required for hardware rendering by a render target.</p>
    /// </summary>
    /// <doc-id>dd756628</doc-id>
    /// <unmanaged>D2D1_FEATURE_LEVEL</unmanaged>
    /// <unmanaged-short>D2D1_FEATURE_LEVEL</unmanaged-short>
    public enum FeatureLevel : System.Int32
    {
        /// <summary>
        /// <dd> <p>Direct2D determines whether the video card provides adequate hardware rendering support.</p> </dd>
        /// </summary>
        /// <doc-id>dd756628</doc-id>
        /// <unmanaged>D2D1_FEATURE_LEVEL_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_FEATURE_LEVEL_DEFAULT</unmanaged-short>
        Level_DEFAULT = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The video card must support DirectX 9.</p> </dd>
        /// </summary>
        /// <doc-id>dd756628</doc-id>
        /// <unmanaged>D2D1_FEATURE_LEVEL_9</unmanaged>
        /// <unmanaged-short>D2D1_FEATURE_LEVEL_9</unmanaged-short>
        Level_9 = unchecked ((System.Int32)(37120)),
        /// <summary>
        /// <dd> <p>The video card must support DirectX 10. </p> </dd>
        /// </summary>
        /// <doc-id>dd756628</doc-id>
        /// <unmanaged>D2D1_FEATURE_LEVEL_10</unmanaged>
        /// <unmanaged-short>D2D1_FEATURE_LEVEL_10</unmanaged-short>
        Level_10 = unchecked ((System.Int32)(40960))}

    /// <summary>
    /// <p>Indicates whether a specific <strong><see cref = "SharpDX.Direct2D1.SimplifiedGeometrySink"/></strong> figure is filled or hollow. </p>
    /// </summary>
    /// <doc-id>dd368106</doc-id>
    /// <unmanaged>D2D1_FIGURE_BEGIN</unmanaged>
    /// <unmanaged-short>D2D1_FIGURE_BEGIN</unmanaged-short>
    public enum FigureBegin : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368106</doc-id>
        /// <unmanaged>D2D1_FIGURE_BEGIN_FILLED</unmanaged>
        /// <unmanaged-short>D2D1_FIGURE_BEGIN_FILLED</unmanaged-short>
        Filled = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368106</doc-id>
        /// <unmanaged>D2D1_FIGURE_BEGIN_HOLLOW</unmanaged>
        /// <unmanaged-short>D2D1_FIGURE_BEGIN_HOLLOW</unmanaged-short>
        Hollow = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Indicates whether a specific  <strong><see cref = "SharpDX.Direct2D1.SimplifiedGeometrySink"/></strong> figure is open or closed. </p>
    /// </summary>
    /// <doc-id>dd368108</doc-id>
    /// <unmanaged>D2D1_FIGURE_END</unmanaged>
    /// <unmanaged-short>D2D1_FIGURE_END</unmanaged-short>
    public enum FigureEnd : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368108</doc-id>
        /// <unmanaged>D2D1_FIGURE_END_OPEN</unmanaged>
        /// <unmanaged-short>D2D1_FIGURE_END_OPEN</unmanaged-short>
        Open = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368108</doc-id>
        /// <unmanaged>D2D1_FIGURE_END_CLOSED</unmanaged>
        /// <unmanaged-short>D2D1_FIGURE_END_CLOSED</unmanaged-short>
        Closed = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies how the intersecting areas of geometries or figures are combined to form the area of the composite geometry. </p>
    /// </summary>
    /// <remarks>
    /// <p>Use the <strong><see cref = "SharpDX.Direct2D1.FillMode"/></strong> enumeration when creating an <strong><see cref = "SharpDX.Direct2D1.GeometryGroup"/></strong> with the <strong>CreateGeometryGroup</strong> method, or when modifying the fill mode of an <strong><see cref = "SharpDX.Direct2D1.SimplifiedGeometrySink"/></strong> with the <strong>ID2D1SimplifiedGeometrySink::SetFillMode</strong> method.</p><p>Direct2D fills the interior of a path by using one of the two fill modes specified by this enumeration: <strong>D2D1_FILL_MODE_ALTERNATE</strong> (alternate) or <strong>D2D1_FILL_MODE_WINDING</strong> (winding). Because the modes determine how to fill the interior of a closed shape, all shapes are treated as closed when they are filled.  If there is a gap in a segment in a shape, draw an imaginary line to close it. </p><p> To see the difference between the winding and alternate fill modes, assume that you have four circles with the same center and a different radius, as shown in the following illustration. The first one has the radius of 25, the second 50, the third 75, and the fourth 100.</p><p>The following  illustration shows the shape filled by using the alternate fill mode. Notice that the center and third ring are not filled. This is because a ray drawn from any point in either of those two rings passes through an even number of segments. </p><p>The following illustration explains this process. </p><p>The following illustration shows how the same shape is filled when the winding fill mode is specified. </p><p>Notice that all the rings are filled. This is because all the segments run in the same direction, so a ray drawn from any point will cross one or more segments, and the sum of the crossings will not equal zero. </p><p>The following illustration explains this process. The red arrows represent the direction in which the segments are drawn and the black arrow represents an arbitrary ray that runs from a point in the innermost ring. Starting with a value of zero, for each segment that the ray crosses, a value of one is added for every clockwise intersection. All points lie in the fill region in this illustration, because the count does not equal zero. </p>
    /// </remarks>
    /// <doc-id>dd368110</doc-id>
    /// <unmanaged>D2D1_FILL_MODE</unmanaged>
    /// <unmanaged-short>D2D1_FILL_MODE</unmanaged-short>
    public enum FillMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Determines whether a point is in the fill region by drawing a ray from that point to infinity in any direction, and then counting the number of path segments within the given shape that the ray crosses. If this number is odd, the point is in the fill region; if even, the point is outside the fill region.  </p> </dd>
        /// </summary>
        /// <doc-id>dd368110</doc-id>
        /// <unmanaged>D2D1_FILL_MODE_ALTERNATE</unmanaged>
        /// <unmanaged-short>D2D1_FILL_MODE_ALTERNATE</unmanaged-short>
        Alternate = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Determines whether a point is in the fill region of the path by drawing a ray from that point to infinity in any direction, and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left,  as long as left and right are seen from the perspective of the ray. After counting the crossings, if the result is zero, then the point is outside the path. Otherwise, it is inside the path.  </p> </dd>
        /// </summary>
        /// <doc-id>dd368110</doc-id>
        /// <unmanaged>D2D1_FILL_MODE_WINDING</unmanaged>
        /// <unmanaged-short>D2D1_FILL_MODE_WINDING</unmanaged-short>
        Winding = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Represents filtering modes that a transform may select to use on input textures.</p>
    /// </summary>
    /// <remarks>
    /// <p>This enumeration has the same numeric values as <strong><see cref = "SharpDX.Direct3D11.Filter"/></strong>.</p>
    /// </remarks>
    /// <doc-id>hh404306</doc-id>
    /// <unmanaged>D2D1_FILTER</unmanaged>
    /// <unmanaged-short>D2D1_FILTER</unmanaged-short>
    public enum Filter : System.Int32
    {
        /// <summary>
        /// <dd> <p>Use point sampling for minification, magnification, and mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>hh404306</doc-id>
        /// <unmanaged>D2D1_FILTER_MIN_MAG_MIP_POINT</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_MAG_MIP_POINT</unmanaged-short>
        MinimumMagMipPoint = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Use point sampling for minification and magnification; use linear interpolation for mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>hh404306</doc-id>
        /// <unmanaged>D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR</unmanaged-short>
        MinimumMagPointMipLinear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>hh404306</doc-id>
        /// <unmanaged>D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged-short>
        MinimumPointMagLinearMipPoint = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Use point sampling for minification; use linear interpolation for magnification and mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>hh404306</doc-id>
        /// <unmanaged>D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR</unmanaged-short>
        MinimumPointMagMipLinear = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>Use linear interpolation for minification; use point sampling for magnification and mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>hh404306</doc-id>
        /// <unmanaged>D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT</unmanaged-short>
        MinimumLinearMagMipPoint = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p>Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>hh404306</doc-id>
        /// <unmanaged>D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged-short>
        MinimumLinearMagPointMipLinear = unchecked ((System.Int32)(17)),
        /// <summary>
        /// <dd> <p>Use linear interpolation for minification and magnification; use point sampling for mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>hh404306</doc-id>
        /// <unmanaged>D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT</unmanaged-short>
        MinimumMagLinearMipPoint = unchecked ((System.Int32)(20)),
        /// <summary>
        /// <dd> <p>Use linear interpolation for minification, magnification, and mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>hh404306</doc-id>
        /// <unmanaged>D2D1_FILTER_MIN_MAG_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_MAG_MIP_LINEAR</unmanaged-short>
        MinimumMagMipLinear = unchecked ((System.Int32)(21)),
        /// <summary>
        /// <dd> <p>Use anisotropic interpolation for minification, magnification, and mip-level sampling.</p> </dd>
        /// </summary>
        /// <doc-id>hh404306</doc-id>
        /// <unmanaged>D2D1_FILTER_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(85))}

    /// <summary>
    /// <p> Identifiers for properties of the Flood effect. </p>
    /// </summary>
    /// <doc-id>dn934245</doc-id>
    /// <unmanaged>D2D1_FLOOD_PROP</unmanaged>
    /// <unmanaged-short>D2D1_FLOOD_PROP</unmanaged-short>
    public enum FloodProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934245</doc-id>
        /// <unmanaged>D2D1_FLOOD_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_FLOOD_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Specifies which gamma is used for interpolation.</p>
    /// </summary>
    /// <remarks>
    /// <p>Interpolating in a linear gamma space (<strong>D2D1_GAMMA_1_0</strong>) can avoid changes in perceived brightness caused by the effect of gamma correction in spaces where the gamma is not 1.0, such as the default sRGB color space, where the gamma is 2.2. For an example of the differences between these two blending modes, consider the following illustration, which shows two gradients, each of which blends from red to blue to green:</p><p></p><p>The first gradient is interpolated linearly in the space of the render target (sRGB in this case), and one can see the dark bands between each color. The second gradient uses a gamma-correct linear interpolation, and thus does not exhibit the same variations in brightness.</p>
    /// </remarks>
    /// <doc-id>dd368113</doc-id>
    /// <unmanaged>D2D1_GAMMA</unmanaged>
    /// <unmanaged-short>D2D1_GAMMA</unmanaged-short>
    public enum Gamma : System.Int32
    {
        /// <summary>
        /// <dd> <p>Interpolation is performed in the standard RGB (sRGB) gamma.</p> </dd>
        /// </summary>
        /// <doc-id>dd368113</doc-id>
        /// <unmanaged>D2D1_GAMMA_2_2</unmanaged>
        /// <unmanaged-short>D2D1_GAMMA_2_2</unmanaged-short>
        StandardRgb = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Interpolation is performed in the linear-gamma color space.</p> </dd>
        /// </summary>
        /// <doc-id>dd368113</doc-id>
        /// <unmanaged>D2D1_GAMMA_1_0</unmanaged>
        /// <unmanaged-short>D2D1_GAMMA_1_0</unmanaged-short>
        Linear = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies which gamma is used for interpolation.</p>
    /// </summary>
    /// <remarks>
    /// <p>Interpolating in a linear gamma space (<strong>D2D1_GAMMA_1_0</strong>) can avoid changes in perceived brightness caused by the effect of gamma correction in spaces where the gamma is not 1.0, such as the default sRGB color space, where the gamma is 2.2. For an example of the differences between these two blending modes, consider the following illustration, which shows two gradients, each of which blends from red to blue to green:</p><p></p><p>The first gradient is interpolated linearly in the space of the render target (sRGB in this case), and one can see the dark bands between each color. The second gradient uses a gamma-correct linear interpolation, and thus does not exhibit the same variations in brightness.</p>
    /// </remarks>
    /// <doc-id>dd368113</doc-id>
    /// <unmanaged>D2D1_GAMMA1</unmanaged>
    /// <unmanaged-short>D2D1_GAMMA1</unmanaged-short>
    public enum Gamma1 : System.Int32
    {
        /// <summary>
        /// <dd> <p>Interpolation is performed in the standard RGB (sRGB) gamma.</p> </dd>
        /// </summary>
        /// <doc-id>dd368113</doc-id>
        /// <unmanaged>D2D1_GAMMA1_G22</unmanaged>
        /// <unmanaged-short>D2D1_GAMMA1_G22</unmanaged-short>
        G22 = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Interpolation is performed in the linear-gamma color space.</p> </dd>
        /// </summary>
        /// <doc-id>dd368113</doc-id>
        /// <unmanaged>D2D1_GAMMA1_G10</unmanaged>
        /// <unmanaged-short>D2D1_GAMMA1_G10</unmanaged-short>
        G10 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368113</doc-id>
        /// <unmanaged>D2D1_GAMMA1_G2084</unmanaged>
        /// <unmanaged-short>D2D1_GAMMA1_G2084</unmanaged-short>
        G2084 = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p> Identifiers for properties of the Gamma transfer effect. </p>
    /// </summary>
    /// <doc-id>dn934246</doc-id>
    /// <unmanaged>D2D1_GAMMATRANSFER_PROP</unmanaged>
    /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP</unmanaged-short>
    public enum GammaTransferProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE</unmanaged-short>
        RedAmplitude = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_EXPONENT</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_RED_EXPONENT</unmanaged-short>
        RedExponent = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_RED_OFFSET</unmanaged-short>
        RedOffset = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_RED_DISABLE</unmanaged-short>
        RedDisable = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE</unmanaged-short>
        GreenAmplitude = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT</unmanaged-short>
        GreenExponent = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET</unmanaged-short>
        GreenOffset = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE</unmanaged-short>
        GreenDisable = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE</unmanaged-short>
        BlueAmplitude = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT</unmanaged-short>
        BlueExponent = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET</unmanaged-short>
        BlueOffset = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE</unmanaged-short>
        BlueDisable = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE</unmanaged-short>
        AlphaAmplitude = unchecked ((System.Int32)(12)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT</unmanaged-short>
        AlphaExponent = unchecked ((System.Int32)(13)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET</unmanaged-short>
        AlphaOffset = unchecked ((System.Int32)(14)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE</unmanaged-short>
        AlphaDisable = unchecked ((System.Int32)(15)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934246</doc-id>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(16))}

    /// <summary>
    /// <p> The optimization mode for the Gaussian blur effect. </p>
    /// </summary>
    /// <doc-id>dn934247</doc-id>
    /// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION</unmanaged>
    /// <unmanaged-short>D2D1_GAUSSIANBLUR_OPTIMIZATION</unmanaged-short>
    public enum GaussianBlurOptimization : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934247</doc-id>
        /// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED</unmanaged>
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED</unmanaged-short>
        Speed = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934247</doc-id>
        /// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED</unmanaged>
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED</unmanaged-short>
        Balanced = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934247</doc-id>
        /// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY</unmanaged>
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY</unmanaged-short>
        Quality = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p> Identifiers for properties of the Gaussian blur effect. </p>
    /// </summary>
    /// <doc-id>dn934248</doc-id>
    /// <unmanaged>D2D1_GAUSSIANBLUR_PROP</unmanaged>
    /// <unmanaged-short>D2D1_GAUSSIANBLUR_PROP</unmanaged-short>
    public enum GaussianBlurProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934248</doc-id>
        /// <unmanaged>D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION</unmanaged>
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION</unmanaged-short>
        StandardDeviation = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934248</doc-id>
        /// <unmanaged>D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION</unmanaged>
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION</unmanaged-short>
        Optimization = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934248</doc-id>
        /// <unmanaged>D2D1_GAUSSIANBLUR_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Describes how one geometry object is spatially related to another geometry object. </p>
    /// </summary>
    /// <doc-id>dd368115</doc-id>
    /// <unmanaged>D2D1_GEOMETRY_RELATION</unmanaged>
    /// <unmanaged-short>D2D1_GEOMETRY_RELATION</unmanaged-short>
    public enum GeometryRelation : System.Int32
    {
        /// <summary>
        /// <dd> <p>The relationship between the two geometries cannot be determined. This value is never returned by any D2D method.  </p> </dd>
        /// </summary>
        /// <doc-id>dd368115</doc-id>
        /// <unmanaged>D2D1_GEOMETRY_RELATION_UNKNOWN</unmanaged>
        /// <unmanaged-short>D2D1_GEOMETRY_RELATION_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The two geometries  do not intersect at all.</p> </dd>
        /// </summary>
        /// <doc-id>dd368115</doc-id>
        /// <unmanaged>D2D1_GEOMETRY_RELATION_DISJOINT</unmanaged>
        /// <unmanaged-short>D2D1_GEOMETRY_RELATION_DISJOINT</unmanaged-short>
        Disjoint = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The instance geometry is entirely contained by  the passed-in geometry.</p> </dd>
        /// </summary>
        /// <doc-id>dd368115</doc-id>
        /// <unmanaged>D2D1_GEOMETRY_RELATION_IS_CONTAINED</unmanaged>
        /// <unmanaged-short>D2D1_GEOMETRY_RELATION_IS_CONTAINED</unmanaged-short>
        IsContained = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The instance geometry entirely contains the passed-in geometry.</p> </dd>
        /// </summary>
        /// <doc-id>dd368115</doc-id>
        /// <unmanaged>D2D1_GEOMETRY_RELATION_CONTAINS</unmanaged>
        /// <unmanaged-short>D2D1_GEOMETRY_RELATION_CONTAINS</unmanaged-short>
        Contains = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>The two geometries overlap but neither completely contains the other. </p> </dd>
        /// </summary>
        /// <doc-id>dd368115</doc-id>
        /// <unmanaged>D2D1_GEOMETRY_RELATION_OVERLAP</unmanaged>
        /// <unmanaged-short>D2D1_GEOMETRY_RELATION_OVERLAP</unmanaged-short>
        Overlap = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p>Specifies how a geometry is simplified to an <strong><see cref = "SharpDX.Direct2D1.SimplifiedGeometrySink"/></strong>.</p>
    /// </summary>
    /// <doc-id>dd368117</doc-id>
    /// <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION</unmanaged>
    /// <unmanaged-short>D2D1_GEOMETRY_SIMPLIFICATION_OPTION</unmanaged-short>
    public enum GeometrySimplificationOption : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368117</doc-id>
        /// <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES</unmanaged>
        /// <unmanaged-short>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES</unmanaged-short>
        CubicsAndLines = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368117</doc-id>
        /// <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES</unmanaged>
        /// <unmanaged-short>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES</unmanaged-short>
        Lines = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Specifies which formats are supported in the font, either at a font-wide level or per glyph.</p>
    /// </summary>
    /// <doc-id>mt725308</doc-id>
    /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS</unmanaged>
    /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS</unmanaged-short>
    public enum GlyphImageFormatS : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates no data is available for this glyph.</p> </dd>
        /// </summary>
        /// <doc-id>mt725308</doc-id>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_NONE</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The glyph has TrueType outlines.</p> </dd>
        /// </summary>
        /// <doc-id>mt725308</doc-id>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_TRUETYPE</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_TRUETYPE</unmanaged-short>
        Truetype = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The glyph has CFF outlines.</p> </dd>
        /// </summary>
        /// <doc-id>mt725308</doc-id>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_CFF</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_CFF</unmanaged-short>
        Cff = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The glyph has multilayered COLR data.</p> </dd>
        /// </summary>
        /// <doc-id>mt725308</doc-id>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_COLR</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_COLR</unmanaged-short>
        Colr = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The glyph has SVG outlines as standard XML.  Fonts may store the content gzip'd rather than plain text, indicated by the first two bytes as gzip header {0x1F 0x8B}.</p> </dd>
        /// </summary>
        /// <doc-id>mt725308</doc-id>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_SVG</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_SVG</unmanaged-short>
        Svg = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>The glyph has PNG image data, with standard PNG IHDR.</p> </dd>
        /// </summary>
        /// <doc-id>mt725308</doc-id>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_PNG</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_PNG</unmanaged-short>
        Png = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p>The glyph has JPEG image data, with standard JIFF SOI header.</p> </dd>
        /// </summary>
        /// <doc-id>mt725308</doc-id>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_JPEG</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_JPEG</unmanaged-short>
        Jpeg = unchecked ((System.Int32)(32)),
        /// <summary>
        /// <dd> <p>The glyph has TIFF image data.</p> </dd>
        /// </summary>
        /// <doc-id>mt725308</doc-id>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_TIFF</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_TIFF</unmanaged-short>
        Tiff = unchecked ((System.Int32)(64)),
        /// <summary>
        /// <dd> <p>The glyph has raw 32-bit premultiplied BGRA data.</p> </dd>
        /// </summary>
        /// <doc-id>mt725308</doc-id>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_PREMULTIPLIED_B8G8R8A8</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_PREMULTIPLIED_B8G8R8A8</unmanaged-short>
        PremultipliedB8G8R8A8 = unchecked ((System.Int32)(128))}

    /// <summary>
    /// <p>Values for the <strong>D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA</strong> property  of the Highlights and Shadows effect.</p>
    /// </summary>
    /// <doc-id>dn890727</doc-id>
    /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA</unmanaged>
    /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA</unmanaged-short>
    public enum HighlightSandShadowsInputGamma : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890727</doc-id>
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890727</doc-id>
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB</unmanaged>
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB</unmanaged-short>
        SRgb = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Identifiers for properties of the Highlights and Shadows effect.</p>
    /// </summary>
    /// <doc-id>dn890728</doc-id>
    /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP</unmanaged>
    /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP</unmanaged-short>
    public enum HighlightSandShadowsProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890728</doc-id>
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS</unmanaged>
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS</unmanaged-short>
        Highlights = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890728</doc-id>
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS</unmanaged>
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS</unmanaged-short>
        Shadows = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890728</doc-id>
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY</unmanaged>
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY</unmanaged-short>
        Clarity = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890728</doc-id>
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA</unmanaged>
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA</unmanaged-short>
        InputGamma = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890728</doc-id>
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS</unmanaged>
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS</unmanaged-short>
        MaskBlurRadius = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p> Identifiers for properties of the Histogram effect. </p>
    /// </summary>
    /// <doc-id>dn934249</doc-id>
    /// <unmanaged>D2D1_HISTOGRAM_PROP</unmanaged>
    /// <unmanaged-short>D2D1_HISTOGRAM_PROP</unmanaged-short>
    public enum HistogramProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934249</doc-id>
        /// <unmanaged>D2D1_HISTOGRAM_PROP_NUM_BINS</unmanaged>
        /// <unmanaged-short>D2D1_HISTOGRAM_PROP_NUM_BINS</unmanaged-short>
        NumBins = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934249</doc-id>
        /// <unmanaged>D2D1_HISTOGRAM_PROP_CHANNEL_SELECT</unmanaged>
        /// <unmanaged-short>D2D1_HISTOGRAM_PROP_CHANNEL_SELECT</unmanaged-short>
        ChannelSelect = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934249</doc-id>
        /// <unmanaged>D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT</unmanaged-short>
        HistogramOutput = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Identifiers for properties of the Hue rotate effect.</p>
    /// </summary>
    /// <doc-id>dn934250</doc-id>
    /// <unmanaged>D2D1_HUEROTATION_PROP</unmanaged>
    /// <unmanaged-short>D2D1_HUEROTATION_PROP</unmanaged-short>
    public enum HueRotationProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934250</doc-id>
        /// <unmanaged>D2D1_HUEROTATION_PROP_ANGLE</unmanaged>
        /// <unmanaged-short>D2D1_HUEROTATION_PROP_ANGLE</unmanaged-short>
        Angle = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Values for the <strong>D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE</strong> property of the Hue to RGB effect.</p>
    /// </summary>
    /// <doc-id>dn890729</doc-id>
    /// <unmanaged>D2D1_HUETORGB_INPUT_COLOR_SPACE</unmanaged>
    /// <unmanaged-short>D2D1_HUETORGB_INPUT_COLOR_SPACE</unmanaged-short>
    public enum HueToRgbInputColorSpace : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890729</doc-id>
        /// <unmanaged>D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE</unmanaged>
        /// <unmanaged-short>D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE</unmanaged-short>
        HueSaturationValue = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890729</doc-id>
        /// <unmanaged>D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS</unmanaged>
        /// <unmanaged-short>D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS</unmanaged-short>
        HueSaturationLightness = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Identifiers for properties of the Hue to RGB effect.</p>
    /// </summary>
    /// <doc-id>dn890730</doc-id>
    /// <unmanaged>D2D1_HUETORGB_PROP</unmanaged>
    /// <unmanaged-short>D2D1_HUETORGB_PROP</unmanaged-short>
    public enum HueToRgbProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890730</doc-id>
        /// <unmanaged>D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE</unmanaged>
        /// <unmanaged-short>D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE</unmanaged-short>
        InputColorSpace = unchecked ((System.Int32)(0))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Option flags controlling primary conversion performed by <strong>CreateImageSourceFromDxgi</strong>, if any.</p>
    /// </summary>
    /// <doc-id>dn890733</doc-id>
    /// <unmanaged>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS</unmanaged-short>
    public enum ImageSourceFromDxgiOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890733</doc-id>
        /// <unmanaged>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890733</doc-id>
        /// <unmanaged>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION</unmanaged>
        /// <unmanaged-short>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION</unmanaged-short>
        LowQualityPrimaryConversion = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Controls option flags for a new <see cref = "SharpDX.Direct2D1.ImageSource"/> when it is created.</p>
    /// </summary>
    /// <remarks>
    /// <p> ? </p><p>D2D1_IMAGE_SOURCE_CREATION_OPTIONS_RELEASE_SOURCE causes the image source to not retain a reference to the source object used to create it.   It can decrease the quality and efficiency of printing.</p>
    /// </remarks>
    /// <doc-id>dn890734</doc-id>
    /// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_IMAGE_SOURCE_LOADING_OPTIONS</unmanaged-short>
    public enum ImageSourceLoadingOptions : System.Int32
    {
        /// <summary>
        /// <dd> <p>No options are used.</p> </dd>
        /// </summary>
        /// <doc-id>dn890734</doc-id>
        /// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Indicates the image source should release its reference to the WIC bitmap source after it has initialized.  By default, the image source retains a reference to the WIC bitmap source for the lifetime of the object to enable quality and speed optimizations for printing.  This option disables that optimization.
        /// </p> </dd>
        /// </summary>
        /// <doc-id>dn890734</doc-id>
        /// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE</unmanaged>
        /// <unmanaged-short>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE</unmanaged-short>
        ReleaseSource = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Indicates the image source should only populate subregions of the image cache on-demand. You can control this behavior using  the <strong>EnsureCached</strong> and <strong>TrimCache</strong> methods.  This options provides the ability to improve memory usage by only keeping needed portions of the image in memory.  This option requires that the image source has a reference to the WIC bitmap source, and is incompatible with D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE.</p> </dd>
        /// </summary>
        /// <doc-id>dn890734</doc-id>
        /// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND</unmanaged>
        /// <unmanaged-short>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND</unmanaged-short>
        CacheOnDemand = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p> Specifies the appearance of the ink nib (pen tip) as part of an <strong><see cref = "SharpDX.Direct2D1.InkStyleProperties"/></strong> structure. </p>
    /// </summary>
    /// <doc-id>dn890735</doc-id>
    /// <unmanaged>D2D1_INK_NIB_SHAPE</unmanaged>
    /// <unmanaged-short>D2D1_INK_NIB_SHAPE</unmanaged-short>
    public enum InkNibShape : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890735</doc-id>
        /// <unmanaged>D2D1_INK_NIB_SHAPE_ROUND</unmanaged>
        /// <unmanaged-short>D2D1_INK_NIB_SHAPE_ROUND</unmanaged-short>
        Round = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890735</doc-id>
        /// <unmanaged>D2D1_INK_NIB_SHAPE_SQUARE</unmanaged>
        /// <unmanaged-short>D2D1_INK_NIB_SHAPE_SQUARE</unmanaged-short>
        Square = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>This is used to specify the quality of image scaling with  <strong>ID2D1DeviceContext::DrawImage</strong> and with the 2D affine transform effect. </p>
    /// </summary>
    /// <doc-id>hh447004</doc-id>
    /// <unmanaged>D2D1_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_INTERPOLATION_MODE</unmanaged-short>
    public enum InterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447004</doc-id>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447004</doc-id>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447004</doc-id>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447004</doc-id>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447004</doc-id>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447004</doc-id>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_ENUM_0</unmanaged>
    /// <unmanaged-short>D2D1_ENUM_0</unmanaged-short>
    public enum InterpolationModeDefinition : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_FANT</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_FANT</unmanaged-short>
        Fant = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR</unmanaged-short>
        MipmapLinear = unchecked ((System.Int32)(7))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies options that can be applied when a layer resource is applied to create a layer. </p><strong>Note</strong>??Starting in Windows?8, the <strong>D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE</strong> option is no longer supported.  See <strong><see cref = "SharpDX.Direct2D1.LayerOptions1"/></strong> for Windows?8 layer options.?
    /// </summary>
    /// <remarks>
    /// <p>ClearType antialiasing must use the current contents of the render target to blend properly. When a pushed layer requests initializing for ClearType, Direct2D copies the current contents of the render target into the layer so that ClearType antialiasing can be performed. Rendering ClearType text into a transparent layer does not produce the desired results.</p><p>A small performance hit from re-copying content occurs when <strong>ID2D1RenderTarget::Clear</strong> is called.</p>
    /// </remarks>
    /// <doc-id>dd368124</doc-id>
    /// <unmanaged>D2D1_LAYER_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_LAYER_OPTIONS</unmanaged-short>
    public enum LayerOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368124</doc-id>
        /// <unmanaged>D2D1_LAYER_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_LAYER_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368124</doc-id>
        /// <unmanaged>D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE</unmanaged>
        /// <unmanaged-short>D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE</unmanaged-short>
        InitializeForCleartype = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies how the layer contents should be prepared.
    /// </p>
    /// </summary>
    /// <doc-id>hh997712</doc-id>
    /// <unmanaged>D2D1_LAYER_OPTIONS1</unmanaged>
    /// <unmanaged-short>D2D1_LAYER_OPTIONS1</unmanaged-short>
    public enum LayerOptions1 : System.Int32
    {
        /// <summary>
        /// <dd> <p>Default layer behavior. A premultiplied layer target is pushed and its contents are cleared to transparent black. 
        /// </p> </dd>
        /// </summary>
        /// <doc-id>hh997712</doc-id>
        /// <unmanaged>D2D1_LAYER_OPTIONS1_NONE</unmanaged>
        /// <unmanaged-short>D2D1_LAYER_OPTIONS1_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The layer is not cleared to transparent black.</p> </dd>
        /// </summary>
        /// <doc-id>hh997712</doc-id>
        /// <unmanaged>D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND</unmanaged>
        /// <unmanaged-short>D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND</unmanaged-short>
        InitializeFromBackground = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> The layer is always created as ignore alpha. All content rendered into the layer will be treated as opaque.</p> </dd>
        /// </summary>
        /// <doc-id>hh997712</doc-id>
        /// <unmanaged>D2D1_LAYER_OPTIONS1_IGNORE_ALPHA</unmanaged>
        /// <unmanaged-short>D2D1_LAYER_OPTIONS1_IGNORE_ALPHA</unmanaged-short>
        IgnoreAlpha = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Identifiers for properties of the Linear transfer effect.</p>
    /// </summary>
    /// <doc-id>dn934251</doc-id>
    /// <unmanaged>D2D1_LINEARTRANSFER_PROP</unmanaged>
    /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP</unmanaged-short>
    public enum LinearTransferProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934251</doc-id>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT</unmanaged-short>
        RedYIntercept = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934251</doc-id>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_RED_SLOPE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_RED_SLOPE</unmanaged-short>
        RedSlope = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934251</doc-id>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_RED_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_RED_DISABLE</unmanaged-short>
        RedDisable = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934251</doc-id>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT</unmanaged-short>
        GreenYIntercept = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934251</doc-id>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE</unmanaged-short>
        GreenSlope = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934251</doc-id>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE</unmanaged-short>
        GreenDisable = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934251</doc-id>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT</unmanaged-short>
        BlueYIntercept = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934251</doc-id>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE</unmanaged-short>
        BlueSlope = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934251</doc-id>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE</unmanaged-short>
        BlueDisable = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934251</doc-id>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT</unmanaged-short>
        AlphaYIntercept = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934251</doc-id>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE</unmanaged-short>
        AlphaSlope = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934251</doc-id>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE</unmanaged-short>
        AlphaDisable = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934251</doc-id>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(12))}

    /// <summary>
    /// <p>Describes the shape that joins two lines or segments.  </p>
    /// </summary>
    /// <remarks>
    /// <p> A miter limit affects how sharp miter joins are allowed to be. If the line join style is <strong>D2D1_LINE_JOIN_MITER_OR_BEVEL</strong>, then the join will be mitered with regular angular vertices if it doesn't extend beyond the miter limit; otherwise, the line join will be beveled.</p><p>The following illustration shows  different line join settings for the same stroked path geometry.   </p><p></p>
    /// </remarks>
    /// <doc-id>dd368130</doc-id>
    /// <unmanaged>D2D1_LINE_JOIN</unmanaged>
    /// <unmanaged-short>D2D1_LINE_JOIN</unmanaged-short>
    public enum LineJoin : System.Int32
    {
        /// <summary>
        /// <dd> <p>Regular angular vertices. </p> </dd>
        /// </summary>
        /// <doc-id>dd368130</doc-id>
        /// <unmanaged>D2D1_LINE_JOIN_MITER</unmanaged>
        /// <unmanaged-short>D2D1_LINE_JOIN_MITER</unmanaged-short>
        Miter = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Beveled vertices.   </p> </dd>
        /// </summary>
        /// <doc-id>dd368130</doc-id>
        /// <unmanaged>D2D1_LINE_JOIN_BEVEL</unmanaged>
        /// <unmanaged-short>D2D1_LINE_JOIN_BEVEL</unmanaged-short>
        Bevel = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Rounded vertices. </p> </dd>
        /// </summary>
        /// <doc-id>dd368130</doc-id>
        /// <unmanaged>D2D1_LINE_JOIN_ROUND</unmanaged>
        /// <unmanaged-short>D2D1_LINE_JOIN_ROUND</unmanaged-short>
        Round = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Regular angular vertices unless the join would extend beyond the miter limit; otherwise, beveled vertices.  </p> </dd>
        /// </summary>
        /// <doc-id>dd368130</doc-id>
        /// <unmanaged>D2D1_LINE_JOIN_MITER_OR_BEVEL</unmanaged>
        /// <unmanaged-short>D2D1_LINE_JOIN_MITER_OR_BEVEL</unmanaged-short>
        MiterOrBevel = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Identifiers for the properties of the 3D Lookup Table effect.</p>
    /// </summary>
    /// <doc-id>dn890738</doc-id>
    /// <unmanaged>D2D1_LOOKUPTABLE3D_PROP</unmanaged>
    /// <unmanaged-short>D2D1_LOOKUPTABLE3D_PROP</unmanaged-short>
    public enum LookupTable3DProperty : System.Int32
    {
        /// <summary>
        /// <dd> <p>The D2D1_LOOKUPTABLE3D_PROP_LUT property is a reference to an <strong><see cref = "SharpDX.Direct2D1.LookupTable3D"/></strong> object.  The default value is null.</p> </dd>
        /// </summary>
        /// <doc-id>dn890738</doc-id>
        /// <unmanaged>D2D1_LOOKUPTABLE3D_PROP_LUT</unmanaged>
        /// <unmanaged-short>D2D1_LOOKUPTABLE3D_PROP_LUT</unmanaged-short>
        Lut = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE property is a <strong><see cref = "SharpDX.Direct2D1.AlphaMode"/></strong> value indicating the alpha mode of the input file. See the About Alpha Modes section of the Supported Pixel Formats and Alpha Modes topic for additional information.</p> </dd>
        /// </summary>
        /// <doc-id>dn890738</doc-id>
        /// <unmanaged>D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE</unmanaged>
        /// <unmanaged-short>D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE</unmanaged-short>
        AlphaMode = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies how the memory to be mapped from the corresponding <strong><see cref = "SharpDX.Direct2D1.Bitmap1"/></strong> should be treated.</p>
    /// </summary>
    /// <remarks>
    /// <p>The <strong>D2D1_MAP_OPTIONS_READ</strong> option can be used only if the bitmap was created with the <strong>D2D1_BITMAP_OPTIONS_CPU_READ</strong> flag.</p><p>These flags will be not be able to be used on bitmaps created by the <strong><see cref = "SharpDX.Direct2D1.DeviceContext"/></strong>. However, the <see cref = "SharpDX.Direct2D1.SourceTransform"/> will receive bitmaps for which these flags are valid.</p><p><strong>D2D1_MAP_OPTIONS_DISCARD</strong> can only be used with <strong>D2D1_MAP_OPTIONS_WRITE</strong>.  Both of these options are only available through the effect author API, not through the Direct2D rendering API.
    /// </p>
    /// </remarks>
    /// <doc-id>hh447006</doc-id>
    /// <unmanaged>D2D1_MAP_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_MAP_OPTIONS</unmanaged-short>
    public enum MapOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447006</doc-id>
        /// <unmanaged>D2D1_MAP_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_MAP_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447006</doc-id>
        /// <unmanaged>D2D1_MAP_OPTIONS_READ</unmanaged>
        /// <unmanaged-short>D2D1_MAP_OPTIONS_READ</unmanaged-short>
        Read = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447006</doc-id>
        /// <unmanaged>D2D1_MAP_OPTIONS_WRITE</unmanaged>
        /// <unmanaged-short>D2D1_MAP_OPTIONS_WRITE</unmanaged-short>
        Write = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447006</doc-id>
        /// <unmanaged>D2D1_MAP_OPTIONS_DISCARD</unmanaged>
        /// <unmanaged-short>D2D1_MAP_OPTIONS_DISCARD</unmanaged-short>
        Discard = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p> Indicates the measuring method used for text layout.</p>
    /// </summary>
    /// <doc-id>dd368133</doc-id>
    /// <unmanaged>DWRITE_MEASURING_MODE</unmanaged>
    /// <unmanaged-short>DWRITE_MEASURING_MODE</unmanaged-short>
    public enum MeasuringMode : System.Int32
    {
        /// <summary>
        /// <dd> <p> Specifies that text is measured using glyph ideal metrics whose values are independent to the current display resolution.</p> </dd>
        /// </summary>
        /// <doc-id>dd368133</doc-id>
        /// <unmanaged>DWRITE_MEASURING_MODE_NATURAL</unmanaged>
        /// <unmanaged-short>DWRITE_MEASURING_MODE_NATURAL</unmanaged-short>
        Natural = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Specifies that text is measured using glyph display-compatible metrics whose values tuned for the current display resolution.</p> </dd>
        /// </summary>
        /// <doc-id>dd368133</doc-id>
        /// <unmanaged>DWRITE_MEASURING_MODE_GDI_CLASSIC</unmanaged>
        /// <unmanaged-short>DWRITE_MEASURING_MODE_GDI_CLASSIC</unmanaged-short>
        GdiClassic = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Specifies that text is measured using the same glyph display metrics as text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY.</p> </dd>
        /// </summary>
        /// <doc-id>dd368133</doc-id>
        /// <unmanaged>DWRITE_MEASURING_MODE_GDI_NATURAL</unmanaged>
        /// <unmanaged-short>DWRITE_MEASURING_MODE_GDI_NATURAL</unmanaged-short>
        GdiNatural = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p> The mode for the Morphology effect. </p>
    /// </summary>
    /// <doc-id>dn934252</doc-id>
    /// <unmanaged>D2D1_MORPHOLOGY_MODE</unmanaged>
    /// <unmanaged-short>D2D1_MORPHOLOGY_MODE</unmanaged-short>
    public enum MorphologyMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934252</doc-id>
        /// <unmanaged>D2D1_MORPHOLOGY_MODE_ERODE</unmanaged>
        /// <unmanaged-short>D2D1_MORPHOLOGY_MODE_ERODE</unmanaged-short>
        Erode = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934252</doc-id>
        /// <unmanaged>D2D1_MORPHOLOGY_MODE_DILATE</unmanaged>
        /// <unmanaged-short>D2D1_MORPHOLOGY_MODE_DILATE</unmanaged-short>
        Dilate = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Identifiers for properties of the Morphology effect. </p>
    /// </summary>
    /// <doc-id>dn934253</doc-id>
    /// <unmanaged>D2D1_MORPHOLOGY_PROP</unmanaged>
    /// <unmanaged-short>D2D1_MORPHOLOGY_PROP</unmanaged-short>
    public enum MorphologyProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934253</doc-id>
        /// <unmanaged>D2D1_MORPHOLOGY_PROP_MODE</unmanaged>
        /// <unmanaged-short>D2D1_MORPHOLOGY_PROP_MODE</unmanaged-short>
        Mode = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934253</doc-id>
        /// <unmanaged>D2D1_MORPHOLOGY_PROP_WIDTH</unmanaged>
        /// <unmanaged-short>D2D1_MORPHOLOGY_PROP_WIDTH</unmanaged-short>
        Width = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934253</doc-id>
        /// <unmanaged>D2D1_MORPHOLOGY_PROP_HEIGHT</unmanaged>
        /// <unmanaged-short>D2D1_MORPHOLOGY_PROP_HEIGHT</unmanaged-short>
        Height = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Describes whether an opacity mask contains graphics or text. Direct2D uses this information to determine which gamma space to use when blending the opacity mask.</p>
    /// </summary>
    /// <doc-id>dd756629</doc-id>
    /// <unmanaged>D2D1_OPACITY_MASK_CONTENT</unmanaged>
    /// <unmanaged-short>D2D1_OPACITY_MASK_CONTENT</unmanaged-short>
    public enum OpacityMaskContent : System.Int32
    {
        /// <summary>
        /// <dd> <p>The opacity mask contains graphics. The opacity mask is blended in the gamma 2.2 color space.</p> </dd>
        /// </summary>
        /// <doc-id>dd756629</doc-id>
        /// <unmanaged>D2D1_OPACITY_MASK_CONTENT_GRAPHICS</unmanaged>
        /// <unmanaged-short>D2D1_OPACITY_MASK_CONTENT_GRAPHICS</unmanaged-short>
        Graphics = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The opacity mask contains non-GDI text. The gamma space used for blending is obtained from the render target's text rendering parameters. (<strong>ID2D1RenderTarget::SetTextRenderingParams</strong>).</p> </dd>
        /// </summary>
        /// <doc-id>dd756629</doc-id>
        /// <unmanaged>D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL</unmanaged>
        /// <unmanaged-short>D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL</unmanaged-short>
        TextNatural = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The opacity mask contains text rendered using the GDI-compatible rendering mode. The opacity mask is blended using the gamma for GDI rendering.</p> </dd>
        /// </summary>
        /// <doc-id>dd756629</doc-id>
        /// <unmanaged>D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE</unmanaged>
        /// <unmanaged-short>D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE</unmanaged-short>
        TextGdiCompatible = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p> Identifiers for properties of the Opacity metadata effect. </p>
    /// </summary>
    /// <doc-id>dn934254</doc-id>
    /// <unmanaged>D2D1_OPACITYMETADATA_PROP</unmanaged>
    /// <unmanaged-short>D2D1_OPACITYMETADATA_PROP</unmanaged-short>
    public enum OpacityMetadataProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934254</doc-id>
        /// <unmanaged>D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT</unmanaged>
        /// <unmanaged-short>D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT</unmanaged-short>
        InputOpaqueRectangle = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>This effect adjusts the opacity of an image by multiplying the alpha channel of the input by the specified opacity value. It has a single input.</p><p>The CLSID for this effect is <see cref = "Opacity"/>.</p>
    /// </summary>
    /// <doc-id>mt745076</doc-id>
    /// <unmanaged>D2D1_OPACITY_PROP</unmanaged>
    /// <unmanaged-short>D2D1_OPACITY_PROP</unmanaged-short>
    public enum OpacityProp : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt745076</doc-id>
        /// <unmanaged>D2D1_OPACITY_PROP_OPACITY</unmanaged>
        /// <unmanaged-short>D2D1_OPACITY_PROP_OPACITY</unmanaged-short>
        Opacity = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Specifies the flip and rotation at which an image appears.</p>
    /// </summary>
    /// <doc-id>dn890739</doc-id>
    /// <unmanaged>D2D1_ORIENTATION</unmanaged>
    /// <unmanaged-short>D2D1_ORIENTATION</unmanaged-short>
    public enum Orientation : System.Int32
    {
        /// <summary>
        /// <dd> <p>The orientation is unchanged.</p> </dd>
        /// </summary>
        /// <doc-id>dn890739</doc-id>
        /// <unmanaged>D2D1_ORIENTATION_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The image is flipped horizontally.</p> </dd>
        /// </summary>
        /// <doc-id>dn890739</doc-id>
        /// <unmanaged>D2D1_ORIENTATION_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_FLIP_HORIZONTAL</unmanaged-short>
        FlipHorizontal = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The image is rotated clockwise 180 degrees.</p> </dd>
        /// </summary>
        /// <doc-id>dn890739</doc-id>
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE180</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE180</unmanaged-short>
        RotateClockwise180 = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>The image is rotated clockwise 180 degrees, then flipped horizontally.</p> </dd>
        /// </summary>
        /// <doc-id>dn890739</doc-id>
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL</unmanaged-short>
        RotateClockwise180FlipHorizontal = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The image is rotated clockwise 90 degrees, then flipped horizontally.</p> </dd>
        /// </summary>
        /// <doc-id>dn890739</doc-id>
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL</unmanaged-short>
        RotateClockwise90FlipHorizontal = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>The image is rotated clockwise 270 degrees.</p> </dd>
        /// </summary>
        /// <doc-id>dn890739</doc-id>
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE270</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE270</unmanaged-short>
        RotateClockwise270 = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>The image is rotated clockwise 270 degrees, then flipped horizontally.</p> </dd>
        /// </summary>
        /// <doc-id>dn890739</doc-id>
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL</unmanaged-short>
        RotateClockwise270FlipHorizontal = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>The image is rotated clockwise 90 degrees.</p> </dd>
        /// </summary>
        /// <doc-id>dn890739</doc-id>
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE90</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE90</unmanaged-short>
        RotateClockwise90 = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p>Specifies how to render gradient mesh edges.</p>
    /// </summary>
    /// <doc-id>dn986881</doc-id>
    /// <unmanaged>D2D1_PATCH_EDGE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_PATCH_EDGE_MODE</unmanaged-short>
    public enum PatchEdgeMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Render this patch edge aliased. Use this value for the internal edges of your gradient mesh.</p> </dd>
        /// </summary>
        /// <doc-id>dn986881</doc-id>
        /// <unmanaged>D2D1_PATCH_EDGE_MODE_ALIASED</unmanaged>
        /// <unmanaged-short>D2D1_PATCH_EDGE_MODE_ALIASED</unmanaged-short>
        Aliased = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Render this patch edge antialiased. Use this value for the external (boundary) edges of your mesh.</p> </dd>
        /// </summary>
        /// <doc-id>dn986881</doc-id>
        /// <unmanaged>D2D1_PATCH_EDGE_MODE_ANTIALIASED</unmanaged>
        /// <unmanaged-short>D2D1_PATCH_EDGE_MODE_ANTIALIASED</unmanaged-short>
        Antialiased = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Render this patch edge aliased and also slightly inflated. Use this for the internal edges of your gradient mesh when there could be t-junctions among patches.  Inflating the internal edges mitigates seams that can appear along those junctions.</p> </dd>
        /// </summary>
        /// <doc-id>dn986881</doc-id>
        /// <unmanaged>D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED</unmanaged>
        /// <unmanaged-short>D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED</unmanaged-short>
        AliasedInflated = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Indicates whether a segment should be stroked and whether the join between this segment and the previous one should be smooth. This enumeration allows a bitwise combination of its member values. </p>
    /// </summary>
    /// <doc-id>dd368136</doc-id>
    /// <unmanaged>D2D1_PATH_SEGMENT</unmanaged>
    /// <unmanaged-short>D2D1_PATH_SEGMENT</unmanaged-short>
    public enum PathSegment : System.Int32
    {
        /// <summary>
        /// <dd> <p>The segment is joined  as specified by the <strong><see cref = "SharpDX.Direct2D1.StrokeStyle"/></strong> interface, and it is stroked. </p> </dd>
        /// </summary>
        /// <doc-id>dd368136</doc-id>
        /// <unmanaged>D2D1_PATH_SEGMENT_NONE</unmanaged>
        /// <unmanaged-short>D2D1_PATH_SEGMENT_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The segment is not stroked.</p> </dd>
        /// </summary>
        /// <doc-id>dd368136</doc-id>
        /// <unmanaged>D2D1_PATH_SEGMENT_FORCE_UNSTROKED</unmanaged>
        /// <unmanaged-short>D2D1_PATH_SEGMENT_FORCE_UNSTROKED</unmanaged-short>
        ForceUnstroked = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The segment is always joined with the one preceding it using a round line join, regardless of which <strong><see cref = "SharpDX.Direct2D1.LineJoin"/></strong>enumeration is specified by the <strong><see cref = "SharpDX.Direct2D1.StrokeStyle"/></strong> interface. If this segment is the first segment and the figure is closed, a round line join is used to connect the closing segment with the first segment. If the figure is not closed, this setting has no effect on the first segment of the figure. If <strong>ID2D1SimplifiedGeometrySink::SetSegmentFlags</strong> is called just before <strong>ID2D1SimplifiedGeometrySink::EndFigure</strong>, the join between the closing segment and the last explicitly specified segment is affected.</p> </dd>
        /// </summary>
        /// <doc-id>dd368136</doc-id>
        /// <unmanaged>D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN</unmanaged>
        /// <unmanaged-short>D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN</unmanaged-short>
        ForceRoundLineJoin = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p> The interpolation mode the 3D perspective transform effect uses on the image. There are 5 scale modes that range in quality and speed. </p>
    /// </summary>
    /// <doc-id>dn934207</doc-id>
    /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE</unmanaged-short>
    public enum PerspectiveTransform3DInteroplationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934207</doc-id>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934207</doc-id>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934207</doc-id>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934207</doc-id>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934207</doc-id>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p> Identifiers for the properties of the 3D perspective transform effect. </p>
    /// </summary>
    /// <doc-id>dn934208</doc-id>
    /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP</unmanaged>
    /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP</unmanaged-short>
    public enum PerspectiveTransform3DProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934208</doc-id>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE</unmanaged-short>
        InterpolationMode = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934208</doc-id>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934208</doc-id>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH</unmanaged-short>
        Depth = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934208</doc-id>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN</unmanaged-short>
        PerspectiveOrigin = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934208</doc-id>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET</unmanaged-short>
        LocalOffset = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934208</doc-id>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET</unmanaged-short>
        GlobalOffset = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934208</doc-id>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN</unmanaged-short>
        RotationOrigin = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934208</doc-id>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION</unmanaged-short>
        Rotation = unchecked ((System.Int32)(7))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Indicates how pixel shader sampling will be restricted. This indicates whether the vertex buffer is large and tends to change infrequently or smaller and changes frequently (typically frame over frame). </p>
    /// </summary>
    /// <remarks>
    /// <p> If the shader specifies <strong>D2D1_PIXEL_OPTIONS_NONE</strong>, it must still correctly implement the region of interest calculations in <strong>ID2D1Transform::MapOutputRectToInputRects</strong> and <strong>ID2D1Transform::MapInputRectsToOutputRect</strong>.</p>
    /// </remarks>
    /// <doc-id>hh404316</doc-id>
    /// <unmanaged>D2D1_PIXEL_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_PIXEL_OPTIONS</unmanaged-short>
    public enum PixelOptions : System.Int32
    {
        /// <summary>
        /// <dd> <p>The pixel shader is not restricted in its sampling.</p> </dd>
        /// </summary>
        /// <doc-id>hh404316</doc-id>
        /// <unmanaged>D2D1_PIXEL_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_PIXEL_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The pixel shader samples inputs only at the same scene coordinate as the output pixel and returns transparent black whenever the input pixels are also transparent black.</p> </dd>
        /// </summary>
        /// <doc-id>hh404316</doc-id>
        /// <unmanaged>D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING</unmanaged>
        /// <unmanaged-short>D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING</unmanaged-short>
        TrivialSampling = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Identifiers for properties of the Point-diffuse lighting effect. </p>
    /// </summary>
    /// <doc-id>dn934255</doc-id>
    /// <unmanaged>D2D1_POINTDIFFUSE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP</unmanaged-short>
    public enum PointDiffuseProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934255</doc-id>
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION</unmanaged-short>
        LightPosition = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934255</doc-id>
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged-short>
        DiffuseConstant = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934255</doc-id>
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE</unmanaged-short>
        SurfaceScale = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934255</doc-id>
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934255</doc-id>
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>
        KernelUnitLength = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934255</doc-id>
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p>The interpolation mode the Point-diffuse lighting effect uses to scale the image to the corresponding kernel unit length. There are six scale modes that range in quality and speed</p>
    /// </summary>
    /// <doc-id>dn934256</doc-id>
    /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE</unmanaged-short>
    public enum PointDiffuseScaleMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934256</doc-id>
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934256</doc-id>
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934256</doc-id>
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934256</doc-id>
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934256</doc-id>
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934256</doc-id>
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p> Identifiers for properties of the Point-specular lighting effect. </p>
    /// </summary>
    /// <doc-id>dn934257</doc-id>
    /// <unmanaged>D2D1_POINTSPECULAR_PROP</unmanaged>
    /// <unmanaged-short>D2D1_POINTSPECULAR_PROP</unmanaged-short>
    public enum PointSpecularProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934257</doc-id>
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_LIGHT_POSITION</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_LIGHT_POSITION</unmanaged-short>
        LightPosition = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934257</doc-id>
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged-short>
        SpecularExponent = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934257</doc-id>
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged-short>
        SpecularConstant = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934257</doc-id>
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_SURFACE_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_SURFACE_SCALE</unmanaged-short>
        SurfaceScale = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934257</doc-id>
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934257</doc-id>
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>
        KernelUnitLength = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934257</doc-id>
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(6))}

    /// <summary>
    /// <p>The interpolation mode the Point-specular lighting effect uses to scale the image to the corresponding kernel unit length.  There are six scale modes that range in quality and speed.</p>
    /// </summary>
    /// <doc-id>dn934258</doc-id>
    /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE</unmanaged-short>
    public enum PointSpecularScaleMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934258</doc-id>
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934258</doc-id>
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934258</doc-id>
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934258</doc-id>
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934258</doc-id>
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934258</doc-id>
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p>Identifiers for properties of the Posterize effect.</p>
    /// </summary>
    /// <doc-id>dn890742</doc-id>
    /// <unmanaged>D2D1_POSTERIZE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_POSTERIZE_PROP</unmanaged-short>
    public enum PosterizeProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890742</doc-id>
        /// <unmanaged>D2D1_POSTERIZE_PROP_RED_VALUE_COUNT</unmanaged>
        /// <unmanaged-short>D2D1_POSTERIZE_PROP_RED_VALUE_COUNT</unmanaged-short>
        RedValueCount = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890742</doc-id>
        /// <unmanaged>D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT</unmanaged>
        /// <unmanaged-short>D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT</unmanaged-short>
        GreenValueCount = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890742</doc-id>
        /// <unmanaged>D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT</unmanaged>
        /// <unmanaged-short>D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT</unmanaged-short>
        BlueValueCount = unchecked ((System.Int32)(2))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Describes how a render target behaves when it presents its content. This enumeration allows a bitwise combination of its member values.</p>
    /// </summary>
    /// <doc-id>dd368144</doc-id>
    /// <unmanaged>D2D1_PRESENT_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_PRESENT_OPTIONS</unmanaged-short>
    public enum PresentOptions : System.Int32
    {
        /// <summary>
        /// <dd> <p>The render target waits until the display refreshes to present and discards the frame upon presenting.</p> </dd>
        /// </summary>
        /// <doc-id>dd368144</doc-id>
        /// <unmanaged>D2D1_PRESENT_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_PRESENT_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The render target does not discard the frame upon presenting.</p> </dd>
        /// </summary>
        /// <doc-id>dd368144</doc-id>
        /// <unmanaged>D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS</unmanaged>
        /// <unmanaged-short>D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS</unmanaged-short>
        RetainContents = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The render target does not wait until the display refreshes to present.</p> </dd>
        /// </summary>
        /// <doc-id>dd368144</doc-id>
        /// <unmanaged>D2D1_PRESENT_OPTIONS_IMMEDIATELY</unmanaged>
        /// <unmanaged-short>D2D1_PRESENT_OPTIONS_IMMEDIATELY</unmanaged-short>
        Immediately = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Used to specify the geometric blend mode for all Direct2D primitives.  </p>
    /// </summary>
    /// <doc-id>hh447008</doc-id>
    /// <unmanaged>D2D1_PRIMITIVE_BLEND</unmanaged>
    /// <unmanaged-short>D2D1_PRIMITIVE_BLEND</unmanaged-short>
    public enum PrimitiveBlend : System.Int32
    {
        /// <summary>
        /// <dd> <p>The standard source-over-destination blend mode.</p> </dd>
        /// </summary>
        /// <doc-id>hh447008</doc-id>
        /// <unmanaged>D2D1_PRIMITIVE_BLEND_SOURCE_OVER</unmanaged>
        /// <unmanaged-short>D2D1_PRIMITIVE_BLEND_SOURCE_OVER</unmanaged-short>
        SourceOver = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The source is copied to the destination; the destination pixels are ignored.</p> </dd>
        /// </summary>
        /// <doc-id>hh447008</doc-id>
        /// <unmanaged>D2D1_PRIMITIVE_BLEND_COPY</unmanaged>
        /// <unmanaged-short>D2D1_PRIMITIVE_BLEND_COPY</unmanaged-short>
        Copy = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The resulting pixel values use the minimum of the source and destination pixel values. Available in Windows?8 and later.</p> </dd>
        /// </summary>
        /// <doc-id>hh447008</doc-id>
        /// <unmanaged>D2D1_PRIMITIVE_BLEND_MIN</unmanaged>
        /// <unmanaged-short>D2D1_PRIMITIVE_BLEND_MIN</unmanaged-short>
        Minimum = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The resulting pixel values are the sum of the source and destination pixel values. Available in Windows?8 and later.</p> </dd>
        /// </summary>
        /// <doc-id>hh447008</doc-id>
        /// <unmanaged>D2D1_PRIMITIVE_BLEND_ADD</unmanaged>
        /// <unmanaged-short>D2D1_PRIMITIVE_BLEND_ADD</unmanaged-short>
        Add = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447008</doc-id>
        /// <unmanaged>D2D1_PRIMITIVE_BLEND_MAX</unmanaged>
        /// <unmanaged-short>D2D1_PRIMITIVE_BLEND_MAX</unmanaged-short>
        Maximum = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p>Defines when font resources should be subset during printing.</p>
    /// </summary>
    /// <doc-id>hh871442</doc-id>
    /// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE</unmanaged>
    /// <unmanaged-short>D2D1_PRINT_FONT_SUBSET_MODE</unmanaged-short>
    public enum PrintFontSubsetMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Uses a heuristic strategy to decide when to subset fonts. </p> <strong>Note</strong>??If the print driver has requested archive-optimized content, then Direct2D will subset fonts once, for the entire document. ? </dd>
        /// </summary>
        /// <doc-id>hh871442</doc-id>
        /// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Subsets and embeds font resources in each page, then discards that font subset after the page is printed out. </p> </dd>
        /// </summary>
        /// <doc-id>hh871442</doc-id>
        /// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE</unmanaged>
        /// <unmanaged-short>D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE</unmanaged-short>
        Eachpage = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Sends out the original font resources without subsetting along with the page that first uses the font, and re-uses the font resources for later pages without resending them.  </p> </dd>
        /// </summary>
        /// <doc-id>hh871442</doc-id>
        /// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE_NONE</unmanaged>
        /// <unmanaged-short>D2D1_PRINT_FONT_SUBSET_MODE_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Specifies the indices of the system properties present on the <strong><see cref = "SharpDX.Direct2D1.Properties"/></strong> interface for an <strong><see cref = "SharpDX.Direct2D1.Effect"/></strong>.</p>
    /// </summary>
    /// <remarks>
    /// <p>Under normal circumstances the minimum and maximum number of inputs to the effect are the same. If the effect supports a variable number of inputs, the <strong>ID2D1Effect::SetNumberOfInputs</strong> method can be used to choose the number that the application will enable.</p>
    /// </remarks>
    /// <doc-id>hh447010</doc-id>
    /// <unmanaged>D2D1_PROPERTY</unmanaged>
    /// <unmanaged-short>D2D1_PROPERTY</unmanaged-short>
    public enum Property : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447010</doc-id>
        /// <unmanaged>D2D1_PROPERTY_CLSID</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_CLSID</unmanaged-short>
        Clsid = unchecked ((System.Int32)(-2147483648)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447010</doc-id>
        /// <unmanaged>D2D1_PROPERTY_DISPLAYNAME</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_DISPLAYNAME</unmanaged-short>
        DisplayName = unchecked ((System.Int32)(-2147483647)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447010</doc-id>
        /// <unmanaged>D2D1_PROPERTY_AUTHOR</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_AUTHOR</unmanaged-short>
        Author = unchecked ((System.Int32)(-2147483646)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447010</doc-id>
        /// <unmanaged>D2D1_PROPERTY_CATEGORY</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_CATEGORY</unmanaged-short>
        Category = unchecked ((System.Int32)(-2147483645)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447010</doc-id>
        /// <unmanaged>D2D1_PROPERTY_DESCRIPTION</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_DESCRIPTION</unmanaged-short>
        Description = unchecked ((System.Int32)(-2147483644)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447010</doc-id>
        /// <unmanaged>D2D1_PROPERTY_INPUTS</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_INPUTS</unmanaged-short>
        Inputs = unchecked ((System.Int32)(-2147483643)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447010</doc-id>
        /// <unmanaged>D2D1_PROPERTY_CACHED</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_CACHED</unmanaged-short>
        Cached = unchecked ((System.Int32)(-2147483642)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447010</doc-id>
        /// <unmanaged>D2D1_PROPERTY_PRECISION</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_PRECISION</unmanaged-short>
        Precision = unchecked ((System.Int32)(-2147483641)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447010</doc-id>
        /// <unmanaged>D2D1_PROPERTY_MIN_INPUTS</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_MIN_INPUTS</unmanaged-short>
        MinimumInputs = unchecked ((System.Int32)(-2147483640)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh447010</doc-id>
        /// <unmanaged>D2D1_PROPERTY_MAX_INPUTS</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_MAX_INPUTS</unmanaged-short>
        MaximumInputs = unchecked ((System.Int32)(-2147483639))}

    /// <summary>
    /// <p>Specifies the types of properties supported by the Direct2D property interface. </p>
    /// </summary>
    /// <doc-id>hh447012</doc-id>
    /// <unmanaged>D2D1_PROPERTY_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_PROPERTY_TYPE</unmanaged-short>
    public enum PropertyType : System.Int32
    {
        /// <summary>
        /// <dd> <p>An unknown property.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_UNKNOWN</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>An arbitrary-length string.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_STRING</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_STRING</unmanaged-short>
        String = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>A 32-bit integer value constrained to be either 0 or 1.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_BOOL</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_BOOL</unmanaged-short>
        Bool = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>An unsigned 32-bit integer.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_UINT32</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_UINT32</unmanaged-short>
        UInt32 = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>A signed 32-bit integer.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_INT32</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_INT32</unmanaged-short>
        Int32 = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>A 32-bit float.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_FLOAT</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_FLOAT</unmanaged-short>
        Float = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>Two 32-bit float values.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_VECTOR2</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_VECTOR2</unmanaged-short>
        Vector2 = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p> Three 32-bit float values.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_VECTOR3</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_VECTOR3</unmanaged-short>
        Vector3 = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>Four 32-bit float values.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_VECTOR4</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_VECTOR4</unmanaged-short>
        Vector4 = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>An arbitrary number of bytes.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_BLOB</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_BLOB</unmanaged-short>
        Blob = unchecked ((System.Int32)(9)),
        /// <summary>
        /// <dd> <p>A returned COM or nano-COM interface. </p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_IUNKNOWN</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_IUNKNOWN</unmanaged-short>
        IUnknown = unchecked ((System.Int32)(10)),
        /// <summary>
        /// <dd> <p>An enumeration. The value should be treated as a <strong>UINT32</strong> with a defined array of fields to specify the bindings to human-readable strings.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_ENUM</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_ENUM</unmanaged-short>
        Enum = unchecked ((System.Int32)(11)),
        /// <summary>
        /// <dd> <p>An enumeration. The value is the count of sub-properties in the array. The set of array elements will be contained in the sub-property.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_ARRAY</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_ARRAY</unmanaged-short>
        Array = unchecked ((System.Int32)(12)),
        /// <summary>
        /// <dd> <p>A CLSID.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_CLSID</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_CLSID</unmanaged-short>
        Clsid = unchecked ((System.Int32)(13)),
        /// <summary>
        /// <dd> <p>A 3x2 matrix of  float values.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_3X2</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_MATRIX_3X2</unmanaged-short>
        Matrix3x2 = unchecked ((System.Int32)(14)),
        /// <summary>
        /// <dd> <p>A 4x2 matrix of  float values.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_4X3</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_MATRIX_4X3</unmanaged-short>
        Matrix4x3 = unchecked ((System.Int32)(15)),
        /// <summary>
        /// <dd> <p>A 4x4 matrix of  float values.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_4X4</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_MATRIX_4X4</unmanaged-short>
        Matrix4x4 = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p>A 5x4 matrix of  float values.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_5X4</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_MATRIX_5X4</unmanaged-short>
        Matrix5x4 = unchecked ((System.Int32)(17)),
        /// <summary>
        /// <dd> <p>A nano-COM color context interface reference.</p> </dd>
        /// </summary>
        /// <doc-id>hh447012</doc-id>
        /// <unmanaged>D2D1_PROPERTY_TYPE_COLOR_CONTEXT</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_COLOR_CONTEXT</unmanaged-short>
        ColorContext = unchecked ((System.Int32)(18))}

    /// <summary>
    /// <p>The rendering priority affects the extent to which Direct2D will throttle its rendering workload.</p>
    /// </summary>
    /// <doc-id>dn280382</doc-id>
    /// <unmanaged>D2D1_RENDERING_PRIORITY</unmanaged>
    /// <unmanaged-short>D2D1_RENDERING_PRIORITY</unmanaged-short>
    public enum RenderingPriority : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn280382</doc-id>
        /// <unmanaged>D2D1_RENDERING_PRIORITY_NORMAL</unmanaged>
        /// <unmanaged-short>D2D1_RENDERING_PRIORITY_NORMAL</unmanaged-short>
        Normal = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn280382</doc-id>
        /// <unmanaged>D2D1_RENDERING_PRIORITY_LOW</unmanaged>
        /// <unmanaged-short>D2D1_RENDERING_PRIORITY_LOW</unmanaged-short>
        Low = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Describes whether a render target uses hardware or software rendering, or if Direct2D should select the rendering mode.</p>
    /// </summary>
    /// <remarks>
    /// <p>Not every render target supports hardware rendering. For more information, see the Render Targets Overview. </p>
    /// </remarks>
    /// <doc-id>dd756630</doc-id>
    /// <unmanaged>D2D1_RENDER_TARGET_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_RENDER_TARGET_TYPE</unmanaged-short>
    public enum RenderTargetType : System.Int32
    {
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering, if available; otherwise, it uses software rendering.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_RENDER_TARGET_TYPE_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_RENDER_TARGET_TYPE_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The render target uses software rendering only.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_RENDER_TARGET_TYPE_SOFTWARE</unmanaged>
        /// <unmanaged-short>D2D1_RENDER_TARGET_TYPE_SOFTWARE</unmanaged-short>
        Software = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering only. </p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_RENDER_TARGET_TYPE_HARDWARE</unmanaged>
        /// <unmanaged-short>D2D1_RENDER_TARGET_TYPE_HARDWARE</unmanaged-short>
        Hardware = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p> Describes how a render target is remoted and whether it should be GDI-compatible. This enumeration allows a bitwise combination of its member values.</p>
    /// </summary>
    /// <doc-id>dd368157</doc-id>
    /// <unmanaged>D2D1_RENDER_TARGET_USAGE</unmanaged>
    /// <unmanaged-short>D2D1_RENDER_TARGET_USAGE</unmanaged-short>
    public enum RenderTargetUsage : System.Int32
    {
        /// <summary>
        /// <dd> <p>The render target attempts to use Direct3D command-stream remoting and uses bitmap remoting if stream remoting fails. The render target is not GDI-compatible.</p> </dd>
        /// </summary>
        /// <doc-id>dd368157</doc-id>
        /// <unmanaged>D2D1_RENDER_TARGET_USAGE_NONE</unmanaged>
        /// <unmanaged-short>D2D1_RENDER_TARGET_USAGE_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The render target renders content locally and sends it to the terminal services client as a bitmap. </p> </dd>
        /// </summary>
        /// <doc-id>dd368157</doc-id>
        /// <unmanaged>D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING</unmanaged>
        /// <unmanaged-short>D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING</unmanaged-short>
        ForceBitmapRemoting = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The render target can be used efficiently with GDI.</p> </dd>
        /// </summary>
        /// <doc-id>dd368157</doc-id>
        /// <unmanaged>D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE</unmanaged>
        /// <unmanaged-short>D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE</unmanaged-short>
        GdiCompatible = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Values for the <strong>D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE</strong> property of the RGB to Hue effect.</p>
    /// </summary>
    /// <doc-id>dn890743</doc-id>
    /// <unmanaged>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE</unmanaged>
    /// <unmanaged-short>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE</unmanaged-short>
    public enum RgbToHueOutputColorSpace : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890743</doc-id>
        /// <unmanaged>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE</unmanaged>
        /// <unmanaged-short>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE</unmanaged-short>
        HueSaturationValue = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890743</doc-id>
        /// <unmanaged>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS</unmanaged>
        /// <unmanaged-short>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS</unmanaged-short>
        HueSaturationLightness = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Indentifiers for properties of the RGB to Hue effect.</p>
    /// </summary>
    /// <doc-id>dn890744</doc-id>
    /// <unmanaged>D2D1_RGBTOHUE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_RGBTOHUE_PROP</unmanaged-short>
    public enum RgbToHueProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890744</doc-id>
        /// <unmanaged>D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE</unmanaged>
        /// <unmanaged-short>D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE</unmanaged-short>
        OutputColorSpace = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Identifiers for properties of the Saturation effect.</p>
    /// </summary>
    /// <doc-id>dn934259</doc-id>
    /// <unmanaged>D2D1_SATURATION_PROP</unmanaged>
    /// <unmanaged-short>D2D1_SATURATION_PROP</unmanaged-short>
    public enum SaturationProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934259</doc-id>
        /// <unmanaged>D2D1_SATURATION_PROP_SATURATION</unmanaged>
        /// <unmanaged-short>D2D1_SATURATION_PROP_SATURATION</unmanaged-short>
        Saturation = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>The interpolation mode the Scale effect uses to scale the image. There are 6 scale modes that range in quality and speed. </p>
    /// </summary>
    /// <doc-id>dn934260</doc-id>
    /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE</unmanaged-short>
    public enum ScaleInterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934260</doc-id>
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934260</doc-id>
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934260</doc-id>
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934260</doc-id>
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934260</doc-id>
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934260</doc-id>
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p> Identifiers for properties of the Scale effect. </p>
    /// </summary>
    /// <doc-id>dn934261</doc-id>
    /// <unmanaged>D2D1_SCALE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_SCALE_PROP</unmanaged-short>
    public enum ScaleProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934261</doc-id>
        /// <unmanaged>D2D1_SCALE_PROP_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_PROP_SCALE</unmanaged-short>
        Scale = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934261</doc-id>
        /// <unmanaged>D2D1_SCALE_PROP_CENTER_POINT</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_PROP_CENTER_POINT</unmanaged-short>
        CenterPoint = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934261</doc-id>
        /// <unmanaged>D2D1_SCALE_PROP_INTERPOLATION_MODE</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_PROP_INTERPOLATION_MODE</unmanaged-short>
        InterpolationMode = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934261</doc-id>
        /// <unmanaged>D2D1_SCALE_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934261</doc-id>
        /// <unmanaged>D2D1_SCALE_PROP_SHARPNESS</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_PROP_SHARPNESS</unmanaged-short>
        Sharpness = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p>Identifiers for properties of the Sepia effect.</p>
    /// </summary>
    /// <doc-id>dn890745</doc-id>
    /// <unmanaged>D2D1_SEPIA_PROP</unmanaged>
    /// <unmanaged-short>D2D1_SEPIA_PROP</unmanaged-short>
    public enum SepiaProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890745</doc-id>
        /// <unmanaged>D2D1_SEPIA_PROP_INTENSITY</unmanaged>
        /// <unmanaged-short>D2D1_SEPIA_PROP_INTENSITY</unmanaged-short>
        Intensity = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890745</doc-id>
        /// <unmanaged>D2D1_SEPIA_PROP_ALPHA_MODE</unmanaged>
        /// <unmanaged-short>D2D1_SEPIA_PROP_ALPHA_MODE</unmanaged-short>
        AlphaMode = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>The level of performance optimization for the Shadow effect.</p>
    /// </summary>
    /// <doc-id>dn934262</doc-id>
    /// <unmanaged>D2D1_SHADOW_OPTIMIZATION</unmanaged>
    /// <unmanaged-short>D2D1_SHADOW_OPTIMIZATION</unmanaged-short>
    public enum ShadowOptimization : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934262</doc-id>
        /// <unmanaged>D2D1_SHADOW_OPTIMIZATION_SPEED</unmanaged>
        /// <unmanaged-short>D2D1_SHADOW_OPTIMIZATION_SPEED</unmanaged-short>
        Speed = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934262</doc-id>
        /// <unmanaged>D2D1_SHADOW_OPTIMIZATION_BALANCED</unmanaged>
        /// <unmanaged-short>D2D1_SHADOW_OPTIMIZATION_BALANCED</unmanaged-short>
        Balanced = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934262</doc-id>
        /// <unmanaged>D2D1_SHADOW_OPTIMIZATION_QUALITY</unmanaged>
        /// <unmanaged-short>D2D1_SHADOW_OPTIMIZATION_QUALITY</unmanaged-short>
        Quality = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p> Identifiers for properties of the Shadow effect. </p>
    /// </summary>
    /// <doc-id>dn934263</doc-id>
    /// <unmanaged>D2D1_SHADOW_PROP</unmanaged>
    /// <unmanaged-short>D2D1_SHADOW_PROP</unmanaged-short>
    public enum ShadowProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934263</doc-id>
        /// <unmanaged>D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION</unmanaged>
        /// <unmanaged-short>D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION</unmanaged-short>
        BlurStandardDeviation = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934263</doc-id>
        /// <unmanaged>D2D1_SHADOW_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SHADOW_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934263</doc-id>
        /// <unmanaged>D2D1_SHADOW_PROP_OPTIMIZATION</unmanaged>
        /// <unmanaged-short>D2D1_SHADOW_PROP_OPTIMIZATION</unmanaged-short>
        Optimization = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Identifiers for properties of the Sharpen effect.</p>
    /// </summary>
    /// <doc-id>dn890746</doc-id>
    /// <unmanaged>D2D1_SHARPEN_PROP</unmanaged>
    /// <unmanaged-short>D2D1_SHARPEN_PROP</unmanaged-short>
    public enum SharpenProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890746</doc-id>
        /// <unmanaged>D2D1_SHARPEN_PROP_SHARPNESS</unmanaged>
        /// <unmanaged-short>D2D1_SHARPEN_PROP_SHARPNESS</unmanaged-short>
        Sharpness = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890746</doc-id>
        /// <unmanaged>D2D1_SHARPEN_PROP_THRESHOLD</unmanaged>
        /// <unmanaged-short>D2D1_SHARPEN_PROP_THRESHOLD</unmanaged-short>
        Threshold = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Identifiers for properties of the Spot-diffuse lighting effect. </p>
    /// </summary>
    /// <doc-id>dn934264</doc-id>
    /// <unmanaged>D2D1_SPOTDIFFUSE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP</unmanaged-short>
    public enum SpotDiffuseProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934264</doc-id>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION</unmanaged-short>
        LightPosition = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934264</doc-id>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_POINTS_AT</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_POINTS_AT</unmanaged-short>
        PointsAt = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934264</doc-id>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_FOCUS</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_FOCUS</unmanaged-short>
        Focus = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934264</doc-id>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE</unmanaged-short>
        LimitingConeAngle = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934264</doc-id>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged-short>
        DiffuseConstant = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934264</doc-id>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE</unmanaged-short>
        SurfaceScale = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934264</doc-id>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934264</doc-id>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>
        KernelUnitLength = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934264</doc-id>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p>The interpolation mode the Spot-diffuse lighting effect uses to scale the image to the corresponding kernel unit length.  There are six scale modes that range in quality and speed.</p>
    /// </summary>
    /// <doc-id>dn934265</doc-id>
    /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE</unmanaged-short>
    public enum SpotDiffuseScaleMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934265</doc-id>
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934265</doc-id>
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934265</doc-id>
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934265</doc-id>
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934265</doc-id>
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934265</doc-id>
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p> Identifiers for properties of the Spot-specular lighting effect. </p>
    /// </summary>
    /// <doc-id>dn934266</doc-id>
    /// <unmanaged>D2D1_SPOTSPECULAR_PROP</unmanaged>
    /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP</unmanaged-short>
    public enum SpotSpecularProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934266</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION</unmanaged-short>
        LightPosition = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934266</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_POINTS_AT</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_POINTS_AT</unmanaged-short>
        PointsAt = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934266</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_FOCUS</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_FOCUS</unmanaged-short>
        Focus = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934266</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE</unmanaged-short>
        LimitingConeAngle = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934266</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged-short>
        SpecularExponent = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934266</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged-short>
        SpecularConstant = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934266</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE</unmanaged-short>
        SurfaceScale = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934266</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934266</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>
        KernelUnitLength = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934266</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(9))}

    /// <summary>
    /// <p>The interpolation mode the Spot-specular lighting effect uses to scale the image  to the corresponding kernel unit length. There are six scale modes that range in quality and speed.</p>
    /// </summary>
    /// <doc-id>dn934267</doc-id>
    /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE</unmanaged-short>
    public enum SpotSpecularScaleMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934267</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934267</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934267</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934267</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934267</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934267</doc-id>
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Specifies additional aspects of how a sprite batch is to be drawn, as part of a call to <strong>ID2D1DeviceContext3::DrawSpriteBatch</strong>.</p>
    /// </summary>
    /// <doc-id>mt619821</doc-id>
    /// <unmanaged>D2D1_SPRITE_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_SPRITE_OPTIONS</unmanaged-short>
    public enum SpriteOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt619821</doc-id>
        /// <unmanaged>D2D1_SPRITE_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_SPRITE_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt619821</doc-id>
        /// <unmanaged>D2D1_SPRITE_OPTIONS_CLAMP_TO_SOURCE_RECTANGLE</unmanaged>
        /// <unmanaged-short>D2D1_SPRITE_OPTIONS_CLAMP_TO_SOURCE_RECTANGLE</unmanaged-short>
        ClampToSourceRectangle = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Identifiers for properties of the Straighten effect.</p>
    /// </summary>
    /// <doc-id>dn890747</doc-id>
    /// <unmanaged>D2D1_STRAIGHTEN_PROP</unmanaged>
    /// <unmanaged-short>D2D1_STRAIGHTEN_PROP</unmanaged-short>
    public enum StraightenProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890747</doc-id>
        /// <unmanaged>D2D1_STRAIGHTEN_PROP_ANGLE</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_PROP_ANGLE</unmanaged-short>
        Angle = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890747</doc-id>
        /// <unmanaged>D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE</unmanaged-short>
        MaintainSize = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890747</doc-id>
        /// <unmanaged>D2D1_STRAIGHTEN_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Values for the <strong>D2D1_STRAIGHTEN_PROP_SCALE_MODE</strong> property of the Straighten effect.</p>
    /// </summary>
    /// <doc-id>dn890748</doc-id>
    /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE</unmanaged-short>
    public enum StraightenScaleMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890748</doc-id>
        /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890748</doc-id>
        /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890748</doc-id>
        /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890748</doc-id>
        /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890748</doc-id>
        /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p>Defines how the world transform, dots per inch (dpi), and stroke width affect the shape of the pen used to stroke a primitive.</p>
    /// </summary>
    /// <remarks>
    /// <p>If you specify <strong>D2D1_STROKE_TRANSFORM_TYPE_FIXED</strong> the stroke isn't affected by the world transform.</p><p>If you specify <strong>D2D1_STROKE_TRANSFORM_TYPE_FIXED</strong> the application has the same behavior in Windows 7 and later.</p><p>If you specify <strong>D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE</strong> the stroke is always 1 pixel wide.</p><p>Apart from the stroke, any value derived from the stroke width is not affected when the transformType is either fixed or hairline. This includes miters, line caps and so on.</p><p> It is important to distinguish between the geometry being stroked and the shape of the stroke pen. When D2D1_STROKE_TRANSFORM_TYPE_FIXED or D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE is specified, the geometry still respects the transform and dpi, but the pen that traces the geometry will not.</p><p>Here is an illustration of a stroke with dashing and a skew and stretch transform.</p><p>And here is an illustration of a fixed width stroke which does not get transformed.</p>
    /// </remarks>
    /// <doc-id>hh447016</doc-id>
    /// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_STROKE_TRANSFORM_TYPE</unmanaged-short>
    public enum StrokeTransformType : System.Int32
    {
        /// <summary>
        /// <dd> <p>The stroke respects the currently set world transform, the dpi, and the stroke width.</p> </dd>
        /// </summary>
        /// <doc-id>hh447016</doc-id>
        /// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE_NORMAL</unmanaged>
        /// <unmanaged-short>D2D1_STROKE_TRANSFORM_TYPE_NORMAL</unmanaged-short>
        Normal = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The stroke does not respect the world transform but it does respect the dpi and stroke width.</p> </dd>
        /// </summary>
        /// <doc-id>hh447016</doc-id>
        /// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE_FIXED</unmanaged>
        /// <unmanaged-short>D2D1_STROKE_TRANSFORM_TYPE_FIXED</unmanaged-short>
        Fixed = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The stroke is forced to 1 pixel wide (in device space) and does not respect the world transform, the dpi, or the stroke width.</p> </dd>
        /// </summary>
        /// <doc-id>hh447016</doc-id>
        /// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE</unmanaged>
        /// <unmanaged-short>D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE</unmanaged-short>
        Hairline = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Specifies the indices of the system sub-properties that may be present in any property.</p>
    /// </summary>
    /// <doc-id>hh447018</doc-id>
    /// <unmanaged>D2D1_SUBPROPERTY</unmanaged>
    /// <unmanaged-short>D2D1_SUBPROPERTY</unmanaged-short>
    public enum SubProperty : System.Int32
    {
        /// <summary>
        /// <dd> <p>The name for the parent property.</p> </dd>
        /// </summary>
        /// <doc-id>hh447018</doc-id>
        /// <unmanaged>D2D1_SUBPROPERTY_DISPLAYNAME</unmanaged>
        /// <unmanaged-short>D2D1_SUBPROPERTY_DISPLAYNAME</unmanaged-short>
        DisplayName = unchecked ((System.Int32)(-2147483648)),
        /// <summary>
        /// <dd> <p>A Boolean indicating whether the parent property is writeable.</p> </dd>
        /// </summary>
        /// <doc-id>hh447018</doc-id>
        /// <unmanaged>D2D1_SUBPROPERTY_ISREADONLY</unmanaged>
        /// <unmanaged-short>D2D1_SUBPROPERTY_ISREADONLY</unmanaged-short>
        Isreadonly = unchecked ((System.Int32)(-2147483647)),
        /// <summary>
        /// <dd> <p>The minimum value that can be set to the parent property.</p> </dd>
        /// </summary>
        /// <doc-id>hh447018</doc-id>
        /// <unmanaged>D2D1_SUBPROPERTY_MIN</unmanaged>
        /// <unmanaged-short>D2D1_SUBPROPERTY_MIN</unmanaged-short>
        Minimum = unchecked ((System.Int32)(-2147483646)),
        /// <summary>
        /// <dd> <p>The maximum value that can be set to the parent property.</p> </dd>
        /// </summary>
        /// <doc-id>hh447018</doc-id>
        /// <unmanaged>D2D1_SUBPROPERTY_MAX</unmanaged>
        /// <unmanaged-short>D2D1_SUBPROPERTY_MAX</unmanaged-short>
        Maximum = unchecked ((System.Int32)(-2147483645)),
        /// <summary>
        /// <dd> <p>The default value of the parent property.</p> </dd>
        /// </summary>
        /// <doc-id>hh447018</doc-id>
        /// <unmanaged>D2D1_SUBPROPERTY_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_SUBPROPERTY_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(-2147483644)),
        /// <summary>
        /// <dd> <p>An array of name/index pairs that indicate the possible values that can be set to the parent property.</p> </dd>
        /// </summary>
        /// <doc-id>hh447018</doc-id>
        /// <unmanaged>D2D1_SUBPROPERTY_FIELDS</unmanaged>
        /// <unmanaged-short>D2D1_SUBPROPERTY_FIELDS</unmanaged-short>
        Fields = unchecked ((System.Int32)(-2147483643)),
        /// <summary>
        /// <dd> <p>An index sub-property used by the elements of the <strong>D2D1_SUBPROPERTY_FIELDS</strong> array.</p> </dd>
        /// </summary>
        /// <doc-id>hh447018</doc-id>
        /// <unmanaged>D2D1_SUBPROPERTY_INDEX</unmanaged>
        /// <unmanaged-short>D2D1_SUBPROPERTY_INDEX</unmanaged-short>
        Index = unchecked ((System.Int32)(-2147483642))}

    /// <summary>
    /// <p>Describes how a render target behaves when it presents its content. This enumeration allows a bitwise combination of its member values.</p>
    /// </summary>
    /// <doc-id>dd368144</doc-id>
    /// <unmanaged>D2D1_SVG_ASPECT_ALIGN</unmanaged>
    /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN</unmanaged-short>
    public enum SvgAspectAlign : System.Int32
    {
        /// <summary>
        /// <dd> <p>The render target waits until the display refreshes to present and discards the frame upon presenting.</p> </dd>
        /// </summary>
        /// <doc-id>dd368144</doc-id>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_NONE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The render target does not discard the frame upon presenting.</p> </dd>
        /// </summary>
        /// <doc-id>dd368144</doc-id>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MIN</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MIN</unmanaged-short>
        XMinimumYMinimum = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The render target does not wait until the display refreshes to present.</p> </dd>
        /// </summary>
        /// <doc-id>dd368144</doc-id>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MIN</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MIN</unmanaged-short>
        XMidYMinimum = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368144</doc-id>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MIN</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MIN</unmanaged-short>
        XMaximumYMinimum = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368144</doc-id>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MID</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MID</unmanaged-short>
        XMinimumYMid = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368144</doc-id>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MID</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MID</unmanaged-short>
        XMidYMid = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368144</doc-id>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MID</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MID</unmanaged-short>
        XMaximumYMid = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368144</doc-id>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MAX</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MAX</unmanaged-short>
        XMinimumYMaximum = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368144</doc-id>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MAX</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MAX</unmanaged-short>
        XMidYMaximum = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd368144</doc-id>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MAX</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MAX</unmanaged-short>
        XMaximumYMaximum = unchecked ((System.Int32)(9))}

    /// <summary>
    /// <p>Indicates how pixel shader sampling will be restricted. This indicates whether the vertex buffer is large and tends to change infrequently or smaller and changes frequently (typically frame over frame). </p>
    /// </summary>
    /// <remarks>
    /// <p> If the shader specifies <strong>D2D1_PIXEL_OPTIONS_NONE</strong>, it must still correctly implement the region of interest calculations in <strong>ID2D1Transform::MapOutputRectToInputRects</strong> and <strong>ID2D1Transform::MapInputRectsToOutputRect</strong>.</p>
    /// </remarks>
    /// <doc-id>hh404316</doc-id>
    /// <unmanaged>D2D1_SVG_ASPECT_SCALING</unmanaged>
    /// <unmanaged-short>D2D1_SVG_ASPECT_SCALING</unmanaged-short>
    public enum SvgAspectScaling : System.Int32
    {
        /// <summary>
        /// <dd> <p>The pixel shader is not restricted in its sampling.</p> </dd>
        /// </summary>
        /// <doc-id>hh404316</doc-id>
        /// <unmanaged>D2D1_SVG_ASPECT_SCALING_MEET</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_SCALING_MEET</unmanaged-short>
        Meet = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> The pixel shader samples inputs only at the same scene coordinate as the output pixel and returns transparent black whenever the input pixels are also transparent black.</p> </dd>
        /// </summary>
        /// <doc-id>hh404316</doc-id>
        /// <unmanaged>D2D1_SVG_ASPECT_SCALING_SLICE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_SCALING_SLICE</unmanaged-short>
        Slice = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Describes whether a render target uses hardware or software rendering, or if Direct2D should select the rendering mode.</p>
    /// </summary>
    /// <remarks>
    /// <p>Not every render target supports hardware rendering. For more information, see the Render Targets Overview. </p>
    /// </remarks>
    /// <doc-id>dd756630</doc-id>
    /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE</unmanaged-short>
    public enum SvgAttributePodType : System.Int32
    {
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering, if available; otherwise, it uses software rendering.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_FLOAT</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_FLOAT</unmanaged-short>
        Float = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The render target uses software rendering only.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering only. </p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_FILL_MODE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_FILL_MODE</unmanaged-short>
        FillMode = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_DISPLAY</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_DISPLAY</unmanaged-short>
        Display = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_OVERFLOW</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_OVERFLOW</unmanaged-short>
        Overflow = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_CAP</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_CAP</unmanaged-short>
        LineCap = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_JOIN</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_JOIN</unmanaged-short>
        LineJoin = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_VISIBILITY</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_VISIBILITY</unmanaged-short>
        Visibility = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_MATRIX</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_MATRIX</unmanaged-short>
        Matrix = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_UNIT_TYPE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_UNIT_TYPE</unmanaged-short>
        UnitType = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_EXTEND_MODE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_EXTEND_MODE</unmanaged-short>
        ExtendMode = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_PRESERVE_ASPECT_RATIO</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_PRESERVE_ASPECT_RATIO</unmanaged-short>
        PreserveAspectRatio = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_VIEWBOX</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_VIEWBOX</unmanaged-short>
        ViewBox = unchecked ((System.Int32)(12)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_LENGTH</unmanaged-short>
        Length = unchecked ((System.Int32)(13))}

    /// <summary>
    /// <p>Describes whether a render target uses hardware or software rendering, or if Direct2D should select the rendering mode.</p>
    /// </summary>
    /// <remarks>
    /// <p>Not every render target supports hardware rendering. For more information, see the Render Targets Overview. </p>
    /// </remarks>
    /// <doc-id>dd756630</doc-id>
    /// <unmanaged>D2D1_SVG_ATTRIBUTE_STRING_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_STRING_TYPE</unmanaged-short>
    public enum SvgAttributeStringType : System.Int32
    {
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering, if available; otherwise, it uses software rendering.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_STRING_TYPE_SVG</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_STRING_TYPE_SVG</unmanaged-short>
        Svg = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The render target uses software rendering only.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_STRING_TYPE_ID</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_STRING_TYPE_ID</unmanaged-short>
        Id = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Describes whether a render target uses hardware or software rendering, or if Direct2D should select the rendering mode.</p>
    /// </summary>
    /// <remarks>
    /// <p>Not every render target supports hardware rendering. For more information, see the Render Targets Overview. </p>
    /// </remarks>
    /// <doc-id>dd756630</doc-id>
    /// <unmanaged>D2D1_SVG_DISPLAY</unmanaged>
    /// <unmanaged-short>D2D1_SVG_DISPLAY</unmanaged-short>
    public enum SvgDisplay : System.Int32
    {
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering, if available; otherwise, it uses software rendering.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_DISPLAY_INLINE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_DISPLAY_INLINE</unmanaged-short>
        Inline = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The render target uses software rendering only.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_DISPLAY_NONE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_DISPLAY_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Describes whether a render target uses hardware or software rendering, or if Direct2D should select the rendering mode.</p>
    /// </summary>
    /// <remarks>
    /// <p>Not every render target supports hardware rendering. For more information, see the Render Targets Overview. </p>
    /// </remarks>
    /// <doc-id>dd756630</doc-id>
    /// <unmanaged>D2D1_SVG_LENGTH_UNITS</unmanaged>
    /// <unmanaged-short>D2D1_SVG_LENGTH_UNITS</unmanaged-short>
    public enum SvgLengthUnits : System.Int32
    {
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering, if available; otherwise, it uses software rendering.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_LENGTH_UNITS_NUMBER</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LENGTH_UNITS_NUMBER</unmanaged-short>
        Number = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The render target uses software rendering only.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_LENGTH_UNITS_PERCENTAGE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LENGTH_UNITS_PERCENTAGE</unmanaged-short>
        Percentage = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Describes whether a render target uses hardware or software rendering, or if Direct2D should select the rendering mode.</p>
    /// </summary>
    /// <remarks>
    /// <p>Not every render target supports hardware rendering. For more information, see the Render Targets Overview. </p>
    /// </remarks>
    /// <doc-id>dd756630</doc-id>
    /// <unmanaged>D2D1_SVG_LINE_CAP</unmanaged>
    /// <unmanaged-short>D2D1_SVG_LINE_CAP</unmanaged-short>
    public enum SvgLineCap : System.Int32
    {
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering, if available; otherwise, it uses software rendering.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_LINE_CAP_BUTT</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LINE_CAP_BUTT</unmanaged-short>
        Butt = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The render target uses software rendering only.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_LINE_CAP_SQUARE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LINE_CAP_SQUARE</unmanaged-short>
        Square = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering only. </p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_LINE_CAP_ROUND</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LINE_CAP_ROUND</unmanaged-short>
        Round = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Indicates how pixel shader sampling will be restricted. This indicates whether the vertex buffer is large and tends to change infrequently or smaller and changes frequently (typically frame over frame). </p>
    /// </summary>
    /// <remarks>
    /// <p> If the shader specifies <strong>D2D1_PIXEL_OPTIONS_NONE</strong>, it must still correctly implement the region of interest calculations in <strong>ID2D1Transform::MapOutputRectToInputRects</strong> and <strong>ID2D1Transform::MapInputRectsToOutputRect</strong>.</p>
    /// </remarks>
    /// <doc-id>hh404316</doc-id>
    /// <unmanaged>D2D1_SVG_LINE_JOIN</unmanaged>
    /// <unmanaged-short>D2D1_SVG_LINE_JOIN</unmanaged-short>
    public enum SvgLineJoin : System.Int32
    {
        /// <summary>
        /// <dd> <p>The pixel shader is not restricted in its sampling.</p> </dd>
        /// </summary>
        /// <doc-id>hh404316</doc-id>
        /// <unmanaged>D2D1_SVG_LINE_JOIN_BEVEL</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LINE_JOIN_BEVEL</unmanaged-short>
        Bevel = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> The pixel shader samples inputs only at the same scene coordinate as the output pixel and returns transparent black whenever the input pixels are also transparent black.</p> </dd>
        /// </summary>
        /// <doc-id>hh404316</doc-id>
        /// <unmanaged>D2D1_SVG_LINE_JOIN_MITER</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LINE_JOIN_MITER</unmanaged-short>
        Miter = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>hh404316</doc-id>
        /// <unmanaged>D2D1_SVG_LINE_JOIN_ROUND</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LINE_JOIN_ROUND</unmanaged-short>
        Round = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Describes the shape at the end of a line or segment.</p>
    /// </summary>
    /// <remarks>
    /// <p> The following illustration shows the available cap styles for lines or segments. The red portion of the line shows the extra area added by the line cap setting. </p>
    /// </remarks>
    /// <doc-id>dd368079</doc-id>
    /// <unmanaged>D2D1_SVG_OVERFLOW</unmanaged>
    /// <unmanaged-short>D2D1_SVG_OVERFLOW</unmanaged-short>
    public enum SvgOverflow : System.Int32
    {
        /// <summary>
        /// <dd> <p>A cap that does not extend past the last point of the line. Comparable to cap used for objects other than lines. </p> </dd>
        /// </summary>
        /// <doc-id>dd368079</doc-id>
        /// <unmanaged>D2D1_SVG_OVERFLOW_VISIBLE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_OVERFLOW_VISIBLE</unmanaged-short>
        Visible = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Half of a square that has a length equal to the line thickness.</p> </dd>
        /// </summary>
        /// <doc-id>dd368079</doc-id>
        /// <unmanaged>D2D1_SVG_OVERFLOW_HIDDEN</unmanaged>
        /// <unmanaged-short>D2D1_SVG_OVERFLOW_HIDDEN</unmanaged-short>
        Hidden = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Describes whether a render target uses hardware or software rendering, or if Direct2D should select the rendering mode.</p>
    /// </summary>
    /// <remarks>
    /// <p>Not every render target supports hardware rendering. For more information, see the Render Targets Overview. </p>
    /// </remarks>
    /// <doc-id>dd756630</doc-id>
    /// <unmanaged>D2D1_SVG_PAINT_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_SVG_PAINT_TYPE</unmanaged-short>
    public enum SvgPaintType : System.Int32
    {
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering, if available; otherwise, it uses software rendering.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PAINT_TYPE_NONE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PAINT_TYPE_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The render target uses software rendering only.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PAINT_TYPE_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PAINT_TYPE_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering only. </p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PAINT_TYPE_CURRENT_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PAINT_TYPE_CURRENT_COLOR</unmanaged-short>
        CurrentColor = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PAINT_TYPE_URI</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PAINT_TYPE_URI</unmanaged-short>
        Uri = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PAINT_TYPE_URI_NONE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PAINT_TYPE_URI_NONE</unmanaged-short>
        UriNone = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PAINT_TYPE_URI_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PAINT_TYPE_URI_COLOR</unmanaged-short>
        UriColor = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PAINT_TYPE_URI_CURRENT_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PAINT_TYPE_URI_CURRENT_COLOR</unmanaged-short>
        UriCurrentColor = unchecked ((System.Int32)(6))}

    /// <summary>
    /// <p>Describes whether a render target uses hardware or software rendering, or if Direct2D should select the rendering mode.</p>
    /// </summary>
    /// <remarks>
    /// <p>Not every render target supports hardware rendering. For more information, see the Render Targets Overview. </p>
    /// </remarks>
    /// <doc-id>dd756630</doc-id>
    /// <unmanaged>D2D1_SVG_PATH_COMMAND</unmanaged>
    /// <unmanaged-short>D2D1_SVG_PATH_COMMAND</unmanaged-short>
    public enum SvgPathCommand : System.Int32
    {
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering, if available; otherwise, it uses software rendering.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_CLOSE_PATH</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_CLOSE_PATH</unmanaged-short>
        ClosePath = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The render target uses software rendering only.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_MOVE_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_MOVE_ABSOLUTE</unmanaged-short>
        MoveAbsolute = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering only. </p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_MOVE_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_MOVE_RELATIVE</unmanaged-short>
        MoveRelative = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_LINE_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_LINE_ABSOLUTE</unmanaged-short>
        LineAbsolute = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_LINE_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_LINE_RELATIVE</unmanaged-short>
        LineRelative = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_CUBIC_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_CUBIC_ABSOLUTE</unmanaged-short>
        CubicAbsolute = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_CUBIC_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_CUBIC_RELATIVE</unmanaged-short>
        CubicRelative = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_QUADRADIC_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_QUADRADIC_ABSOLUTE</unmanaged-short>
        QuadradicAbsolute = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_QUADRADIC_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_QUADRADIC_RELATIVE</unmanaged-short>
        QuadradicRelative = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_ARC_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_ARC_ABSOLUTE</unmanaged-short>
        ArcAbsolute = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_ARC_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_ARC_RELATIVE</unmanaged-short>
        ArcRelative = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_HORIZONTAL_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_HORIZONTAL_ABSOLUTE</unmanaged-short>
        HorizontalAbsolute = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_HORIZONTAL_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_HORIZONTAL_RELATIVE</unmanaged-short>
        HorizontalRelative = unchecked ((System.Int32)(12)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_VERTICAL_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_VERTICAL_ABSOLUTE</unmanaged-short>
        VerticalAbsolute = unchecked ((System.Int32)(13)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_VERTICAL_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_VERTICAL_RELATIVE</unmanaged-short>
        VerticalRelative = unchecked ((System.Int32)(14)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_ABSOLUTE</unmanaged-short>
        CubicSmoothAbsolute = unchecked ((System.Int32)(15)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_RELATIVE</unmanaged-short>
        CubicSmoothRelative = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_ABSOLUTE</unmanaged-short>
        QuadradicSmoothAbsolute = unchecked ((System.Int32)(17)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_RELATIVE</unmanaged-short>
        QuadradicSmoothRelative = unchecked ((System.Int32)(18))}

    /// <summary>
    /// <p>Describes whether a render target uses hardware or software rendering, or if Direct2D should select the rendering mode.</p>
    /// </summary>
    /// <remarks>
    /// <p>Not every render target supports hardware rendering. For more information, see the Render Targets Overview. </p>
    /// </remarks>
    /// <doc-id>dd756630</doc-id>
    /// <unmanaged>D2D1_SVG_UNIT_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_SVG_UNIT_TYPE</unmanaged-short>
    public enum SvgUnitType : System.Int32
    {
        /// <summary>
        /// <dd> <p>The render target uses hardware rendering, if available; otherwise, it uses software rendering.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_UNIT_TYPE_USER_SPACE_ON_USE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_UNIT_TYPE_USER_SPACE_ON_USE</unmanaged-short>
        UserSpaceOnUse = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The render target uses software rendering only.</p> </dd>
        /// </summary>
        /// <doc-id>dd756630</doc-id>
        /// <unmanaged>D2D1_SVG_UNIT_TYPE_OBJECT_BOUNDING_BOX</unmanaged>
        /// <unmanaged-short>D2D1_SVG_UNIT_TYPE_OBJECT_BOUNDING_BOX</unmanaged-short>
        ObjectBoundingBox = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Defines options that should be applied to the color space.</p>
    /// </summary>
    /// <doc-id>hh446992</doc-id>
    /// <unmanaged>D2D1_SVG_VISIBILITY</unmanaged>
    /// <unmanaged-short>D2D1_SVG_VISIBILITY</unmanaged-short>
    public enum SvgVisibility : System.Int32
    {
        /// <summary>
        /// <dd> <p>The color space is otherwise described, such as with a color profile.</p> </dd>
        /// </summary>
        /// <doc-id>hh446992</doc-id>
        /// <unmanaged>D2D1_SVG_VISIBILITY_VISIBLE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_VISIBILITY_VISIBLE</unmanaged-short>
        Visible = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The color space is sRGB.</p> </dd>
        /// </summary>
        /// <doc-id>hh446992</doc-id>
        /// <unmanaged>D2D1_SVG_VISIBILITY_HIDDEN</unmanaged>
        /// <unmanaged-short>D2D1_SVG_VISIBILITY_HIDDEN</unmanaged-short>
        Hidden = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Defines the direction that an elliptical arc is drawn.  </p>
    /// </summary>
    /// <doc-id>dd368166</doc-id>
    /// <unmanaged>D2D1_SWEEP_DIRECTION</unmanaged>
    /// <unmanaged-short>D2D1_SWEEP_DIRECTION</unmanaged-short>
    public enum SweepDirection : System.Int32
    {
        /// <summary>
        /// <dd> <p> Arcs are drawn in a counterclockwise (negative-angle) direction. </p> </dd>
        /// </summary>
        /// <doc-id>dd368166</doc-id>
        /// <unmanaged>D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE</unmanaged>
        /// <unmanaged-short>D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE</unmanaged-short>
        CounterClockwise = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Arcs are drawn in a clockwise (positive-angle) direction. </p> </dd>
        /// </summary>
        /// <doc-id>dd368166</doc-id>
        /// <unmanaged>D2D1_SWEEP_DIRECTION_CLOCKWISE</unmanaged>
        /// <unmanaged-short>D2D1_SWEEP_DIRECTION_CLOCKWISE</unmanaged-short>
        Clockwise = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Identifiers for properties of the Table transfer effect. </p>
    /// </summary>
    /// <doc-id>dn934268</doc-id>
    /// <unmanaged>D2D1_TABLETRANSFER_PROP</unmanaged>
    /// <unmanaged-short>D2D1_TABLETRANSFER_PROP</unmanaged-short>
    public enum TableTransferProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934268</doc-id>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_RED_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_RED_TABLE</unmanaged-short>
        RedTable = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934268</doc-id>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_RED_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_RED_DISABLE</unmanaged-short>
        RedDisable = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934268</doc-id>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_GREEN_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_GREEN_TABLE</unmanaged-short>
        GreenTable = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934268</doc-id>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_GREEN_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_GREEN_DISABLE</unmanaged-short>
        GreenDisable = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934268</doc-id>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_BLUE_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_BLUE_TABLE</unmanaged-short>
        BlueTable = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934268</doc-id>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_BLUE_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_BLUE_DISABLE</unmanaged-short>
        BlueDisable = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934268</doc-id>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_ALPHA_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_ALPHA_TABLE</unmanaged-short>
        AlphaTable = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934268</doc-id>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE</unmanaged-short>
        AlphaDisable = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934268</doc-id>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(8))}

    /// <summary>
    /// <p>Identifiers for properties of the Temperature and Tint effect.</p>
    /// </summary>
    /// <doc-id>dn890749</doc-id>
    /// <unmanaged>D2D1_TEMPERATUREANDTINT_PROP</unmanaged>
    /// <unmanaged-short>D2D1_TEMPERATUREANDTINT_PROP</unmanaged-short>
    public enum TemperatureAndTintProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890749</doc-id>
        /// <unmanaged>D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE</unmanaged>
        /// <unmanaged-short>D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE</unmanaged-short>
        Temperature = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890749</doc-id>
        /// <unmanaged>D2D1_TEMPERATUREANDTINT_PROP_TINT</unmanaged>
        /// <unmanaged-short>D2D1_TEMPERATUREANDTINT_PROP_TINT</unmanaged-short>
        Tint = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Describes the antialiasing mode used for drawing text. </p>
    /// </summary>
    /// <remarks>
    /// <p>This enumeration is used with the <strong>SetTextAntialiasMode</strong> of an <strong><see cref = "SharpDX.Direct2D1.RenderTarget"/></strong> to specify how text and glyphs are antialiased.</p><p> By default, Direct2D renders text in ClearType mode. Factors that  can downgrade the default quality to grayscale or aliased:</p><ul> <li>If the <strong><see cref = "SharpDX.DirectWrite.RenderingMode"/></strong> value  is <strong>DWRITE_RENDERING_MODE_ALIASED </strong>, then the  default text antialiasing mode is aliased.  To change the DirectWrite rendering mode of an <strong><see cref = "SharpDX.Direct2D1.RenderTarget"/></strong>, use the  <strong>ID2D1RenderTarget::SetTextRenderingParams</strong> method. </li> <li>If the <strong><see cref = "SharpDX.DirectWrite.RenderingMode"/></strong> value is <strong>DWRITE_RENDERING_MODE_OUTLINE</strong>, then the default text  antialiasing mode is grayscale.</li> <li>If the render target has an alpha channel and is not set to <strong>D2D1_ALPHA_MODE_IGNORE</strong>, then  the default text antialiasing mode is grayscale.</li> <li>If <strong>ID2D1RenderTarget::PushLayer</strong> is called without <strong>D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE</strong> (and the corresponding <strong>PopLayer</strong> has not  been called yet), then the default text  antialiasing mode is grayscale.</li> </ul>
    /// </remarks>
    /// <doc-id>dd368170</doc-id>
    /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE</unmanaged>
    /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE</unmanaged-short>
    public enum TextAntialiasMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Use the system default. See Remarks.</p> </dd>
        /// </summary>
        /// <doc-id>dd368170</doc-id>
        /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Use ClearType antialiasing.</p> </dd>
        /// </summary>
        /// <doc-id>dd368170</doc-id>
        /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE</unmanaged>
        /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE</unmanaged-short>
        Cleartype = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Use grayscale antialiasing.</p> </dd>
        /// </summary>
        /// <doc-id>dd368170</doc-id>
        /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE</unmanaged>
        /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE</unmanaged-short>
        Grayscale = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Do not use antialiasing.</p> </dd>
        /// </summary>
        /// <doc-id>dd368170</doc-id>
        /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_ALIASED</unmanaged>
        /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE_ALIASED</unmanaged-short>
        Aliased = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Specifies the threading mode used while simultaneously creating the device, factory, and device context.
    /// </p>
    /// </summary>
    /// <doc-id>hh447020</doc-id>
    /// <unmanaged>D2D1_THREADING_MODE</unmanaged>
    /// <unmanaged-short>D2D1_THREADING_MODE</unmanaged-short>
    public enum ThreadingMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Resources may only be invoked serially.  Device context state is not protected from multi-threaded access. </p> </dd>
        /// </summary>
        /// <doc-id>hh447020</doc-id>
        /// <unmanaged>D2D1_THREADING_MODE_SINGLE_THREADED</unmanaged>
        /// <unmanaged-short>D2D1_THREADING_MODE_SINGLE_THREADED</unmanaged-short>
        SingleThreaded = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Resources may be invoked from multiple threads. Resources use interlocked reference counting and their state is protected.
        /// </p> </dd>
        /// </summary>
        /// <doc-id>hh447020</doc-id>
        /// <unmanaged>D2D1_THREADING_MODE_MULTI_THREADED</unmanaged>
        /// <unmanaged-short>D2D1_THREADING_MODE_MULTI_THREADED</unmanaged-short>
        MultiThreaded = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Identifiers for properties of the Tile effect. </p>
    /// </summary>
    /// <doc-id>dn934269</doc-id>
    /// <unmanaged>D2D1_TILE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_TILE_PROP</unmanaged-short>
    public enum TileProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934269</doc-id>
        /// <unmanaged>D2D1_TILE_PROP_RECT</unmanaged>
        /// <unmanaged-short>D2D1_TILE_PROP_RECT</unmanaged-short>
        Rectangle = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>This effect tints the source image by multiplying the source image by the specified color. It has a single input.</p><p>The CLSID for this effect is <see cref = "Tint"/>.</p>
    /// </summary>
    /// <doc-id>mt745077</doc-id>
    /// <unmanaged>D2D1_TINT_PROP</unmanaged>
    /// <unmanaged-short>D2D1_TINT_PROP</unmanaged-short>
    public enum TintProp : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt745077</doc-id>
        /// <unmanaged>D2D1_TINT_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_TINT_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>mt745077</doc-id>
        /// <unmanaged>D2D1_TINT_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_TINT_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> The interpolation mode the 3D transform effect uses on the image. There are 5 scale modes that range in quality and speed. </p>
    /// </summary>
    /// <doc-id>dn934209</doc-id>
    /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE</unmanaged-short>
    public enum Transform3DInterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934209</doc-id>
        /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934209</doc-id>
        /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934209</doc-id>
        /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934209</doc-id>
        /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934209</doc-id>
        /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p> Identifiers for properties of the 3D transform effect. </p>
    /// </summary>
    /// <doc-id>dn934210</doc-id>
    /// <unmanaged>D2D1_3DTRANSFORM_PROP</unmanaged>
    /// <unmanaged-short>D2D1_3DTRANSFORM_PROP</unmanaged-short>
    public enum Transform3DProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934210</doc-id>
        /// <unmanaged>D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE</unmanaged-short>
        InterpolationMode = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934210</doc-id>
        /// <unmanaged>D2D1_3DTRANSFORM_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934210</doc-id>
        /// <unmanaged>D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX</unmanaged-short>
        TransformMatrix = unchecked ((System.Int32)(2))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Option flags for transformed image sources.</p>
    /// </summary>
    /// <doc-id>dn934270</doc-id>
    /// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS</unmanaged-short>
    public enum TransformedImageSourceOptions : System.Int32
    {
        /// <summary>
        /// <dd> <p>No option flags.</p> </dd>
        /// </summary>
        /// <doc-id>dn934270</doc-id>
        /// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Prevents the image source from being automatically scaled (by a ratio of the context DPI divided by 96) while drawn.</p> </dd>
        /// </summary>
        /// <doc-id>dn934270</doc-id>
        /// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE</unmanaged-short>
        DisableDpiScale = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>The turbulence noise mode for the Turbulence effect.  Indicates whether to generate a bitmap based on Fractal Noise or the Turbulence function. </p>
    /// </summary>
    /// <doc-id>dn934353</doc-id>
    /// <unmanaged>D2D1_TURBULENCE_NOISE</unmanaged>
    /// <unmanaged-short>D2D1_TURBULENCE_NOISE</unmanaged-short>
    public enum TurbulenceNoise : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934353</doc-id>
        /// <unmanaged>D2D1_TURBULENCE_NOISE_FRACTAL_SUM</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_NOISE_FRACTAL_SUM</unmanaged-short>
        FractalSum = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934353</doc-id>
        /// <unmanaged>D2D1_TURBULENCE_NOISE_TURBULENCE</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_NOISE_TURBULENCE</unmanaged-short>
        Turbulence = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Identifiers for properties of the Turbulence effect. </p>
    /// </summary>
    /// <doc-id>dn934355</doc-id>
    /// <unmanaged>D2D1_TURBULENCE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_TURBULENCE_PROP</unmanaged-short>
    public enum TurbulenceProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934355</doc-id>
        /// <unmanaged>D2D1_TURBULENCE_PROP_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_OFFSET</unmanaged-short>
        Offset = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934355</doc-id>
        /// <unmanaged>D2D1_TURBULENCE_PROP_SIZE</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_SIZE</unmanaged-short>
        Size = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934355</doc-id>
        /// <unmanaged>D2D1_TURBULENCE_PROP_BASE_FREQUENCY</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_BASE_FREQUENCY</unmanaged-short>
        BaseFrequency = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934355</doc-id>
        /// <unmanaged>D2D1_TURBULENCE_PROP_NUM_OCTAVES</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_NUM_OCTAVES</unmanaged-short>
        NumOctaves = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934355</doc-id>
        /// <unmanaged>D2D1_TURBULENCE_PROP_SEED</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_SEED</unmanaged-short>
        Seed = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934355</doc-id>
        /// <unmanaged>D2D1_TURBULENCE_PROP_NOISE</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_NOISE</unmanaged-short>
        Noise = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934355</doc-id>
        /// <unmanaged>D2D1_TURBULENCE_PROP_STITCHABLE</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_STITCHABLE</unmanaged-short>
        Stitchable = unchecked ((System.Int32)(6))}

    /// <summary>
    /// <p>Specifies how units in Direct2D will be interpreted.</p>
    /// </summary>
    /// <remarks>
    /// <p>Setting the unit mode to <strong>D2D1_UNIT_MODE_PIXELS</strong> is similar to setting the <strong><see cref = "SharpDX.Direct2D1.DeviceContext"/></strong> dots per inch (dpi) to 96. However, Direct2D still checks the dpi to determine the threshold for enabling vertical antialiasing for text, and when the unit mode is restored, the dpi will be remembered.</p>
    /// </remarks>
    /// <doc-id>hh447022</doc-id>
    /// <unmanaged>D2D1_UNIT_MODE</unmanaged>
    /// <unmanaged-short>D2D1_UNIT_MODE</unmanaged-short>
    public enum UnitMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>Units will be interpreted as device-independent pixels (1/96").</p> </dd>
        /// </summary>
        /// <doc-id>hh447022</doc-id>
        /// <unmanaged>D2D1_UNIT_MODE_DIPS</unmanaged>
        /// <unmanaged-short>D2D1_UNIT_MODE_DIPS</unmanaged-short>
        Dips = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Units will be interpreted as pixels.</p> </dd>
        /// </summary>
        /// <doc-id>hh447022</doc-id>
        /// <unmanaged>D2D1_UNIT_MODE_PIXELS</unmanaged>
        /// <unmanaged-short>D2D1_UNIT_MODE_PIXELS</unmanaged-short>
        Pixels = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Describes flags that influence how the renderer interacts with a custom vertex shader.</p>
    /// </summary>
    /// <doc-id>hh404332</doc-id>
    /// <unmanaged>D2D1_VERTEX_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_VERTEX_OPTIONS</unmanaged-short>
    public enum VertexOptions : System.Int32
    {
        /// <summary>
        /// <dd> <p>The logical equivalent of having no flags set.</p> </dd>
        /// </summary>
        /// <doc-id>hh404332</doc-id>
        /// <unmanaged>D2D1_VERTEX_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_VERTEX_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>If this flag is set, the renderer  assumes that the vertex shader will cover the entire region of interest with vertices and need not clear the destination render target. If this flag is not set, the renderer assumes that the vertices do not cover the entire region interest and must clear the render target to transparent black first.</p> </dd>
        /// </summary>
        /// <doc-id>hh404332</doc-id>
        /// <unmanaged>D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR</unmanaged>
        /// <unmanaged-short>D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR</unmanaged-short>
        DoNotClear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The renderer will use a depth buffer when rendering custom vertices. The depth buffer will be used for calculating occlusion information. This can result in the renderer output being draw-order dependent if it contains transparency.</p> </dd>
        /// </summary>
        /// <doc-id>hh404332</doc-id>
        /// <unmanaged>D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER</unmanaged>
        /// <unmanaged-short>D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER</unmanaged-short>
        UseDepthBuffer = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Indicates that custom vertices do not overlap each other.</p> </dd>
        /// </summary>
        /// <doc-id>hh404332</doc-id>
        /// <unmanaged>D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP</unmanaged>
        /// <unmanaged-short>D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP</unmanaged-short>
        AssumeNoOverlap = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p>Indicates whether the vertex buffer changes infrequently or frequently.</p>
    /// </summary>
    /// <remarks>
    /// <p>If a dynamic vertex buffer is created, Direct2D will not necessarily map the buffer directly to a Direct3D vertex buffer. Instead, a system memory copy can be copied to the rendering engine vertex buffer as the effects are rendered.</p>
    /// </remarks>
    /// <doc-id>hh404337</doc-id>
    /// <unmanaged>D2D1_VERTEX_USAGE</unmanaged>
    /// <unmanaged-short>D2D1_VERTEX_USAGE</unmanaged-short>
    public enum VertexUsage : System.Int32
    {
        /// <summary>
        /// <dd> <p>The created vertex buffer is updated infrequently.</p> </dd>
        /// </summary>
        /// <doc-id>hh404337</doc-id>
        /// <unmanaged>D2D1_VERTEX_USAGE_STATIC</unmanaged>
        /// <unmanaged-short>D2D1_VERTEX_USAGE_STATIC</unmanaged-short>
        Static = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The created vertex buffer is changed frequently.</p> </dd>
        /// </summary>
        /// <doc-id>hh404337</doc-id>
        /// <unmanaged>D2D1_VERTEX_USAGE_DYNAMIC</unmanaged>
        /// <unmanaged-short>D2D1_VERTEX_USAGE_DYNAMIC</unmanaged-short>
        Dynamic = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Identifiers for properties of the Vignette effect.</p>
    /// </summary>
    /// <doc-id>dn890750</doc-id>
    /// <unmanaged>D2D1_VIGNETTE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_VIGNETTE_PROP</unmanaged-short>
    public enum VignetteProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890750</doc-id>
        /// <unmanaged>D2D1_VIGNETTE_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_VIGNETTE_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890750</doc-id>
        /// <unmanaged>D2D1_VIGNETTE_PROP_TRANSITION_SIZE</unmanaged>
        /// <unmanaged-short>D2D1_VIGNETTE_PROP_TRANSITION_SIZE</unmanaged-short>
        TransitionSize = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn890750</doc-id>
        /// <unmanaged>D2D1_VIGNETTE_PROP_STRENGTH</unmanaged>
        /// <unmanaged-short>D2D1_VIGNETTE_PROP_STRENGTH</unmanaged-short>
        Strength = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Describes whether a window is occluded. </p>
    /// </summary>
    /// <remarks>
    /// <p>If the window was occluded the last time  <strong>EndDraw</strong> was called, the next time the render target calls <strong>CheckWindowState</strong>, it  returns <strong>D2D1_WINDOW_STATE_OCCLUDED</strong> regardless of the current window state. If you want to use <strong>CheckWindowState</strong> to check the current window state, call <strong>CheckWindowState</strong> after every <strong>EndDraw</strong> call and ignore its return value. This will ensure that your next call to <strong>CheckWindowState</strong> state  returns the actual window state.</p>
    /// </remarks>
    /// <doc-id>dd368174</doc-id>
    /// <unmanaged>D2D1_WINDOW_STATE</unmanaged>
    /// <unmanaged-short>D2D1_WINDOW_STATE</unmanaged-short>
    public enum WindowState : System.Int32
    {
        /// <summary>
        /// <dd> <p>The window is not occluded.</p> </dd>
        /// </summary>
        /// <doc-id>dd368174</doc-id>
        /// <unmanaged>D2D1_WINDOW_STATE_NONE</unmanaged>
        /// <unmanaged-short>D2D1_WINDOW_STATE_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The window is occluded.</p> </dd>
        /// </summary>
        /// <doc-id>dd368174</doc-id>
        /// <unmanaged>D2D1_WINDOW_STATE_OCCLUDED</unmanaged>
        /// <unmanaged-short>D2D1_WINDOW_STATE_OCCLUDED</unmanaged-short>
        Occluded = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p> Specifies the chroma subsampling of the input chroma image used by the YCbCr effect. </p>
    /// </summary>
    /// <doc-id>dn934357</doc-id>
    /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING</unmanaged>
    /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING</unmanaged-short>
    public enum YcbcrChromaSubSampling : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934357</doc-id>
        /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO</unmanaged-short>
        Auto = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934357</doc-id>
        /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_420</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING_420</unmanaged-short>
        Both = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934357</doc-id>
        /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_422</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING_422</unmanaged-short>
        Horizontal = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934357</doc-id>
        /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_444</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING_444</unmanaged-short>
        None = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934357</doc-id>
        /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_440</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING_440</unmanaged-short>
        Vertical = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p>Specifies the interpolation mode for the YCbCr effect.</p>
    /// </summary>
    /// <doc-id>dn934359</doc-id>
    /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE</unmanaged-short>
    public enum YcbcrInterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934359</doc-id>
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934359</doc-id>
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934359</doc-id>
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934359</doc-id>
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934359</doc-id>
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934359</doc-id>
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p> Identifiers for properties of the YCbCr effect. </p>
    /// </summary>
    /// <doc-id>dn934361</doc-id>
    /// <unmanaged>D2D1_YCBCR_PROP</unmanaged>
    /// <unmanaged-short>D2D1_YCBCR_PROP</unmanaged-short>
    public enum YCbCrProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934361</doc-id>
        /// <unmanaged>D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING</unmanaged-short>
        ChromaSubSampling = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934361</doc-id>
        /// <unmanaged>D2D1_YCBCR_PROP_TRANSFORM_MATRIX</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_PROP_TRANSFORM_MATRIX</unmanaged-short>
        TransformMatrix = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dn934361</doc-id>
        /// <unmanaged>D2D1_YCBCR_PROP_INTERPOLATION_MODE</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_PROP_INTERPOLATION_MODE</unmanaged-short>
        InterpolationMode = unchecked ((System.Int32)(2))}
}